// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 4,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert((STACKTOP|0) < (STACK_MAX|0)); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = ((((DYNAMICTOP)+3)>>2)<<2); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  GLOBAL_BASE: 4,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 4;
STATICTOP = STATIC_BASE + 114656;
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocate([0,2,2,2,2,2,2,2,2,2,150,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,127,2,2,2,125,120,2,146,147,123,121,144,122,143,124,2,2,2,2,2,2,2,2,2,2,115,149,117,113,116,114,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,142,2,148,119,2,145,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,140,118,141,128,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,126,129,130,131,132,133,134,135,136,137,138,139,92,159,1,0,60,159,1,0,44,159,1,0,236,158,1,0,200,158,1,0,188,158,1,0,64,158,1,0,48,158,1,0,32,158,1,0,16,158,1,0,240,157,1,0,192,157,1,0,176,157,1,0,152,157,1,0,124,157,1,0,108,157,1,0,16,157,1,0,0,157,1,0,240,156,1,0,224,156,1,0,192,156,1,0,172,156,1,0,156,156,1,0,132,156,1,0,88,156,1,0,76,156,1,0,212,155,1,0,196,155,1,0,176,155,1,0,156,155,1,0,132,155,1,0,112,155,1,0,96,155,1,0,60,155,1,0,36,155,1,0,8,155,1,0,180,154,1,0,168,154,1,0,156,154,1,0,144,154,1,0,124,154,1,0,88,154,1,0,72,154,1,0,36,154,1,0,244,153,1,0,228,153,1,0,124,153,1,0,112,153,1,0,96,153,1,0,72,153,1,0,44,153,1,0,28,153,1,0,20,153,1,0,248,152,1,0,224,152,1,0,184,152,1,0,92,152,1,0,64,152,1,0,20,152,1,0,200,151,1,0,124,151,1,0,96,151,1,0,32,151,1,0,220,150,1,0,140,150,1,0,128,150,1,0,12,150,1,0,0,150,1,0,244,149,1,0,236,149,1,0,228,149,1,0,208,149,1,0,200,149,1,0,180,149,1,0,148,149,1,0,140,149,1,0,80,149,1,0,72,149,1,0,64,149,1,0,56,149,1,0,48,149,1,0,248,148,1,0,240,148,1,0,212,148,1,0,188,148,1,0,180,148,1,0,116,148,1,0,108,148,1,0,100,148,1,0,92,148,1,0,80,148,1,0,32,148,1,0,24,148,1,0,252,147,1,0,236,147,1,0,228,147,1,0,156,147,1,0,144,147,1,0,136,147,1,0,128,147,1,0,120,147,1,0,104,147,1,0,88,147,1,0,60,147,1,0,36,147,1,0,24,147,1,0,168,146,1,0,152,146,1,0,144,146,1,0,128,146,1,0,72,146,1,0,44,146,1,0,36,146,1,0,8,146,1,0,252,145,1,0,248,145,1,0,172,145,1,0,168,145,1,0,164,145,1,0,160,145,1,0,156,145,1,0,132,145,1,0,128,145,1,0,100,145,1,0,80,145,1,0,76,145,1,0,208,144,1,0,204,144,1,0,200,144,1,0,192,144,1,0,176,144,1,0,136,144,1,0,128,144,1,0,76,144,1,0,40,144,1,0,8,144,1,0,140,143,1,0,108,143,1,0,88,143,1,0,76,143,1,0,72,143,1,0,8,143,1,0,4,143,1,0,232,142,1,0,208,142,1,0,204,142,1,0,108,142,1,0,104,142,1,0,100,142,1,0,96,142,1,0,88,142,1,0,68,142,1,0,60,142,1,0,28,142,1,0,252,141,1,0,216,141,1,0,132,141,1,0,84,141,1,0,64,141,1,0,12,141,1,0,220,140,1,0,172,140,1,0,136,140,1,0,52,140,1,0,248,139,1,0,236,139,1,0,80,139,1,0,64,139,1,0,48,139,1,0,44,139,1,0,36,139,1,0,8,139,1,0,252,138,1,0,220,138,1,0,200,138,1,0,188,138,1,0,60,138,1,0,48,138,1,0,16,138,1,0,8,138,1,0,0,138,1,0,232,137,1,0,224,137,1,0,192,137,1,0,180,137,1,0,176,137,1,0,72,137,1,0,68,137,1,0,56,137,1,0,44,137,1,0,32,137,1,0,0,137,1,0,240,136,1,0,204,136,1,0,180,136,1,0,176,136,1,0,80,136,1,0,64,136,1,0,56,136,1,0,48,136,1,0,40,136,1,0,20,136,1,0,12,136,1,0,240,135,1,0,224,135,1,0,216,135,1,0,160,135,1,0,152,135,1,0,144,135,1,0,136,135,1,0,92,135,1,0,76,135,1,0,72,135,1,0,48,135,1,0,36,135,1,0,32,135,1,0,224,134,1,0,220,134,1,0,204,134,1,0,128,167,1,0,124,165,1,0,196,134,1,0,184,134,1,0,160,134,1,0,144,134,1,0,112,134,1,0,88,134,1,0,76,134,1,0,24,134,1,0,8,134,1,0,252,133,1,0,240,133,1,0,232,133,1,0,208,133,1,0,196,133,1,0,168,133,1,0,152,133,1,0,140,133,1,0,40,133,1,0,28,133,1,0,20,133,1,0,12,133,1,0,0,133,1,0,216,132,1,0,204,132,1,0,172,132,1,0,148,132,1,0,136,132,1,0,52,132,1,0,44,132,1,0,32,132,1,0,16,132,1,0,12,132,1,0,244,131,1,0,236,131,1,0,208,131,1,0,184,131,1,0,120,131,1,0,72,131,1,0,0,131,1,0,212,130,1,0,168,130,1,0,112,130,1,0,72,130,1,0,4,130,1,0,184,129,1,0,156,129,1,0,148,129,1,0,108,129,1,0,52,129,1,0,44,129,1,0,32,129,1,0,24,129,1,0,248,128,1,0,216,128,1,0,180,128,1,0,164,128,1,0,156,128,1,0,116,128,1,0,60,128,1,0,48,128,1,0,24,128,1,0,12,128,1,0,240,127,1,0,208,127,1,0,168,127,1,0,148,127,1,0,140,127,1,0,104,127,1,0,52,127,1,0,44,127,1,0,32,127,1,0,20,127,1,0,248,126,1,0,216,126,1,0,184,126,1,0,168,126,1,0,160,126,1,0,112,126,1,0,96,126,1,0,88,126,1,0,84,126,1,0,76,126,1,0,68,126,1,0,44,126,1,0,0,0,0,0,99,0,114,1,3,1,60,1,151,1,172,1,226,0,214,0,214,0,214,0,211,0,242,0,242,0,78,1,194,0,242,0,5,1,11,2,104,2,115,0,115,0,120,2,248,0,248,0,120,2,32,1,248,0,0,1,227,1,115,0,211,0,123,1,237,1,221,0,224,0,183,1,100,0,247,0,247,0,78,2,50,2,247,0,48,2,138,2,56,2,122,2,20,1,59,2,25,1,29,1,196,1,209,1,16,2,1,3,198,1,110,2,24,1,28,1,227,0,226,0,168,255,42,1,216,2,67,0,76,2,67,0,115,0,203,2,77,2,204,1,166,255,23,1,226,2,206,1,64,1,63,1,18,1,122,2,107,2,7,3,94,2,239,1,48,2,61,3,56,2,223,2,64,3,153,2,242,1,112,1,115,0,242,1,142,1,242,1,113,2,242,1,177,2,242,1,77,2,1,1,118,3,252,2,112,1,117,1,234,2,142,1,120,1,129,3,129,1,3,0,0,1,227,0,109,1,162,255,46,2,23,3,54,2,245,0,250,0,54,2,155,255,251,0,30,3,192,1,117,1,77,2,159,255,70,1,71,1,196,2,197,2,237,1,241,2,2,1,169,2,156,255,237,254,223,0,46,2,60,254,54,2,7,1,160,255,189,255,57,254,160,255,141,2,58,254,168,255,11,1,77,2,158,255,72,1,158,255,46,2,121,1,54,2,112,3,166,255,122,1,227,0,126,1,162,255,200,1,159,255,150,1,154,2,110,1,46,2,223,0,54,2,79,3,161,255,170,2,175,255,118,1,115,1,129,3,118,3,168,255,74,1,190,1,168,255,58,1,59,1,168,255,7,2,75,1,155,255,166,255,237,254,237,254,166,255,172,1,247,253,166,255,46,2,54,2,161,255,57,254,222,0,223,0,58,254,113,1,156,255,141,1,123,2,64,3,142,3,255,0,125,2,215,2,79,1,154,1,42,1,128,2,113,1,152,2,226,0,1,3,46,2,237,1,54,2,230,2,208,1,133,2,214,0,214,0,222,0,223,0,135,2,209,1,170,255,202,2,153,1,120,2,120,2,138,1,170,3,163,255,223,0,222,0,223,0,207,2,157,255,170,1,170,1,242,0,252,0,242,0,242,0,157,1,158,1,181,1,164,255,182,1,184,1,122,2,248,0,248,253,248,0,227,0,159,255,159,255,168,255,226,0,16,3,227,0,36,3,255,0,227,0,3,2,166,255,247,0,252,2,247,0,12,2,127,1,160,255,160,255,195,1,194,1,252,2,167,255,209,1,248,253,105,3,158,255,158,255,203,1,81,0,169,255,81,0,116,0,116,0,223,0,176,2,18,1,217,0,217,0,217,0,115,0,56,254,234,0,217,0,217,0,9,2,74,2,217,0,222,0,223,0,151,2,62,2,64,2,2,1,212,2,193,254,227,0,214,0,214,0,214,0,214,0,55,254,255,1,0,2,202,1,202,1,149,1,206,2,191,1,202,1,145,1,237,1,14,1,161,255,161,255,81,0,217,0,222,0,223,0,33,1,124,1,125,1,250,1,251,1,252,1,253,1,115,0,53,254,154,1,217,0,5,2,249,1,173,1,251,253,176,1,5,2,56,254,242,0,106,1,18,1,181,1,54,254,165,255,33,1,247,253,130,1,159,1,205,2,55,2,193,254,193,254,146,1,11,2,124,254,56,1,69,2,55,254,45,1,46,1,65,254,67,0,242,0,61,254,156,1,181,1,254,1,79,2,58,3,163,1,237,2,167,1,160,1,55,2,88,2,242,1,14,1,217,0,242,0,81,0,231,2,181,1,137,2,53,254,208,1,168,1,103,2,109,2,109,2,55,2,171,1,179,3,242,0,107,1,108,1,181,1,65,254,54,254,188,1,186,1,131,1,132,1,12,3,55,2,120,2,47,1,147,1,148,1,227,0,129,2,121,2,105,2,106,3,170,1,170,1,65,254,124,254,240,2,61,254,247,2,99,0,80,1,212,1,211,0,250,253,122,2,161,1,162,1,193,1,246,1,55,2,190,255,45,1,46,1,209,1,95,3,80,1,208,1,223,0,227,0,227,0,59,254,136,2,199,1,242,0,205,1,246,254,181,1,251,253,236,254,65,254,65,254,147,1,189,1,251,253,55,2,207,1,144,3,211,1,115,0,247,1,115,0,60,254,223,0,136,3,158,2,248,1,158,2,124,254,158,2,124,254,124,254,66,2,151,2,245,2,40,3,213,1,214,1,152,3,47,1,81,0,10,2,224,2,67,0,238,1,162,255,61,254,237,2,103,1,104,1,105,1,173,2,134,2,85,2,134,3,59,254,59,254,217,0,217,0,181,2,246,254,246,254,225,2,236,254,236,254,160,255,116,1,254,2,70,1,71,1,2,3,86,2,60,3,90,2,115,0,106,2,170,255,186,2,137,3,138,3,217,0,11,3,217,0,217,0,52,3,158,255,217,0,217,0,187,1,155,255,237,1,81,0,131,1,132,1,14,1,124,2,81,0,81,0,250,253,144,2,61,254,61,254,190,1,186,2,250,253,184,2,193,2,161,255,126,2,193,2,173,2,173,2,127,2,190,2,200,2,33,1,190,2,218,2,215,2,214,0,163,255,186,2,164,3,131,2,210,2,156,255,77,2,193,2,208,2,175,255,161,2,151,2,184,2,151,2,190,2,102,3,214,2,217,2,211,0,217,2,186,2,104,3,209,2,156,2,201,2,244,253,159,2,217,2,81,0,217,0,217,0,217,0,217,0,81,0,217,0,217,0,164,255,14,1,217,0,5,2,81,0,33,1,162,2,217,0,31,3,214,0,227,0,208,1,186,2,80,1,165,2,170,1,12,2,164,2,3,255,19,3,21,3,185,2,175,2,249,2,227,0,26,3,28,3,178,2,238,2,192,2,179,2,204,2,195,2,215,2,235,2,217,0,229,2,239,2,246,2,4,3,46,2,249,2,54,2,217,0,217,0,2,255,18,3,227,0,24,3,151,2,114,3,244,253,39,3,41,3,188,2,47,3,46,2,51,3,189,2,217,0,43,3,81,0,217,0,101,1,102,1,103,1,104,1,105,1,89,2,53,3,59,3,81,0,25,3,62,3,65,3,217,0,97,2,160,255,202,1,81,0,120,3,158,255,145,2,66,3,216,1,217,1,218,1,219,1,115,0,217,0,68,3,38,3,127,3,173,2,130,3,161,255,67,3,69,3,151,2,71,3,151,2,73,3,75,3,244,253,78,3,244,253,244,253,45,3,168,255,248,253,49,3,214,0,166,255,80,3,81,0,81,3,26,1,44,1,90,3,45,1,46,1,83,3,85,3,81,0,87,3,109,2,169,255,1,255,93,3,92,3,151,2,108,3,170,1,249,2,109,3,125,3,50,3,33,1,111,3,33,1,0,255,217,0,241,1,227,0,45,1,46,1,132,3,158,2,158,2,133,3,158,2,135,3,158,2,158,2,50,1,45,1,46,1,143,3,158,2,147,3,158,2,158,2,151,3,153,3,176,3,166,2,47,1,155,3,81,0,5,3,161,3,216,1,217,1,218,1,219,1,244,2,158,3,227,0,169,3,98,0,215,1,98,0,216,1,217,1,218,1,219,1,248,253,98,0,98,0,98,0,247,253,47,1,33,1,98,0,98,0,182,3,232,0,98,0,52,1,45,1,46,1,130,2,47,1,0,3,120,0,217,2,3,3,80,1,194,2,115,0,220,1,168,3,243,2,171,3,8,3,167,3,221,1,222,1,54,1,45,1,46,1,220,1,93,1,94,1,32,3,98,0,98,0,221,1,222,1,228,2,145,2,197,0,216,1,217,1,218,1,219,1,96,3,126,3,223,1,98,0,253,2,224,1,227,0,145,3,115,0,0,0,47,1,136,1,227,0,223,1,45,1,46,1,224,1,0,0,217,0,81,0,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,81,0,47,1,80,1,223,0,158,2,158,2,158,2,158,2,0,0,0,0,225,1,158,2,158,2,158,2,0,0,158,2,158,2,93,1,94,1,242,0,0,0,98,0,181,1,98,0,88,2,217,2,186,2,80,1,0,0,0,0,55,2,98,2,47,1,0,0,0,0,217,0,45,1,46,1,164,1,165,1,166,1,0,0,93,1,94,1,0,0,215,1,0,0,216,1,217,1,218,1,219,1,0,0,101,1,102,1,103,1,104,1,105,1,158,2,113,3,0,0,158,2,158,2,158,2,158,2,65,1,66,1,67,1,68,1,69,1,250,2,251,2,158,2,81,0,81,0,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,227,2,47,1,0,0,0,0,220,1,13,3,0,0,0,0,81,0,0,0,221,1,222,1,0,0,0,0,0,0,33,1,217,0,0,0,0,0,217,0,217,0,0,0,119,3,0,0,121,3,217,0,217,0,0,0,122,3,0,0,33,3,34,3,223,1,81,0,81,0,224,1,128,3,0,0,131,3,238,1,45,1,46,1,98,0,243,1,45,1,46,1,0,0,0,0,4,2,46,3,0,0,0,0,81,0,15,2,0,0,217,0,0,0,0,0,80,2,98,0,98,0,244,1,45,1,46,1,0,0,55,3,56,3,57,3,81,0,81,0,81,0,245,1,45,1,46,1,215,1,0,0,216,1,217,1,218,1,219,1,0,0,0,0,98,0,0,0,98,0,98,0,0,0,47,1,98,0,98,0,0,0,47,1,145,2,98,0,216,1,217,1,218,1,219,1,98,0,98,0,172,3,48,1,51,1,53,1,55,1,57,1,175,3,0,0,177,3,47,1,0,0,178,3,0,0,0,0,0,0,220,1,0,0,0,0,217,0,47,1,0,0,221,1,222,1,0,0,0,0,0,0,94,3,0,0,15,2,81,0,81,0,0,0,0,0,146,2,0,0,186,3,99,3,103,3,0,0,147,2,81,0,117,2,119,2,223,1,0,0,26,1,224,1,0,0,0,0,0,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,98,0,0,0,0,0,98,0,0,0,98,0,0,0,145,2,98,0,216,1,217,1,218,1,219,1,0,0,124,3,0,0,0,0,119,2,0,0,115,3,26,1,216,1,217,1,218,1,219,1,0,0,145,2,0,0,216,1,217,1,218,1,219,1,81,0,0,0,0,0,139,3,98,0,140,3,81,0,0,0,81,0,0,0,0,0,141,3,98,0,98,0,81,0,0,0,146,2,0,0,0,0,0,0,0,0,0,0,63,3,0,0,0,0,0,0,0,0,0,0,98,0,0,0,98,0,98,0,0,0,0,0,145,2,220,1,216,1,217,1,218,1,219,1,98,0,217,0,222,1,174,2,98,0,0,0,0,0,224,253,98,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,98,0,0,0,224,253,224,253,224,253,223,1,224,253,0,0,180,2,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,146,2,0,0,243,0,243,0,0,0,0,0,243,0,0,0,98,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,98,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,8,1,10,1,93,1,94,1,98,0,243,0,243,0,0,0,5,3,0,0,216,1,217,1,218,1,219,1,0,0,0,0,0,0,61,1,62,1,0,0,0,0,211,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,95,1,98,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,1,0,0,0,0,0,0,236,2,0,0,221,1,222,1,0,0,0,0,0,0,26,255,119,2,26,1,94,0,0,0,94,0,117,0,117,0,117,0,198,2,0,0,0,0,0,0,0,0,0,0,0,0,236,0,223,1,0,0,242,2,224,1,224,253,224,253,0,0,224,253,0,0,0,0,255,0,224,253,0,0,224,253,224,253,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,15,3,93,1,94,1,34,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,95,1,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,54,3,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,243,0,61,1,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,88,3,0,0,243,0,0,0,243,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,98,0,98,0,98,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,14,2,17,2,18,2,19,2,20,2,21,2,22,2,23,2,24,2,25,2,26,2,27,2,28,2,29,2,30,2,31,2,32,2,33,2,34,2,35,2,36,2,37,2,38,2,39,2,40,2,41,2,42,2,0,0,243,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,63,2,65,2,98,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,98,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,98,0,0,0,0,0,0,0,0,0,0,0,91,2,0,0,243,0,0,0,63,2,65,2,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,243,0,243,0,0,0,94,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,34,1,0,0,0,0,0,0,0,0,98,0,0,0,132,2,0,0,0,0,0,0,98,0,0,0,98,0,0,0,0,0,0,0,243,0,0,0,98,0,243,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,118,0,118,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,2,168,2,94,0,95,0,78,0,0,0,78,0,0,0,0,0,0,0,94,0,243,0,0,0,0,0,0,0,0,0,0,0,233,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,35,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,78,0,35,1,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,34,1,0,0,34,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,2,0,0,163,2,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,1,0,0,0,0,0,0,243,0,80,1,223,253,223,253,223,253,223,253,85,1,86,1,243,0,243,0,223,253,223,253,0,0,0,0,0,0,0,0,93,1,94,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,243,0,0,0,94,0,97,0,91,2,17,3,0,0,20,3,22,3,0,0,0,0,0,0,94,0,27,3,29,3,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,35,3,0,0,89,1,90,1,0,0,0,0,0,0,78,0,93,1,94,1,0,0,95,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,20,3,22,3,0,0,27,3,29,3,0,0,0,0,0,0,97,0,243,0,0,0,0,0,0,0,97,0,97,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,0,0,0,0,78,0,0,0,0,0,94,0,94,0,78,0,78,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,243,0,95,0,0,0,0,0,89,3,0,0,0,0,94,0,95,0,0,0,0,0,91,3,0,0,0,0,34,1,0,0,97,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,35,1,0,0,0,0,94,0,94,0,0,0,0,0,0,0,0,0,91,3,0,0,0,0,0,0,0,0,78,0,0,0,243,0,0,0,0,0,78,0,0,0,0,0,94,0,0,0,0,0,0,0,78,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,94,0,94,0,94,0,0,0,0,0,0,0,0,0,0,0,95,0,70,3,72,3,0,0,74,3,0,0,76,3,77,3,95,0,0,0,97,0,0,0,82,3,0,0,84,3,86,3,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,78,0,89,1,90,1,0,0,0,0,0,0,95,0,93,1,94,1,0,0,78,0,243,0,0,0,0,0,0,0,95,0,94,0,94,0,78,0,0,0,0,0,0,0,0,0,100,3,0,0,0,0,97,0,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,180,2,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,35,1,0,0,35,1,0,0,78,0,0,0,0,0,0,0,0,0,117,0,0,0,95,0,0,0,78,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,94,0,0,0,93,1,94,1,97,0,0,0,94,0,0,0,94,0,0,0,146,3,148,3,149,3,150,3,94,0,0,0,0,0,154,3,156,3,157,3,0,0,159,3,160,3,0,0,0,0,0,0,0,0,0,0,35,1,0,0,95,1,78,0,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,3,0,0,0,0,181,3,183,3,184,3,185,3,0,0,95,0,0,0,0,0,43,2,44,2,0,0,187,3,45,2,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,97,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,0,0,95,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,95,0,95,0,35,1,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,97,0,97,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,2,0,0,0,0,0,0,0,0,95,0,95,0,95,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,97,0,0,0,0,0,0,0,0,0,0,0,101,3,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,78,0,0,0,0,0,0,0,0,0,0,0,98,3,0,0,0,0,0,0,78,0,0,0,95,0,0,0,118,0,0,0,0,0,0,0,95,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,78,0,0,0,0,0,0,0,224,253,4,0,78,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,0,0,61,0,62,0,63,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,222,2,237,254,0,0,0,0,0,0,0,0,95,1,237,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,237,254,0,0,0,0,0,0,0,0,157,255,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,125,254,0,0,237,254,237,254,237,254,237,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,0,0,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,0,0,0,0,93,1,94,1,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,125,254,125,254,125,254,0,0,0,0,125,254,0,0,0,0,0,0,0,0,95,1,125,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,0,0,0,0,0,0,0,0,0,0,0,0,125,254,0,0,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,125,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,125,254,125,254,125,254,125,254,125,254,245,254,255,0,125,254,125,254,125,254,125,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,0,0,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,223,253,223,253,0,0,0,0,93,1,94,1,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,245,254,245,254,245,254,0,0,0,0,245,254,0,0,0,0,0,0,0,0,0,0,245,254,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,245,254,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,245,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,254,245,254,245,254,245,254,224,253,0,0,245,254,245,254,245,254,245,254,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,0,0,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,224,253,224,253,224,253,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,224,253,224,253,224,253,230,254,255,0,224,253,224,253,224,253,224,253,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,0,0,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,230,254,230,254,230,254,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,0,0,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,230,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,254,230,254,230,254,230,254,244,253,252,0,230,254,230,254,230,254,230,254,0,0,0,0,244,253,244,253,244,253,0,0,0,0,0,0,244,253,244,253,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,0,0,244,253,244,253,244,253,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,0,0,0,0,244,253,244,253,244,253,237,254,182,2,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,0,0,0,0,0,0,237,254,237,254,0,0,237,254,0,0,0,0,0,0,0,0,0,0,0,0,159,255,244,253,0,0,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,244,253,237,254,237,254,0,0,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,244,253,244,253,244,253,244,253,167,255,0,0,0,0,244,253,0,0,244,253,244,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,237,254,237,254,237,254,0,0,183,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,255,237,254,0,0,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,237,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,254,237,254,237,254,165,255,0,0,0,0,237,254,0,0,237,254,237,254,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,224,253,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,224,253,10,0,11,0,224,253,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].concat([0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,13,1,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,0,0,224,253,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,253,12,1,0,0,5,0,6,0,7,0,8,0,9,0,224,253,224,253,224,253,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,224,253,224,253,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,222,0,223,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,223,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,156,1,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,62,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,1,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,35,0,36,0,163,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,0,0,192,0,193,0,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,251,253,0,0,0,0,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,0,0,0,0,251,253,251,253,0,0,251,253,251,253,0,0,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,251,253,0,0,0,0,251,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,253,251,253,251,253,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,250,253,0,0,251,253,0,0,250,253,250,253,0,0,0,0,251,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,250,253,0,0,0,0,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,0,0,0,0,250,253,250,253,0,0,250,253,250,253,0,0,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,250,253,0,0,0,0,250,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,253,250,253,250,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,0,0,248,253,0,0,250,253,0,0,248,253,248,253,0,0,0,0,250,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,0,0,0,0,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,248,253,248,253,0,0,248,253,248,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,253,221,2,0,0,248,253,248,253,0,0,248,253,248,253,0,0,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,248,253,0,0,0,0,248,253,0,0,0,0,0,0,159,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,246,253,0,0,246,253,248,253,248,253,248,253,246,253,246,253,0,0,0,0,0,0,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,0,0,248,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,253,0,0,0,0,246,253,246,253,0,0,246,253,246,253,0,0,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,246,253,0,0,0,0,246,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,245,253,246,253,246,253,246,253,245,253,245,253,0,0,0,0,0,0,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,0,0,246,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,0,0,0,0,245,253,245,253,0,0,245,253,245,253,0,0,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,245,253,0,0,0,0,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,245,253,245,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,253,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,37,1,38,1,206,0,39,1,0,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,137,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,0,0,0,0,0,0,145,0,146,0,147,0,199,0,200,0,201,0,202,0,152,0,153,0,154,0,0,0,0,0,0,0,0,0,0,0,155,0,156,0,157,0,203,0,204,0,160,0,205,0,162,0,0,0,0,0,206,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,192,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,31,1,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,112,0,10,0,11,0,0,0,0,0,0,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,8,2,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,29,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,8,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,240,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,238,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,239,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,2,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,14,3,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,118,2,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,62,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,45,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,61,0,241,0,63,0,12,0,0,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,0,0,0,0,0,48,0,49,0,0,0,50,0,51,0,0,0,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,77,1,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0])
.concat([0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,107,0,34,0,35,0,36,0,108,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,76,1,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,0,0,0,0,5,0,6,0,7,0,0,0,9,0,0,0,0,0,0,0,10,0,11,0,0,0,0,0,0,0,12,0,112,0,13,0,14,0,15,0,101,0,102,0,18,0,19,0,0,0,0,0,0,0,0,0,0,0,103,0,104,0,105,0,23,0,24,0,25,0,26,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,32,0,0,0,33,0,34,0,35,0,36,0,37,0,38,0,0,0,39,0,40,0,41,0,0,0,0,0,42,0,0,0,0,0,43,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,3,0,0,0,0,111,0,49,0,0,0,50,0,51,0,0,0,0,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,0,0,0,0,60,0,51,2,52,2,0,0,0,0,53,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,72,2,44,2,0,0,0,0,73,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,92,2,44,2,0,0,0,0,93,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,95,2,52,2,0,0,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,111,2,44,2,0,0,0,0,112,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,114,2,52,2,0,0,0,0,115,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,139,2,44,2,0,0,0,0,140,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,142,2,52,2,0,0,0,0,143,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,162,3,44,2,0,0,0,0,163,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,165,3,52,2,0,0,0,0,166,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,173,3,44,2,0,0,0,0,174,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,57,2,52,2,0,0,0,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,255,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,0,0,0,0,173,0,174,0,0,0,0,0,175,0,176,0,177,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,0,0,190,0,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,37,115,0,32,111,114,32,37,115,0,0,44,32,101,120,112,101,99,116,105,110,103,32,37,115,0,0,0,0,152,0,153,0,0,0,1,0,3,0,4,0,5,0,6,0,7,0,11,0,12,0,16,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,39,0,45,0,46,0,47,0,48,0,49,0,51,0,52,0,53,0,54,0,55,0,56,0,58,0,59,0,60,0,63,0,66,0,67,0,69,0,70,0,89,0,92,0,93,0,95,0,96,0,98,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,109,0,126,0,127,0,128,0,154,0,155,0,156,0,161,0,163,0,164,0,166,0,167,0,170,0,171,0,173,0,174,0,175,0,177,0,178,0,187,0,200,0,218,0,237,0,238,0,248,0,249,0,253,0,254,0,255,0,3,1,4,1,5,1,7,1,8,1,9,1,10,1,11,1,12,1,35,1,48,1,156,0,21,0,22,0,30,0,31,0,32,0,39,0,51,0,55,0,86,0,89,0,92,0,126,0,179,0,180,0,200,0,218,0,9,1,12,1,35,1,180,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,55,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,80,0,81,0,84,0,85,0,86,0,87,0,98,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,127,0,128,0,145,0,146,0,181,0,185,0,186,0,11,1,30,1,33,0,34,0,35,0,36,0,48,0,49,0,51,0,55,0,101,0,181,0,182,0,183,0,5,1,201,0,89,0,164,0,165,0,178,0,218,0,9,1,10,1,12,1,165,0,149,0,150,0,165,0,39,1,44,1,45,1,47,1,205,0,207,0,89,0,171,0,178,0,218,0,223,0,9,1,12,1,57,0,98,0,99,0,127,0,170,0,187,0,188,0,193,0,196,0,198,0,33,1,34,1,193,0,193,0,146,0,194,0,195,0,146,0,190,0,194,0,146,0,40,1,45,1,182,0,157,0,140,0,187,0,218,0,187,0,55,0,1,0,92,0,159,0,160,0,161,0,172,0,173,0,48,1,164,0,203,0,189,0,198,0,33,1,48,1,188,0,32,1,33,1,48,1,89,0,144,0,177,0,218,0,9,1,12,1,204,0,53,0,54,0,56,0,63,0,105,0,181,0,6,1,62,0,64,0,65,0,111,0,250,0,251,0,63,0,250,0,63,0,250,0,63,0,250,0,61,0,250,0,58,0,59,0,166,0,187,0,187,0,39,1,47,1,40,0,41,0,42,0,43,0,44,0,37,0,38,0,28,0,235,0,113,0,144,0,92,0,98,0,174,0,113,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,86,0,87,0,114,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,88,0,142,0,143,0,88,0,143,0,38,1,26,0,140,0,239,0,90,0,90,0,190,0,194,0,239,0,164,0,51,0,55,0,179,0,58,0,59,0,1,0,117,0,13,1,44,1,88,0,142,0,143,0,214,0,31,1,215,0,38,1,105,0,144,0,158,0,159,0,55,0,13,0,219,0,44,1,113,0,88,0,142,0,143,0,90,0,90,0,219,0,46,1,39,1,17,0,242,0,149,0,165,0,165,0,55,0,88,0,142,0,143,0,25,0,188,0,188,0,188,0,91,0,144,0,197,0,48,1,144,0,197,0,193,0,40,1,41,1,193,0,192,0,193,0,198,0,33,1,48,1,164,0,41,1,164,0,162,0,140,0,159,0,88,0,143,0,90,0,161,0,172,0,147,0,39,1,47,1,41,1,202,0,41,1,148,0,144,0,43,1,45,1,144,0,43,1,141,0,43,1,55,0,174,0,175,0,176,0,144,0,88,0,142,0,143,0,51,0,53,0,54,0,55,0,56,0,92,0,98,0,99,0,120,0,123,0,146,0,233,0,16,1,17,1,18,1,19,1,20,1,21,1,24,1,25,1,26,1,27,1,28,1,63,0,251,0,252,0,62,0,251,0,63,0,63,0,63,0,61,0,71,0,71,0,156,0,165,0,165,0,165,0,165,0,161,0,164,0,164,0,236,0,98,0,166,0,188,0,198,0,199,0,172,0,144,0,177,0,144,0,163,0,166,0,178,0,187,0,188,0,199,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,187,0,51,0,52,0,55,0,185,0,190,0,36,1,37,1,192,0,51,0,52,0,55,0,185,0,190,0,36,1,51,0,55,0,36,1,241,0,240,0,166,0,187,0,166,0,187,0,97,0,168,0,212,0,44,1,14,1,211,0,51,0,55,0,179,0,36,1,192,0,36,1,158,0,164,0,146,0,15,1,16,1,216,0,184,0,10,0,8,0,244,0,48,1,159,0,13,0,187,0,51,0,55,0,192,0,51,0,55,0,159,0,110,0,250,0,0,1,1,1,2,1,48,1,242,0,198,0,10,0,27,0,220,0,44,1,220,0,51,0,55,0,192,0,51,0,55,0,209,0,188,0,98,0,188,0,196,0,33,1,34,1,41,1,147,0,41,1,144,0,144,0,41,1,182,0,154,0,141,0,187,0,41,1,161,0,41,1,33,1,174,0,176,0,51,0,55,0,192,0,51,0,55,0,113,0,51,0,92,0,98,0,224,0,225,0,226,0,18,1,16,1,29,0,108,0,234,0,144,0,29,1,48,1,144,0,29,1,51,0,144,0,29,1,51,0,63,0,159,0,187,0,187,0,79,0,118,0,228,0,229,0,48,1,188,0,144,0,41,1,176,0,144,0,113,0,44,0,40,1,90,0,90,0,190,0,194,0,40,1,42,1,90,0,90,0,190,0,191,0,194,0,48,1,191,0,194,0,228,0,228,0,44,0,169,0,44,1,165,0,158,0,42,1,10,0,41,1,16,1,158,0,44,1,181,0,182,0,188,0,199,0,245,0,48,1,15,0,222,0,48,1,14,0,221,0,222,0,90,0,90,0,42,1,90,0,90,0,222,0,110,0,2,1,10,0,144,0,219,0,206,0,208,0,42,1,165,0,188,0,197,0,33,1,141,0,43,1,42,1,188,0,226,0,144,0,18,1,144,0,41,1,230,0,40,1,159,0,159,0,19,1,24,1,26,1,28,1,20,1,21,1,26,1,20,1,141,0,51,0,227,0,230,0,20,1,22,1,23,1,26,1,28,1,159,0,98,0,188,0,176,0,187,0,115,0,166,0,187,0,166,0,187,0,168,0,148,0,90,0,166,0,187,0,166,0,187,0,168,0,239,0,235,0,159,0,159,0,187,0,228,0,213,0,44,1,10,0,41,1,10,0,217,0,91,0,246,0,48,1,159,0,9,0,247,0,48,1,165,0,10,0,90,0,10,0,188,0,159,0,159,0,159,0,220,0,144,0,41,1,225,0,144,0,98,0,224,0,147,0,149,0,10,0,141,0,144,0,29,1,144,0,29,1,144,0,29,1,144,0,29,1,29,1,113,0,230,0,118,0,144,0,29,1,144,0,29,1,144,0,29,1,10,0,188,0,187,0,166,0,187,0,10,0,141,0,159,0,158,0,15,1,89,0,178,0,218,0,9,1,12,1,219,0,159,0,219,0,222,0,242,0,243,0,10,0,10,0,210,0,144,0,225,0,144,0,18,1,51,0,231,0,232,0,17,1,20,1,26,1,20,1,20,1,89,0,218,0,118,0,23,1,26,1,20,1,22,1,26,1,20,1,141,0,10,0,158,0,55,0,88,0,142,0,143,0,159,0,159,0,159,0,225,0,144,0,144,0,40,1,29,1,144,0,29,1,29,1,29,1,55,0,88,0,144,0,29,1,144,0,29,1,29,1,144,0,29,1,29,1,10,0,51,0,55,0,192,0,51,0,55,0,244,0,221,0,10,0,225,0,232,0,20,1,51,0,55,0,20,1,26,1,20,1,20,1,42,1,29,1,29,1,144,0,29,1,29,1,29,1,20,1,29,1,0,0,74,4,74,4,74,4,84,4,90,4,94,4,98,4,102,4,108,4,110,4,109,4,121,4,147,4,153,4,157,4,161,4,165,4,171,4,171,4,175,4,179,4,183,4,187,4,191,4,195,4,199,4,204,4,205,4,209,4,213,4,217,4,221,4,225,4,230,4,234,4,239,4,243,4,247,4,251,4,254,4,2,5,9,5,10,5,14,5,18,5,22,5,26,5,29,5,36,5,37,5,40,5,41,5,45,5,44,5,57,5,61,5,66,5,70,5,75,5,79,5,84,5,88,5,92,5,96,5,100,5,106,5,110,5,116,5,117,5,123,5,127,5,131,5,135,5,139,5,143,5,147,5,151,5,155,5,159,5,165,5,166,5,172,5,176,5,182,5,186,5,192,5,196,5,200,5,204,5,208,5,212,5,218,5,224,5,231,5,235,5,239,5,243,5,247,5,251,5,1,6,7,6,14,6,18,6,21,6,25,6,29,6,35,6,36,6,37,6,38,6,43,6,50,6,51,6,54,6,58,6,58,6,64,6,65,6,66,6,67,6,68,6,69,6,70,6,71,6,72,6,73,6,74,6,75,6,76,6,77,6,78,6,79,6,80,6,81,6,82,6,83,6,84,6,85,6,86,6,87,6,88,6,89,6,90,6,91,6,92,6,95,6,95,6,95,6,96,6,96,6,97,6,97,6,97,6,98,6,98,6,98,6,98,6,99,6,99,6,99,6,100,6,100,6,100,6,101,6,101,6,101,6,101,6,102,6,102,6,102,6,102,6,103,6,103,6,103,6,103,6,104,6,104,6,104,6,104,6,105,6,105,6,105,6,105,6,106,6,106,6,109,6,113,6,117,6,121,6,125,6,129,6,133,6,137,6,141,6,146,6,151,6,156,6,160,6,164,6,168,6,172,6,176,6,180,6,184,6,188,6,192,6,196,6,200,6,204,6,208,6,212,6,216,6,220,6,224,6,228,6,232,6,236,6,240,6,244,6,248,6,252,6,0,7,4,7,8,7,12,7,16,7,20,7,24,7,28,7,34,7,41,7,42,7,46,7,50,7,56,7,62,7,63,7,66,7,67,7,68,7,72,7,76,7,82,7,86,7,90,7,94,7,98,7,104,7,104,7,115,7,121,7,125,7,131,7,135,7,139,7,143,7,149,7,153,7,157,7,163,7,164,7,165,7,166,7,167,7,168,7,169,7,170,7,175,7,174,7,185,7,185,7,189,7,189,7,193,7,197,7,201,7,205,7,209,7,213,7,217,7,221,7,225,7,229,7,233,7,237,7,241,7,242,7,248,7,247,7,4,8,11,8,18,8,18,8,18,8,24,8,24,8,24,8,30,8,36,8,41,8,43,8,40,8,50,8,49,8,62,8,67,8,61,8,80,8,79,8,92,8,91,8,104,8,105,8,104,8,118,8,122,8,126,8,130,8,136,8,143,8,144,8,145,8,148,8,149,8,152,8,153,8,161,8,162,8,168,8,172,8,175,8,179,8,185,8,189,8,195,8,199,8,203,8,207,8,211,8,215,8,219,8,223,8,227,8,233,8,237,8,241,8,245,8,249,8,253,8,1,9,5,9,9,9,13,9,17,9,21,9,25,9,29,9,33,9,39,9,40,9,47,9,52,9,57,9,64,9,68,9,74,9,75,9,78,9,83,9,86,9,90,9,96,9,100,9,107,9,106,9,119,9,129,9,133,9,138,9,145,9,149,9,153,9,157,9,161,9,165,9,169,9,173,9,177,9,184,9,183,9,194,9,193,9,205,9,213,9,222,9,225,9,232,9,235,9,239,9,240,9,243,9,247,9,250,9,254,9,1,10,2,10,3,10,4,10,7,10,8,10,9,10,13,10,19,10,20,10,26,10,31,10,30,10,41,10,47,10,51,10,57,10,61,10,67,10,70,10,71,10,74,10,75,10,78,10,83,10,90,10,94,10,101,10,105,10,112,10,119,10,120,10,121,10,122,10,123,10,127,10,133,10,137,10,143,10,144,10,145,10,149,10,155,10,159,10,163,10,167,10,171,10,177,10,183,10,187,10,191,10,195,10,199,10,203,10,210,10,219,10,220,10,223,10,228,10,227,10,236,10,243,10,249,10,255,10,3,11,7,11,11,11,15,11,19,11,23,11,27,11,31,11,35,11,39,11,43,11,47,11,51,11,56,11,62,11,67,11,72,11,77,11,84,11,88,11,95,11,99,11,105,11,109,11,115,11,122,11,129,11,133,11,139,11,143,11,149,11,150,11,153,11,158,11,165,11,166,11,169,11,176,11,180,11,187,11,192,11,192,11,217,11,218,11,224,11,228,11,234,11,238,11,244,11,245,11,246,11,249,11,250,11,251,11,252,11,255,11,0,12,1,12,4,12,5,12,8,12,9,12,12,12,13,12,16,12,19,12,22,12,23,12,24,12,27,12,28,12,32,12,31,12,38,12,39,12,43,12,0,0,152,0,0,0,255,255,255,255,153,0,154,0,255,255,155,0,39,1,255,255,48,1,255,255,156,0,255,255,155,0,47,1,156,0,255,255,1,0,156,0,255,255,161,0,255,255,255,255,46,0,157,0,140,0,154,0,141,0,255,255,159,0,244,0,222,0,247,0,255,255,160,0,39,1,255,255,48,1,255,255,161,0,255,255,160,0,47,1,161,0,255,255,1,0,161,0,255,255,255,255,45,0,182,0,162,0,182,0,255,255,6,0,183,0,255,255,161,0,40,0,165,0,255,255,161,0,41,0,165,0,255,255,161,0,42,0,165,0,255,255,161,0,43,0,165,0,255,255,161,0,44,0,161,0,255,255,47,0,140,0,159,0,141,0,255,255,163,0,255,255,171,0,113,0,166,0,255,255,10,1,90,0,166,0,255,255,218,0,142,0,192,0,42,1,90,0,166,0,255,255,218,0,143,0,51,0,90,0,166,0,255,255,218,0,143,0,55,0,90,0,166,0,255,255,218,0,88,0,55,0,90,0,166,0,255,255,218,0,88,0,51,0,90,0,166,0,255,255,12,1,90,0,166,0,255,255,178,0,113,0,199,0,255,255,171,0,113,0,188,0,255,255,171,0,113,0,199,0,255,255,164,0,255,255,178,0,113,0,166,0,255,255,178,0,113,0,163,0,255,255,166,0,255,255,164,0,37,0,164,0,255,255,164,0,38,0,164,0,255,255,39,0,40,1,164,0,255,255,127,0,166,0,255,255,187,0,255,255,164,0,255,255,170,0,255,255,167,0,255,255,237,0,255,255,237,0,38,1,36,1,194,0,255,255,255,255,97,0,169,0,228,0,159,0,141,0,255,255,35,1,194,0,255,255,35,1,194,0,168,0,255,255,218,0,143,0,36,1,194,0,255,255,218,0,143,0,36,1,194,0,168,0,255,255,218,0,88,0,36,1,194,0,255,255,218,0,88,0,36,1,194,0,168,0,255,255,32,0,194,0,255,255,31,0,194,0,255,255,30,0,193,0,255,255,21,0,193,0,255,255,22,0,193,0,255,255,173,0,255,255,92,0,172,0,41,1,255,255,173,0,255,255,92,0,172,0,41,1,255,255,175,0,255,255,175,0,174,0,255,255,175,0,98,0,177,0,255,255,175,0,98,0,177,0,144,0,176,0,255,255,175,0,98,0,255,255,175,0,98,0,144,0,176,0,255,255,98,0,177,0,255,255,98,0,177,0,144,0,176,0,255,255,98,0,255,255,98,0,144,0,176,0,255,255,177,0,255,255,92,0,172,0,41,1,255,255,174,0,144,0,255,255,175,0,174,0,144,0,255,255,174,0,255,255,175,0,174,0,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,9,1,255,255,218,0,142,0,192,0,42,1,255,255,218,0,143,0,51,0,255,255,218,0,88,0,51,0,255,255,218,0,143,0,55,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,12,1,255,255,51,0,255,255,55,0,255,255,89,0,179,0,255,255,179,0,255,255,218,0,88,0,179,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,186,0,255,255,181,0,255,255,5,1,255,255,182,0,255,255,255,255,183,0,144,0,184,0,182,0,255,255,118,0,255,255,119,0,255,255,120,0,255,255,72,0,255,255,73,0,255,255,74,0,255,255,80,0,255,255,81,0,255,255,116,0,255,255,76,0,255,255,117,0,255,255,77,0,255,255,75,0,255,255,86,0,255,255,87,0,255,255,121,0,255,255,122,0,255,255,123,0,255,255,98,0,255,255,124,0,255,255,125,0,255,255,71,0,255,255,127,0,255,255,128,0,255,255,69,0,255,255,70,0,255,255,84,0,255,255,85,0,255,255,145,0,255,255,48,0,255,255,49,0,255,255,50,0,255,255,46,0,255,255,47,0,255,255,45,0,255,255,37,0,255,255,7,0,255,255,21,0,255,255,16,0,255,255,3,0,255,255,5,0,255,255,26,0,255,255,15,0,255,255,14,0,255,255,10,0,255,255,9,0,255,255,36,0,255,255,20,0,255,255,25,0,255,255,4,0,255,255,22,0,255,255,34,0,255,255,39,0,255,255,38,0,255,255,23,0,255,255,8,0,255,255,24,0,255,255,30,0,255,255,33,0,255,255,32,0,255,255,13,0,255,255,35,0,255,255,6,0,255,255,17,0,255,255,31,0,255,255,11,0,255,255,12,0,255,255,18,0,255,255,19,0,255,255,178,0,113,0,187,0,255,255,178,0,113,0,187,0,44,0,187,0,255,255,10,1,90,0,187,0,255,255,10,1,90,0,187,0,44,0,187,0,255,255,218,0,142,0,192,0,42,1,90,0,187,0,255,255,218,0,143,0,51,0,90,0,187,0,255,255,218,0,143,0,55,0,90,0,187,0,255,255,218,0,88,0,51,0,90,0,187,0,255,255,218,0,88,0,55,0,90,0,187,0,255,255,89,0,55,0,90,0,187,0,255,255,12,1,90,0,187,0,255,255,187,0,82,0,187,0,255,255,187,0,83,0,187,0,255,255,187,0,121,0,187,0,255,255,187,0,122,0,187,0,255,255,187,0,123,0,187,0,255,255,187,0,124,0,187,0,255,255,187,0,125,0,187,0,255,255,187,0,71,0,187,0,255,255,126,0,58,0,71,0,187,0,255,255,126,0,59,0,71,0,187,0,255,255,69,0,187,0,255,255,70,0,187,0,255,255,187,0,118,0,187,0,255,255,187,0,119,0,187,0,255,255,187,0,120,0,187,0,255,255,187,0,72,0,187,0,255,255,187,0,116,0,187,0,255,255,187,0,76,0,187,0,255,255,187,0,117,0,187,0,255,255,187,0,77,0,187,0,255,255,187,0,73,0,187,0,255,255,187,0,74,0,187,0,255,255,187,0,75,0,187,0,255,255,187,0,80,0,187,0,255,255,187,0,81,0,187,0,255,255,127,0,187,0,255,255,128,0,187,0,255,255,187,0,86,0,187,0,255,255,187,0,87,0,187,0,255,255,187,0,78,0,187,0,255,255,187,0,79,0,187,0,255,255,187,0,114,0,187,0,40,1,115,0,187,0,255,255,200,0,255,255,187,0,255,255,48,1,255,255,198,0,43,1,255,255,198,0,144,0,33,1,43,1,255,255,33,1,43,1,255,255,146,0,192,0,41,1,255,255,48,1,255,255,190,0,255,255,48,1,255,255,193,0,255,255,198,0,144,0,255,255,198,0,144,0,33,1,144,0,255,255,33,1,144,0,255,255,170,0,255,255,198,0,197,0,255,255,33,1,197,0,255,255,198,0,144,0,33,1,197,0,255,255,196,0,255,255,255,255,195,0,193,0,255,255,99,0,188,0,255,255,144,0,196,0,255,255,48,1,255,255,188,0,255,255,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,198,0,144,0,188,0,255,255,198,0,144,0,98,0,188,0,255,255,98,0,188,0,255,255,248,0,255,255,249,0,255,255,253,0,255,255,254,0,255,255,255,0,255,255,11,1,255,255,12,1,255,255,52,0,255,255,255,255,7,0,201,0,158,0,10,0,255,255,255,255,93,0,164,0,202,0,41,1,255,255,255,255,93,0,203,0,41,1,255,255,92,0,159,0,147,0,255,255,218,0,88,0,55,0,255,255,89,0,55,0,255,255,95,0,189,0,148,0,255,255,96,0,32,1,141,0,255,255,30,0,255,255,31,0,146,0,193,0,41,1,255,255,31,0,146,0,41,1,255,255,31,0,255,255,39,0,146,0,164,0,41,1,255,255,39,0,146,0,41,1,255,255,35,1,239,0,255,255,238,0,255,255,238,0,239,0,255,255,255,255,100,0,204,0,233,0,234,0,255,255,11,0,165,0,219,0,159,0,221,0,10,0,255,255,12,0,165,0,219,0,159,0,222,0,10,0,255,255,255,255,255,255,18,0,205,0,165,0,220,0,206,0,159,0,10,0,255,255,255,255,255,255,19,0,207,0,165,0,220,0,208,0,159,0,10,0,255,255,16,0,165,0,39,1,242,0,10,0,255,255,16,0,39,1,242,0,10,0,255,255,255,255,255,255,20,0,223,0,25,0,209,0,165,0,220,0,210,0,159,0,10,0,255,255,255,255,3,0,180,0,13,1,211,0,158,0,10,0,255,255,255,255,255,255,3,0,86,0,164,0,212,0,44,1,213,0,158,0,10,0,255,255,255,255,4,0,180,0,214,0,158,0,10,0,255,255,255,255,5,0,181,0,215,0,15,1,158,0,10,0,255,255,255,255,255,255,5,0,30,1,38,1,216,0,181,0,217,0,15,1,158,0,10,0,255,255,21,0,255,255,22,0,255,255,23,0,255,255,24,0,255,255,200,0,255,255,44,1,255,255,13,0,255,255,44,1,13,0,255,255,44,1,255,255,27,0,255,255,222,0,255,255,14,0,165,0,219,0,159,0,221,0,255,255,48,1,255,255,15,0,159,0,255,255,178,0,255,255,171,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,224,0,255,255,225,0,144,0,224,0,255,255,225,0,255,255,225,0,144,0,98,0,18,1,255,255,225,0,144,0,98,0,18,1,144,0,225,0,255,255,225,0,144,0,98,0,255,255,225,0,144,0,98,0,144,0,225,0,255,255,98,0,18,1,255,255,98,0,18,1,144,0,225,0,255,255,98,0,255,255,98,0,144,0,225,0,255,255,20,1,144,0,23,1,144,0,26,1,29,1,255,255,20,1,144,0,23,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,23,1,29,1,255,255,20,1,144,0,23,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,23,1,144,0,26,1,29,1,255,255,23,1,144,0,26,1,144,0,20,1,29,1,255,255,23,1,29,1,255,255,23,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,48,1,255,255,229,0,255,255,118,0,230,0,118,0,255,255,79,0,255,255,118,0,227,0,230,0,118,0,255,255,40,1,255,255,40,1,149,0,231,0,40,1,255,255,232,0,255,255,231,0,144,0,232,0,255,255,51,0,255,255,17,1,255,255,146,0,16,1,230,0,147,0,255,255,16,1,255,255,108,0,159,0,141,0,255,255,29,0,159,0,10,0,255,255,255,255,28,0,236,0,228,0,159,0,10,0,255,255,170,0,235,0,255,255,237,0,38,1,36,1,191,0,255,255,237,0,38,1,36,1,191,0,239,0,255,255,237,0,38,1,36,1,194,0,235,0,255,255,35,1,190,0,255,255,218,0,143,0,36,1,191,0,255,255,218,0,88,0,36,1,190,0,255,255,218,0,88,0,37,1,255,255,218,0,143,0,190,0,255,255,218,0,88,0,190,0,255,255,32,0,190,0,255,255,32,0,255,255,218,0,142,0,192,0,42,1,255,255,255,255,140,0,240,0,228,0,159,0,141,0,255,255,255,255,26,0,241,0,228,0,159,0,10,0,255,255,17,0,198,0,219,0,159,0,243,0,255,255,222,0,255,255,242,0,255,255,8,0,245,0,246,0,219,0,159,0,244,0,255,255,48,1,255,255,188,0,255,255,199,0,255,255,48,1,255,255,91,0,178,0,255,255,48,1,255,255,9,0,159,0,255,255,48,1,255,255,8,1,255,255,4,1,255,255,3,1,255,255,7,1,255,255,60,0,255,255,63,0,255,255,105,0,63,0,255,255,105,0,250,0,63,0,255,255,251,0,255,255,250,0,251,0,255,255,65,0,255,255,255,255,64,0,252,0,159,0,141,0,255,255,111,0,255,255,106,0,61,0,255,255,106,0,250,0,61,0,255,255,102,0,62,0,255,255,102,0,250,0,62,0,255,255,109,0,255,255,48,1,255,255,1,1,255,255,2,1,255,255,1,1,2,1,255,255,110,0,255,255,250,0,110,0,255,255,103,0,63,0,255,255,103,0,250,0,63,0,255,255,5,1,255,255,101,0,105,0,251,0,63,0,255,255,101,0,6,1,255,255,181,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,63,0,255,255,105,0,63,0,255,255,104,0,63,0,255,255,104,0,250,0,63,0,255,255,58,0,255,255,59,0,255,255,126,0,58,0,255,255,126,0,59,0,255,255,51,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,55,0,255,255,9,1,255,255,9,1,255,255,34,0,255,255,33,0,255,255,35,0,255,255,36,0,255,255,49,0,255,255,48,0,255,255,66,0,255,255,67,0,255,255,44,1,255,255,255,255,117,0,14,1,165,0,44,1,255,255,1,0,44,1,255,255,146,0,16,1,41,1,255,255,16,1,44,1,255,255,20,1,144,0,24,1,144,0,26,1,29,1,255,255,20,1,144,0,24,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,144,0,24,1,29,1,255,255,20,1,144,0,24,1,144,0,20,1,29,1,255,255,20,1,144,0,26,1,29,1,255,255,20,1,144,0,26,1,144,0,20,1,29,1,255,255,20,1,29,1,255,255,24,1,144,0,26,1,29,1,255,255,24,1,144,0,26,1,144,0,20,1,29,1,255,255,24,1,29,1,255,255,24,1,144,0,20,1,29,1,255,255,26,1,29,1,255,255,26,1,144,0,20,1,29,1,255,255,28,1,255,255,255,255,55,0,255,255,54,0,255,255,53,0,255,255,56,0,255,255,17,1,255,255,51,0,255,255,18,1,255,255,92,0,226,0,41,1,255,255,19,1,255,255,20,1,144,0,19,1,255,255,51,0,113,0,188,0,255,255,51,0,113,0,218,0,255,255,22,1,255,255,23,1,144,0,22,1,255,255,21,1,255,255,24,1,144,0,21,1,255,255,123,0,255,255,98,0,255,255,25,1,51,0,255,255,25,1,255,255,120,0,255,255,99,0,255,255,27,1,51,0,255,255,144,0,28,1,255,255,48,1,255,255,11,1,255,255,255,255,146,0,31,1,164,0,41,1,255,255,48,1,255,255,33,1,43,1,255,255,34,1,255,255,33,1,144,0,34,1,255,255,188,0,91,0,188,0,255,255,57,0,188,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,51,0,255,255,55,0,255,255,52,0,255,255,185,0,255,255,51,0,255,255,52,0,255,255,185,0,255,255,143,0,255,255,88,0,255,255,255,255,47,1,255,255,255,255,45,1,255,255,40,1,147,0,255,255,40,1,148,0,255,255,255,255,45,1,255,255,144,0,255,255,149,0,255,255,45,1,255,255,255,255,150,0,46,1,0,1,255,255,44,1,255,255,47,1,149,0,255,255,255,255,0,2,0,2,2,1,1,3,2,1,0,5,4,2,1,1,3,2,0,4,2,3,3,3,3,3,4,1,3,3,6,5,5,5,5,3,3,3,3,1,3,3,1,3,3,3,2,1,1,1,1,1,4,0,5,2,3,4,5,4,5,2,2,2,2,2,1,3,1,3,1,2,3,5,2,4,2,4,1,3,1,3,2,3,1,2,1,4,3,3,3,3,2,1,1,4,3,3,3,3,2,1,1,1,2,1,3,1,1,1,1,1,1,1,1,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,3,5,6,5,5,5,5,4,3,3,3,3,3,3,3,3,3,4,4,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,3,3,3,3,6,1,1,1,2,4,2,3,1,1,1,1,2,4,2,1,2,2,4,1,0,2,2,2,1,1,2,3,4,3,4,2,1,1,1,1,1,1,1,1,0,4,0,4,0,3,3,3,2,3,3,1,4,3,1,4,3,2,1,2,0,4,6,6,0,0,7,0,0,7,5,4,0,0,9,0,6,0,0,8,0,5,0,6,0,0,9,1,1,1,1,1,1,1,2,1,1,1,5,1,2,1,1,1,3,1,3,1,4,6,3,5,2,4,1,3,6,8,4,6,4,2,6,2,4,6,2,4,2,4,1,1,1,3,1,4,1,4,1,3,1,1,4,1,3,3,0,5,2,4,5,5,2,4,4,3,3,3,2,1,4,0,5,0,5,5,1,1,6,1,1,1,1,2,1,2,1,1,1,1,1,1,1,2,3,1,2,1,0,4,1,2,3,2,3,1,1,1,1,2,1,2,2,3,1,4,2,1,1,1,1,1,2,2,3,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,4,2,3,2,6,8,4,6,4,6,2,4,6,2,4,2,4,1,0,1,1,1,1,1,1,1,3,1,3,3,3,1,3,1,3,1,1,2,1,1,1,2,2,1,1,0,4,1,2,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,2,2,0,1,1,1,1,0,3,1,2,0,0,0,0,0,0,151,0,153,0,152,0,154,0,155,0,155,0,155,0,155,0,156,0,157,0,156,0,158,0,159,0,160,0,160,0,160,0,160,0,162,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,161,0,163,0,163,0,164,0,164,0,164,0,164,0,164,0,164,0,165,0,166,0,166,0,167,0,167,0,169,0,168,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,170,0,171,0,171,0,172,0,172,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,173,0,174,0,174,0,175,0,175,0,176,0,176,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,177,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,178,0,179,0,179,0,180,0,180,0,180,0,181,0,181,0,181,0,181,0,181,0,182,0,182,0,183,0,184,0,183,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,185,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0,186,0])
.concat
.concat([117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,1,255,255,255,255,7,1,255,255,255,255,153,2,154,2,12,1,13,1,255,255,255,255,255,255,64,1,255,255,255,255,255,255,14,3,69,1,255,255,255,255,18,3,255,255,255,255,171,2,76,1,255,255,255,255,25,3,255,255,255,255,178,2,255,255,64,1,255,255,255,255,255,255,255,255,69,1,255,255,255,255,255,255,255,255,255,255,255,255,76,1,77,1,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,52,3,255,255,255,255,255,255,255,255,64,1,255,255,59,3,255,255,255,255,69,1,255,255,255,255,215,2,255,255,255,255,255,255,76,1,255,255,255,255,79,1,255,255,255,255,255,255,255,255,255,255,255,255,133,1,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,143,1,253,2,254,2,255,255,0,3,255,255,2,3,3,3,151,1,255,255,133,1,255,255,8,3,255,255,10,3,11,3,255,255,255,255,255,255,255,255,143,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,133,1,80,0,81,0,255,255,255,255,255,255,186,1,86,0,87,0,255,255,143,1,137,3,255,255,255,255,255,255,195,1,36,3,37,3,151,1,255,255,255,255,255,255,255,255,43,3,255,255,255,255,186,1,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,1,44,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,209,1,255,255,211,1,255,255,186,1,255,255,255,255,255,255,255,255,78,3,255,255,240,1,255,255,195,1,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,96,3,255,255,86,0,87,0,240,1,255,255,102,3,255,255,104,3,255,255,119,3,120,3,121,3,122,3,110,3,255,255,255,255,126,3,127,3,128,3,255,255,130,3,131,3,255,255,255,255,255,255,255,255,255,255,8,2,255,255,114,0,240,1,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172,3,255,255,255,255,175,3,176,3,177,3,178,3,255,255,71,2,255,255,255,255,51,0,52,0,255,255,186,3,55,0,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,81,2,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,2,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,81,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,255,255,171,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,2,255,255,255,255,255,255,255,255,196,2,197,2,178,2,255,255,153,2,154,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,196,2,197,2,171,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,2,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,196,2,197,2,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,215,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,231,2,232,2,233,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,36,3,37,3,255,255,255,255,255,255,255,255,255,255,43,3,255,255,255,255,255,255,47,3,255,255,96,3,255,255,78,3,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,255,255,255,255,110,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,3,255,255,255,255,255,255,255,255,255,255,102,3,255,255,104,3,255,255,255,255,255,255,0,0,1,0,110,3,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,255,255,126,0,127,0,128,0,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,114,0,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,29,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,108,0,255,255,255,255,255,255,255,255,255,255,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,255,255,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,13,0,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,27,0,28,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,255,255,91,0,255,255,255,255,255,255,255,255,255,255,97,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,0,0,146,0,147,0,148,0,149,0,150,0,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,26,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,0,0,90,0,255,255,255,255,255,255,255,255,255,255,255,255,8,0,9,0,10,0,255,255,255,255,255,255,14,0,15,0,255,255,17,0,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,37,0,38,0,255,255,40,0,41,0,42,0,43,0,44,0,255,255,255,255,255,255,255,255,255,255,255,255,140,0,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,255,255,255,255,86,0,87,0,88,0,255,255,90,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,113,0,114,0,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,142,0,143,0,144,0,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,255,255,255,255,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,14,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,10,0,11,0,12,0,149,0,150,0,15,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,9,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,0,255,255,149,0,150,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,141,0,1,0,255,255,3,0,4,0,5,0,6,0,7,0,149,0,150,0,10,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,149,0,150,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,150,0,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,149,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,149,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,145,0,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,140,0,255,255,11,0,12,0,255,255,255,255,146,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,90,0,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,113,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,126,0,127,0,128,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,146,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,146,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,145,0,18,0,19,0,20,0])
.concat([21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,126,0,11,0,12,0,255,255,255,255,255,255,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,144,0,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,46,0,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,6,0,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,45,0,255,255,47,0,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,69,0,70,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,255,255,255,255,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,126,0,127,0,128,0,16,0,255,255,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,86,0,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,98,0,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,255,255,255,255,3,0,4,0,5,0,255,255,7,0,255,255,255,255,255,255,11,0,12,0,255,255,255,255,255,255,16,0,126,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,255,255,255,255,255,255,255,255,255,255,30,0,31,0,32,0,33,0,34,0,35,0,36,0,255,255,255,255,39,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,48,0,49,0,255,255,51,0,52,0,53,0,54,0,55,0,56,0,255,255,58,0,59,0,60,0,255,255,255,255,63,0,255,255,255,255,66,0,67,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,89,0,255,255,255,255,92,0,93,0,255,255,95,0,96,0,255,255,255,255,255,255,100,0,101,0,102,0,103,0,104,0,105,0,106,0,255,255,255,255,109,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,126,0,255,255,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,51,0,52,0,255,255,255,255,55,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,146,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,255,255,255,255,80,0,81,0,255,255,255,255,84,0,85,0,86,0,87,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,98,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,255,255,127,0,128,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,145,0,0,121,1,0,184,120,1,0,108,120,1,0,248,119,1,0,156,119,1,0,60,119,1,0,240,118,1,0,172,135,1,0,240,134,1,0,44,134,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,68,168,1,0,20,1,0,0,20,1,0,0,6,0,0,0,36,168,1,0,14,1,0,0,14,1,0,0,0,0,0,0,32,168,1,0,33,1,0,0,33,1,0,0,1,0,0,0,140,167,1,0,8,1,0,0,8,1,0,0,0,0,0,0,136,167,1,0,9,1,0,0,9,1,0,0,1,0,0,0,128,167,1,0,12,1,0,0,12,1,0,0,0,0,0,0,120,167,1,0,38,1,0,0,38,1,0,0,4,0,0,0,100,167,1,0,35,1,0,0,35,1,0,0,1,0,0,0,60,167,1,0,32,1,0,0,32,1,0,0,1,0,0,0,52,167,1,0,13,1,0,0,13,1,0,0,10,0,0,0,28,167,1,0,7,1,0,0,43,1,0,0,6,0,0,0,0,167,1,0,34,1,0,0,34,1,0,0,1,0,0,0,184,166,1,0,18,1,0,0,42,1,0,0,10,0,0,0,44,166,1,0,11,1,0,0,40,1,0,0,10,0,0,0,0,166,1,0,29,1,0,0,29,1,0,0,6,0,0,0,240,165,1,0,4,1,0,0,4,1,0,0,7,0,0,0,188,165,1,0,36,1,0,0,36,1,0,0,10,0,0,0,124,165,1,0,25,1,0,0,25,1,0,0,0,0,0,0,88,165,1,0,30,1,0,0,30,1,0,0,4,0,0,0,52,165,1,0,19,1,0,0,19,1,0,0,10,0,0,0,244,164,1,0,5,1,0,0,5,1,0,0,7,0,0,0,180,164,1,0,37,1,0,0,37,1,0,0,10,0,0,0,176,164,1,0,24,1,0,0,24,1,0,0,10,0,0,0,16,164,1,0,16,1,0,0,16,1,0,0,10,0,0,0,8,164,1,0,23,1,0,0,23,1,0,0,1,0,0,0,4,164,1,0,10,1,0,0,39,1,0,0,10,0,0,0,252,163,1,0,15,1,0,0,15,1,0,0,10,0,0,0,240,163,1,0,22,1,0,0,22,1,0,0,1,0,0,0,228,163,1,0,21,1,0,0,21,1,0,0,6,0,0,0,220,163,1,0,31,1,0,0,31,1,0,0,4,0,0,0,184,163,1,0,3,1,0,0,3,1,0,0,10,0,0,0,160,163,1,0,6,1,0,0,6,1,0,0,0,0,0,0,148,163,1,0,47,1,0,0,47,1,0,0,1,0,0,0,8,163,1,0,48,1,0,0,48,1,0,0,1,0,0,0,248,162,1,0,49,1,0,0,49,1,0,0,1,0,0,0,244,162,1,0,46,1,0,0,46,1,0,0,1,0,0,0,236,162,1,0,44,1,0,0,44,1,0,0,7,0,0,0,224,162,1,0,45,1,0,0,45,1,0,0,1,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,196,162,1,0,2,1,0,0,2,1,0,0,9,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,168,135,1,0,0,0,0,0,0,0,0,0,0,0,0,0,188,162,1,0,17,1,0,0,41,1,0,0,10,0,0,0,84,1,0,0,86,1,0,0,80,1,0,0,82,1,0,0,76,1,0,0,78,1,0,0,72,1,0,0,74,1,0,0,68,1,0,0,70,1,0,0,0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117,31,0,0,0,28,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,29,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,30,0,0,0,31,0,0,0,113,2,0,0,228,188,1,0,58,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
.concat
.concat([160,2,0,64,1,2,0,64,32,0,129,0,1,2,0,0,6,2,128,3,64,2,0,192,33,2,0,128,1,2,64,2,25,2,0,64,1,2,128,5,64,2,0,192,33,0,64,1,151,2,0,64,1,2,128,7,64,2,0,192,33,1,128,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,192,21,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,2,25,2,0,128,21,2,128,64,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,2,151,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,118,0,3,0,5,0,0,0,17,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,128,1,1,128,64,32,2,63,255,131,1,128,128,178,1,192,1,25,0,0,0,5,0,0,0,41,1,128,128,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,4,0,8,101,97,99,104,95,107,101,121,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,101,97,99,104,0,0,0,0,103,0,4,0,7,0,0,0,16,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,21,2,128,64,1,2,0,128,160,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,0,0,0,49,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,100,101,108,101,116,101,0,0,0,0,55,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,8,101,97,99,104,95,107,101,121,0,0,0,0,110,0,4,0,8,0,0,0,18,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,64,1,3,0,192,1,2,0,65,32,2,64,3,25,2,0,192,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,129,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,3,91,93,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,130,0,1,0,2,0,0,0,23,0,128,0,6,0,128,64,71,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,0,70,0,128,0,6,0,128,64,71,1,0,6,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,8,192,0,128,128,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,64,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,1,96,0,0,4,108,111,111,112,0,0,4,101,118,97,108,0,0,0,0,104,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,17,96,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,53,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,1,96,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,107,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,101,118,97,108,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,56,0,3,0,5,0,0,0,5,2,0,0,38,1,128,0,17,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,6,75,101,114,110,101,108,0,0,4,101,118,97,108,0,0,0,0,59,0,2,0,3,0,0,0,8,0,0,0,38,0,64,1,23,1,0,0,43,1,0,0,32,1,0,0,7,1,63,254,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,189,0,1,0,2,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,4,99,101,105,108,0,0,6,100,111,119,110,116,111,0,0,5,102,108,111,111,114,0,0,5,116,105,109,101,115,0,0,5,114,111,117,110,100,0,0,8,116,114,117,110,99,97,116,101,0,0,4,117,112,116,111,0,0,4,115,116,101,112,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,175,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,182,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,45,0,0,2,62,61,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,95,0,3,0,5,0,0,0,15,0,0,0,166,1,63,255,131,0,64,3,23,1,128,64,1,2,0,128,1,1,128,0,160,1,128,128,1,1,128,64,173,1,0,192,1,1,128,128,1,2,0,0,6,1,128,128,179,1,191,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,1,60,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,96,0,4,0,6,0,0,0,15,2,0,0,166,1,128,0,6,0,64,3,23,2,0,128,1,2,128,192,1,2,0,0,160,2,0,192,1,2,0,64,173,1,129,0,1,2,0,192,1,2,128,64,1,2,0,128,180,2,63,251,24,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,170,0,5,0,7,0,0,0,27,2,16,0,166,0,64,0,151,0,64,0,151,1,64,0,3,2,128,64,1,3,0,0,145,2,128,0,160,2,192,1,153,2,128,0,6,2,128,128,32,0,64,0,151,2,128,0,6,2,1,64,1,0,64,3,151,2,128,192,1,3,1,0,1,2,128,192,160,2,129,0,1,3,0,128,1,2,129,0,172,2,1,64,1,2,129,0,1,3,0,64,1,2,129,64,180,2,191,250,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,8,107,105,110,100,95,111,102,63,0,0,5,70,108,111,97,116,0,0,4,116,111,95,102,0,0,4,99,97,108,108,0,0,1,43,0,0,2,60,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,0,0,0,104,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,112,114,105,110,116,102,0,0,0,0,106,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,19,112,114,105,110,116,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,105,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,18,112,117,116,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,102,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,15,112,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,1,89,0,4,0,7,0,0,0,52,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,2,0,128,1,2,128,1,4,2,0,64,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,2,17,3,0,0,61,2,0,193,32,2,0,0,6,2,1,64,32,1,129,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,1,192,181,2,64,1,25,0,0,0,6,0,0,0,41,0,64,3,23,2,0,64,1,2,128,128,1,2,2,0,160,2,0,128,1,2,0,128,32,1,1,0,1,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,2,64,179,2,63,250,24,2,0,0,6,2,2,128,32,2,2,192,32,2,64,2,153,2,0,128,1,2,128,192,1,2,1,128,160,2,191,255,131,2,3,0,178,2,64,1,153,2,0,64,1,2,128,128,1,2,2,0,160,0,0,0,6,0,0,0,41,0,0,0,1,16,0,13,99,97,110,39,116,32,105,116,101,114,97,116,101,0,0,0,13,0,5,102,105,114,115,116,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,4,115,117,99,99,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,108,97,115,116,0,0,3,60,61,62,0,0,1,62,0,0,4,99,97,108,108,0,0,1,60,0,0,12,101,120,99,108,117,100,101,95,101,110,100,63,0,0,1,33,0,0,2,61,61,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,213,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,128,0,72,1,0,16,192,0,129,192,70,0,128,0,72,1,0,18,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,9,101,97,99,104,95,108,105,110,101,0,0,4,103,115,117,98,0,0,5,103,115,117,98,33,0,0,4,115,99,97,110,0,0,3,115,117,98,0,0,4,115,117,98,33,0,0,9,101,97,99,104,95,99,104,97,114,0,0,9,101,97,99,104,95,98,121,116,101,0,0,3,91,93,61,0,0,0,0,207,0,4,0,9,0,0,0,37,0,0,0,166,1,63,255,131,0,64,6,23,2,0,64,1,2,128,0,6,3,0,128,1,3,128,192,1,3,128,128,173,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,2,0,192,1,2,0,128,173,1,1,0,1,2,0,0,6,2,192,4,131,3,0,128,1,2,1,1,32,1,129,0,1,2,63,247,24,2,0,0,6,2,1,64,32,2,128,128,1,2,1,128,181,2,64,4,153,2,0,64,1,2,128,0,6,3,0,128,1,3,128,0,6,3,129,64,32,4,0,128,1,3,128,192,174,2,128,65,32,2,0,0,160,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,7,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,45,0,0,5,105,110,100,101,120,0,0,4,115,105,122,101,0,0,1,62,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,191,255,3,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,118,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,4,103,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,160,0,3,0,6,0,0,0,12,2,0,0,166,1,128,0,17,2,0,1,4,1,128,64,160,1,192,1,25,1,128,0,5,0,64,2,23,1,128,0,6,2,0,2,17,2,128,0,61,1,128,193,32,1,128,0,41,0,0,0,1,16,0,24,115,99,97,110,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,40,121,101,116,41,0,0,0,5,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,82,101,103,101,120,112,0,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,0,1,23,0,3,0,7,0,0,0,42,0,8,0,166,1,128,64,1,1,128,0,32,2,64,0,131,1,128,64,178,1,192,5,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,64,1,2,192,0,3,2,0,192,160,1,129,0,160,0,64,12,23,1,128,64,1,1,128,0,32,2,64,0,3,1,128,64,178,1,192,0,153,1,128,128,1,1,192,6,153,1,128,0,6,2,0,64,1,2,191,255,131,2,0,192,160,2,192,0,131,1,128,129,32,2,0,128,1,2,128,64,1,3,63,255,131,2,128,192,160,2,1,64,160,1,129,0,160,0,64,2,23,1,128,0,6,2,0,3,145,2,128,0,61,1,129,129,32,1,128,0,41,0,0,0,1,16,0,25,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,8,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,112,108,105,116,0,0,2,91,93,0,0,4,106,111,105,110,0,0,4,99,97,108,108,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,117,0,4,0,7,0,0,0,19,0,8,0,166,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,3,0,128,1,2,0,63,161,1,129,0,1,2,0,192,1,2,128,0,6,2,0,64,160,2,64,2,153,2,0,0,6,2,128,192,1,2,0,128,160,2,0,0,6,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,3,115,117,98,0,0,2,33,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,119,0,3,0,6,0,0,0,18,0,0,0,166,1,63,255,131,0,64,4,23,1,128,64,1,2,0,0,6,2,128,128,1,2,0,64,160,1,128,0,160,1,128,128,1,1,128,128,173,1,0,192,1,1,128,128,1,2,0,0,6,2,1,0,32,1,128,192,179,1,191,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,139,0,4,0,7,0,0,0,21,0,0,0,166,2,0,0,6,2,0,0,32,1,1,0,1,1,191,255,131,0,64,4,23,2,0,64,1,2,128,128,1,3,0,192,1,2,128,128,160,2,0,64,160,2,0,192,1,2,0,192,173,1,129,0,1,2,0,192,1,2,128,128,1,2,129,64,32,2,1,0,179,2,63,249,152,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,6,0,5,98,121,116,101,115,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,4,115,105,122,101,0,0,0,0,137,0,6,0,10,0,0,0,22,4,0,0,38,3,0,0,6,3,191,255,131,4,0,64,1,3,0,1,32,2,1,128,1,3,0,0,6,3,128,64,1,3,128,64,173,4,63,255,3,3,129,192,65,3,0,0,160,2,129,128,1,3,0,0,6,3,129,0,1,4,0,128,1,4,129,64,1,3,129,193,183,4,0,0,61,3,128,192,160,3,0,128,160,3,0,0,41,0,0,0,1,16,0,0,0,0,0,4,0,2,91,93,0,0,1,43,0,0,7,114,101,112,108,97,99,101,0,0,4,106,111,105,110,0,0,0,0,28,0,1,0,2,0,0,0,2,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,59,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,145,0,128,0,160,1,0,0,41,0,0,0,0,0,0,0,2,0,7,105,110,99,108,117,100,101,0,0,10,67,111,109,112,97,114,97,98,108,101,0,69,78,68,0,0,0,0,8,0,0,248,174,1,0,86,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,74,0,0,0,16,0,0,0,17,0,0,0,20,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,39,0,0,0,42,0,0,0,43,0,0,0,46,0,0,0,49,0,0,0,55,0,0,0,58,0,0,0,62,0,0,0,63,0,0,0,69,0,0,0,79,0,0,0,77,0,0,0,117,0,0,0,118,0,0,0,137,0,0,0,158,0,0,0,173,0,0,0,217,0,0,0,218,0,0,0,220,0,0,0,15,1,0,0,33,1,0,0,39,1,0,0,115,1,0,0,59,1,0,0,127,1,0,0,79,1,0,0,100,1,0,0,140,1,0,0,190,1,0,0,235,1,0,0,24,2,0,0,69,2,0,0,114,2,0,0,115,2,0,0,116,2,0,0,117,2,0,0,126,2,0,0,127,2,0,0,151,2,0,0,152,2,0,0,153,2,0,0,157,2,0,0,182,2,0,0,163,2,0,0,164,2,0,0,168,2,0,0,172,2,0,0,177,2,0,0,178,2,0,0,179,2,0,0,183,2,0,0,184,2,0,0,191,2,0,0,110,111,32,116,97,114,103,101,116,32,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,0,0,0,115,117,112,101,114,32,99,97,108,108,101,100,32,111,117,116,115,105,100,101,32,111,102,32,109,101,116,104,111,100,0,0,0,0,0,0,223,176,8,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,129,1,0,128,128,1,0,116,127,1,0,124,126,1,0,192,125,1,0,192,124,1,0,52,124,1,0,240,123,1,0,120,123,1,0,244,122,1,0,184,121,1,0,88,121,1,0,0,0,0,0,255,1,0,0,117,110,101,120,112,101,99,116,101,100,32,0,6,5,5,0,114,101,116,117,114,110,0,98,114,101,97,107,0,0,121,105,101,108,100,0,0,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,114,101,112,32,108,111,97,100,32,101,114,114,111,114,0,40,46,46,46,32,46,46,46,32,46,46,46,41,0,40,46,46,46,32,46,46,32,46,46,46,41,0,0,13,0,0,0,12,0,0,0,93,0,0,0,44,32,0,0,91,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,14,51,16,8,11,13,51,51,51,51,10,51,13,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,11,51,13,1,26,4,1,8,28,51,23,51,1,1,27,5,19,21,51,8,3,3,11,51,21,24,16,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,223,176,8,153,82,73,84,69,48,48,48,49,111,233,0,0,1,1,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,227,48,48,48,48,0,4,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,121,109,98,111,108,0,0,0,0,50,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,7,116,111,95,112,114,111,99,0,0,0,0,53,0,2,0,4,0,0,0,5,0,0,0,38,1,0,0,17,1,128,3,64,1,0,64,33,1,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,59,0,4,0,7,0,0,0,8,2,8,0,38,2,0,64,1,2,128,0,6,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,121,204,0,0,2,192,77,65,84,90,48,48,48,48,73,82,69,80,0,0,2,162,48,48,48,48,0,8,0,0,0,0,0,99,0,1,0,3,0,0,0,11,0,128,0,17,1,0,1,4,0,128,64,160,0,192,2,153,0,128,0,5,1,0,0,5,0,128,128,67,0,128,0,197,0,64,0,151,0,128,0,5,0,0,0,74,0,0,0,0,0,0,0,3,0,6,79,98,106,101,99,116,0,0,14,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,6,83,116,114,117,99,116,0,0,0,0,92,0,1,0,2,0,0,0,11,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,3,0,4,101,97,99,104,0,0,9,101,97,99,104,95,112,97,105,114,0,0,6,115,101,108,101,99,116,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,60,0,3,0,6,0,0,0,7,2,0,0,38,1,128,64,21,2,0,0,6,2,128,64,1,2,0,64,160,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,91,93,0,0,0,0,77,0,2,0,4,0,0,0,8,0,0,0,166,1,0,0,6,1,0,0,32,1,0,64,32,1,128,3,64,1,0,128,33,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,77,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,2,0,64,32,2,128,0,6,3,0,64,1,2,128,128,160,1,128,1,32,1,128,0,41,0,0,0,0,0,0,0,3,0,4,99,97,108,108,0,0,6,116,111,95,115,121,109,0,0,2,91,93,0,0,0,0,77,0,3,0,5,0,0,0,8,0,0,0,166,1,0,192,55,1,128,0,6,1,128,0,32,1,128,64,32,2,0,3,64,1,128,128,33,1,0,0,41,0,0,0,0,0,0,0,3,0,5,99,108,97,115,115,0,0,7,109,101,109,98,101,114,115,0,0,4,101,97,99,104,0,0,0,0,99,0,4,0,6,0,0,0,15,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,64,21,2,128,192,1,2,0,64,160,2,64,2,25,2,0,128,21,2,128,192,1,2,0,128,160,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,4,99,97,108,108,0,0,4,112,117,115,104,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,170,180,0,0,5,22,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,248,48,48,48,48,0,9,0,0,0,0,0,49,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,83,116,114,105,110,103,0,0,0,0,177,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,72,1,0,14,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,6,108,115,116,114,105,112,0,0,6,114,115,116,114,105,112,0,0,5,115,116,114,105,112,0,0,7,108,115,116,114,105,112,33,0,0,7,114,115,116,114,105,112,33,0,0,6,115,116,114,105,112,33,0,0,7])
.concat([99,97,115,101,99,109,112,0,0,0,0,201,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,6,32,12,10,13,9,11,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,198,0,4,0,7,0,0,0,32,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,61,2,128,0,6,3,0,192,1,2,128,192,160,2,0,128,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,0,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,64,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,0,192,160,0,64,0,151,2,0,0,189,2,0,0,41,0,0,0,2,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,6,0,4,115,105,122,101,0,0,1,45,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,1,11,0,4,0,7,0,0,0,46,0,0,0,38,1,63,255,131,2,0,0,6,2,0,0,32,2,0,64,175,1,129,0,1,0,64,1,151,2,0,128,1,2,0,128,173,1,1,0,1,2,0,0,61,2,128,0,6,3,0,128,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,0,64,1,151,2,0,192,1,2,0,64,175,1,129,0,1,2,0,0,189,2,128,0,6,3,0,192,1,2,129,0,160,2,0,192,160,2,64,1,153,2,0,128,1,2,128,192,1,2,1,64,180,2,63,249,152,2,0,192,1,2,191,255,131,2,1,128,182,2,64,3,25,2,0,0,6,2,128,128,1,3,0,192,1,2,129,64,65,2,1,0,160,0,64,0,151,2,0,1,61,2,0,0,41,0,0,0,3,16,0,6,32,12,10,13,9,11,16,0,7,32,12,10,13,9,11,0,16,0,0,0,0,0,7,0,4,115,105,122,101,0,0,1,45,0,0,1,43,0,0,8,105,110,99,108,117,100,101,63,0,0,2,91,93,0,0,2,60,61,0,0,2,62,61,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,108,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,100,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,6,114,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,99,0,3,0,5,0,0,0,14,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,2,0,0,6,1,128,64,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,5,115,116,114,105,112,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,65,0,3,0,5,0,0,0,7,2,0,0,38,1,128,0,6,1,128,0,32,2,0,64,1,2,0,0,32,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,8,100,111,119,110,99,97,115,101,0,0,3,60,61,62,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,191,38,0,0,3,222,77,65,84,90,48,48,48,48,73,82,69,80,0,0,3,192,48,48,48,48,0,9,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,80,114,111,99,0,0,0,0,108,0,1,0,2,0,0,0,14,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,4,0,3,61,61,61,0,0,5,121,105,101,108,100,0,0,7,116,111,95,112,114,111,99,0,0,5,99,117,114,114,121,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,55,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,4,99,97,108,108,0,0,0,0,32,0,2,0,3,0,0,0,3,0,0,0,38,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,0,0,0,1,134,0,7,0,12,0,0,0,60,0,16,0,38,0,64,0,151,0,64,1,151,3,128,0,6,3,128,0,32,0,129,192,1,3,128,0,6,4,0,3,64,3,128,64,33,1,129,192,1,3,128,192,1,4,0,64,1,3,128,128,160,0,129,192,1,3,128,0,6,3,128,192,32,3,192,17,153,3,128,0,6,3,128,0,32,2,1,192,1,3,129,0,1,4,63,255,131,3,129,0,182,3,192,1,153,3,128,64,1,4,1,0,1,3,129,64,160,3,192,4,152,3,129,0,1,4,63,255,131,3,129,128,179,3,192,2,153,3,128,192,1,4,1,0,1,3,128,128,160,4,0,64,1,3,129,192,181,3,192,7,25,3,128,0,6,4,0,4,145,4,128,0,61,5,0,64,1,4,130,128,62,5,0,0,189,4,130,128,62,5,0,192,1,5,129,0,1,5,0,128,160,4,130,128,62,5,0,1,61,4,130,128,62,3,130,1,32,2,128,0,6,3,128,0,6,4,0,5,64,3,130,128,33,3,1,192,1,3,129,128,1,3,130,192,32,3,128,0,41,0,0,0,3,16,0,27,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,16,0,5,32,102,111,114,32,16,0,1,41,0,0,0,12,0,5,97,114,105,116,121,0,0,6,108,97,109,98,100,97,0,0,2,91,93,0,0,7,108,97,109,98,100,97,63,0,0,2,62,61,0,0,2,33,61,0,0,1,60,0,0,1,62,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,112,114,111,99,0,0,4,99,97,108,108,0,0,0,0,77,0,3,0,5,0,0,0,11,2,0,0,38,1,128,64,1,2,63,255,131,1,128,0,179,1,192,2,25,1,128,64,1,1,128,64,32,1,128,128,175,0,64,0,151,1,128,64,1,1,128,0,41,0,0,0,0,0,0,0,3,0,1,60,0,0,2,45,64,0,0,1,45,0,0,0,0,59,0,3,0,5,0,0,0,8,0,16,0,38,0,64,0,151,0,64,0,151,0,128,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,112,114,111,99,0,0,0,0,121,0,4,0,7,0,0,0,20,0,8,0,38,2,0,64,21,2,128,64,1,2,0,0,172,1,129,0,1,2,0,192,1,2,0,64,32,2,128,64,149,2,0,128,182,2,64,3,25,2,1,64,149,2,129,64,55,3,0,192,1,2,129,128,56,2,0,255,160,0,64,1,151,2,1,128,149,2,128,192,1,2,0,192,160,2,0,0,41,0,0,0,0,0,0,0,4,0,1,43,0,0,4,115,105,122,101,0,0,2,62,61,0,0,2,91,93,0,69,78,68,0,0,0,0,8,0,0,82,73,84,69,48,48,48,49,95,93,0,0,4,103,77,65,84,90,48,48,48,48,73,82,69,80,0,0,4,73,48,48,48,48,0,8,0,0,0,0,0,45,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,6,75,101,114,110,101,108,0,0,0,0,185,0,1,0,3,0,0,0,26,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,1,145,1,0,2,132,0,129,0,160,0,192,2,153,0,128,0,72,1,0,8,192,0,129,128,70,0,128,0,5,0,64,3,151,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,64,70,0,128,0,5,1,0,0,41,0,0,0,0,0,0,0,7,0,5,112,114,105,110,116,0,0,4,112,117,116,115,0,0,1,112,0,0,6,75,101,114,110,101,108,0,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,115,112,114,105,110,116,102,0,0,6,112,114,105,110,116,102,0,0,0,0,146,0,5,0,8,0,0,0,21,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,4,151,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,249,152,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,4,116,111,95,115,0,0,1,43,0,0,1,60,0,0,0,0,232,0,6,0,8,0,0,0,39,0,8,0,38,1,191,255,131,3,0,64,1,3,0,0,32,2,1,128,1,0,64,10,23,3,0,64,1,3,128,192,1,3,0,64,160,3,0,128,32,2,129,128,1,3,0,0,6,3,129,64,1,3,0,192,160,3,1,64,1,3,191,255,3,3,0,64,160,3,128,0,61,3,1,0,160,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,3,0,192,1,3,1,64,173,1,129,128,1,3,0,192,1,3,129,0,1,3,1,128,179,3,63,244,24,3,1,0,1,3,191,255,131,3,1,192,178,3,64,1,153,3,0,0,6,3,128,0,61,3,0,192,160,0,0,0,5,0,0,0,41,0,0,0,1,16,0,1,10,0,0,0,8,0,4,115,105,122,101,0,0,2,91,93,0,0,4,116,111,95,115,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,33,61,0,0,1,43,0,0,1,60,0,0,2,61,61,0,0,0,0,173,0,5,0,8,0,0,0,26,0,8,0,38,1,191,255,131,2,128,64,1,2,128,0,32,2,1,64,1,0,64,6,23,2,128,0,6,3,0,64,1,3,128,192,1,3,0,128,160,3,0,192,32,2,128,64,160,2,128,0,6,3,0,0,61,2,128,64,160,2,128,192,1,2,129,0,173,1,129,64,1,2,128,192,1,3,1,0,1,2,129,64,179,2,191,248,24,2,128,64,1,3,63,255,131,2,128,128,160,2,128,0,41,0,0,0,1,16,0,1,10,0,0,0,6,0,4,115,105,122,101,0,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,2,91,93,0,0,7,105,110,115,112,101,99,116,0,0,1,43,0,0,1,60,0,0,0,0,85,0,3,0,7,0,0,0,10,0,8,0,38,1,128,0,6,2,0,0,6,2,129,64,55,3,0,64,1,2,129,128,56,2,0,127,160,1,128,0,160,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,2,0,12,95,95,112,114,105,110,116,115,116,114,95,95,0,0,7,115,112,114,105,110,116,102,0,0,0,0,107,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,20,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,0,0,0,108,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,0,0,145,2,128,0,61,2,0,128,160,1,128,0,160,1,128,0,41,0,0,0,1,16,0,21,115,112,114,105,110,116,102,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,0,0,3,0,5,114,97,105,115,101,0,0,19,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,0,3,110,101,119,0,69,78,68,0,0,0,0,8,0,82,73,84,69,48,48,48,49,133,202,0,0,10,241,77,65,84,90,48,48,48,48,73,82,69,80,0,0,10,211,48,48,48,48,0,27,0,0,0,0,0,117,0,1,0,3,0,0,0,16,0,128,0,5,0,128,0,68,0,128,0,197,0,128,0,5,1,0,0,5,0,128,64,67,0,128,9,197,0,128,0,5,1,0,0,5,0,128,128,67,0,128,10,197,0,128,0,5,1,0,0,5,0,128,192,67,0,128,12,69,0,0,0,74,0,0,0,0,0,0,0,4,0,7,77,114,117,98,121,74,115,0,0,4,80,114,111,99,0,0,4,72,97,115,104,0,0,6,83,121,109,98,111,108,0,0,0,0,179,0,1,0,3,0,0,0,23,0,128,64,63,0,128,0,16,0,128,0,6,0,128,64,71,1,0,2,192,0,128,64,70,0,128,0,6,0,128,64,71,1,0,4,192,0,128,128,70,0,128,0,5,1,0,0,5,0,128,192,67,0,128,1,197,0,128,0,5,1,0,0,5,0,129,0,67,0,128,4,197,0,128,0,5,1,0,0,5,0,129,64,67,0,128,8,69,1,0,0,41,0,0,0,0,0,0,0,6,0,7,64,64,112,114,111,99,115,0,0,8,97,100,100,95,112,114,111,99,0,0,9,99,97,108,108,95,112,114,111,99,0,0,8,74,115,79,98,106,101,99,116,0,0,10,74,115,70,117,110,99,116,105,111,110,0,0,7,74,115,65,114,114,97,121,0,0,0,0,111,0,4,0,8,0,0,0,16,2,16,0,38,0,64,0,151,0,64,0,151,1,63,255,3,2,0,0,15,2,128,64,1,2,0,64,160,2,64,1,25,2,0,0,5,0,64,2,151,2,0,128,1,2,128,0,15,3,0,64,1,3,129,0,1,2,128,129,32,2,0,0,41,0,0,0,0,0,0,0,3,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,3,91,93,61,0,0,0,0,203,0,4,0,8,0,0,0,32,2,0,0,38,2,0,0,15,2,128,64,1,2,0,64,160,2,64,12,153,2,0,0,15,2,128,64,1,2,0,128,160,1,129,0,1,2,0,192,1,2,191,255,3,2,0,192,178,2,64,1,25,0,0,0,5,0,0,0,41,2,0,192,1,2,192,0,3,2,1,0,180,2,64,2,25,2,0,0,15,2,128,64,1,2,1,64,160,0,64,3,23,2,0,192,1,2,1,128,175,2,128,0,15,3,0,64,1,3,129,0,1,2,129,193,32,0,64,0,151,2,0,0,5,2,0,0,41,0,0,0,0,0,0,0,8,0,7,64,64,112,114,111,99,115,0,0,8,104,97,115,95,107,101,121,63,0,0,2,91,93,0,0,2,61,61,0,0,2,60,61,0,0,6,100,101,108,101,116,101,0,0,1,45,0,0,3,91,93,61,0,0,0,0,151,0,1,0,2,0,0,0,17,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,8,192,0,128,192,70,0,128,0,72,1,0,10,192,0,129,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,8,99,97,108,108,95,110,101,119,0,0,14,99,97,108,108,95,119,105,116,104,95,116,104,105,115,0,0,8,103,101,116,95,102,117,110,99,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,76,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,6,105,110,118,111,107,101,0,0,0,0,80,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,0,0,160,2,129,64,55,3,0,128,1,2,129,128,56,2,0,127,160,2,0,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,0,0,90,0,5,0,8,0,0,0,10,4,8,0,38,2,128,0,6,3,0,64,1,2,128,0,160,3,0,128,1,3,1,128,183,3,128,192,1,3,1,192,56,2,128,127,160,2,128,0,41,0,0,0,0,0,0,0,2,0,8,103,101,116,95,102,117,110,99,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,0,0,140,0,4,0,8,0,0,0,17,2,0,0,38,2,0,0,6,2,128,64,1,2,0,0,160,1,129,0,1,2,0,192,1,2,64,0,153,0,64,4,23,2,0,0,6,2,128,1,17,3,0,0,61,3,128,64,1,3,1,192,62,3,128,0,189,3,1,192,62,2,0,65,32,1,128,0,41,0,0,0,2,16,0,0,16,0,16,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,33,0,0,0,3,0,3,103,101,116,0,0,5,114,97,105,115,101,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,0,221,0,4,0,8,0,0,0,37,2,8,0,38,2,0,64,1,2,0,0,32,0,129,0,1,2,0,64,1,2,191,255,3,2,0,64,160,2,128,0,61,2,0,128,178,2,64,5,153,2,0,0,6,2,128,64,1,3,63,255,131,3,191,254,131,3,1,128,65,2,128,64,160,2,129,64,183,3,0,128,1,2,129,128,56,2,0,255,160,0,64,7,151,2,0,128,1,2,1,0,32,2,191,255,131,2,1,64,181,2,64,3,153,2,0,0,6,2,128,64,1,2,129,64,183,3,0,128,1,2,129,128,56,2,1,191,160,2,0,0,41,2,0,0,6,2,128,64,1,2,1,192,160,2,0,0,41,0,0,0,1,16,0,1,61,0,0,0,8,0,4,116,111,95,115,0,0,2,91,93,0,0,2,61,61,0,0,3,115,101,116,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,4,99,97,108,108,0,0,3,103,101,116,0,0,0,0,218,0,1,0,3,0,0,0,23,0,128,0,6,1,0,0,132,0,128,0,160,0,128,0,72,1,0,2,192,0,128,128,70,0,128,0,72,1,0,4,192,0,128,192,70,0,128,0,72,1,0,6,192,0,129,0,70,0,128,0,72,1,0,8,192,0,129,64,70,0,128,0,72,1,0,10,192,0,129,128,70,0,128,0,72,1,0,12,192,0,129,192,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,8,0,11,97,116,116,114,95,114,101,97,100,101,114,0,0,13,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,10,105,110,105,116,105,97,108,105,122,101,0,0,6,105,110,118,111,107,101,0,0,10,105,110,118,111,107,101,95,110,101,119,0,0,16,105,110,118,111,107,101,95,119,105,116,104,95,116,104,105,115,0,0,2,91,93,0,0,14,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,0,0,61,0,4,0,6,0,0,0,6,4,0,0,38,2,128,64,1,3,0,0,5,2,0,0,164,1,0,0,14,1,0,0,41,0,0,0,0,0,0,0,1,0,14,64,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,63,255,131,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,70,0,3,0,6,0,0,0,8,0,8,0,38,1,128,0,6,2,64,0,3,2,1,0,183,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,74,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,192,0,131,3,0,64,1,2,129,65,55,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,1,0,15,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,0,0,0,57,0,3,0,6,0,0,0,7,0,8,0,38,1,128,0,6,2,1,0,55,2,128,64,1,2,1,64,56,1,128,63,160,1,128,0,41,0,0,0,0,0,0,0,1,0,6,105,110,118,111,107,101,0,0,0,0,72,0,4,0,7,0,0,0,9,2,8,0,38,2,0,0,6,2,128,64,1,2,128,64,32,2,129,64,183,3,0,128,1,2,129,128,56,2,0,63,160,2,0,0,41,0,0,0,0,0,0,0,2,0,6,105,110,118,111,107,101,0,0,4,116,111,95,115,0,0,0,0,47,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,133,0,4,0,7,0,0,0,21,0,0,0,166,2,63,255,131,2,128,0,6,2,128,0,32,1,1,0,1,1,129,64,1,0,64,4,23,2,0,64,1,2,128,0,6,3,0,128,1,2,128,128,160,2,0,64,160,2,0,128,1,2,0,192,173,1,1,0,1,2,0,128,1,2,128,192,1,2,1,0,179,2,63,250,24,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,5,0,6,108,101,110,103,116,104,0,0,4,99,97,108,108,0,0,2,91,93,0,0,1,43,0,0,1,60,0,0,0,0,56,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,13,114,101,108,101,97,115,101,95,97,102,116,101,114,0,0,0,0,69,0,3,0,6,0,0,0,7,2,0,0,38,1,128,0,17,2,0,0,6,2,128,64,1,1,128,65,32,0,0,0,6,0,0,0,41,0,0,0,0,0,0,0,2,0,7,77,114,117,98,121,74,115,0,0,8,97,100,100,95,112,114,111,99,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,74,115,79,98,106,101,99,116,0,0,0,0,93,0,3,0,5,0,0,0,9,0,0,0,38,1,128,0,145,1,128,0,19,1,128,128,32,1,0,192,1,1,128,0,6,2,0,3,64,1,128,192,33,1,0,0,41,0,0,0,0,0,0,0,4,0,8,74,115,79,98,106,101,99,116,0,0,7,77,114,117,98,121,74,115,0,0,6,99,114,101,97,116,101,0,0,4,101,97,99,104,0,0,0,0,54,0,4,0,8,0,0,0,7,4,0,0,38,2,0,128,1,2,128,128,21,3,0,64,1,3,129,0,1,2,128,1,32,2,0,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,53,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,10,116,111,95,106,115,95,112,114,111,99,0,0,0,0,69,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,191,255,3,1,128,0,6,2,0,0,17,2,128,3,64,2,0,64,33,2,0,0,41,0,0,0,0,0,0,0,2,0,4,80,114,111,99,0,0,3,110,101,119,0,0,0,0,138,0,3,0,6,0,0,0,22,0,8,0,38,1,128,64,21,2,63,255,3,1,128,0,160,1,192,2,25,1,128,64,1,1,128,64,32,2,0,64,21,1,128,128,181,1,192,2,153,1,128,64,1,2,63,255,131,2,128,64,21,1,128,193,32,0,128,192,1,1,128,0,6,2,0,192,21,2,1,0,183,2,128,64,1,2,1,64,56,1,129,63,160,1,128,0,41,0,0,0,0,0,0,0,5,0,2,33,61,0,0,6,108,101,110,103,116,104,0,0,1,62,0,0,2,91,93,0,0,4,115,101,110,100,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,106,86,0,0,2,16,77,65,84,90,48,48,48,48,73,82,69,80,0,0,1,242,48,48,48,48,0,5,0,0,0,0,0,47,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,4,72,97,115,104,0,0,0,0,49,0,1,0,2,0,0,0,5,0,128,0,72,1,0,2,192,0,128,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,1,0,6,109,101,114,103,101,33,0,0,0,0,178,0,3,0,5,0,0,0,20,2,0,0,166,1,128,64,1,2,0,0,132,1,128,0,160,1,192,0,153,0,64,1,151,1,128,0,6,2,0,0,61,1,128,128,160,1,128,128,1,1,192,2,25,1,128,64,1,2,0,3,64,1,128,192,33,0,64,1,151,1,128,64,1,2,0,5,64,1,128,192,33,0,0,0,6,0,0,0,41,0,0,0,1,16,0,32,99,97,110,39,116,32,99,111,110,118,101,114,116,32,97,114,103,117,109,101,110,116,32,105,110,116,111,32,72,97,115,104,0,0,0,4,0,11,114,101,115,112,111,110,100,95,116,111,63,0,0,7,116,111,95,104,97,115,104,0,0,5,114,97,105,115,101,0,0,8,101,97,99,104,95,107,101,121,0,0,0,0,141,0,3,0,8,0,0,0,23,2,0,0,38,1,128,0,6,2,0,64,1,1,128,0,160,1,192,5,25,1,128,128,21,2,0,64,1,2,128,0,6,3,0,64,1,2,128,128,160,3,0,64,21,3,128,64,1,3,0,128,160,1,128,65,160,0,64,1,151,1,128,64,21,2,0,64,1,1,128,128,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,193,32,1,128,0,41,0,0,0,0,0,0,0,4,0,8,104,97,115,95,107,101,121,63,0,0,4,99,97,108,108,0,0,2,91,93,0,0,3,91,93,61,0,0,0,0,67,0,3,0,7,0,0,0,9,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,2,0,0,6,2,128,64,1,3,0,192,1,2,0,65,32,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,82,73,84,69,48,48,48,49,8,107,0,0,8,173,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,143,48,48,48,48,0,16,0,0,0,0,0,49,0,1,0,2,0,0,0,4,0,128,0,5,0,128,0,68,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,10,69,110,117,109,101,114,97,98,108,101,0,0,0,0,188,0,1,0,2,0,0,0,23,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,6,192,0,128,64,70,0,128,0,72,1,0,10,192,0,128,128,70,0,128,0,72,1,0,14,192,0,128,192,70,0,128,0,72,1,0,18,192,0,129,0,70,0,128,0,72,1,0,22,192,0,129,64,70,0,128,0,72,1,0,26,192,0,129,128,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,7,0,4,100,114,111,112,0,0,10,100,114,111,112,95,119,104,105,108,101,0,0,4,116,97,107,101,0,0,10,116,97,107,101,95,119,104,105,108,101,0,0,9,101,97,99,104,95,99,111,110,115,0,0,10,101,97,99,104,95,115,108,105,99,101,0,0,8,103,114,111,117,112,95,98,121,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,100,114,111,112,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,86,0,3,0,5,0,0,0,13,2,0,0,38,1,128,64,21,2,63,255,131,1,128,0,178,1,192,2,25,1,128,192,21,2,0,64,1,1,128,64,160,0,64,1,151,1,128,64,21,1,128,128,175,1,128,64,22,1,128,0,41,0,0,0,0,0,0,0,3,0,2,61,61,0,0,2,60,60,0,0,1,45,0,0,0,0,63,0,4,0,6,0,0,0,9,0,0,0,166,2,1,0,55,2,128,0,8,1,1,0,1,1,129,64,1,2,0,0,6,2,128,3,64,2,0,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,112,0,3,0,5,0,0,0,19,2,0,0,38,1,128,192,21,1,128,0,32,1,192,2,25,1,128,64,21,2,0,64,1,1,128,64,160,1,128,0,32,1,192,1,25,1,128,0,7,1,128,192,22,1,128,192,21,1,192,2,25,1,128,128,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,1,33,0,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,248,0,4,0,7,0,0,0,23,2,0,0,38,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,179,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,1,128,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,29,97,116,116,101,109,112,116,32,116,111,32,116,97,107,101,32,110,101,103,97,116,105,118,101,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,60,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,81,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,182,1,192,0,153,1,128,64,41,1,128,192,21,2,0,64,1,1,128,128,160,1,128,0,41,0,0,0,0,0,0,0,3,0,4,115,105,122,101,0,0,2,62,61,0,0,2,60,60,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,55,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,80,0,3,0,5,0,0,0,12,2,0,0,38,1,128,64,21,2,0,64,1,1,128,0,160,1,192,0,153,0,64,1,23,1,128,128,21,1,128,128,41,1,128,128,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,4,99,97,108,108,0,0,2,60,60,0,0,0,0,232,0,4,0,7,0,0,0,23,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,12,105,110,118,97,108,105,100,32,115,105,122,101,0,0,0,7,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,150,0,3,0,5,0,0,0,23,2,0,0,38,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,1,25,1,128,192,21,1,128,128,32,1,128,192,21,2,0,64,1,1,128,192,160,1,128,192,21,1,128,0,32,2,0,64,21,1,128,64,178,1,192,2,153,1,128,128,21,2,0,192,21,2,1,64,32,1,129,0,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,6,0,4,115,105,122,101,0,0,2,61,61,0,0,5,115,104,105,102,116,0,0,2,60,60,0,0,4,99,97,108,108,0,0,3,100,117,112,0,0,0,1,30,0,4,0,7,0,0,0,31,2,0,0,166,2,0,64,1,2,128,0,145,2,0,0,160,2,64,0,153,0,64,2,23,2,0,0,6,2,128,1,145,3,0,0,61,2,0,129,32,2,0,64,1,2,191,255,131,2,1,0,180,2,64,2,25,2,0,0,6,2,128,2,145,3,0,0,189,2,0,129,32,1,129,0,55,2,0,0,6,2,128,3,64,2,1,128,33,2,0,192,1,2,1,192,32,2,64,1,25,2,0,0,5,0,64,1,151,2,0,128,1,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,2,16,0,33,101,120,112,101,99,116,101,100,32,73,110,116,101,103,101,114,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,16,0,18,105,110,118,97,108,105,100,32,115,108,105,99,101,32,115,105,122,101,0,0,0,9,0,8,107,105,110,100,95,111,102,63,0,0,7,73,110,116,101,103,101,114,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,2,60,61,0,0,13,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,4,101,97,99,104,0,0,6,101,109,112,116,121,63,0,0,4,99,97,108,108,0,0,0,0,112,0,3,0,5,0,0,0,17,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,128,192,21,1,128,64,32,2,0,64,21,1,128,128,178,1,192,3,25,1,128,128,21,2,0,192,21,1,128,192,160,1,128,192,55,1,128,192,22,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,4,0,2,60,60,0,0,4,115,105,122,101,0,0,2,61,61,0,0,4,99,97,108,108,0,0,0,0,51,0,3,0,5,0,0,0,6,0,0,0,166,1,0,192,63,1,128,0,6,2,0,3,64,1,128,0,33,1,0,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,138,0,4,0,8,0,0,0,22,2,0,0,38,2,0,64,21,2,128,64,1,2,0,0,160,1,129,0,1,2,0,128,21,2,128,192,1,2,0,64,160,2,64,3,25,2,0,128,21,2,128,192,1,2,0,128,160,2,128,64,1,2,0,192,160,0,64,3,23,2,0,64,1,2,1,0,183,2,128,128,21,3,0,192,1,3,129,0,1,2,129,1,32,2,0,0,41,0,0,0,0,0,0,0,5,0,4,99,97,108,108,0,0,4,107,101,121,63,0,0,2,91,93,0,0,2,60,60,0,0,3,91,93,61,0,69,78,68,0,0,0,0,8,0,0,0,82,73,84,69,48,48,48,49,127,107,0,0,8,174,77,65,84,90,48,48,48,48,73,82,69,80,0,0,8,144,48,48,48,48,0,18,0,0,0,0,0,48,0,1,0,3,0,0,0,5,0,128,0,5,1,0,0,5,0,128,0,67,0,128,0,197,0,0,0,74,0,0,0,0,0,0,0,1,0,5,65,114,114,97,121,0,0,0,0,205,0,1,0,2,0,0,0,29,0,128,0,72,1,0,2,192,0,128,0,70,0,128,0,72,1,0,4,192,0,128,64,70,0,128,0,72,1,0,6,192,0,128,128,70,0,128,0,72,1,0,12,192,0,128,192,70,0,128,0,72,1,0,14,192,0,129,0,70,0,128,0,72,1,0,20,192,0,129,64,70,0,128,0,72,1,0,24,192,0,129,128,70,0,128,0,72,1,0,28,192,0,129,192,70,0,128,0,72,1,0,30,192,0,130,0,70,0,0,0,5,0,0,0,41,0,0,0,0,0,0,0,9,0,5,117,110,105,113,33,0,0,4,117,110,105,113,0,0,1,45,0,0,1,124,0,0,1,38,0,0,7,102,108,97,116,116,101,110,0,0,8,102,108,97,116,116,101,110,33,0,0,7,99,111,109,112,97,99,116,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,205,0,4,0,6,0,0,0,31,0,0,0,38,2,0,0,6,2,0,0,32,1,1,0,1,1,129,0,55,0,64,4,23,2,0,192,1,2,128,128,1,2,128,128,32,2,0,64,160,2,0,128,1,2,128,192,1,2,129,0,32,2,0,192,160,2,0,128,1,2,1,64,32,2,191,255,131,2,1,128,181,2,63,249,152,2,0,192,1,2,1,64,32,2,128,0,6,2,129,64,32,2,1,192,178,2,64,1,25,2,0,0,5,0,64,1,151,2,0,0,6,2,128,192,1,2,2,0,160,2,0,0,41,0,0,0,0,0,0,0,9,0,3,100,117,112,0,0,2,60,60,0,0,5,115,104,105,102,116,0,0,6,100,101,108,101,116,101,0,0,4,108,97,115,116,0,0,4,115,105,122,101,0,0,1,62,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,62,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,74,0,3,0,5,0,0,0,11,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,1,25,1,128,0,5,0,64,1,151,1,129,0,21,2,0,64,1,1,128,64,160,1,128,0,41,0,0,0,0,0,0,0,2,0,2,91,93,0,0,2,60,60,0,0,0,0,204,0,4,0,8,0,0,0,25,2,0,0,38,2,0,64,1,2,0,0,32,2,128,1,17,2,0,64,178,2,64,0,153,0,64,4,151,2,0,0,6,2,128,2,17,3,0,0,61,3,128,64,1,3,128,0,32,3,1,192,62,3,128,0,189,3,1,192,62,2,0,193,32,2,0,0,6,2,128,64,1,2,1,64,172,1,129,0,1,2,0,192,1,2,1,128,32,2,64,0,152,2,0,192,1,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,7,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,1,43,0,0,5,117,110,105,113,33,0,0,0,0,199,0,5,0,9,0,0,0,25,2,0,0,38,2,128,64,1,2,128,0,32,3,0,1,17,2,128,64,178,2,192,0,153,0,64,4,151,2,128,0,6,3,0,2,17,3,128,0,61,4,0,64,1,4,0,0,32,3,130,0,62,4,0,0,189,3,130,0,62,2,128,193,32,1,129,64,63,2,1,64,55,2,128,64,1,3,0,3,64,2,129,64,33,2,128,0,6,3,0,5,64,2,129,64,33,2,0,0,41,0,0,0,2,16,0,14,99,97,110,39,116,32,99,111,110,118,101,114,116,32,16,0,11,32,105,110,116,111,32,65,114,114,97,121,0,0,0,6,0,5,99,108,97,115,115,0,0,2,61,61,0,0,5,65,114,114,97,121,0,0,5,114,97,105,115,101,0,0,9,84,121,112,101,69,114,114,111,114,0,0,4,101,97,99,104,0,0,0,0,54,0,3,0,7,0,0,0,7,2,0,0,38,1,128,0,7,2,0,192,21,2,128,64,1,3,0,192,1,2,0,1,32,1,128,0,41,0,0,0,0,0,0,0,1,0,3,91,93,61,0,0,0,0,95,0,3,0,5,0,0,0,14,2,0,0,38,1,128,192,21,2,0,64,1,1,128,0,160,1,192,3,153,1,129,0,21,2,0,64,1,1,128,64,160,1,128,192,21,2,0,64,1,1,128,128,160,0,64,0,151,1,128,0,5,1,128,0,41,0,0,0,0,0,0,0,3,0,2,91,93,0,0,2,60,60,0,0,6,100,101,108,101,116,101,0,0,0,0,63,0,4,0,6,0,0,0,9,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,129,0,55,2,0,0,6,2,128,3,64,2,0,0,33,1,128,0,41,0,0,0,0,0,0,0,1,0,4,101,97,99,104,0,0,0,0,186,0,3,0,7,0,0,0,29,2,0,0,38])
.concat([1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,6,153,1,128,192,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,128,192,22,0,64,1,151,1,128,192,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,105,0,5,0,7,0,0,0,17,0,16,0,38,0,64,0,151,0,64,0,151,0,128,0,5,1,128,0,8,2,1,64,55,2,128,0,6,3,0,3,64,2,128,0,33,2,128,192,1,2,192,2,25,2,128,0,6,3,1,0,1,2,128,64,160,0,64,0,151,2,128,0,5,2,128,0,41,0,0,0,0,0,0,0,2,0,4,101,97,99,104,0,0,7,114,101,112,108,97,99,101,0,0,0,0,194,0,3,0,7,0,0,0,31,2,0,0,38,1,128,64,1,2,0,0,145,1,128,0,160,1,192,3,25,1,128,64,21,1,128,128,32,1,192,1,152,1,128,64,21,2,63,255,131,1,128,192,181,1,192,7,153,1,129,0,21,2,0,64,1,2,128,64,21,2,128,128,32,2,192,1,25,2,128,0,5,0,64,1,23,2,128,64,21,2,129,64,175,2,1,0,160,1,129,128,172,1,129,0,22,1,128,0,7,1,128,192,22,0,64,1,151,1,129,0,21,2,0,64,1,1,129,192,160,1,128,0,41,0,0,0,0,0,0,0,8,0,5,105,115,95,97,63,0,0,5,65,114,114,97,121,0,0,4,110,105,108,63,0,0,1,62,0,0,7,102,108,97,116,116,101,110,0,0,1,45,0,0,1,43,0,0,2,60,60,0,0,0,0,65,0,3,0,4,0,0,0,7,0,0,0,38,1,128,0,6,1,128,0,32,1,0,192,1,1,128,128,1,1,128,64,32,1,0,0,41,0,0,0,0,0,0,0,2,0,3,100,117,112,0,0,8,99,111,109,112,97,99,116,33,0,0,0,0,119,0,3,0,5,0,0,0,17,0,0,0,38,1,128,0,6,2,0,3,64,1,128,0,33,1,0,192,1,1,128,128,1,1,128,64,32,2,0,0,6,2,0,64,32,1,128,128,178,1,192,1,25,1,128,0,5,0,64,1,151,1,128,0,6,2,0,128,1,1,128,192,160,1,128,0,41,0,0,0,0,0,0,0,4,0,6,115,101,108,101,99,116,0,0,4,115,105,122,101,0,0,2,61,61,0,0,7,114,101,112,108,97,99,101,0,0,0,0,45,0,3,0,5,0,0,0,5,2,0,0,38,1,128,64,1,2,0,0,5,1,128,0,160,1,128,0,41,0,0,0,0,0,0,0,1,0,2,33,61,0,69,78,68,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,35,0,0,0,0,0,0,0,112,149,1,0,2,0,0,0,156,148,1,0,3,0,0,0,0,177,1,0,4,0,0,0,84,175,1,0,10,0,0,0,200,147,1,0,8,0,0,0,252,146,1,0,9,0,0,0,224,145,1,0,11,0,0,0,44,145,1,0,12,0,0,0,228,143,1,0,13,0,0,0,176,142,1,0,6,0,0,0,28,160,1,0,14,0,0,0,180,141,1,0,15,0,0,0,200,139,1,0,16,0,0,0,140,138,1,0,17,0,0,0,132,137,1,0,19,0,0,0,128,136,1,0,21,0,0,0,180,135,1,0,255,0,0,0,0,0,0,0,82,73,84,69,48,48,48,49,188,85,0,0,0,152,77,65,84,90,48,48,48,48,73,82,69,80,0,0,0,122,48,48,48,48,0,2,0,0,0,0,0,44,0,1,0,3,0,0,0,4,0,192,2,3,1,0,3,64,0,128,0,33,0,0,0,74,0,0,0,0,0,0,0,1,0,5,116,105,109,101,115,0,0,0,0,62,0,1,0,3,0,0,0,4,0,128,0,6,1,0,0,61,0,128,0,160,0,128,0,41,0,0,0,1,16,0,16,82,117,98,121,32,105,115,32,97,119,101,115,111,109,101,33,0,0,0,1,0,4,112,117,116,115,0,69,78,68,0,0,0,0,8,79,80,95,117,110,107,110,111,119,110,32,37,100,9,37,100,9,37,100,9,37,100,10,0,83,116,114,105,110,103,0,0,115,116,101,112,95,114,97,116,105,111,61,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,37,115,0,0,79,80,95,69,80,79,80,9,37,100,10,0,116,111,95,97,114,121,0,0,58,34,0,0,44,32,0,0,45,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,80,79,80,69,82,82,9,37,100,10,0,0,0,65,114,114,97,121,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,58,10,0,0,0,79,80,95,82,65,73,83,69,9,82,37,100,10,0,0,0,101,120,112,101,99,116,101,100,32,37,83,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,78,79,68,69,95,83,67,79,80,69,58,10,0,0,0,0,79,80,95,82,69,83,67,85,69,9,82,37,100,10,0,0,105,110,100,101,120,32,37,83,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,116,111,95,104,97,115,104,0,100,111,58,10,0,0,0,0,79,80,95,79,78,69,82,82,9,37,48,51,100,10,0,0,72,97,115,104,0,0,0,0,105,110,58,10,0,0,0,0,115,116,114,105,110,103,32,40,37,83,41,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,101,103,101,114,0,79,80,95,69,80,85,83,72,9,58,73,40,37,100,41,10,0,0,0,0,109,101,116,104,111,100,32,96,37,83,39,32,110,111,116,32,100,101,102,105,110,101,100,32,105,110,32,37,83,0,0,0,112,111,115,116,58,10,0,0,79,80,95,69,82,82,9,76,40,37,100,41,10,0,0,0,119,114,111,110,103,32,99,111,110,115,116,97,110,116,32,110,97,109,101,32,37,83,0,0,114,101,115,116,58,10,0,0,79,80,95,84,67,76,65,83,83,9,82,37,100,10,0,0,64,0,0,0,77,82,66,95,84,84,95,70,76,79,65,84,0,0,0,0,114,101,115,117,109,105,110,103,32,100,101,97,100,32,102,105,98,101,114,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,37,83,0,0,0,0,116,111,74,115,65,114,114,97,121,0,0,0,60,61,62,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,66,69,71,73,78,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,83,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,116,111,95,105,110,116,0,0,97,116,97,110,0,0,0,0,61,61,0,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,84,114,117,101,67,108,97,115,115,0,0,0,45,73,110,102,105,110,105,116,121,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,84,121,112,101,69,114,114,111,114,0,0,0,61,61,0,0,112,114,101,58,10,0,0,0,79,80,95,83,67,76,65,83,83,9,82,37,100,9,82,37,100,10,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,110,101,119,0,118,97,114,58,10,0,0,0,80,114,111,99,0,0,0,0,79,80,95,69,88,69,67,9,82,37,100,9,73,40,37,100,41,10,0,0,110,97,109,101,32,115,104,111,117,108,100,32,98,101,32,97,32,115,121,109,98,111,108,0,115,116,101,112,95,114,97,116,105,111,0,0,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,47,111,98,106,101,99,116,32,101,120,112,101,99,116,101,100,0,78,79,68,69,95,70,79,82,58,10,0,0,79,80,95,77,79,68,85,76,69,9,82,37,100,9,58,37,115,10,0,0,111,42,0,0,111,0,0,0,36,0,0,0,78,79,68,69,95,85,78,84,73,76,58,10,0,0,0,0,79,80,95,67,76,65,83,83,9,82,37,100,9,58,37,115,10,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,78,79,68,69,95,87,72,73,76,69,58,10,0,0,0,0,79,80,95,79,67,76,65,83,83,9,82,37,100,10,0,0,124,98,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,115,101,58,10,0,0,79,80,95,72,65,83,72,9,82,37,100,9,82,37,100,9,37,100,10,0,73,110,100,101,120,69,114,114,111,114,0,0,35,60,63,63,63,63,63,63,58,0,0,0,78,79,68,69,95,67,65,83,69,58,10,0,79,80,95,83,84,82,67,65,84,9,82,37,100,9,82,37,100,10,0,0,35,60,77,111,100,117,108,101,58,0,0,0,78,79,68,69,95,79,82,58,10,0,0,0,79,80,95,83,84,82,73,78,71,9,82,37,100,9,37,115,10,0,0,0,105,108,108,101,103,97,108,32,114,97,100,105,120,32,37,83,0,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,78,79,68,69,95,65,78,68,58,10,0,0,79,80,95,65,80,79,83,84,9,82,37,100,9,37,100,9,37,100,10,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,116,104,101,110,58,10,0,0,9,91,37,100,93,32,37,115,58,37,100,10,0,0,0,0,35,60,80,114,111,99,58,0,79,80,95,65,82,69,70,9,82,37,100,9,82,37,100,9,37,100,10,0,77,82,66,95,84,84,95,85,78,68,69,70,0,0,0,0,100,111,117,98,108,101,32,114,101,115,117,109,101,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,97,114,114,97,121,33,0,110,38,0,0,61,61,0,0,83,104,105,102,116,105,110,103,0,0,0,0,111,0,0,0,42,0,0,0,118,97,108,117,101,32,103,105,118,101,110,32,116,119,105,99,101,32,45,32,37,83,36,0,70,105,120,110,117,109,0,0,97,99,111,115,0,0,0,0,101,110,100,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,105,110,115,112,101,99,116,0,70,108,111,97,116,68,111,109,97,105,110,69,114,114,111,114,0,0,0,0,124,83,38,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,111,110,115,116,97,110,116,32,37,83,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,99,111,110,100,58,10,0,0,79,80,95,65,82,89,80,85,83,72,9,82,37,100,9,82,37,100,10,0,111,0,0,0,78,79,68,69,95,73,70,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,79,80,95,65,82,89,67,65,84,9,82,37,100,9,82,37,100,10,0,0,77,111,100,117,108,101,46,99,111,110,115,116,97,110,116,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,61,0,109,114,98,95,109,97,108,108,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,98,108,107,61,38,37,115,10,0,0,0,0,79,80,95,65,82,82,65,89,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,61,61,61,0,105,110,105,116,105,97,108,105,122,101,0,0,117,110,101,120,112,101,99,116,101,100,32,114,101,116,114,121,0,0,0,0,112,111,115,116,32,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,79,80,95,83,84,79,80,10,0,0,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,115,0,114,101,115,116,61,42,37,115,10,0,0,0,79,80,95,69,81,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,110,111,32,115,117,112,101,114,32,99,108,97,115,115,32,102,111,114,32,96,37,83,58,58,37,83,39,44,32,79,98,106,101,99,116,32,97,115,115,117,109,101,100,0,37,115,61,0,79,80,95,71,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,114,101,109,111,118,101,95,99,111,110,115,116,0,0,0,0,111,112,116,105,111,110,97,108,32,97,114,103,115,58,10,0,79,80,95,71,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,109,97,110,100,97,116,111,114,121,32,97,114,103,115,58,10,0,0,0,0,83,121,109,98,111,108,0,0,79,80,95,76,69,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,115,101,116,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,66,76,79,67,75,58,10,0,0,0,0,102,124,102,0,115,116,114,105,110,103,32,115,105,122,101,115,32,116,111,111,32,98,105,103,0,0,0,0,79,80,95,76,84,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,99,111,110,115,116,95,103,101,116,0,0,0,101,110,115,117,114,101,58,10,0,0,0,0,105,124,105,105,105,105,105,105,0,0,0,0,110,101,103,97,116,105,118,101,32,97,114,103,117,109,101,110,116,0,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,10,0,0,60,61,62,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,80,114,111,99,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,79,80,95,68,73,86,9,82,37,100,9,58,37,115,9,37,100,10,0,0,77,82,66,95,84,84,95,83,89,77,66,79,76,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,97,100,100,95,112,114,111,99,0,0,0,0,99,111,110,115,116,95,100,101,102,105,110,101,100,63,0,0,117,116,99,0,37,83,32,105,115,32,110,111,116,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,10,0,0,0,101,110,100,95,119,105,116,104,63,0,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,37,42,91,48,45,57,93,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,121,112,101,0,0,0,97,115,105,110,0,0,0,0,98,101,103,105,110,0,0,0,99,105,105,100,120,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,69,78,83,85,82,69,58,10,0,0,0,102,0,0,0,84,111,111,32,108,97,114,103,101,32,101,120,112,111,114,110,101,110,116,46,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,32,115,104,111,117,108,100,32,116,97,107,101,32,115,97,109,101,32,99,108,97,115,115,32,111,98,106,101,99,116,0,0,0,99,111,110,115,116,95,109,105,115,115,105,110,103,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,105,0,0,0,79,80,95,77,85,76,9,82,37,100,9,58,37,115,9,37,100,10,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,101,108,115,101,58,10,0,0,83,97,116,0,45,0,0,0,38,0,0,0,79,80,95,83,85,66,73,9,82,37,100,9,58,37,115,9,37,100,10,0,97,110,99,101,115,116,111,114,115,0,0,0,105,110,116,101,114,118,97,108,95,114,97,116,105,111,0,0,114,101,115,99,117,101,32,98,111,100,121,58,10,0,0,0,70,114,105,0,101,120,99,101,112,116,105,111,110,0,0,0,82,101,103,101,120,112,32,99,108,97,115,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,0,79,80,95,83,85,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,101,120,99,95,118,97,114,58,10,0,0,0,84,104,117,0,117,110,101,120,112,101,99,116,101,100,32,114,101,100,111,0,60,61,62,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,79,80,95,65,68,68,73,9,82,37,100,9,58,37,115,9,37,100,10,0,116,111,95,115,0,0,0,0,104,97,110,100,108,101,32,99,108,97,115,115,101,115,58,10,0,0,0,0,87,101,100,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,49,41,0,0,0,0,79,80,95,65,68,68,9,82,37,100,9,58,37,115,9,37,100,10,0,0,114,101,109,111,118,101,95,109,101,116,104,111,100,0,0,0,37,83,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,114,101,115,99,117,101,58,10,0,0,0,0,84,117,115,0,111,124,111,0,79,80,95,77,69,84,72,79,68,9,82,37,100,9,58,37,115,10,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,114,101,109,111,118,101,95,99,108,97,115,115,95,118,97,114,105,97,98,108,101,0,0,0,98,111,100,121,58,10,0,0,77,111,110,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,79,80,95,82,65,78,71,69,9,82,37,100,9,82,37,100,9,37,100,10,0,0,0,0,109,111,100,117,108,101,95,101,118,97,108,0,78,79,68,69,95,82,69,83,67,85,69,58,10,0,0,0,83,117,110,0,101,120,116,101,110,100,101,100,0,0,0,0,124,83,0,0,79,80,95,76,65,77,66,68,65,9,82,37,100,9,73,40,37,43,100,41,9,37,100,10,0,0,0,0,109,101,116,104,111,100,95,100,101,102,105,110,101,100,63,0,83,116,114,105,110,103,0,0,78,79,68,69,95,66,69,71,73,78,58,10,0,0,0,0,68,101,99,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,83,0,0,0,79,80,95,66,76,75,80,85,83,72,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,105,110,115,116,97,110,99,101,95,109,101,116,104,111,100,115,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,0,78,111,118,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,97,116,32,108,101,97,115,116,32,49,41,0,0,82,101,103,101,120,112,0,0,9,91,37,100,93,32,37,115,58,37,100,58,105,110,32,37,115,37,115,37,115,10,0,0,111,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,9,98,114,111,107,101,110,10,0,0,0,0,77,82,66,95,84,84,95,70,73,88,78,85,77,0,0,0,42,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,112,114,111,99,33,0,0,0,105,110,99,108,117,100,101,100,95,109,111,100,117,108,101,115,0,0,0,0,110,111,119,0,73,110,100,101,120,69,114,114,111,114,0,0,78,101,120,116,32,116,111,107,101,110,32,105,115,0,0,0,115,116,97,114,116,95,119,105,116,104,63,0,108,97,109,98,100,97,0,0,119,105,100,116,104,32,116,111,111,32,98,105,103,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,97,110,0,69,110,117,109,101,114,97,98,108,101,0,0,108,97,115,116,112,99,0,0,110,105,108,63,0,0,0,0,67,108,101,97,110,117,112,58,32,112,111,112,112,105,110,103,0,0,0,0,79,99,116,0,105,110,102,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,111,0,0,0,95,95,99,108,97,115,115,105,100,95,95,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,116,121,112,101,32,109,105,115,109,97,116,99,104,58,32,37,83,32,103,105,118,101,110,0,9,98,114,101,97,107,10,0,105,110,99,108,117,100,101,100,0,0,0,0,67,108,101,97,110,117,112,58,32,100,105,115,99,97,114,100,105,110,103,32,108,111,111,107,97,104,101,97,100,0,0,0,83,101,112,0,96,37,83,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,0,124,111,105,0,105,110,115,112,101,99,116,0,9,114,101,116,117,114,110,10,0,0,0,0,99,108,97,115,115,95,101,118,97,108,0,0,100,105,115,97,98,108,101,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,0,0,0,65,117,103,0,110,42,38,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,98,121,116,101,115,0,0,0,10,0,0,0,97,112,112,101,110,100,95,102,101,97,116,117,114,101,115,0,69,114,114,111,114,58,32,112,111,112,112,105,110,103,0,0,74,117,108,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,70,108,111,97,116,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,0,0,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,115,0,0,0,105,110,115,112,101,99,116,0,117,110,101,120,112,101,99,116,101,100,32,110,101,120,116,0,105,110,115,112,101,99,116,0,79,80,95,82,69,84,85,82,78,9,82,37,100,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,69,114,114,111,114,58,32,100,105,115,99,97,114,100,105,110,103,0,0,0,74,117,110,0,119,105,100,116,104,40,37,83,41,32,62,32,40,37,83,58,115,105,122,101,111,102,40,109,114,98,95,105,110,116,41,42,67,72,65,82,95,66,73,84,45,49,41,0,115,101,110,100,0,0,0,0,117,112,99,97,115,101,33,0,79,80,95,69,78,84,69,82,9,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,58,37,100,10,0,0,42,0,0,0,105,110,99,108,117,100,101,0,41,0,0,0,110,116,101,114,109,32,37,115,32,40,0,0,105,110,104,101,114,105,116,101,100,0,0,0,116,111,107,101,110,32,37,115,32,40,0,0,32,32,32,36,37,100,32,61,32,0,0,0,82,101,100,117,99,105,110,103,32,115,116,97,99,107,32,98,121,32,114,117,108,101,32,37,100,32,40,108,105,110,101,32,37,108,117,41,58,10,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,98,111,116,104,32,98,108,111,99,107,32,97,114,103,32,97,110,100,32,97,99,116,117,97,108,32,98,108,111,99,107,32,103,105,118,101,110,0,0,0,77,97,121,0,102,0,0,0,114,101,115,112,111,110,100,95,116,111,63,0,98,108,111,99,107,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,103,105,118,101,110,0,0,32,37,100,0,117,112,99,97,115,101,0,0,83,116,97,99,107,32,110,111,119,0,0,0,79,80,95,65,82,71,65,82,89,9,82,37,100,9,37,100,58,37,100,58,37,100,58,37,100,10,0,0,110,111,110,101,0,0,0,0,105,0,0,0,101,120,116,101,110,100,101,100,0,0,0,0,116,101,114,109,115,0,0,0,36,64,51,48,0,0,0,0,110,108,0,0,116,101,114,109,0,0,0,0,116,114,97,105,108,101,114,0,45,62,32,36,36,32,61,0,114,98,114,97,99,107,101,116,0,0,0,0,65,112,114,0,110,97,110,0,114,101,109,111,118,101,95,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,0,0,0,0,114,112,97,114,101,110,0,0,111,112,116,95,110,108,0,0,116,111,95,115,121,109,0,0,111,112,116,95,116,101,114,109,115,0,0,0,79,80,95,83,85,80,69,82,9,82,37,100,9,37,100,10,0,0,0,0,100,111,116,95,111,114,95,99,111,108,111,110,0,0,0,0,101,120,116,101,110,100,95,111,98,106,101,99,116,0,0,0,111,112,101,114,97,116,105,111,110,51,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,111,112,101,114,97,116,105,111,110,50,0,0,111,112,101,114,97,116,105,111,110,0,0,0,97,115,115,111,99,0,0,0,97,115,115,111,99,115,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,108,105,116,101,114,97,108,115,0,0,97,115,115,111,99,95,108,105,115,116,0,0,77,97,114,0,111,0,0,0,112,117,98,108,105,99,95,109,101,116,104,111,100,115,0,0,36,64,50,57,0,0,0,0,115,105,110,103,108,101,116,111,110,0,0,0,116,111,95,102,0,0,0,0,111,112,116,95,102,95,98,108,111,99,107,95,97,114,103,0,79,80,95,84,65,73,76,67,65,76,76,9,82,37,100,9,58,37,115,9,37,100,10,0,102,95,98,108,111,99,107,95,97,114,103,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,98,108,107,97,114,103,95,109,97,114,107,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,102,95,114,101,115,116,95,97,114,103,0,0,114,101,115,116,97,114,103,95,109,97,114,107,0,0,0,0,116,111,95,115,116,114,0,0,102,95,111,112,116,97,114,103,0,0,0,0,102,95,98,108,111,99,107,95,111,112,116,97,114,103,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,32,109,101,116,104,111,100,32,102,111,114,32,40,41,46,0,0,0,102,95,98,108,111,99,107,95,111,112,116,0,70,101,98,0,124,105,0,0,112,114,111,116,101,99,116,101,100,95,109,101,116,104,111,100,115,0,0,0,102,95,111,112,116,0,0,0,102,95,97,114,103,0,0,0,116,111,95,105,0,0,0,0,102,95,97,114,103,95,105,116,101,109,0,0,79,80,95,83,69,78,68,66,9,82,37,100,9,58,37,115,9,37,100,10,0,0,0,0,102,95,110,111,114,109,95,97,114,103,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,102,95,98,97,100,95,97,114,103,0,0,0,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,98,105,103,0,0,102,95,97,114,103,115,0,0,102,95,97,114,103,108,105,115,116,0,0,0,36,64,50,56,0,0,0,0,115,117,112,101,114,99,108,97,115,115,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,0,0,98,97,99,107,114,101,102,0,74,97,110,0,116,114,117,110,99,97,116,101,0,0,0,0,112,114,105,118,97,116,101,95,109,101,116,104,111,100,115,0,118,97,114,95,114,101,102,0,118,97,114,95,108,104,115,0,115,117,98,33,0,0,0,0,35,0,0,0,116,111,95,97,0,0,0,0,118,97,114,105,97,98,108,101,0,0,0,0,38,0,0,0,79,80,95,83,69,78,68,9,82,37,100,9,58,37,115,9,37,100,10,0,77,82,66,95,84,84,95,84,82,85,69,0,99,97,110,39,116,32,121,105,101,108,100,32,102,114,111,109,32,114,111,111,116,32,102,105,98,101,114,0,110,117,109,101,114,105,99,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,111,98,106,101,99,116,33,0,0,0,0,99,108,97,115,115,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,115,121,109,98,111,108,115,0,109,107,116,105,109,101,0,0,114,101,99,117,114,115,105,118,101,32,97,114,114,97,121,32,106,111,105,110,0,0,0,0,115,121,109,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,32,40,37,83,32,114,101,113,117,105,114,101,100,32,37,83,32,103,105,118,101,110,41,0,0,60,60,0,0,37,115,32,0,98,97,115,105,99,95,115,121,109,98,111,108,0,0,0,0,102,108,97,103,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,0,124,111,0,0,115,121,109,98,111,108,0,0,91,93,0,0,99,111,115,0,105,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,119,111,114,100,115,0,0,0,78,111,77,101,116,104,111,100,69,114,114,111,114,0,0,0,124,0,0,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,0,104,101,114,101,100,111,99,95,98,111,100,121,0,0,0,0,0,0,0,0,45,105,110,102,0,0,0,0,114,111,117,110,100,0,0,0,111,98,106,101,99,116,95,105,100,0,0,0,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,42,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,105,110,32,37,83,0,0,0,111,111,0,0,111,112,116,95,104,101,114,101,100,111,99,95,98,111,100,105,101,115,0,0,115,117,98,0,104,101,114,101,100,111,99,0,79,80,95,74,77,80,78,79,84,9,82,37,100,9,37,48,51,100,10,0,114,101,103,101,120,112,0,0,120,115,116,114,105,110,103,0,115,117,112,101,114,99,108,97,115,115,0,0,124,83,0,0,64,50,55,0,115,116,114,105,110,103,95,105,110,116,101,114,112,0,0,0,115,116,114,105,110,103,95,114,101,112,0,0,115,116,114,105,110,103,0,0,108,105,116,101,114,97,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,85,84,67,32,0,0,0,0,105,110,102,105,110,105,116,101,63,0,0,0,110,105,108,63,0,0,0,0,111,112,116,95,101,110,115,117,114,101,0,0,101,120,99,95,118,97,114,0,115,112,108,105,116,0,0,0,48,48,48,49,0,0,0,0,101,120,99,95,108,105,115,116,0,0,0,0,79,80,95,74,77,80,73,70,9,82,37,100,9,37,48,51,100,10,0,0,111,112,116,95,114,101,115,99,117,101,0,0,99,97,115,101,115,0,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,101,110,97,98,108,101,0,0,91,46,46,46,93,0,0,0,99,97,115,101,95,98,111,100,121,0,0,0,36,64,50,54,0,0,0,0,36,64,50,53,0,0,0,0,98,114,97,99,101,95,98,108,111,99,107,0,109,101,116,104,111,100,95,99,97,108,108,0,102,111,114,109,97,108,32,97,114,103,117,109,101,110,116,32,99,97,110,110,111,116,32,98,101,32,97,32,99,111,110,115,116,97,110,116,0,0,0,0,37,115,32,37,115,32,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,115,37,100,0,0,102,108,111,111,114,0,0,0,109,101,116,104,111,100,115,0,98,108,111,99,107,95,99,97,108,108,0,0,36,64,50,52,0,0,0,0,115,108,105,99,101,0,0,0,100,111,95,98,108,111,99,107,0,0,0,0,79,80,95,74,77,80,9,9,37,48,51,100,10,0,0,0,108,97,109,98,100,97,95,98,111,100,121,0,102,95,108,97,114,103,108,105,115,116,0,0,33,0,0,0,101,113,108,63,0,0,0,0,98,118,97,114,0,0,0,0,98,118,95,100,101,99,108,115,0,0,0,0,111,112,116,95,98,118,95,100,101,99,108,0,98,108,111,99,107,95,112,97,114,97,109,95,100,101,102,0,111,112,116,95,98,108,111,99,107,95,112,97,114,97,109,0,37,100,0,0,76,79,67,65,76,0,0,0,98,0,0,0,102,105,110,105,116,101,63,0,107,105,110,100,95,111,102,63,0,0,0,0,98,108,111,99,107,95,112,97,114,97,109,0,102,95,109,97,114,103,115,0,115,99,97,110,0,0,0,0,99,97,108,108,0,0,0,0,102,95,109,97,114,103,95,108,105,115,116,0,79,80,95,83,69,84,67,86,9,37,115,9,82,37,100,10,0,0,0,0,102,95,109,97,114,103,0,0,116,111,95,115,121,109,0,0,102,111,114,95,118,97,114,0,105,110,105,116,105,97,108,105,122,101,0,0,61,61,0,0,111,112,116,95,101,108,115,101,0,0,0,0,105,102,95,116,97,105,108,0,112,114,105,109,97,114,121,95,118,97,108,117,101,0,0,0,64,50,51,0,36,64,50,50,0,0,0,0,40,110,117,108,108,41,0,0,85,84,67,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,105,110,116,111,32,37,83,0,0,0,0,99,101,105,108,0,0,0,0,105,115,95,97,63,0,0,0,64,50,49,0,64,50,48,0,114,105,110,100,101,120,0,0,64,49,57,0,79,80,95,71,69,84,67,86,9,82,37,100,9,37,115,10,0,0,0,0,64,49,56,0,64,49,55,0,110,101,119,0,116,111,95,115,0,0,0,0,36,64,49,54,0,0,0,0,115,117,112,101,114,99,108,97,115,115,32,109,105,115,109,97,116,99,104,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,0,0,36,64,49,53,0,0,0,0,36,64,49,52,0,0,0,0,36,64,49,51,0,0,0,0,36,64,49,50,0,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,68,97,116,97,0,0,0,0,70,108,111,97,116,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,115,0,0,36,64,49,49,0,0,0,0,64,49,48,0,114,101,118,101,114,115,101,33,0,0,0,0,36,64,57,0,79,80,95,83,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,36,64,56,0,65,0,0,0,36,64,55,0,67,108,97,115,115,0,0,0,105,110,115,112,101,99,116,0,112,114,105,109,97,114,121,0,109,114,104,115,0,0,0,0,97,114,103,115,0,0,0,0,111,112,116,95,98,108,111,99,107,95,97,114,103,0,0,0,98,108,111,99,107,95,97,114,103,0,0,0,99,97,108,108,0,0,0,0,78,111,116,32,97,32,118,97,108,105,100,32,116,105,109,101,46,0,0,0,116,111,95,104,97,115,104,0,70,105,108,101,0,0,0,0,100,105,118,109,111,100,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,115,101,116,0,0,0,104,97,115,104,0,0,0,0,64,54,0,0,99,111,109,109,97,110,100,95,97,114,103,115,0,0,0,0,114,101,118,101,114,115,101,0,99,97,108,108,95,97,114,103,115,0,0,0,79,80,95,71,69,84,85,80,86,65,82,9,82,37,100,9,37,100,9,37,100,10,0,0,111,112,116,95,99,97,108,108,95,97,114,103,115,0,0,0,111,112,116,95,112,97,114,101,110,95,97,114,103,115,0,0,77,111,100,117,108,101,0,0,117,110,115,104,105,102,116,0,112,97,114,101,110,95,97,114,103,115,0,0,97,114,101,102,95,97,114,103,115,0,0,0,97,114,103,95,118,97,108,117,101,0,0,0,97,114,103,0,114,101,115,119,111,114,100,115,0,0,0,0,98,108,111,99,107,32,103,105,118,101,110,32,116,111,32,121,105,101,108,100,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,82,97,110,103,101,0,0,0,105,110,115,112,101,99,116,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,103,101,116,0,0,0,42,0,0,0,111,112,0,0,36,64,53,0,114,101,112,108,97,99,101,0,117,110,100,101,102,95,108,105,115,116,0,0,79,80,95,83,69,84,73,86,9,37,115,9,82,37,100,10,0,0,0,0,102,115,121,109,0,0,0,0,102,110,97,109,101,0,0,0,79,98,106,101,99,116,0,0,115,108,105,99,101,0,0,0,99,112,97,116,104,0,0,0,99,110,97,109,101,0,0,0,108,104,115,0,115,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,0,0,109,108,104,115,95,110,111,100,101,0,0,0,109,108,104,115,95,112,111,115,116,0,0,0,109,111,100,117,108,101,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,0,0,0,124,105,105,105,105,105,105,105,0,0,0,0,111,110,101,32,104,97,115,104,32,114,101,113,117,105,114,101,100,0,0,0,83,116,114,105,110,103,0,0,116,111,95,115,0,0,0,0,105,110,115,116,97,110,99,101,95,118,97,114,105,97,98,108,101,95,100,101,102,105,110,101,100,63,0,0,111,42,0,0,109,108,104,115,95,108,105,115,116,0,0,0,109,108,104,115,95,105,116,101,109,0,0,0,109,97,116,99,104,0,0,0,109,108,104,115,95,98,97,115,105,99,0,0,79,80,95,71,69,84,73,86,9,82,37,100,9,37,115,10,0,0,0,0,109,108,104,115,95,105,110,110,101,114,0,0,109,108,104,115,0,0,0,0,66,97,115,105,99,79,98,106,101,99,116,0,115,105,122,101,0,0,0,0,99,111,109,109,97,110,100,0,36,64,52,0,99,109,100,95,98,114,97,99,101,95,98,108,111,99,107,0,98,108,111,99,107,95,99,111,109,109,97,110,100,0,0,0,99,111,109,109,97,110,100,95,99,97,108,108,0,0,0,0,99,108,97,115,115,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,109,101,116,104,111,100,32,98,111,100,121,0,67,97,110,110,111,116,32,103,101,116,32,104,97,110,100,108,101,32,118,97,108,117,101,33,0,0,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,99,108,97,115,115,0,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,72,97,115,104,0,0,0,0,116,111,95,102,0,0,0,0,105,110,115,116,97,110,99,101,95,111,102,63,0,0,0,0,125,0,0,0,101,120,112,114,95,118,97,108,117,101,0,0,101,120,112,114,0,0,0,0,105,110,116,101,114,110,0,0,46,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,116,82,69,71,69,88,80,95,66,69,71,0,0,0,0,99,111,109,109,97,110,100,95,97,115,103,110,0,0,0,0,124,111,0,0,112,114,111,99,0,0,0,0,77,82,66,95,84,84,95,70,82,69,69,0,79,80,95,83,69,84,77,67,78,83,84,9,82,37,100,58,58,37,115,9,82,37,100,10,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,36,64,51,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,102,108,111,97,116,33,0,0,115,116,109,116,0,0,0,0,99,111,110,115,116,97,110,116,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,108,111,99,97,108,0,0,0,115,104,105,102,116,0,0,0,115,116,109,116,115,0,0,0,83,116,114,117,99,116,0,0,99,111,110,99,97,116,0,0,78,111,119,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,10,0,0,0,99,111,109,112,115,116,109,116,0,0,0,0,102,108,97,103,32,97,102,116,101,114,32,119,105,100,116,104,0,0,0,0,36,109,114,98,95,105,95,114,97,110,100,95,115,101,101,100,0,0,0,0,98,111,100,121,115,116,109,116,0,0,0,0,115,105,110,0,111,0,0,0,64,50,0,0,101,120,112,101,99,116,101,100,32,82,97,110,103,101,46,0,99,97,108,108,0,0,0,0,110,111,32,98,108,111,99,107,32,103,105,118,101,110,0,0,94,0,0,0,116,111,112,95,115,116,109,116,0,0,0,0,126,0,0,0,82,79,79,84,95,79,66,74,69,67,84,0,84,121,112,101,69,114,114,111,114,0,0,0,78,97,78,0,46,37,100,0,65,114,114,97,121,0,0,0,115,117,99,99,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,0,0,0,61,62,0,0,116,111,112,95,115,116,109,116,115,0,0,0,99,97,110,39,116,32,100,117,112,32,37,83,0,0,0,0,62,0,0,0,111,0,0,0,116,111,112,95,99,111,109,112,115,116,109,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,36,64,49,0,79,80,95,71,69,84,77,67,78,83,84,9,82,37,100,9,82,37,100,58,58,37,115,10,0,0,0,0,112,114,111,103,114,97,109,0,36,97,99,99,101,112,116,0,110,111,0,0,114,105,110,100,101,120,0,0,39,92,110,39,0,0,0,0,39,59,39,0,39,93,39,0,39,41,39,0,39,40,39,0,60,0,0,0,109,114,117,98,121,95,106,115,95,111,98,106,101,99,116,95,104,97,110,100,108,101,0,0,111,0,0,0,96,37,83,39,32,105,115,32,110,111,116,32,97,32,115,116,114,117,99,116,32,109,101,109,98,101,114,0,37,100,0,0,80,114,111,99,0,0,0,0,110,101,120,116,0,0,0,0,105,110,115,112,101,99,116,0,44,32,0,0,39,96,39,0,39,44,39,0,105,110,105,116,105,97,108,105,122,101,0,0,82,73,84,69,0,0,0,0,39,46,39,0,79,80,95,83,69,84,67,79,78,83,84,9,58,37,115,9,82,37,100,10,0,0,0,0,39,91,39,0,39,125,39,0,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,37,83,0,0,0,0,115,116,97,114,116,0,0,0,114,101,118,101,114,115,101,33,0,0,0,0,39,123,39,0,116,76,65,83,84,95,84,79,75,69,78,0,105,100,95,99,111,114,101,95,115,101,116,95,112,111,115,116,101,120,101,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,115,105,110,103,108,101,116,111,110,95,109,101,116,104,111,100,0,105,100,95,99,111,114,101,95,100,101,102,105,110,101,95,109,101,116,104,111,100,0,0,0,62,0,0,0,104,97,110,100,108,101,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,114,101,100,101,102,105,110,105,110,103,32,99,111,110,115,116,97,110,116,32,83,116,114,117,99,116,58,58,37,83,0,0,0,0,0,0,83,67,108,97,115,115,0,0,104,97,115,104,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0])
.concat([123,0,0,0,105,100,95,99,111,114,101,95,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,98,117,103,58,32,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,118,97,114,105,97,98,108,101,95,97,108,105,97,115,0,0,105,110,100,101,120,0,0,0,105,100,95,99,111,114,101,95,115,101,116,95,109,101,116,104,111,100,95,97,108,105,97,115,0,0,0,0,79,80,95,71,69,84,67,79,78,83,84,9,82,37,100,9,58,37,115,10,0,0,0,0,105,100,67,70,85,78,67,0,105,100,73,70,85,78,67,0,99,97,110,110,111,116,32,114,101,109,111,118,101,32,37,83,32,102,111,114,32,37,83,0,114,101,118,101,114,115,101,0,105,100,82,101,115,112,111,110,100,95,116,111,0,0,0,0,105,100,78,85,76,76,0,0,39,126,39,0,39,33,39,0,116,85,77,73,78,85,83,95,78,85,77,0,38,0,0,0,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,33,0,105,110,105,116,105,97,108,105,122,101,0,0,105,100,101,110,116,105,102,105,101,114,32,37,83,32,110,101,101,100,115,32,116,111,32,98,101,32,99,111,110,115,116,97,110,116,0,0,37,42,115,0,105,67,108,97,115,115,0,0,101,113,108,63,0,0,0,0,104,97,115,104,0,0,0,0,123,46,46,46,125,0,0,0,39,37,39,0,39,47,39,0,105,110,99,108,117,100,101,63,0,0,0,0,61,61,61,0,39,42,39,0,79,80,95,83,69,84,71,76,79,66,65,76,9,58,37,115,9,82,37,100,10,0,0,0,39,45,39,0,39,43,39,0,116,111,95,115,0,0,0,0,110,0,0,0,114,101,112,108,97,99,101,0,39,38,39,0,39,94,39,0,39,124,39,0,39,60,39,0,39,62,39,0,94,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,122,111,110,101,0,0,0,0,98,114,111,107,101,110,32,109,101,109,98,101,114,115,0,0,73,110,102,0,67,108,97,115,115,0,0,0,62,62,0,0,101,120,116,101,110,100,0,0,123,125,0,0,39,58,39,0,39,63,39,0,104,97,115,104,0,0,0,0,39,61,39,0,79,80,95,71,69,84,71,76,79,66,65,76,9,82,37,100,9,58,37,115,10,0,0,0,116,76,79,87,69,83,84,0,116,76,73,84,69,82,65,76,95,68,69,76,73,77,0,0,42,0,0,0,112,117,115,104,0,0,0,0,116,72,69,82,69,68,79,67,95,69,78,68,0,0,0,0,115,117,112,101,114,99,108,97,115,115,32,109,117,115,116,32,98,101,32,97,32,67,108,97,115,115,32,40,37,83,32,103,105,118,101,110,41,0,0,0,116,72,69,82,69,68,79,67,95,66,69,71,0,0,0,0,116,76,65,77,66,69,71,0,116,83,84,82,73,78,71,95,68,86,65,82,0,0,0,0,116,88,83,84,82,73,78,71,95,66,69,71,0,0,0,0,124,0,0,0,78,111,32,118,97,108,105,100,32,104,97,110,100,108,101,32,105,115,32,112,114,111,118,105,100,101,100,33,0,0,0,0,121,101,97,114,0,0,0,0,115,116,114,117,99,116,32,115,105,122,101,32,100,105,102,102,101,114,115,0,78,97,78,0,79,98,106,101,99,116,0,0,60,60,0,0,101,113,117,97,108,63,0,0,101,113,108,63,0,0,0,0,116,83,84,82,73,78,71,95,66,69,71,0,116,83,89,77,66,79,76,83,95,66,69,71,0,0,0,0,103,115,117,98,33,0,0,0,116,87,79,82,68,83,95,66,69,71,0,0,79,80,95,76,79,65,68,70,9,82,37,100,10,0,0,0,116,82,69,71,69,88,80,95,66,69,71,0,60,61,62,0,116,83,89,77,66,69,71,0,111,111,0,0,112,111,112,0,116,76,65,77,66,68,65,0,116,65,77,80,69,82,0,0,116,83,84,65,82,0,0,0,116,76,66,82,65,67,69,95,65,82,71,0,116,76,66,82,65,67,69,0,37,0,0,0,105,0,0,0,121,100,97,121,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,46,46,0,0,77,111,100,117,108,101,0,0,94,0,0,0,101,113,108,63,0,0,0,0,116,111,95,115,0,0,0,0,116,76,66,82,65,67,75,0,116,82,80,65,82,69,78,0,103,115,117,98,0,0,0,0,116,76,80,65,82,69,78,95,65,82,71,0,79,80,95,76,79,65,68,84,9,82,37,100,10,0,0,0,116,76,80,65,82,69,78,0,116,65,83,83,79,67,0,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,67,108,97,115,115,0,0,0,0,108,101,110,103,116,104,0,0,116,79,80,95,65,83,71,78,0,0,0,0,116,67,79,76,79,78,51,0,116,67,79,76,79,78,50,0,116,82,83,72,70,84,0,0,116,76,83,72,70,84,0,0,47,0,0,0,111,0,0,0,119,100,97,121,0,0,0,0,99,97,108,108,0,0,0,0,37,37,108,37,99,0,0,0,116,114,117,101,0,0,0,0,124,0,0,0,100,117,112,0,105,110,115,112,101,99,116,0,116,65,83,69,84,0,0,0,116,65,82,69,70,0,0,0,101,113,108,63,0,0,0,0,99,105,105,100,120,0,0,0,116,68,79,84,51,0,0,0,79,80,95,76,79,65,68,83,69,76,70,9,82,37,100,10,0,0,0,0,116,68,79,84,50,0,0,0,116,78,77,65,84,67,72,0,99,97,110,39,116,32,109,97,107,101,32,115,117,98,99,108,97,115,115,32,111,102,32,115,105,110,103,108,101,116,111,110,32,99,108,97,115,115,0,0,108,97,115,116,0,0,0,0,116,77,65,84,67,72,0,0,116,79,82,79,80,0,0,0,116,65,78,68,79,80,0,0,116,76,69,81,0,0,0,0,116,71,69,81,0,0,0,0,42,0,0,0,111,111,0,0,117,116,99,63,0,0,0,0,42,38,0,0,48,66,0,0,102,97,108,115,101,0,0,0,38,0,0,0,99,108,111,110,101,0,0,0,118,97,108,117,101,115,0,0,116,78,69,81,0,0,0,0,116,69,81,81,0,0,0,0,101,109,112,116,121,63,0,0,115,101,116,95,98,97,99,107,116,114,97,99,101,0,0,0,116,69,81,0,79,80,95,76,79,65,68,78,73,76,9,82,37,100,10,0,116,67,77,80,0,0,0,0,116,80,79,87,0,0,0,0,62,0,0,0,106,111,105,110,0,0,0,0,116,85,77,73,78,85,83,0,116,85,80,76,85,83,0,0,116,82,69,71,69,88,80,95,69,78,68,0,116,66,65,67,75,95,82,69,70,0,0,0,116,78,84,72,95,82,69,70,0,0,0,0,45,0,0,0,112,97,114,101,110,116,95,111,98,106,101,99,116,0,0,0,117,115,101,99,0,0,0,0,42,0,0,0,48,98,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,37,83,32,116,111,32,73,110,116,101,103,101,114,32,40,37,83,35,37,83,32,103,105,118,101,115,32,37,83,41,0,0,0,0,126,0,0,0,99,108,97,115,115,0,0,0,118,97,108,117,101,63,0,0,116,83,84,82,73,78,71,95,77,73,68,0,116,83,84,82,73,78,71,95,80,65,82,84,0,0,0,0,100,111,119,110,99,97,115,101,33,0,0,0,108,97,115,116,112,99,0,0,124,111,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,107,101,121,119,111,114,100,95,101,110,100,0,0,0,0,116,83,84,82,73,78,71,0,108,97,115,116,0,0,0,0,105,110,115,112,101,99,116,0,77,82,66,95,84,84,95,70,65,76,83,69,0,0,0,0,79,80,95,76,79,65,68,83,89,77,9,82,37,100,9,58,37,115,10,0,121,105,101,108,100,0,0,0,116,82,69,71,69,88,80,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,33,0,0,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,116,88,83,84,82,73,78,71,0,0,0,0,35,60,67,108,97,115,115,58,0,0,0,0,103,109,0,0,116,67,72,65,82,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,99,111,114,114,117,112,116,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,0,0,0,0,82,101,97,100,105,110,103,32,97,32,116,111,107,101,110,58,32,0,0,0,116,70,76,79,65,84,0,0,109,97,108,102,111,114,109,101,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,32,45,32,92,37,37,83,0,0,105,110,105,116,105,97,108,105,122,101,0,0,37,83,32,111,117,116,32,111,102,32,99,104,97,114,32,114,97,110,103,101,0,0,0,0,116,73,78,84,69,71,69,82,0,0,0,0,84,79,76,69,82,65,78,67,69,0,0,0,114,97,115,115,111,99,0,0,84,121,112,101,69,114,114,111,114,0,0,0,116,76,65,66,69,76,0,0,109,101,116,104,111,100,95,109,105,115,115,105,110,103,0,0,38,0,0,0,116,67,86,65,82,0,0,0,97,114,105,116,121,0,0,0,43,0,0,0,105,42,0,0,116,111,95,102,0,0,0,0,62,0,0,0,110,111,110,32,102,108,111,97,116,32,118,97,108,117,101,0,48,88,0,0,102,124,102,0,116,111,95,105,0,0,0,0,61,61,0,0,95,95,115,101,110,100,95,95,0,0,0,0,115,116,111,114,101,0,0,0,116,67,79,78,83,84,65,78,84,0,0,0,99,97,110,39,116,32,99,108,111,110,101,32,37,83,0,0,116,111,95,104,97,115,104,0,58,0,0,0,116,73,86,65,82,0,0,0,100,111,119,110,99,97,115,101,0,0,0,0,111,0,0,0,116,71,86,65,82,0,0,0,79,80,95,76,79,65,68,73,9,82,37,100,9,37,100,10,0,0,0,0,116,70,73,68,0,0,0,0,116,73,68,69,78,84,73,70,73,69,82,0,58,58,0,0,107,101,121,119,111,114,100,95,95,69,78,67,79,68,73,78,71,95,95,0,105,110,100,101,120,0,0,0,107,101,121,119,111,114,100,95,95,70,73,76,69,95,95,0,99,104,111,112,33,0,0,0,107,101,121,119,111,114,100,95,95,76,73,78,69,95,95,0,107,101,121,119,111,114,100,95,69,78,68,0,107,101,121,119,111,114,100,95,66,69,71,73,78,0,0,0,91,93,61,0,74,115,65,114,114,97,121,0,116,111,95,105,0,0,0,0,61,0,0,0,48,120,0,0,102,105,0,0,98,97,115,101,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,110,111,110,32,115,116,114,105,110,103,32,118,97,108,117,101,0,37,0,0,0,95,95,105,100,95,95,0,0,115,105,122,101,0,0,0,0,107,101,121,119,111,114,100,95,97,108,105,97,115,0,0,0,109,111,100,105,102,105,101,114,95,114,101,115,99,117,101,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,83,99,114,105,112,116,69,114,114,111,114,0,41,0,0,0,109,111,100,105,102,105,101,114,95,117,110,116,105,108,0,0,79,80,95,76,79,65,68,76,9,82,37,100,9,76,40,37,100,41,10,0,109,111,100,105,102,105,101,114,95,119,104,105,108,101,0,0,109,111,100,105,102,105,101,114,95,117,110,108,101,115,115,0,95,95,99,108,97,115,115,112,97,116,104,95,95,0,0,0,71,67,0,0,109,111,100,105,102,105,101,114,95,105,102,0,102,105,114,115,116,0,0,0,107,101,121,119,111,114,100,95,110,111,116,0,107,101,121,119,111,114,100,95,111,114,0,0,107,101,121,119,111,114,100,95,97,110,100,0,107,101,121,119,111,114,100,95,102,97,108,115,101,0,0,0,45,64,0,0,105,110,118,111,107,101,95,105,110,116,101,114,110,97,108,0,115,101,99,0,32,0,0,0,48,0,0,0,102,102,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,42,0,0,0,61,61,61,0,115,104,105,102,116,0,0,0,107,101,121,119,111,114,100,95,116,114,117,101,0,0,0,0,119,97,114,110,105,110,103,58,32,0,0,0,107,101,121,119,111,114,100,95,110,105,108,0,99,104,111,112,0,0,0,0,32,40,0,0,107,101,121,119,111,114,100,95,115,101,108,102,0,0,0,0,79,80,95,77,79,86,69,9,82,37,100,9,82,37,100,10,0,0,0,0,107,101,121,119,111,114,100,95,115,117,112,101,114,0,0,0,107,101,121,119,111,114,100,95,121,105,101,108,100,0,0,0,124,111,0,0,107,101,121,119,111,114,100,95,114,101,116,117,114,110,0,0,101,109,112,116,121,63,0,0,107,101,121,119,111,114,100,95,100,111,95,76,65,77,66,68,65,0,0,0,107,101,121,119,111,114,100,95,100,111,95,98,108,111,99,107,0,0,0,0,107,101,121,119,111,114,100,95,100,111,95,99,111,110,100,0,107,101,121,119,111,114,100,95,100,111,0,0,43,64,0,0,74,115,70,117,110,99,116,105,111,110,0,0,109,111,110,116,104,0,0,0,44,32,0,0,105,110,118,97,108,105,100,32,109,98,115,116,114,105,110,103,32,115,101,113,117,101,110,99,101,0,0,0,102,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,73,110,116,101,103,101,114,0,0,45,0,0,0,33,61,0,0,114,101,112,108,97,99,101,0,107,101,121,119,111,114,100,95,105,110,0,0,107,101,121,119,111,114,100,95,114,101,116,114,121,0,0,0,99,104,111,109,112,33,0,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,58,32,0,0,107,101,121,119,111,114,100,95,114,101,100,111,0,0,0,0,79,80,95,78,79,80,10,0,107,101,121,119,111,114,100,95,110,101,120,116,0,0,0,0,107,101,121,119,111,114,100,95,98,114,101,97,107,0,0,0,42,38,0,0,107,101,121,119,111,114,100,95,102,111,114,0,105,100,50,110,97,109,101,0,100,101,108,101,116,101,95,97,116,0,0,0,107,101,121,119,111,114,100,95,117,110,116,105,108,0,0,0,107,101,121,119,111,114,100,95,119,104,105,108,101,0,0,0,107,101,121,119,111,114,100,95,119,104,101,110,0,0,0,0,107,101,121,119,111,114,100,95,99,97,115,101,0,0,0,0,42,42,0,0,99,114,101,97,116,101,0,0,109,111,110,0,58,46,46,46,62,0,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,0,0,0,101,114,102,99,0,0,0,0,101,113,108,63,0,0,0,0,43,0,0,0,61,61,0,0,109,101,109,98,101,114,63,0,107,101,121,119,111,114,100,95,101,108,115,101,0,0,0,0,107,101,121,119,111,114,100,95,101,108,115,105,102,0,0,0,99,104,111,109,112,0,0,0,58,0,0,0,107,101,121,119,111,114,100,95,116,104,101,110,0,0,0,0,37,48,51,100,32,0,0,0,107,101,121,119,111,114,100,95,117,110,108,101,115,115,0,0,107,101,121,119,111,114,100,95,105,102,0,0,117,110,100,101,102,105,110,101,100,32,109,101,116,104,111,100,32,39,37,83,39,32,102,111,114,32,99,108,97,115,115,32,37,83,0,0,107,101,121,119,111,114,100,95,101,110,100,0,99,111,110,99,97,116,0,0,84,121,112,101,69,114,114,111,114,0,0,0,107,101,121,119,111,114,100,95,101,110,115,117,114,101,0,0,107,101,121,119,111,114,100,95,114,101,115,99,117,101,0,0,107,101,121,119,111,114,100,95,98,101,103,105,110,0,0,0,107,101,121,119,111,114,100,95,117,110,100,101,102,0,0,0,99,111,117,110,116,95,111,98,106,101,99,116,115,0,0,0,91,93,61,0,62,62,0,0,109,105,110,0,35,60,115,116,114,117,99,116,32,0,0,0,37,99,32,114,101,113,117,105,114,101,115,32,97,32,99,104,97,114,97,99,116,101,114,0,101,114,102,0,116,111,95,102,0,0,0,0,70,105,120,110,117,109,0,0,115,105,110,103,108,101,116,111,110,95,99,108,97,115,115,0,108,101,110,103,116,104,0,0,107,101,121,119,111,114,100,95,100,101,102,0,107,101,121,119,111,114,100,95,109,111,100,117,108,101,0,0,99,97,112,105,116,97,108,105,122,101,33,0,108,105,110,101,0,0,0,0,107,101,121,119,111,114,100,95,99,108,97,115,115,0,0,0,105,114,101,112,32,37,100,32,110,114,101,103,115,61,37,100,32,110,108,111,99,97,108,115,61,37,100,32,112,111,111,108,115,61,37,100,32,115,121,109,115,61,37,100,10,0,0,0,36,117,110,100,101,102,105,110,101,100,0,0,111,0,0,0,101,114,114,111,114,0,0,0,99,97,110,39,116,32,100,101,102,105,110,101,32,115,105,110,103,108,101,116,111,110,0,0,36,101,110,100,0,0,0,0,99,108,101,97,114,0,0,0,68,101,108,101,116,105,110,103,0,0,0,0,108,105,110,101,32,37,100,58,37,100,58,32,37,115,10,0,37,115,58,37,100,58,37,100,58,32,37,115,10,0,0,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,98,97,99,107,114,101,102,95,101,114,114,111,114,40,41,32,58,32,110,61,62,99,97,114,32,61,61,32,37,100,0,0,0,0,79,98,106,101,99,116,83,112,97,99,101,0,91,93,0,0,60,60,0,0,109,100,97,121,0,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,117,99,116,0,37,0,0,0,104,121,112,111,116,0,0,0,98,97,100,32,118,97,108,117,101,32,102,111,114,32,114,97,110,103,101,0,70,108,111,97,116,0,0,0,116,111,95,105,110,116,0,0,114,97,105,115,101,0,0,0,107,101,121,115,0,0,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,99,0,0,99,97,110,39,116,32,115,101,116,32,118,97,114,105,97,98,108,101,32,36,37,100,0,0,99,97,112,105,116,97,108,105,122,101,0,0,102,105,108,101,0,0,0,0,109,0,0,0,116,111,111,32,99,111,109,112,108,101,120,32,101,120,112,114,101,115,115,105,111,110,0,0,120,0,0,0,105,0,0,0,109,111,100,117,108,101,95,101,118,97,108,47,99,108,97,115,115,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,115,0,0,0,91,93,61,0,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,111,112,116,105,111,110,37,115,32,45,32,37,115,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,99,97,110,39,116,32,102,105,110,100,32,115,116,114,105,110,103,32,34,37,115,34,32,97,110,121,119,104,101,114,101,32,98,101,102,111,114,101,32,69,79,70,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,104,101,114,101,32,100,111,99,117,109,101,110,116,32,105,100,101,110,116,105,102,105,101,114,0,0,0,77,82,66,95,84,84,95,68,65,84,65,0,115,101,116,0,33,61,0,0,108,111,99,97,108,116,105,109,101,0,0,0,101,113,108,63,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,99,104,97,114,97,99,116,101,114,32,45,32,37,0,0,0,0,108,100,101,120,112,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,99,97,110,39,116,32,99,111,110,118,101,114,116,32,110,105,108,32,105,110,116,111,32,70,108,111,97,116,0,0,0,0,116,111,95,105,0,0,0,0,105,116,101,114,97,116,111,114,63,0,0,0,107,101,121,63,0,0,0,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,115,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,40,116,114,117,110,99,97,116,101,100,41,0,91,93,0,0,109,101,115,103,0,0,0,0,97,109,98,105,103,117,111,117,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,59,32,112,117,116,32,112,97,114,101,110,116,104,101,115,101,115,32,111,114,32,101,118,101,110,32,115,112,97,99,101,115,0,0,0,0,98,117,103,58,32,100,105,115,112,97,116,99,104,32,111,110,32,110,111,110,32,74,77,80,32,111,112,10,0,0,0,0,119,104,105,108,101,0,0,0,99,108,97,115,115,0,0,0,78,111,116,73,109,112,108,101,109,101,110,116,101,100,69,114,114,111,114,0,66,69,71,73,78,0,0,0,60,60,0,0,97,108,105,97,115,0,0,0,69,78,68,0,95,95,69,78,67,79,68,73,78,71,95,95,0,0,0,0,95,95,70,73,76,69,95,95,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,77,82,66,95,84,84,95,69,78,86,0,0,103,101,116,0,60,61,0,0,104,111,117,114,0,0,0,0,116,111,95,115,0,0,0,0,112,114,101,99,105,115,105,111,110,32,116,111,111,32,98,105,103,0,0,0,102,114,101,120,112,0,0,0,60,61,62,0,116,111,95,105,110,116,0,0,110,101,119,0,103,108,111,98,97,108,95,118,97,114,105,97,98,108,101,115,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,95,95,76,73,78,69,95,95,0,0,0,0,98,101,103,105,110,0,0,0,61,126,0,0,83,121,110,116,97,120,69,114,114,111,114,0,109,111,100,117,108,101,0,0,116,111,111,32,109,97,110,121,32,115,121,109,98,111,108,115,32,40,109,97,120,32,50,53,54,41,0,0,115,117,112,101,114,0,0,0,110,101,120,116,0,0,0,0,124,83,38,0,114,101,100,111,0,0,0,0,43,0,0,0,99,97,115,101,0,0,0,0,105,102,0,0,114,101,116,114,121,0,0,0,119,104,101,110,0,0,0,0,109,97,105,110,0,0,0,0,77,82,66,95,84,84,95,70,73,76,69,0,105,110,105,116,105,97,108,105,122,101,0,0,62,61,0,0,103,109,116,105,109,101,0,0,105,110,115,112,101,99,116,0,112,114,101,99,105,115,105,111,110,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,99,98,114,116,0,0,0,0,46,46,46,0,99,108,97,115,115,32,111,114,32,109,111,100,117,108,101,32,114,101,113,117,105,114,101,100,0,0,0,0,73,110,116,101,103,101,114,0,98,108,111,99,107,95,103,105,118,101,110,63,0,0,0,0,95,95,105,110,105,116,95,99,111,114,101,0,105,110,0,0,111,114,0,0,61,61,0,0,40,117,110,107,110,111,119,110,41,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,44,32,117,110,101,120,112,101,99,116,101,100,32,36,101,110,100,0,0,0,83,99,114,105,112,116,69,114,114,111,114,0,117,110,100,101,102,0,0,0,102,105,114,115,116,0,0,0,116,111,95,115,0,0,0,0,70,82,69,69,0,0,0,0,112,111,111,108,32,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,0,0,114,101,115,117,109,101,0,0,102,111,114,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,116,114,105,110,103,33,0,121,105,101,108,100,0,0,0,99,121,99,108,105,99,32,105,110,99,108,117,100,101,32,100,101,116,101,99,116,101,100,0,97,116,0,0,100,111,0,0,91,93,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,115,116,114,117,99,116,0,0,0,0,115,119,97,112,99,97,115,101,33,0,0,0,69,110,116,101,114,105,110,103,32,115,116,97,116,101,32,37,100,10,0,0,97,110,100,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,0,0,0,102,111,114,109,97,116,0,0,82,97,110,100,111,109,0,0,82,97,110,103,101,69,114,114,111,114,0,0,100,101,102,0,69,0,0,0,97,116,0,0,111,0,0,0,114,101,116,117,114,110,0,0,110,101,103,97,116,105,118,101,32,97,114,103,99,32,102,111,114,32,102,117,110,99,97,108,108,32,40,37,83,41,0,0,110,101,119,0,117,110,108,101,115,115,0,0,77,82,66,95,84,84,95,69,88,67,69,80,84,73,79,78,0,0,0,0,74,115,79,98,106,101,99,116,0,0,0,0,33,126,0,0,103,109,116,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,84,121,112,101,69,114,114,111,114,0,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,97,109,101,100,0,115,113,114,116,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,62,0,0,0,117,110,116,105,108,0,0,0,60,61,62,0,75,101,114,110,101,108,0,0,105,110,99,108,117,100,101,63,0,0,0,0,105,110,105,116,105,97,108,105,122,101,95,99,111,112,121,0,84,121,112,101,69,114,114,111,114,0,0,0,72,97,115,104,0,0,0,0,45,60,0,0,116,114,117,101,0,0,0,0,60,61,62,0,83,116,97,110,100,97,114,100,69,114,114,111,114,0,0,0,114,101,115,99,117,101,0,0,117,110,107,110,111,119,110,32,108,104,115,32,37,100,10,0,101,108,115,105,102,0,0,0,115,101,108,102,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,114,32,37,83,0,0,0,102,97,108,115,101,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,110,111,116,0,42,0,0,0,116,104,101,110,0,0,0,0,101,110,100,0,101,110,115,117,114,101,0,0,77,82,66,95,84,84,95,82,65,78,71,69,0,0,0,0,103,108,111,98,97,108,0,0,61,126,0,0,103,101,116,117,116,99,0,0,105,110,105,116,105,97,108,105,122,101,0,0,117,110,110,117,109,98,101,114,101,100,40,37,83,41,32,109,105,120,101,100,32,119,105,116,104,32,110,117,109,98,101,114,101,100,0,0,108,111,103,49,48,0,0,0,101,113,108,63,0,0,0,0,58,0,0,0,97,98,115,0,114,101,115,112,111,110,100,95,116,111,95,109,105,115,115,105,110,103,63,0,104,97,115,95,118,97,108,117,101,63,0,0,110,105,108,0,101,108,115,101,0,0,0,0,105,110,115,112,101,99,116,0,69,78,68,0,0,0,0,0,105,110,115,112,101,99,116,0,98,114,101,97,107,0,0,0,99,97,110,110,111,116,32,115,101,116,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,0,0,0,0,101,97,99,104,0,0,0,0,95,95,69,78,68,95,95,0,73,110,118,97,108,105,100,32,99,104,97,114,32,96,92,120,37,48,50,88,39,32,105,110,32,101,120,112,114,101,115,115,105,111,110,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,96,64,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,116,111,95,97,114,121,0,0,96,64,37,99,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,97,115,32,97,110,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,110,97,109,101,0,0,0,105,110,99,111,109,112,108,101,116,101,32,99,108,97,115,115,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,0,116,114,97,99,101,58,10,0,105,110,99,111,109,112,108,101,116,101,32,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,108,105,110,101,32,37,100,58,32,37,115,10,0,0,0,0,105,110,99,111,109,112,108,101,116,101,32,103,108,111,98,97,108,32,118,97,114,105,97,98,108,101,32,115,121,110,116,97,120,0,0,0,77,82,66,95,84,84,95,83,84,82,73,78,71,0,0,0,119,105,110,100,111,119,0,0,61,61,61,0,103,101,116,108,111,99,97,108,0,0,0,0,109,101,109,98,101,114,115,0,97,108,108,95,115,121,109,98,111,108,115,0,118,97,108,32,116,111,111,32,98,105,103,0,108,111,103,50,0,0,0,0,105,110,115,112,101,99,116,0,35,60,0,0,113,117,111,0,37,83,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,0,0,104,97,115,95,107,101,121,63,0,0,0,0,117,110,116,101,114,109,105,110,97,116,101,100,32,113,117,111,116,101,100,32,115,116,114,105,110,103,32,109,101,101,116,115,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,78,97,109,101,69,114,114,111,114,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,111,102,32,37,115,116,114,105,110,103,0,108,101,110,103,116,104,0,0,82,97,110,103,101,0,0,0,109,101,115,115,97,103,101,0,102,108,111,97,116,32,37,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,117,110,101,120,112,101,99,116,101,100,32,98,114,101,97,107,0,0,0,0,99,111,114,114,117,112,116,101,100,32,102,108,111,97,116,32,118,97,108,117,101,32,37,115,0,0,0,0,108,97,109,98,100,97,63,0,116,114,97,105,108,105,110,103,32,96,37,99,39,32,105,110,32,110,117,109,98,101,114,0,105,110,115,112,101,99,116,0,48,0,0,0,65,114,114,97,121,0,0,0,73,110,118,97,108,105,100,32,111,99,116,97,108,32,100,105,103,105,116,0,110,117,109,101,114,105,99,32,108,105,116,101,114,97,108,32,119,105,116,104,111,117,116,32,100,105,103,105,116,115,0,0,124,72,0,0,110,111,32,46,60,100,105,103,105,116,62,32,102,108,111,97,116,105,110,103,32,108,105,116,101,114,97,108,32,97,110,121,109,111,114,101,59,32,112,117,116,32,48,32,98,101,102,111,114,101,32,100,111,116,0,0,118,97,108,117,101,115,95,97,116,0,0,0,124,124,0,0,77,82,66,95,84,84,95,72,65,83,72,0,103,101,116,95,114,111,111,116,95,111,98,106,101,99,116,0,61,61,0,0,103,101,116,103,109,0,0,0,91,93,61,0,107,101,121,37,83,32,110,111,116,32,102,111,117,110,100,0,108,111,103,0,116,111,95,115,0,0,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,37,83,32,40,37,83,32,103,105,118,101,110,41,0,0,47,0,0,0,105,110,115,116,97,110,99,101,32,118,97,114,105,97,98,108,101,32,37,83,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,101,109,112,116,121,63,0,0,96,38,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,70,105,98,101,114,0,0,0,38,38,0,0,115,105,122,101,0,0,0,0,109,114,98,95,114,101,97,108,108,111,99,0,116,111,95,115,0,0,0,0,101,118,97,108,0,0,0,0,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,59,32,117,115,101,32,63,92,37,99,0,0,109,97,108,102,111,114,109,101,100,32,114,101,97,100,105,110,116,32,105,110,112,117,116,0,105,110,99,111,109,112,108,101,116,101,32,99,104,97,114,97,99,116,101,114,32,115,121,110,116,97,120,0,10,61,101,110,100,10,0,0,116,111,95,105,110,116,0,0,98,101,103,105,110,10,0,0,110,101,103,97,116,105,118,101,32,97,114,114,97,121,32,115,105,122,101,0,96,42,39,32,105,110,116,101,114,112,114,101,116,101,100,32,97,115,32,97,114,103,117,109,101,110,116,32,112,114,101,102,105,120,0,0,61,61,61,0,83,99,114,105,112,116,69,114,114,111,114,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,83,121,110,116,97,120,69,114,114,111,114,0,77,82,66,95,84,84,95,65,82,82,65,89,0,0,0,0,77,114,117,98,121,74,115,0,60,61,62,0,100,115,116,63,0,0,0,0,91,93,0,0,75,101,121,69,114,114,111,114,0,0,0,0,101,120,112,0,109,101,109,98,101,114,63,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,42,42,0,0,108,97,115,116,112,99,0,0,95,95,100,101,108,101,116,101,0,0,0,0,108,105,110,101,32,37,100,58,32,37,115,10,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,69,110,117,109,101,114,97,98,108,101,0,0,67,111,109,112,97,114,97,98,108,101,0,0,110,111,100,101,32,116,121,112,101,58,32,37,100,32,40,48,120,37,120,41,10,0,0,0,98,121,116,101,115,105,122,101,0,0,0,0,61,61,0,0,78,79,68,69,95,72,69,82,69,68,79,67,58,10,0,0,105,110,116,101,114,110,0,0,78,79,68,69,95,80,79,83,84,69,88,69,58,10,0,0,78,79,68,69,95,83,68,69,70,58,10,0,73,110,116,101,103,101,114,0,37,115,10,0,124,105,0,0,95,95,111,117,116,101,114,95,95,0,0,0,78,79,68,69,95,68,69,70,58,10,0,0,78,79,68,69,95,83,67,76,65,83,83,58,10,0,0,0,78,79,68,69,95,77,79,68,85,76,69,58,10,0,0,0,115,117,112,101,114,58,10,0,77,82,66,95,84,84,95,80,82,79,67,0,69,114,114,111,114,32,111,99,99,117,114,115,32,119,104,101,110,32,108,111,99,97,116,105,110,103,32,116,104,101,32,102,117,110,99,116,105,111,110,32,116,111,32,99,97,108,108,33,0,0,0,0,84,105,109,101,0,0,0,0,99,108,97,115,115,47,109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,32,98,101,32,67,79,78,83,84,65,78,84,0,0,100,97,121,0,61,61,0,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,110,117,109,98,101,114,101,100,0,0,97,116,97,110,104,0,0,0,108,97,115,116,0,0,0,0,83,121,109,98,111,108,0,0,45,64,0,0,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,61,0,0,0,58,37,115,10,0,0,0,0,78,79,68,69,95,67,76,65,83,83,58,10,0,0,0,0,43,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,58,10,0,0,117,110,100,101,102,95,109,101,116,104,111,100,0,0,0,0,32,37,115,0,78,79,68,69,95,85,78,68,69,70,0,0,97,0,0,0,102,108,111,97,116,32,116,111,111,32,98,105,103,32,102,111,114,32,105,110,116,0,0,0,95,95,109,101,109,98,101,114,115,95,95,0,78,79,68,69,95,65,76,73,65,83,32,37,115,32,37,115,58,10,0,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,32,102,111,114,32,49,115,116,32,97,114,103,117,109,101,110,116,0,0,0,0,78,79,68,69,95,70,65,76,83,69,10,0,78,79,68,69,95,84,82,85,69,10,0,0,100,117,109,112,0,0,0,0,78,79,68,69,95,78,73,76,10,0,0,0,78,79,68,69,95,83,69,76,70,10,0,0,77,82,66,95,84,84,95,83,67,76,65,83,83,0,0,0,99,97,108,108,95,112,114,111,99,0,0,0,100,121,110,97,109,105,99,32,99,111,110,115,116,97,110,116,32,97,115,115,105,103,110,109,101,110,116,0,99,116,105,109,101,0,0,0,110,101,119,0,110,97,109,101,100,37,83,32,97,102,116,101,114,32,117,110,110,117,109,98,101,114,101,100,40,37,83,41,0,0,0,0,97,99,111,115,104,0,0,0,115,116,97,99,107,32,108,101,118,101,108,32,116,111,111,32,100,101,101,112,46,32,40,108,105,109,105,116,61,40,48,120,52,48,48,48,48,32,45,32,49,50,56,41,41,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,70,105,120,110,117,109,0,0,43,64,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,100,101,102,97,117,108,116,95,112,114,111,99,0,0,0,0,78,79,68,69,95,83,89,77,32,58,37,115,10,0,0,0,111,112,116,58,32,37,115,10,0,0,0,0,67,111,109,112,97,114,97,98,108,101,0,0,97,114,101,110,97,32,111,118,101,114,102,108,111,119,32,101,114,114,111,114,0,0,0,0,116,97,105,108,58,32,37,115,10,0,0,0,69,120,99,101,112,116,105,111,110,0,0,0,83,116,97,114,116,105,110,103,32,112,97,114,115,101,10,0,97,108,105,97,115,95,109,101,116,104,111,100,0,0,0,0,42,0,0,0,78,79,68,69,95,68,82,69,71,88,10,0,75,101,114,110,101,108,0,0,78,79,68,69,95,82,69,71,88,32,47,37,115,47,37,115,10,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,78,79,68,69,95,68,88,83,84,82,10,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,78,79,68,69,95,88,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,114,97,110,100,0,0,0,0,78,79,68,69,95,68,83,84,82,10,0,0,111,0,0,0,78,79,68,69,95,83,84,82,32,34,37,115,34,32,108,101,110,32,37,100,10,0,0,0,73,110,116,101,103,101,114,0,78,79,68,69,95,78,69,71,65,84,69,10,0,0,0,0,77,82,66,95,84,84,95,73,67,76,65,83,83,0,0,0,70,97,105,108,101,100,32,116,111,32,99,111,110,118,101,114,116,32,115,121,109,98,111,108,32,116,111,32,115,116,114,105,110,103,33,0,97,115,99,116,105,109,101,0,33,0,0,0,111,111,0,0,110,97,109,101,37,83,32,97,102,116,101,114,32,60,37,83,62,0,0,0,97,115,105,110,104,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,0,0,105,110,99,108,117,100,101,63,0,0,0,0,110,105,108,0,67,111,109,112,97,114,97,98,108,101,0,0,124,111,111,0,100,101,102,97,117,108,116,61,0,0,0,0,78,79,68,69,95,70,76,79,65,84,32,37,115,10,0,0,78,79,68,69,95,73,78,84,32,37,115,32,98,97,115,101,32,37,100,10,0,0,0,0,34,0,0,0,105,0,0,0,78,79,68,69,95,66,76,79,67,75,95,65,82,71,58,10,0,0,0,0,99,111,109,112,105,108,101,0,77,97,116,104,0,0,0,0,78,79,68,69,95,65,82,71,32,37,115,10,0,0,0,0,78,79,68,69,95,78,84,72,95,82,69,70,58,32,36,37,100,10,0,0,116,111,95,102,0,0,0,0,78,79,68,69,95,66,65,67,75,95,82,69,70,58,32,36,37,99,10,0,101,120,112,101,99,116,101,100,32,70,105,120,110,117,109,0,116,114,121,95,99,111,110,118,101,114,116,0,78,79,68,69,95,77,65,84,67,72,58,10,0,0,0,0,78,79,68,69,95,67,79,78,83,84,32,37,115,10,0,0,78,79,68,69,95,67,86,65,82,32,37,115,10,0,0,0,78,79,68,69,95,73,86,65,82,32,37,115,10,0,0,0,62,0,0,0,77,82,66,95,84,84,95,77,79,68,85,76,69,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,102,114,111,109,32,67,32,100,101,102,105,110,101,100,32,109,101,116,104,111,100,0,116,111,95,115,0,0,0,0,105,110,115,112,101,99,116,0,99,111,110,115,116,97,110,116,32,114,101,45,97,115,115,105,103,110,109,101,110,116,0,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,97,102,116,101,114,32,112,114,101,99,105,115,105,111,110,0,0,0,36,109,114,98,95,103,95,114,97,110,100,95,115,101,101,100,0,0,0,0,116,97,110,104,0,0,0,0,39,37,83,39,58,32,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,37,83,41,0,102,105,114,115,116,0,0,0,37,83,32,99,97,110,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,37,83,32,98,121,32,35,37,83,0,78,79,68,69,95,71,86,65,82,32,37,115,10,0,0,0,82,97,110,103,101,0,0,0,78,117,109,101,114,105,99,0,61,0,0,0,124,98,0,0,100,101,102,97,117,108,116,0,97,114,103,117,109,101,110,116,32,116,111,111,32,98,105,103,0,0,0,0,78,79,68,69,95,76,86,65,82,32,37,115,10,0,0,0,110,101,103,97,116,105,118,101,32,115,116,114,105,110,103,32,115,105,122,101,32,40,111,114,32,115,105,122,101,32,116,111,111,32,98,105,103,41,0,0,98,0,0,0,78,79,68,69,95,82,69,84,82,89,10,0,82,101,103,101,120,112,0,0,78,79,68,69,95,82,69,68,79,10,0,0,78,79,68,69,95,78,69,88,84,58,10,0,70,108,111,97,116,0,0,0,78,79,68,69,95,66,82,69,65,75,58,10,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,78,79,68,69,95,89,73,69,76,68,58,10,0,0,0,0,78,79,68,69,95,82,69,84,85,82,78,58,10,0,0,0,78,79,68,69,95,90,83,85,80,69,82,10,0,0,0,0,61,61,0,0,78,79,68,69,95,83,85,80,69,82,58,10,0,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,32,40,108,97,109,98,100,97,41,0,0,0,77,82,66,95,84,84,95,67,76,65,83,83,0,0,0,0,116,114,105,101,100,32,116,111,32,99,114,101,97,116,101,32,70,105,98,101,114,32,111,98,106,101,99,116,32,119,105,116,104,111,117,116,32,97,32,98,108,111,99,107,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,115,121,109,98,111,108,33,0,116,111,95,115,0,0,0,0,91,93,0,0,111,102,102,115,101,116,32,37,83,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,115,116,114,117,99,116,40,115,105,122,101,58,37,83,41,0,119,105,100,116,104,32,103,105,118,101,110,32,116,119,105,99,101,0,0,0,109,116,95,115,116,97,116,101,32,103,101,116,32,102,114,111,109,32,109,114,98,95,105,118,95,103,101,116,32,102,97,105,108,101,100,0,99,111,115,104,0,0,0,0,76,111,99,97,108,74,117,109,112,69,114,114,111,114,0,0,101,120,99,108,117,100,101,95,101,110,100,63,0,0,0,0,84,121,112,101,69,114,114,111,114,0,0,0,111,112,61,39,37,115,39,32,40,37,100,41,10,0,0,0,105,110,118,97,108,105,100,32,114,97,100,105,120,32,37,83,0,0,0,0,44,32,0,0,110,111,0,0,99,108,101,97,114,0,0,0,116,111,95,115,0,0,0,0,78,79,68,69,95,79,80,95,65,83,71,78,58,10,0,0,115,116,114,105,110,103,32,102,111,114,32,70,108,111,97,116,32,99,111,110,116,97,105,110,115,32,110,117,108,108,32,98,121,116,101,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,0,0,0,99,105,105,100,120,0,0,0,83,121,110,116,97,120,69,114,114,111,114,0,101,120,99,101,112,116,105,111,110,32,111,98,106,101,99,116,32,101,120,112,101,99,116,101])
.concat([100,0,0,0,40,101,109,112,116,121,41,10,0,0,0,0,99,111,118,101,114,63,0,0,115,111,117,114,99,101,95,108,111,99,97,116,105,111,110,0,84,79,84,65,76,0,0,0,42,0,0,0,96,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,109,108,104,115,58,10,0,0,115,0,0,0,71,105,118,101,110,32,116,121,112,101,32,37,100,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,74,97,118,97,83,99,114,105,112,116,33,10,0,0,119,114,111,110,103,32,97,114,103,117,109,101,110,116,32,116,121,112,101,32,37,83,32,40,101,120,112,101,99,116,101,100,32,37,83,41,0,0,0,0,78,79,68,69,95,77,65,83,71,78,58,10,0,0,0,0,83,116,114,105,110,103,32,99,97,110,39,116,32,98,101,32,99,111,101,114,99,101,100,32,105,110,116,111,32,70,108,111,97,116,0,0,67,111,109,112,97,114,97,98,108,101,0,0,114,104,115,58,10,0,0,0,105,42,0,0,84,121,112,101,69,114,114,111,114,0,0,0,82,97,110,103,101,69,114,114,111,114,0,0,103,101,116,98,121,116,101,0,83,116,97,99,107,32,115,105,122,101,32,105,110,99,114,101,97,115,101,100,32,116,111,32,37,108,117,10,0,0,0,0,108,104,115,58,10,0,0,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,115,112,114,105,110,116,102,0,115,114,97,110,100,0,0,0,95,95,112,114,105,110,116,115,116,114,95,95,0,0,0,0,99,104,114,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,102,108,111,97,116,40,37,83,41,0,0,0,0,78,79,68,69,95,65,83,71,78,58,10,0,80,73,0,0,97,115,115,111,99,0,0,0,111,111,124,98,0,0,0,0,78,79,68,69,95,83,80,76,65,84,58,10,0,0,0,0,84,111,111,32,108,111,110,103,32,97,114,103,117,109,101,110,116,115,46,32,40,108,105,109,105,116,61,49,54,41,0,0,78,105,108,67,108,97,115,115,0,0,0,0,118,97,108,117,101,58,10,0,58,0,0,0,77,82,66,95,84,84,95,79,66,74,69,67,84,0,0,0,38,0,0,0,116,111,74,115,79,98,106,101,99,116,0,0,45,0,0,0,69,78,68,32,110,111,116,32,115,117,112,111,114,116,101,100,0,0,0,0,110,111,32,109,101,109,98,101,114,32,39,37,83,39,32,105,110,32,115,116,114,117,99,116,0,0,0,0,84,111,111,32,108,97,114,103,101,32,109,97,120,95,100,105,103,105,116,46,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,32,45,32,37,83,36,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,115,105,110,104,0,0,0,0,79,80,95,68,69,66,85,71,32,37,100,32,37,100,32,37,100,10,0,0,101,97,99,104,0,0,0,0,73,110,116,101,103,101,114,0,65,114,103,117,109,101,110,116,69,114,114,111,114,0,0,0,32,0,0,0,110,0,0,0,91,93,61,0,107,101,121,58,10,0,0,0,95,95,97,116,116,97,99,104,101,100,95,95,0,0,0,0,78,79,68,69,95,72,65,83,72,58,10,0,99,97,108,108,0,0,0,0,105,110,105,116,105,97,108,105,122,101,0,0,110,111,116,32,97,32,112,114,111,99,0,0,103,101,110,101,114,97,116,105,111,110,97,108,95,109,111,100,101,61,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,40,37,83,32,102,111,114,32,48,46,46,51,41,0,78,79,68,69,95,65,82,82,65,89,58,10,0,0,0,0,75,101,114,110,101,108,0,0,78,79,68,69,95,67,79,76,79,78,51,58,10,0,0,0,116,111,95,115,0,0,0,0,58,58,37,115,10,0,0,0,83,116,114,105,110,103,32,99,111,110,116,97,105,110,115,32,78,85,76,0,78,79,68,69,95,67,79,76,79,78,50,58,10,0,0,0,105,110,100,101,120,32,105,115,32,111,117,116,32,111,102,32,97,114,114,97,121,0,0,0,78,79,68,69,95,68,79,84,51,58,10,0,105,110,118,97,108,105,100,32,115,116,114,105,110,103,32,102,111,114,32,110,117,109,98,101,114,40,37,83,41,0,0,0,78,79,68,69,95,68,79,84,50,58,10,0,98,108,111,99,107,58,10,0,97,114,103,115,58,10,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,32,37,115,10,0,0,45,0,0,0,77,82,66,95,84,84,95,86,79,73,68,80,0,0,0,0,117,110,105,110,105,116,105,97,108,105,122,101,100,32,70,105,98,101,114,0,37,83,32,105,115,32,110,111,116,32,97,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,0,71,105,118,101,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,104,97,115,104,33,0,0,0,43,0,0,0,101,108,115,101,32,119,105,116,104,111,117,116,32,114,101,115,99,117,101,32,105,115,32,117,115,101,108,101,115,115,0,0,115,116,114,117,99,116,32,115,105,122,101,32,109,105,115,109,97,116,99,104,0,0,0,0,105,0,0,0,110,117,109,98,101,114,101,100,40,37,83,41,32,97,102,116,101,114,32,110,97,109,101,100,0,0,0,0,36,109,114,98,95,105,95,109,116,95,115,116,97,116,101,0,97,116,97,110,50,0,0,0,61,61,61,0,84,121,112,101,69,114,114,111,114,0,0,0,70,97,108,115,101,67,108,97,115,115,0,0,73,110,102,105,110,105,116,121,0,0,0,0,105,110,115,116,97,110,99,101,95,101,118,97,108,32,119,105,116,104,32,115,116,114,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,0,0,99,111,110,115,116,97,110,116,32,108,111,111,107,45,117,112,32,102,111,114,32,110,111,110,32,99,108,97,115,115,47,109,111,100,117,108,101,0,0,0,91,93,0,0,109,101,116,104,111,100,61,39,37,115,39,32,40,37,100,41,10,0,0,0,99,111,100,101,103,101,110,32,101,114,114,111,114,58,37,115,58,37,100,58,32,37,115,10,0,0,0,0,116,111,95,115,116,114,0,0,105,102,110,111,110,101,0,0,78,79,68,69,95,67,65,76,76,58,10,0,111,0,0,0,76,73,78,69,0,0,0,0,73,82,69,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128,1,2,4,8,16,32,64,128])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOPNOTSUPP:45,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        // see previous TODO on stdin etc.: assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_NORMAL) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  var _llvm_va_start=undefined;
  function _llvm_va_end() {}
  var _setjmp=undefined;
  function _longjmp(env, value) {
      throw { longjmp: true, id: HEAP32[((env)>>2)], value: value || 1 };
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function ___errno_location() {
      return ___errno_state;
    }var ___errno=___errno_location;
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      var pdestEnd = 0;
      pdestEnd = (pdest + (_strlen(pdest)|0))|0;
      do {
        HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function ___fpclassifyf(x) {
      if (isNaN(x)) return 0;
      if (!isFinite(x)) return 1;
      if (x == 0) return 2;
      // FP_SUBNORMAL..?
      return 4;
    }var ___fpclassifyd=___fpclassifyf;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  var _llvm_pow_f64=Math.pow;
  var _floor=Math.floor;
  var _ceil=Math.ceil;
  var _abs=Math.abs;
  function _fmod(x, y) {
      return x % y;
    }
  function _erfc(x) {
      var MATH_TOLERANCE = 1E-12;
      var ONE_SQRTPI = 0.564189583547756287;
      var a = 1;
      var b = x;
      var c = x;
      var d = x * x + 0.5;
      var n = 1.0;
      var q2 = b / d;
      var q1, t;
      if (Math.abs(x) < 2.2) {
        return 1.0 - _erf(x);
      }
      if (x < 0) {
        return 2.0 - _erfc(-x);
      }
      do {
        t = a * n + b * x;
        a = b;
        b = t;
        t = c * n + d * x;
        c = d;
        d = t;
        n += 0.5;
        q1 = q2;
        q2 = b / d;
      } while (Math.abs(q1 - q2) / q2 > MATH_TOLERANCE);
      return (ONE_SQRTPI * Math.exp(- x * x) * q2);
    }
  function _erf(x) {
      var MATH_TOLERANCE = 1E-12;
      var TWO_SQRTPI = 1.128379167095512574;
      var sum = x;
      var term = x;
      var xsqr = x*x;
      var j = 1;
      if (Math.abs(x) > 2.2) {
        return 1.0 - _erfc(x);
      }
      do {
        term *= xsqr / j;
        sum -= term / (2 * j + 1);
        ++j;
        term *= xsqr / j;
        sum += term / (2 * j + 1);
        ++j;
      } while (Math.abs(term / sum) > MATH_TOLERANCE);
      return (TWO_SQRTPI * sum);
    }
  function _hypot(a, b) {
       return Math.sqrt(a*a + b*b);
    }
  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }
  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }
  function _cbrt(x) {
      return Math.pow(x, 1/3);
    }
  var _sqrt=Math.sqrt;
  var _log=Math.log;
  var _exp=Math.exp;
  function _atanh(x) {
      return Math.log((1 + x) / (1 - x)) / 2;
    }
  function _acosh(x) {
      return Math.log(x * 1 + Math.sqrt(x * x - 1));
    }
  function _asinh(x) {
      return Math.log(x + Math.sqrt(x * x + 1));
    }
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }
  var _atan2=Math.atan2;
  var _atan=Math.atan;
  var _acos=Math.acos;
  var _asin=Math.asin;
  var _tan=Math.tan;
  var _cos=Math.cos;
  var _sin=Math.sin;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  var __tzname=allocate(8, "i32*", ALLOC_STATIC);
  var __daylight=allocate(1, "i32*", ALLOC_STATIC);
  var __timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
      return tmPtr;
    }
  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
;
  function ___js_global_object() {
      return (typeof window === 'object') ? (window) : (global);
    }function ___js_fetch_object(mrb, handle) {
      var obj = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (obj && (typeof obj === 'object') &&
          (typeof handle === 'number') && (handle > 0)) {
        return obj[handle];
      }
    }
  function ___js_add_object(mrb, obj) {
      var global_object = ___js_global_object();
      global_object["MRB_JS_OBJ_CACHE"] = global_object["MRB_JS_OBJ_CACHE"] ||
        {"_mruby_js_next_id": 1, "_mruby_js_recycled_ids": []};
      var cache_object = global_object["MRB_JS_OBJ_CACHE"];
      var object_handle = -1;
      if (!("_mruby_js_id" in obj)) {
        // create new cache
        var new_id;
        if (cache_object["_mruby_js_recycled_ids"].length > 0) {
          // use recycled ids
          new_id = cache_object["_mruby_js_recycled_ids"].pop();
        } else {
          new_id = cache_object["_mruby_js_next_id"];
          cache_object["_mruby_js_next_id"] = new_id + 1;
        }
        cache_object[new_id] = obj;
        obj["_mruby_js_id"] = new_id;
        obj["_mruby_js_count"] = 1;
        object_handle = new_id;
      } else {
        // existing cache, only updates count
        obj["_mruby_js_count"] = obj["_mruby_js_count"] + 1;
        object_handle = obj["_mruby_js_id"];
      }
      return object_handle;
    }
  function ___js_is_floating_number(val) {
      var fixed = Math.round(val);
      var diff = Math.abs(fixed - val);
      var EPSILON = 1e-5;
      return (diff >= EPSILON);
    }
  function ___js_is_array(val) {
      return (typeof val !== 'undefined' &&
              val && val.constructor === Array);
    }function ___js_fill_return_arg(mrb, ret_p, val, parent_p) {
      var stack = 0;
      var RETURN_HANDLERS = {
        'object': function () {
          var handle = ___js_add_object(mrb, val);
          if (___js_is_array(val)) {
            _mruby_js_set_array_handle(mrb, ret_p, handle);
          } else {
            _mruby_js_set_object_handle(mrb, ret_p, handle);
          }
        },
        'function': function () {
          var handle = ___js_add_object(mrb, val);
          _mruby_js_set_function_handle(mrb, ret_p, handle, parent_p);
        },
        'number': function () {
          if (___js_is_floating_number(val)) {
            _mruby_js_set_float(mrb, ret_p, val);
          } else {
            _mruby_js_set_integer(mrb, ret_p, val);
          }
        },
        'boolean': function () {
          _mruby_js_set_boolean(mrb, ret_p, (val) ? (1) : (0));
        },
        'undefined': function () {
          _mruby_js_set_nil(mrb, ret_p);
        },
        'string': function () {
          if (!stack) stack = Runtime.stackSave();
          var ret = Runtime.stackAlloc(val.length + 1);
          writeStringToMemory(val, ret);
          _mruby_js_set_string(mrb, ret_p, ret);
        }
      };
      if (ret_p) {
        var val_type = typeof val;
        if (val_type !== null) {
          RETURN_HANDLERS[val_type]();
        }
      }
      if (stack) Runtime.stackRestore(stack);
    }function ___js_fetch_argument(mrb, argv_p, idx) {
      var TYPE_HANDLERS = {
        0: function() { return false; }, // MRB_TT_FALSE
        1: function() { return true; },  // MRB_TT_TRUE
        2: _mruby_js_get_integer,        // MRB_TT_FIXNUM
        3: _mruby_js_get_float,          // MRB_TT_FLOAT
        4: function() {
          var handle = _mruby_js_get_object_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_OBJECT
        5: function() {
          var str_len = _mruby_js_get_string_len.apply(null, arguments);
          var str_p = _mruby_js_get_string_ptr.apply(null, arguments);
          return Module['Pointer_stringify'](str_p, str_len);
        },                        // MRB_TT_STRING
        6: function() { return undefined; }, // nil value
        7: function() {
          var proc = _mruby_js_get_proc.apply(null, arguments);
          return function() {
            // Callback arguments
            var cargc = arguments.length;
            var cargv = 0;
            if (cargc > 0) {
              var i;
              cargv = _mruby_js_invoke_alloc_argv(mrb, cargc);
              for (i = 0; i < cargc; i++) {
                ___js_fill_return_arg(mrb,
                                      _mruby_js_invoke_fetch_argp(mrb, cargv, i),
                                      arguments[i], 0);
              }
            }
            _mruby_js_invoke_proc(mrb, proc, cargc, cargv);
            if (cargc > 0) {
              _mruby_js_invoke_release_argv(mrb, cargv);
            }
          };
        },                        // MRB_TT_PROC
        8: function() {
          var handle = _mruby_js_get_array_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_ARRAY
        9: function() {
          var handle = _mruby_js_get_hash_handle.apply(null, arguments);
          return ___js_fetch_object(mrb, handle);
        },                        // MRB_TT_HASH
        10: function() {
          _mruby_js_convert_symbol_to_string.apply(null, arguments);
          return TYPE_HANDLERS[5].apply(null, arguments);
        }                         // MRB_TT_SYMBOL
      };
      var handler = TYPE_HANDLERS[_mruby_js_argument_type(mrb, argv_p, idx)];
      return handler(mrb, argv_p, idx);
    }function _js_create_array(mrb, arr_p, len, ret_p) {
      var ret = [], i;
      if ((arr_p !== 0) && (len !== -1)) {
        for (i = 0; i < len; i++) {
          ret.push(___js_fetch_argument(mrb, arr_p, i));
        }
      }
      ___js_fill_return_arg(mrb, ret_p, ret, 0);
    }
  function ___js_invoke_using_new(func, args) {
      // This function uses "new" operator to call JavaScript functions.
      // It is implemented in the following way for two reasons:
      // 1. Function.prototype.bind only exists in ECMAScript 5
      // 2. Even if we only work with ECMAScript 5 compatible browsers,
      // my test shows that we cannot use this method to create ArrayBuffer
      // (at least in Chrome).
      // So we will use the old-fashioned way to do this:)
      switch(args.length) {
        case 0:
          return new func();
        case 1:
          return new func(args[0]);
        case 2:
          return new func(args[0], args[1]);
        case 3:
          return new func(args[0], args[1], args[2]);
        case 4:
          return new func(args[0], args[1], args[2], args[3]);
        case 5:
          return new func(args[0], args[1], args[2], args[3], args[4]);
        case 6:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6]);
        case 8:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7]);
        case 9:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8]);
        case 10:
          return new func(args[0], args[1], args[2], args[3], args[4], args[5],
                          args[6], args[7], args[8], args[9]);
        default:
          assert(false, "We do not support that many arguments now-_-");
      }
    }function _js_invoke(mrb, this_value_p,
                         func_handle,
                         argv_p, argc,
                         ret_p, type) {
      var func = ___js_fetch_object(mrb, func_handle);
      if (typeof func !== 'function') {
        _mruby_js_name_error(mrb);
      }
      var this_value = ___js_fetch_argument(mrb, this_value_p, 0);
      if (type !== 2) {
        if (this_value === ___js_global_object()) {
          // ECMAScript 5 compatible calling convention
          this_value = undefined;
        }
      }
      var i = 0, args = [], type_handler;
      for (i = 0; i < argc; i++) {
        args.push(___js_fetch_argument(mrb, argv_p, i));
      }
      var val;
      if (type === 1) {
        val = ___js_invoke_using_new(func, args);
      } else {
        val = func.apply(this_value, args);
      }
      // Returned value does not have a parent
      ___js_fill_return_arg(mrb, ret_p, val, 0);
    }
  function _js_create_empty_object(mrb, ret_p) {
      ___js_fill_return_arg(mrb, ret_p, {}, 0);
    }
  function _js_set_field(mrb, obj_p, field_p, val_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var field = ___js_fetch_argument(mrb, field_p, 0);
      var val = ___js_fetch_argument(mrb, val_p, 0);
      obj[field] = val;
    }
  function _js_get_field(mrb, obj_p, field_p, ret_p) {
      var handle = _mruby_js_get_object_handle(mrb, obj_p, 0);
      var obj = ___js_fetch_object(mrb, handle);
      var val = obj[___js_fetch_argument(mrb, field_p, 0)];
      ___js_fill_return_arg(mrb, ret_p, val, obj_p);
    }
  function _js_release_object(mrb, handle) {
      var cache_object = ___js_global_object()["MRB_JS_OBJ_CACHE"];
      if (cache_object) {
        var rel_object = cache_object[handle];
        if (rel_object && ("_mruby_js_id" in rel_object)) {
          rel_object["_mruby_js_count"] = rel_object["_mruby_js_count"] - 1;
          if (rel_object["_mruby_js_count"] === 0) {
            // reference count reaches 0, release object
            var next_id = cache_object["_mruby_js_next_id"];
            delete cache_object[handle];
            if (handle === (next_id - 1)) {
              cache_object["_mruby_js_next_id"] = next_id - 1;
            } else {
              cache_object["_mruby_js_recycled_ids"].push(handle);
            }
            delete rel_object["_mruby_js_id"];
            delete rel_object["_mruby_js_count"];
            // Reset the next id when we have all recycled ids. I wonder
            // if a slice loop which can recycle partial ids is needed here.
            if (cache_object["_mruby_js_recycled_ids"].length ===
                (cache_object["_mruby_js_next_id"] - 1)) {
              cache_object["_mruby_js_next_id"] = 1;
              cache_object["_mruby_js_recycled_ids"] = [];
            }
          }
        }
      }
    }
  function _js_get_root_object(mrb, ret_p) {
      // Global object must be of object type, and has no parent.
      ___js_fill_return_arg(mrb, ret_p, ___js_global_object(), 0);
    }
  var _llvm_expect_i32=undefined;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x = event.pageX - (window.scrollX + rect.left);
          var y = event.pageY - (window.scrollY + rect.top);
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var FUNCTION_TABLE = [0,0,_mrb_mod_undef,0,_mrb_ary_cmp,0,_nil_to_s,0,_mrb_bob_missing,0,_mrb_str_capitalize_bang
,0,_mrb_mod_remove_cvar,0,_math_log10,0,_mrb_proc_lambda,0,_mrb_f_global_variables,0,_mrb_ary_assoc
,0,_mrb_hash_aset,0,_fix_mul,0,_mrb_str_bytesize,0,_mrb_struct_init_copy,0,_mrb_ary_equal
,0,_mrb_hash_to_hash,0,_mrb_range_first,0,_flo_mul,0,_mrb_array_tojs,0,_mrb_ary_inspect
,0,_mrb_hash_set_default,0,_fix_and,0,_mrb_range_cover,0,_mrb_hash_equal,0,_mrb_mod_include_p
,0,_mrb_ary_reverse_bang,0,_mrb_time_gm,0,_sym_cmp,0,_mrb_str_to_s,0,_mrb_obj_clone
,0,_num_pow,0,_mrb_f_raise,0,_mrb_str_to_f,0,_mrb_str_to_i,0,_mrb_ary_times
,0,_mrb_printstr,0,_num_uplus,0,_mrb_range_each,0,_nil_inspect,0,_mrb_ary_empty_p
,0,_fiber_yield,0,_mrb_obj_ivar_get,0,_mrb_time_free,0,_math_erfc,0,_mrb_mod_included_modules
,0,_range_eql,0,_mrb_proc_init_copy,0,_mrb_hash_values,0,_mruby_js_object_handle_free,0,_mrb_ary_delete_at
,0,_mrb_ary_eql,0,_mrb_js_obj_get,0,_gc_disable,0,_mrb_proc_initialize,0,_gc_interval_ratio_get
,0,_mrb_mod_constants,0,_iv_i,0,_mrb_obj_not_equal_m,0,_math_frexp,0,_mrb_hash_keys
,0,_num_eql,0,_mrb_range_excl,0,_mrb_kernel_proc,0,_mrb_f_block_given_p_m,0,_mrb_str_empty_p
,0,_exc_to_s,0,_mrb_str_concat2,0,_fix_rev,0,_mrb_time_initialize_copy,0,_mrb_time_minus
,0,_mrb_str_reverse,0,_math_ldexp,0,_math_log,0,_mrb_str_chomp_bang,0,_mrb_hash_default
,0,_mrb_time_initialize,0,_mrb_time_min,0,_cv_i,0,_math_sin,0,_mrb_ary_rindex_m
,0,_math_asinh,0,_flo_eq,0,_math_atan2,0,_mrb_time_mday,0,_mrb_mod_instance_methods
,0,_math_sqrt,0,_math_cosh,0,_mrb_obj_hash,0,_math_acosh,0,_mrb_range_include
,0,_mrb_str_capitalize,0,_mrb_mod_remove_const,0,_math_hypot,0,_false_to_s,0,_gc_generational_mode_get
,0,_mrb_obj_equal_m,0,_mrb_str_times,0,_range_to_s,0,_mrb_time_getlocal,0,_mod_define_method
,0,_mrb_ary_size,0,_fix_or,0,_flo_plus,0,_mrb_obj_singleton_methods_m,0,_mrb_struct_eql
,0,_mrb_hash_inspect,0,_iv_mark_i,0,_mrb_struct_ref,0,_mrb_time_asctime,0,_mrb_str_chop
,0,_exc_equal,0,_mrb_mod_module_eval,0,_mrb_f_sprintf,0,_fiber_resume,0,_mrb_struct_initialize_m
,0,_flo_infinite_p,0,_mrb_obj_ivar_set,0,_mrb_hash_replace,0,_math_exp,0,_mrb_mod_append_features
,0,_math_cbrt,0,_fix_mod,0,_gv_i,0,_fiber_init,0,_mrb_str_start_with
,0,_range_inspect,0,_math_cos,0,_mrb_str_reverse_bang,0,_mrb_time_dstp,0,_mrb_mod_remove_method
,0,_allocf,0,_mrb_str_swapcase,0,_gc_interval_ratio_set,0,_gc_start,0,_mrb_range_last
,0,_mrb_ary_join_m,0,_flo_hash,0,_math_tan,0,_mrb_hash_default_proc,0,_mrb_random_srand
,0,_exc_inspect,0,_math_tanh,0,_mrb_str_intern,0,_false_xor,0,_mrb_mod_method_defined
,0,_mrb_time_getutc,0,_mrb_ary_s_try_convert,0,_obj_is_instance_of,0,_inspect_i,0,_mrb_str_split_m
,0,_mrb_random_g_rand,0,_mrb_obj_methods_m,0,_mrb_str_include,0,_mrb_str_init,0,_num_cmp
,0,_mrb_str_downcase,0,_fix_equal,0,_fix_xor,0,_mrb_struct_set_m,0,_csym_i
,0,_mrb_str_index_m,0,_mrb_struct_ref8,0,_mrb_struct_ref9,0,_mrb_struct_ref6,0,_mrb_struct_ref7
,0,_mrb_struct_ref4,0,_mrb_struct_ref5,0,_mrb_struct_ref2,0,_mrb_struct_ref3,0,_mrb_struct_ref0
,0,_mrb_struct_ref1,0,_mrb_time_zone,0,_mrb_random_rand,0,_true_xor,0,_mrb_ary_push_m
,0,_fix_uminus,0,_exc_message,0,_mrb_time_day,0,_mrb_ary_plus,0,_proc_lambda
,0,_gc_generational_mode_set,0,_mrb_time_eq,0,_mrb_time_cmp,0,_mrb_struct_inspect,0,_mrb_obj_ivar_defined
,0,_mrb_mod_ancestors,0,_fix_divmod,0,_mrb_time_year,0,_math_atan,0,_mrb_str_rindex_m
,0,_math_erf,0,_fix_to_s,0,_fix_minus,0,_mrb_range_initialize,0,_mrb_mod_eqq
,0,_mrb_bob_not,0,_fix_to_f,0,_num_abs,0,_mrb_any_to_s,0,_gc_step_ratio_get
,0,_mrb_mod_const_set,0,_mrb_proc_source_location,0,_mrb_str_upcase_bang,0,_mrb_hash_clear,0,_num_div
,0,_mrb_hash_has_key,0,_mrb_time_to_f,0,_mrb_bob_init,0,_mrb_time_to_i,0,_mrb_js_get_root_object
,0,_mrb_time_yday,0,_mrb_str_bytes,0,_f_eval,0,_mrb_random_g_srand,0,_sym_equal
,0,_mrb_proc_inspect,0,_mrb_js_obj_create,0,_int_to_i,0,_mrb_ary_shift,0,_mrb_time_at
,0,_mrb_time_local,0,_mrb_mod_cvar_get,0,_mrb_hash_set_default_proc,0,_mrb_ary_concat_m,0,_mrb_ary_reverse
,0,_mrb_hash_shift,0,_mrb_random_init,0,_true_or,0,_mrb_obj_dup,0,_noregexp
,0,_mrb_time_sec,0,_mrb_str_cmp_m,0,_mrb_obj_instance_eval,0,_mrb_hash_init_core,0,_mrb_false
,0,_mrb_hash_has_value,0,_mrb_ary_at,0,_mrb_str_upcase,0,_flo_floor,0,_mrb_obj_extend_m
,0,_mrb_ary_pop,0,_flo_finite_p,0,_mrb_mod_cvar_defined,0,_mrb_struct_aref,0,_math_acos
,0,_num_uminus,0,_mrb_sym_all_symbols,0,_mrb_js_func_invoke_internal,0,_mrb_class_superclass,0,_mrb_time_now
,0,_mrb_obj_instance_variables,0,_mrb_mod_cvar_set,0,_mrb_ary_index_m,0,_mrb_true,0,_mrb_str_hash_m
,0,_flo_minus,0,_mrb_struct_s_def,0,_mrb_int_chr,0,_mrb_ary_replace_m,0,_mrb_struct_s_members_m
,0,_mrb_ary_rassoc,0,_int_succ,0,_mrb_str_getbyte,0,_mrb_str_replace,0,_mrb_ary_aget
,0,_mrb_time_wday,0,_mrb_obj_remove_instance_variable,0,_mrb_ary_s_create,0,_mrb_obj_inspect,0,_mrb_class_new_class
,0,_flo_to_f,0,_inspect_main,0,_flo_to_s,0,_mrb_ary_unshift_m,0,_math_sinh
,0,_mrb_str_inspect,0,_mrb_mod_to_s,0,_mrb_f_send,0,_exc_exception,0,_flo_round
,0,_mrb_str_plus_m,0,_mrb_str_size,0,_flo_truncate,0,_mrb_obj_id_m,0,_mrb_free
,0,_true_to_s,0,_mrb_time_utc,0,_mrb_singleton_class,0,_fix_rshift,0,_mrb_str_dump
,0,_mrb_hash_empty_p,0,_exc_initialize,0,_mrb_js_array_create,0,_mrb_mod_include,0,_mrb_str_swapcase_bang
,0,_mrb_js_obj_initialize,0,_flo_ceil,0,_mrb_mod_alias,0,_fix_lshift,0,_mrb_str_equal_m
,0,_mrb_ary_clear,0,_mrb_obj_class_m,0,_mrb_range_end,0,_mrb_instance_new,0,_math_atanh
,0,_mrb_time_plus,0,_mrb_str_aref_m,0,_mrb_time_utcp,0,_mrb_obj_protected_methods,0,_mrb_sym_to_s
,0,_math_asin,0,_flo_mod,0,_mrb_mod_const_defined,0,_mrb_range_beg,0,_mrb_equal_m
,0,_mrb_struct_aset,0,_mrb_mod_s_constants,0,_mrb_time_usec,0,_mrb_proc_arity,0,_gc_enable
,0,_os_count_objects,0,_mrb_mod_extend_object,0,_false_and,0,_fix_succ,0,_true_and
,0,_gc_step_ratio_set,0,_hash_values_at,0,_os_count_object_type,0,_mrb_range_eq,0,_false_or
,0,_fix_plus,0,_mrb_str_downcase_bang,0,_mrb_time_hour,0,_mrb_ary_last,0,_mrb_obj_is_kind_of_m
,0,_mrb_obj_public_methods,0,_mrb_mod_const_get,0,_mrb_hash_aget,0,_mrb_hash_size_m,0,_mrb_str_chop_bang
,0,_mrb_time_localtime,0,_mrb_obj_init_copy,0,_mrb_ary_aset,0,_sym_inspect,0,_mrb_str_chomp
,0,_mrb_js_obj_set,0,_obj_respond_to,0,_mrb_obj_private_methods,0,_mrb_str_end_with,0,_mrb_hash_eql
,0,_math_log2,0,_mrb_hash_delete,0,_mrb_str_eql,0,_mrb_struct_members_m,0,_range_initialize_copy
,0,_mrb_mod_class_variables,0,_const_i,0,_mrb_ary_first,0,_mrb_time_mon,0,_mrb_struct_equal,0,_sym_to_sym];
// EMSCRIPTEN_START_FUNCS
function _offset_crc_body() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $header=__stackBase__;
  var $1=(($header+8)|0);
  var $2=(($1)|0);
  var $3=$header;
  var $4=$2;
  var $5=$3;
  var $6=((($4)-($5))|0);
  var $7=((($6)+(2))|0);
  STACKTOP = __stackBase__;
  return $7;
}
function _bin_to_uint32($bin) {
  var label = 0;
  var $1;
  $1=$bin;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP8[($3)];
  var $5=(($4)&(255));
  var $6=$5 << 24;
  var $7=$1;
  var $8=(($7+1)|0);
  var $9=HEAP8[($8)];
  var $10=(($9)&(255));
  var $11=$10 << 16;
  var $12=$6 | $11;
  var $13=$1;
  var $14=(($13+2)|0);
  var $15=HEAP8[($14)];
  var $16=(($15)&(255));
  var $17=$16 << 8;
  var $18=$12 | $17;
  var $19=$1;
  var $20=(($19+3)|0);
  var $21=HEAP8[($20)];
  var $22=(($21)&(255));
  var $23=$18 | $22;
  return $23;
}
function _bin_to_uint16($bin) {
  var label = 0;
  var $1;
  $1=$bin;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP8[($3)];
  var $5=(($4)&(255));
  var $6=(($5)&(65535));
  var $7=$6 << 8;
  var $8=$1;
  var $9=(($8+1)|0);
  var $10=HEAP8[($9)];
  var $11=(($10)&(255));
  var $12=(($11)&(65535));
  var $13=$7 | $12;
  var $14=(($13) & 65535);
  return $14;
}
function _webruby_internal_run_bytecode($mrb, $bc, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$bc;
  $3=$print_level;
  var $5=$1;
  var $6=$1;
  var $7=$2;
  _mrb_load_irep($4, $6, $7);
  var $8=$3;
  var $9=_check_and_print_errors($5, $4, $8);
  STACKTOP = __stackBase__;
  return $9;
}
Module["_webruby_internal_run_bytecode"] = _webruby_internal_run_bytecode;
function _check_and_print_errors($mrb, $result, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $result; $result = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($result)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($result)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($result)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      $2=$mrb;
      $3=$print_level;
      var $5=$2;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $10=$3;
      var $11=(($10)|(0)) > 0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$2;
      var $14=$2;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      _mrb_obj_value($4, $17);
      _mrb_p($13, $4);
      var $18=$2;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=0;
      $1=1;
      label = 7; break;
    case 4: 
      var $21=$3;
      var $22=(($21)|(0)) > 1;
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=$2;
      _mrb_p($24, $result);
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $27=$1;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _webruby_internal_run($mrb, $print_level) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$print_level;
  var $3=$1;
  var $4=$2;
  var $5=_webruby_internal_run_bytecode($3, ((93076)|0), $4);
  return $5;
}
Module["_webruby_internal_run"] = _webruby_internal_run;
function _webruby_internal_run_source($mrb, $s, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$s;
  $3=$print_level;
  var $5=$1;
  var $6=$1;
  var $7=$2;
  _mrb_load_string($4, $6, $7);
  var $8=$3;
  var $9=_check_and_print_errors($5, $4, $8);
  STACKTOP = __stackBase__;
  return $9;
}
Module["_webruby_internal_run_source"] = _webruby_internal_run_source;
function _mrb_obj_value($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_read_irep($mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      var $total_nirep;
      var $section_header;
      var $crc=__stackBase__;
      var $bin_size=(__stackBase__)+(4);
      var $n;
      var $sirep;
      $2=$mrb;
      $3=$bin;
      $total_nirep=0;
      HEAP32[(($bin_size)>>2)]=0;
      var $4=$2;
      var $5=(($4)|(0))==0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=$3;
      var $8=(($7)|(0))==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-7;
      label = 21; break;
    case 4: 
      var $11=$3;
      var $12=_read_rite_binary_header($11, $bin_size, $crc);
      $result=$12;
      var $13=$result;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $16=$result;
      $1=$16;
      label = 21; break;
    case 6: 
      var $18=_offset_crc_body();
      $n=$18;
      var $19=HEAP16[(($crc)>>1)];
      var $20=(($19)&(65535));
      var $21=$3;
      var $22=$n;
      var $23=(($21+$22)|0);
      var $24=HEAP32[(($bin_size)>>2)];
      var $25=$n;
      var $26=((($24)-($25))|0);
      var $27=_calc_crc_16_ccitt($23, $26, 0);
      var $28=(($27)&(65535));
      var $29=(($20)|(0))!=(($28)|(0));
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=-5;
      label = 21; break;
    case 8: 
      var $32=$3;
      var $33=(($32+22)|0);
      $3=$33;
      var $34=$2;
      var $35=(($34+28)|0);
      var $36=HEAP32[(($35)>>2)];
      $sirep=$36;
      label = 9; break;
    case 9: 
      var $38=$3;
      var $39=$38;
      $section_header=$39;
      var $40=$section_header;
      var $41=(($40)|0);
      var $42=(($41)|0);
      var $43=_memcmp($42, ((114132)|0), 4);
      var $44=(($43)|(0))==0;
      if ($44) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $46=$2;
      var $47=$3;
      var $48=_read_rite_section_irep($46, $47);
      $result=$48;
      var $49=$result;
      var $50=(($49)|(0)) < 0;
      if ($50) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $52=$result;
      $1=$52;
      label = 21; break;
    case 12: 
      var $54=$result;
      var $55=$total_nirep;
      var $56=((($55)+($54))|0);
      $total_nirep=$56;
      label = 18; break;
    case 13: 
      var $58=$section_header;
      var $59=(($58)|0);
      var $60=(($59)|0);
      var $61=_memcmp($60, ((114124)|0), 4);
      var $62=(($61)|(0))==0;
      if ($62) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $64=$2;
      var $65=$3;
      var $66=$sirep;
      var $67=_read_rite_section_lineno($64, $65, $66);
      $result=$67;
      var $68=$result;
      var $69=(($68)|(0)) < 0;
      if ($69) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $71=$result;
      $1=$71;
      label = 21; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $75=$section_header;
      var $76=(($75+4)|0);
      var $77=(($76)|0);
      var $78=_bin_to_uint32($77);
      var $79=$3;
      var $80=(($79+$78)|0);
      $3=$80;
      label = 19; break;
    case 19: 
      var $82=$section_header;
      var $83=(($82)|0);
      var $84=(($83)|0);
      var $85=_memcmp($84, ((108596)|0), 4);
      var $86=(($85)|(0))!=0;
      if ($86) { label = 9; break; } else { label = 20; break; }
    case 20: 
      var $88=$total_nirep;
      $1=$88;
      label = 21; break;
    case 21: 
      var $90=$1;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_binary_header($bin, $bin_size, $crc) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $header;
      $2=$bin;
      $3=$bin_size;
      $4=$crc;
      var $5=$2;
      var $6=$5;
      $header=$6;
      var $7=$header;
      var $8=(($7)|0);
      var $9=(($8)|0);
      var $10=_memcmp($9, ((102112)|0), 4);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-5;
      label = 8; break;
    case 3: 
      var $14=$header;
      var $15=(($14+4)|0);
      var $16=(($15)|0);
      var $17=_memcmp($16, ((99492)|0), 4);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=-5;
      label = 8; break;
    case 5: 
      var $21=$header;
      var $22=(($21+8)|0);
      var $23=(($22)|0);
      var $24=_bin_to_uint16($23);
      var $25=$4;
      HEAP16[(($25)>>1)]=$24;
      var $26=$3;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$header;
      var $30=(($29+10)|0);
      var $31=(($30)|0);
      var $32=_bin_to_uint32($31);
      var $33=$3;
      HEAP32[(($33)>>2)]=$32;
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $36=$1;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_section_irep($mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result;
      var $sirep;
      var $i;
      var $len=__stackBase__;
      var $nirep;
      var $n;
      var $header;
      $1=$mrb;
      $2=$bin;
      var $3=$2;
      var $4=$3;
      $header=$4;
      var $5=$2;
      var $6=(($5+16)|0);
      $2=$6;
      var $7=$1;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      $sirep=$9;
      var $10=$header;
      var $11=(($10+12)|0);
      var $12=(($11)|0);
      var $13=_bin_to_uint16($12);
      $nirep=$13;
      $n=0;
      var $14=$sirep;
      $i=$14;
      label = 2; break;
    case 2: 
      var $16=$n;
      var $17=(($16)&(65535));
      var $18=$nirep;
      var $19=(($18)&(65535));
      var $20=(($17)|(0)) < (($19)|(0));
      if ($20) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $22=$1;
      var $23=$2;
      var $24=_read_rite_irep_record($22, $23, $len);
      $result=$24;
      var $25=$result;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 8; break;
    case 5: 
      var $29=HEAP32[(($len)>>2)];
      var $30=$2;
      var $31=(($30+$29)|0);
      $2=$31;
      label = 6; break;
    case 6: 
      var $33=$n;
      var $34=((($33)+(1))&65535);
      $n=$34;
      var $35=$i;
      var $36=((($35)+(1))|0);
      $i=$36;
      label = 2; break;
    case 7: 
      var $38=$sirep;
      var $39=$header;
      var $40=(($39+14)|0);
      var $41=(($40)|0);
      var $42=_bin_to_uint16($41);
      var $43=(($42)&(65535));
      var $44=((($38)+($43))|0);
      $result=$44;
      label = 8; break;
    case 8: 
      var $46=$result;
      var $47=(($46)|(0)) < 0;
      if ($47) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $49=$sirep;
      var $50=$1;
      _irep_free($49, $50);
      label = 10; break;
    case 10: 
      var $52=$result;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_section_lineno($mrb, $bin, $sirep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result;
      var $i;
      var $len=__stackBase__;
      var $nirep;
      var $n;
      var $header;
      $1=$mrb;
      $2=$bin;
      $3=$sirep;
      HEAP32[(($len)>>2)]=0;
      var $4=$2;
      var $5=$4;
      $header=$5;
      var $6=$2;
      var $7=(($6+12)|0);
      $2=$7;
      var $8=$header;
      var $9=(($8+8)|0);
      var $10=(($9)|0);
      var $11=_bin_to_uint16($10);
      $nirep=$11;
      $n=0;
      var $12=$3;
      $i=$12;
      label = 2; break;
    case 2: 
      var $14=$n;
      var $15=(($14)&(65535));
      var $16=$nirep;
      var $17=(($16)&(65535));
      var $18=(($15)|(0)) < (($17)|(0));
      if ($18) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $20=$1;
      var $21=$2;
      var $22=$i;
      var $23=_read_rite_lineno_record($20, $21, $22, $len);
      $result=$23;
      var $24=$result;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 8; break;
    case 5: 
      var $28=HEAP32[(($len)>>2)];
      var $29=$2;
      var $30=(($29+$28)|0);
      $2=$30;
      label = 6; break;
    case 6: 
      var $32=$n;
      var $33=((($32)+(1))&65535);
      $n=$33;
      var $34=$i;
      var $35=((($34)+(1))|0);
      $i=$35;
      label = 2; break;
    case 7: 
      var $37=$3;
      var $38=$header;
      var $39=(($38+10)|0);
      var $40=(($39)|0);
      var $41=_bin_to_uint16($40);
      var $42=(($41)&(65535));
      var $43=((($37)+($42))|0);
      $result=$43;
      label = 8; break;
    case 8: 
      var $45=$result;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_load_irep($agg_result, $mrb, $bin) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $n;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$bin;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_read_irep($4, $5);
      $n=$6;
      var $7=$n;
      var $8=(($7)|(0)) < 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$n;
      _irep_error($10, $11);
      _mrb_nil_value($agg_result);
      label = 4; break;
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=$n;
      var $16=$1;
      var $17=(($16+24)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($15<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_mrb_proc_new($14, $20);
      var $22=$1;
      _mrb_top_self($3, $22);
      _mrb_run($agg_result, $13, $21, $3);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _irep_error($mrb, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  $1=$mrb;
  $2=$n;
  var $4=$1;
  var $5=$1;
  var $6=_mrb_class_get($5, ((104980)|0));
  _mrb_exc_new($3, $4, $6, ((80376)|0), 15);
  var $7=(($3)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=$1;
  var $12=(($11+16)|0);
  HEAP32[(($12)>>2)]=$10;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_nil_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _read_rite_lineno_record($mrb, $bin, $irepno, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ret;
      var $i;
      var $fname_len;
      var $niseq;
      var $fname;
      var $lines;
      $1=$mrb;
      $2=$bin;
      $3=$irepno;
      $4=$len;
      $ret=0;
      var $5=$4;
      HEAP32[(($5)>>2)]=0;
      var $6=$2;
      var $7=(($6+4)|0);
      $2=$7;
      var $8=$4;
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)+(4))|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=$2;
      var $12=_bin_to_uint16($11);
      var $13=(($12)&(65535));
      $fname_len=$13;
      var $14=$2;
      var $15=(($14+2)|0);
      $2=$15;
      var $16=$4;
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(2))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=$1;
      var $20=$fname_len;
      var $21=((($20)+(1))|0);
      var $22=_mrb_malloc($19, $21);
      $fname=$22;
      var $23=$fname;
      var $24=(($23)|(0))==0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ret=-1;
      label = 10; break;
    case 3: 
      var $27=$fname;
      var $28=$2;
      var $29=$fname_len;
      assert($29 % 1 === 0);_memcpy($27, $28, $29);
      var $30=$fname_len;
      var $31=$fname;
      var $32=(($31+$30)|0);
      HEAP8[($32)]=0;
      var $33=$fname_len;
      var $34=$2;
      var $35=(($34+$33)|0);
      $2=$35;
      var $36=$fname_len;
      var $37=$4;
      var $38=HEAP32[(($37)>>2)];
      var $39=((($38)+($36))|0);
      HEAP32[(($37)>>2)]=$39;
      var $40=$2;
      var $41=_bin_to_uint32($40);
      $niseq=$41;
      var $42=$2;
      var $43=(($42+4)|0);
      $2=$43;
      var $44=$4;
      var $45=HEAP32[(($44)>>2)];
      var $46=((($45)+(4))|0);
      HEAP32[(($44)>>2)]=$46;
      var $47=$1;
      var $48=$niseq;
      var $49=($48<<1);
      var $50=_mrb_malloc($47, $49);
      var $51=$50;
      $lines=$51;
      var $52=$lines;
      var $53=(($52)|(0))==0;
      if ($53) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $ret=-1;
      label = 10; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $57=$i;
      var $58=$niseq;
      var $59=(($57)>>>(0)) < (($58)>>>(0));
      if ($59) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $61=$2;
      var $62=_bin_to_uint16($61);
      var $63=$i;
      var $64=$lines;
      var $65=(($64+($63<<1))|0);
      HEAP16[(($65)>>1)]=$62;
      var $66=$2;
      var $67=(($66+2)|0);
      $2=$67;
      var $68=$4;
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+(2))|0);
      HEAP32[(($68)>>2)]=$70;
      label = 8; break;
    case 8: 
      var $72=$i;
      var $73=((($72)+(1))|0);
      $i=$73;
      label = 6; break;
    case 9: 
      var $75=$fname;
      var $76=$3;
      var $77=$1;
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+($76<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+24)|0);
      HEAP32[(($82)>>2)]=$75;
      var $83=$lines;
      var $84=$3;
      var $85=$1;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87+($84<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+28)|0);
      HEAP32[(($90)>>2)]=$83;
      label = 10; break;
    case 10: 
      var $92=$ret;
      return $92;
    default: assert(0, "bad label: " + label);
  }
}
function _irep_free($sirep, $mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $p;
      $1=$sirep;
      $2=$mrb;
      var $3=$1;
      $i=$3;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$2;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>(0)) < (($8)>>>(0));
      if ($9) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $11=$i;
      var $12=$2;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+($11<<2))|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $19=$i;
      var $20=$2;
      var $21=(($20+24)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+($19<<2))|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      $p=$27;
      var $28=$p;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $31=$2;
      var $32=$p;
      _mrb_free($31, $32);
      label = 6; break;
    case 6: 
      var $34=$i;
      var $35=$2;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+($34<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+16)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      $p=$42;
      var $43=$p;
      var $44=(($43)|(0))!=0;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$2;
      var $47=$p;
      _mrb_free($46, $47);
      label = 8; break;
    case 8: 
      var $49=$i;
      var $50=$2;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+20)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      $p=$57;
      var $58=$p;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $61=$2;
      var $62=$p;
      _mrb_free($61, $62);
      label = 10; break;
    case 10: 
      var $64=$2;
      var $65=$i;
      var $66=$2;
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+($65<<2))|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$70;
      _mrb_free($64, $71);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 2; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_iseq($mrb, $p) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$p;
  var $3=$2;
  var $4=(($3+12)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  return $8;
}
function _read_rite_irep_record($mrb, $bin, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ret;
      var $i;
      var $src;
      var $tt;
      var $pool_data_len;
      var $snl;
      var $plen;
      var $ai;
      var $irep;
      var $s=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      var $7=(__stackBase__)+(48);
      $1=$mrb;
      $2=$bin;
      $3=$len;
      var $8=$2;
      $src=$8;
      var $9=$1;
      var $10=_mrb_gc_arena_save($9);
      $ai=$10;
      var $11=$1;
      var $12=_mrb_add_irep($11);
      $irep=$12;
      var $13=$src;
      var $14=(($13+4)|0);
      $src=$14;
      var $15=$src;
      var $16=_bin_to_uint16($15);
      var $17=$irep;
      var $18=(($17+4)|0);
      HEAP16[(($18)>>1)]=$16;
      var $19=$src;
      var $20=(($19+2)|0);
      $src=$20;
      var $21=$src;
      var $22=_bin_to_uint16($21);
      var $23=$irep;
      var $24=(($23+6)|0);
      HEAP16[(($24)>>1)]=$22;
      var $25=$src;
      var $26=(($25+2)|0);
      $src=$26;
      var $27=$src;
      var $28=_bin_to_uint32($27);
      var $29=$irep;
      var $30=(($29+32)|0);
      HEAP32[(($30)>>2)]=$28;
      var $31=$src;
      var $32=(($31+4)|0);
      $src=$32;
      var $33=$irep;
      var $34=(($33+32)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)>>>(0)) > 0;
      if ($36) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $38=$1;
      var $39=$irep;
      var $40=(($39+32)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=($41<<2);
      var $43=_mrb_malloc($38, $42);
      var $44=$43;
      var $45=$irep;
      var $46=(($45+12)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$irep;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))==0;
      if ($50) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $ret=-1;
      label = 33; break;
    case 4: 
      $i=0;
      label = 5; break;
    case 5: 
      var $54=$i;
      var $55=$irep;
      var $56=(($55+32)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($54)>>>(0)) < (($57)>>>(0));
      if ($58) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $60=$src;
      var $61=_bin_to_uint32($60);
      var $62=$i;
      var $63=$irep;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+($62<<2))|0);
      HEAP32[(($66)>>2)]=$61;
      var $67=$src;
      var $68=(($67+4)|0);
      $src=$68;
      label = 7; break;
    case 7: 
      var $70=$i;
      var $71=((($70)+(1))|0);
      $i=$71;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $74=$src;
      var $75=_bin_to_uint32($74);
      $plen=$75;
      var $76=$src;
      var $77=(($76+4)|0);
      $src=$77;
      var $78=$plen;
      var $79=(($78)>>>(0)) > 0;
      if ($79) { label = 10; break; } else { label = 22; break; }
    case 10: 
      var $81=$1;
      var $82=$plen;
      var $83=((($82)*(12))&-1);
      var $84=_mrb_malloc($81, $83);
      var $85=$84;
      var $86=$irep;
      var $87=(($86+16)|0);
      HEAP32[(($87)>>2)]=$85;
      var $88=$irep;
      var $89=(($88+16)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90)|(0))==0;
      if ($91) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $ret=-1;
      label = 33; break;
    case 12: 
      $i=0;
      label = 13; break;
    case 13: 
      var $95=$i;
      var $96=$plen;
      var $97=(($95)>>>(0)) < (($96)>>>(0));
      if ($97) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $99=$src;
      var $100=(($99+1)|0);
      $src=$100;
      var $101=HEAP8[($99)];
      var $102=(($101)&(255));
      $tt=$102;
      var $103=$src;
      var $104=_bin_to_uint16($103);
      $pool_data_len=$104;
      var $105=$src;
      var $106=(($105+2)|0);
      $src=$106;
      var $107=$1;
      var $108=$src;
      var $109=$pool_data_len;
      var $110=(($109)&(65535));
      _mrb_str_new($4, $107, $108, $110);
      var $111=$s;
      var $112=$4;
      assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
      var $113=$pool_data_len;
      var $114=(($113)&(65535));
      var $115=$src;
      var $116=(($115+$114)|0);
      $src=$116;
      var $117=$tt;
      var $118=(($117)&(65535));
      if ((($118)|(0))==3) {
        label = 15; break;
      }
      else if ((($118)|(0))==6) {
        label = 16; break;
      }
      else if ((($118)|(0))==16) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
    case 15: 
      var $120=$i;
      var $121=$irep;
      var $122=(($121+16)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+((($120)*(12))&-1))|0);
      var $125=$1;
      _mrb_str_to_inum($5, $125, $s, 10, 0);
      var $126=$124;
      var $127=$5;
      assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
      label = 19; break;
    case 16: 
      var $129=$i;
      var $130=$irep;
      var $131=(($130+16)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132+((($129)*(12))&-1))|0);
      var $134=$1;
      var $135=_mrb_str_to_dbl($134, $s, 0);
      _mrb_float_value($6, $135);
      var $136=$133;
      var $137=$6;
      assert(12 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];HEAP32[((($136)+(8))>>2)]=HEAP32[((($137)+(8))>>2)];
      label = 19; break;
    case 17: 
      var $139=$i;
      var $140=$irep;
      var $141=(($140+16)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($142+((($139)*(12))&-1))|0);
      var $144=$143;
      var $145=$s;
      assert(12 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];HEAP32[((($144)+(8))>>2)]=HEAP32[((($145)+(8))>>2)];
      label = 19; break;
    case 18: 
      var $147=$i;
      var $148=$irep;
      var $149=(($148+16)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150+((($147)*(12))&-1))|0);
      _mrb_nil_value($7);
      var $152=$151;
      var $153=$7;
      assert(12 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];
      label = 19; break;
    case 19: 
      var $155=$irep;
      var $156=(($155+36)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=((($157)+(1))|0);
      HEAP32[(($156)>>2)]=$158;
      var $159=$1;
      var $160=$ai;
      _mrb_gc_arena_restore($159, $160);
      label = 20; break;
    case 20: 
      var $162=$i;
      var $163=((($162)+(1))|0);
      $i=$163;
      label = 13; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $166=$src;
      var $167=_bin_to_uint32($166);
      var $168=$irep;
      var $169=(($168+40)|0);
      HEAP32[(($169)>>2)]=$167;
      var $170=$src;
      var $171=(($170+4)|0);
      $src=$171;
      var $172=$irep;
      var $173=(($172+40)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)>>>(0)) > 0;
      if ($175) { label = 23; break; } else { label = 32; break; }
    case 23: 
      var $177=$1;
      var $178=$irep;
      var $179=(($178+40)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=($180<<1);
      var $182=_mrb_malloc($177, $181);
      var $183=$182;
      var $184=$irep;
      var $185=(($184+20)|0);
      HEAP32[(($185)>>2)]=$183;
      var $186=$irep;
      var $187=(($186+20)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|(0))==0;
      if ($189) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $ret=-1;
      label = 33; break;
    case 25: 
      $i=0;
      label = 26; break;
    case 26: 
      var $193=$i;
      var $194=$irep;
      var $195=(($194+40)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($193)>>>(0)) < (($196)>>>(0));
      if ($197) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $199=$src;
      var $200=_bin_to_uint16($199);
      $snl=$200;
      var $201=$src;
      var $202=(($201+2)|0);
      $src=$202;
      var $203=$snl;
      var $204=(($203)&(65535));
      var $205=(($204)|(0))==65535;
      if ($205) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $207=$i;
      var $208=$irep;
      var $209=(($208+20)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210+($207<<1))|0);
      HEAP16[(($211)>>1)]=0;
      label = 30; break;
    case 29: 
      var $213=$1;
      var $214=$src;
      var $215=$snl;
      var $216=(($215)&(65535));
      var $217=_mrb_intern2($213, $214, $216);
      var $218=$i;
      var $219=$irep;
      var $220=(($219+20)|0);
      var $221=HEAP32[(($220)>>2)];
      var $222=(($221+($218<<1))|0);
      HEAP16[(($222)>>1)]=$217;
      var $223=$snl;
      var $224=(($223)&(65535));
      var $225=((($224)+(1))|0);
      var $226=$src;
      var $227=(($226+$225)|0);
      $src=$227;
      var $228=$1;
      var $229=$ai;
      _mrb_gc_arena_restore($228, $229);
      label = 30; break;
    case 30: 
      var $231=$i;
      var $232=((($231)+(1))|0);
      $i=$232;
      label = 26; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $235=$src;
      var $236=$2;
      var $237=$235;
      var $238=$236;
      var $239=((($237)-($238))|0);
      var $240=$3;
      HEAP32[(($240)>>2)]=$239;
      $ret=0;
      label = 33; break;
    case 33: 
      var $242=$ret;
      STACKTOP = __stackBase__;
      return $242;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_p($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  _mrb_funcall($2, $3, $obj, ((97204)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $4=$obj;
  var $5=$2;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  var $6=$1;
  _printstr($6, $obj);
  var $7=HEAP32[((_stdout)>>2)];
  var $8=_fputc(10, $7);
  STACKTOP = __stackBase__;
  return;
}
function _printstr($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str;
      var $s;
      var $len;
      $1=$mrb;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==16;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=(($obj)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $str=$9;
      var $10=$str;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      $s=$12;
      var $13=$str;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      $len=$15;
      var $16=$s;
      var $17=$len;
      var $18=HEAP32[((_stdout)>>2)];
      var $19=_fwrite($16, $17, 1, $18);
      label = 3; break;
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_new($mrb, $irep) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $p;
      $1=$mrb;
      $2=$irep;
      var $3=$1;
      var $4=$1;
      var $5=(($4+56)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_mrb_obj_alloc($3, 13, $6);
      var $8=$7;
      $p=$8;
      var $9=$1;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $25 = $22;label = 4; break;
    case 3: 
      var $25 = 0;label = 4; break;
    case 4: 
      var $25;
      var $26=$p;
      var $27=(($26+16)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$2;
      var $29=$p;
      var $30=(($29+12)|0);
      var $31=$30;
      HEAP32[(($31)>>2)]=$28;
      var $32=$p;
      var $33=(($32+20)|0);
      HEAP32[(($33)>>2)]=0;
      var $34=$p;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_closure_new($mrb, $irep) {
  var label = 0;
  var $1;
  var $2;
  var $p;
  $1=$mrb;
  $2=$irep;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_proc_new($3, $4);
  $p=$5;
  var $6=$1;
  var $7=$p;
  var $8=$1;
  var $9=(($8+8)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=(($10+16)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+4)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14+12)|0);
  var $16=$15;
  var $17=HEAP32[(($16)>>2)];
  var $18=(($17+4)|0);
  var $19=HEAP16[(($18)>>1)];
  var $20=(($19)&(65535));
  _closure_setup($6, $7, $20);
  var $21=$p;
  return $21;
}
function _closure_setup($mrb, $p, $nlocals) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $e;
      $1=$mrb;
      $2=$p;
      $3=$nlocals;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+40)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$1;
      var $14=$1;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=_mrb_obj_alloc($13, 20, $23);
      var $25=$24;
      $e=$25;
      var $26=$3;
      var $27=$e;
      var $28=$26 & 2097151;
      var $29=$27;
      var $30=$28 & 2097151;
      var $31=$30 << 11;
      var $32=HEAP32[(($29)>>2)];
      var $33=$32 & 2047;
      var $34=$33 | $31;
      HEAP32[(($29)>>2)]=$34;
      var $35=$1;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|0);
      var $41=HEAP16[(($40)>>1)];
      var $42=$e;
      var $43=(($42+16)|0);
      HEAP16[(($43)>>1)]=$41;
      var $44=$1;
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=$1;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+20)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$48;
      var $55=$53;
      var $56=((($54)-($55))|0);
      var $57=((((($56)|(0)))/(44))&-1);
      var $58=$e;
      var $59=(($58+20)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$1;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$e;
      var $66=(($65+12)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=$e;
      var $68=$1;
      var $69=(($68+8)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+40)|0);
      HEAP32[(($73)>>2)]=$67;
      label = 4; break;
    case 3: 
      var $75=$1;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+16)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+40)|0);
      var $81=HEAP32[(($80)>>2)];
      $e=$81;
      label = 4; break;
    case 4: 
      var $83=$e;
      var $84=$2;
      var $85=(($84+20)|0);
      HEAP32[(($85)>>2)]=$83;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_new_cfunc($mrb, $func) {
  var label = 0;
  var $1;
  var $2;
  var $p;
  $1=$mrb;
  $2=$func;
  var $3=$1;
  var $4=$1;
  var $5=(($4+56)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=_mrb_obj_alloc($3, 13, $6);
  var $8=$7;
  $p=$8;
  var $9=$2;
  var $10=$p;
  var $11=(($10+12)|0);
  var $12=$11;
  HEAP32[(($12)>>2)]=$9;
  var $13=$p;
  var $14=$13;
  var $15=HEAP32[(($14)>>2)];
  var $16=$15 >>> 11;
  var $17=$16 & 2097151;
  var $18=$17 | 128;
  var $19=$18 & 2097151;
  var $20=$13;
  var $21=$19 & 2097151;
  var $22=$21 << 11;
  var $23=HEAP32[(($20)>>2)];
  var $24=$23 & 2047;
  var $25=$24 | $22;
  HEAP32[(($20)>>2)]=$25;
  var $26=$p;
  return $26;
}
function _mrb_proc_copy($a, $b) {
  var label = 0;
  var $1;
  var $2;
  $1=$a;
  $2=$b;
  var $3=$2;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5 >>> 11;
  var $7=$6 & 2097151;
  var $8=$1;
  var $9=$7 & 2097151;
  var $10=$8;
  var $11=$9 & 2097151;
  var $12=$11 << 11;
  var $13=HEAP32[(($10)>>2)];
  var $14=$13 & 2047;
  var $15=$14 | $12;
  HEAP32[(($10)>>2)]=$15;
  var $16=$1;
  var $17=(($16+12)|0);
  var $18=$2;
  var $19=(($18+12)|0);
  var $20=$17;
  var $21=$19;
  assert(4 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];
  var $22=$2;
  var $23=(($22+16)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$1;
  var $26=(($25+16)|0);
  HEAP32[(($26)>>2)]=$24;
  var $27=$2;
  var $28=(($27+20)|0);
  var $29=HEAP32[(($28)>>2)];
  var $30=$1;
  var $31=(($30+20)|0);
  HEAP32[(($31)>>2)]=$29;
  return;
}
function _mrb_init_proc($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $m;
      var $call_irep;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_alloca($2, 44);
      var $4=$3;
      $call_irep=$4;
      var $5=$call_irep;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $9=$call_irep;
      var $10=$9;
      assert(44 % 1 === 0);_memcpy($10, 79828, 44);
      var $11=$call_irep;
      var $12=(($11+8)|0);
      HEAP8[($12)]=1;
      var $13=$call_irep;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=-1;
      var $15=$call_irep;
      var $16=(($15+12)|0);
      HEAP32[(($16)>>2)]=((92928)|0);
      var $17=$call_irep;
      var $18=(($17+32)|0);
      HEAP32[(($18)>>2)]=1;
      var $19=$1;
      var $20=$1;
      var $21=(($20+44)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_mrb_define_class($19, ((94084)|0), $22);
      var $24=$1;
      var $25=(($24+56)|0);
      HEAP32[(($25)>>2)]=$23;
      var $26=$1;
      var $27=(($26+56)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 11;
      var $32=$31 & 2097151;
      var $33=$32 & -256;
      var $34=$33 | 13;
      var $35=$1;
      var $36=(($35+56)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$34 & 2097151;
      var $39=$37;
      var $40=$38 & 2097151;
      var $41=$40 << 11;
      var $42=HEAP32[(($39)>>2)];
      var $43=$42 & 2047;
      var $44=$43 | $41;
      HEAP32[(($39)>>2)]=$44;
      var $45=$1;
      var $46=$1;
      var $47=(($46+56)|0);
      var $48=HEAP32[(($47)>>2)];
      _mrb_define_method($45, $48, ((113408)|0), 108, 0);
      var $49=$1;
      var $50=$1;
      var $51=(($50+56)|0);
      var $52=HEAP32[(($51)>>2)];
      _mrb_define_method($49, $52, ((108248)|0), 94, 262144);
      var $53=$1;
      var $54=$1;
      var $55=(($54+56)|0);
      var $56=HEAP32[(($55)>>2)];
      _mrb_define_method($53, $56, ((104548)|0), 638, 0);
      var $57=$1;
      var $58=$call_irep;
      var $59=_mrb_proc_new($57, $58);
      $m=$59;
      var $60=$1;
      var $61=$1;
      var $62=(($61+56)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$1;
      var $65=_mrb_intern($64, ((101736)|0));
      var $66=$m;
      _mrb_define_method_raw($60, $63, $65, $66);
      var $67=$1;
      var $68=$1;
      var $69=(($68+56)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$1;
      var $72=_mrb_intern($71, ((99036)|0));
      var $73=$m;
      _mrb_define_method_raw($67, $70, $72, $73);
      var $74=$1;
      var $75=$1;
      var $76=(($75+96)|0);
      var $77=HEAP32[(($76)>>2)];
      _mrb_define_class_method($74, $77, ((96920)|0), 360, 0);
      var $78=$1;
      var $79=$1;
      var $80=(($79+96)|0);
      var $81=HEAP32[(($80)>>2)];
      _mrb_define_method($78, $81, ((96920)|0), 360, 0);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $blk=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((95992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $4=(($blk+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=(($blk)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((94892)|0));
      _mrb_raise($13, $15, ((93804)|0));
      label = 5; break;
    case 4: 
      var $17=(($self)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($blk)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      _mrb_proc_copy($20, $24);
      label = 5; break;
    case 5: 
      var $26=$agg_result;
      var $27=$self;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_init_copy($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $proc=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((114120)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$proc,tempInt));
      var $4=(($proc+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=13;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$1;
      var $10=_mrb_class_get($9, ((94892)|0));
      _mrb_raise($8, $10, ((113420)|0));
      label = 3; break;
    case 3: 
      var $12=(($self)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=(($proc)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      _mrb_proc_copy($15, $19);
      var $20=$agg_result;
      var $21=$self;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_arity($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $iseq;
      var $aspec;
      var $ma;
      var $ra;
      var $pa;
      var $arity;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $p=$5;
      var $6=$1;
      var $7=$p;
      var $8=_mrb_proc_iseq($6, $7);
      $iseq=$8;
      var $9=$iseq;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 7;
      var $12=$11 & 33554431;
      $aspec=$12;
      var $13=$aspec;
      var $14=$13 >>> 18;
      var $15=$14 & 31;
      $ma=$15;
      var $16=$aspec;
      var $17=$16 & 4096;
      $ra=$17;
      var $18=$aspec;
      var $19=$18 >>> 7;
      var $20=$19 & 31;
      $pa=$20;
      var $21=$ra;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $24=$ma;
      var $25=$pa;
      var $26=((($24)+($25))|0);
      var $27=((($26)+(1))|0);
      var $28=(((-$27))|0);
      var $34 = $28;label = 4; break;
    case 3: 
      var $30=$ma;
      var $31=$pa;
      var $32=((($30)+($31))|0);
      var $34 = $32;label = 4; break;
    case 4: 
      var $34;
      $arity=$34;
      var $35=$arity;
      _mrb_fixnum_value($agg_result, $35);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _proc_lambda($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $blk=__stackBase__;
      var $p;
      var $p2;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((95992)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $4=(($blk+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=(($blk)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((94892)|0));
      _mrb_raise($13, $15, ((93804)|0));
      label = 4; break;
    case 4: 
      var $17=(($blk)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      $p=$20;
      var $21=$p;
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 11;
      var $25=$24 & 2097151;
      var $26=$25 & 256;
      var $27=(($26)|(0))!=0;
      if ($27) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $29=$1;
      var $30=$p;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=_mrb_obj_alloc($29, 13, $32);
      var $34=$33;
      $p2=$34;
      var $35=$p2;
      var $36=$p;
      _mrb_proc_copy($35, $36);
      var $37=$p2;
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 >>> 11;
      var $41=$40 & 2097151;
      var $42=$41 | 256;
      var $43=$42 & 2097151;
      var $44=$37;
      var $45=$43 & 2097151;
      var $46=$45 << 11;
      var $47=HEAP32[(($44)>>2)];
      var $48=$47 & 2047;
      var $49=$48 | $46;
      HEAP32[(($44)>>2)]=$49;
      var $50=$p2;
      var $51=$50;
      _mrb_obj_value19($agg_result, $51);
      label = 7; break;
    case 6: 
      var $53=$agg_result;
      var $54=$blk;
      assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value19($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_open_allocf($f, $ud) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mrb;
      $2=$f;
      $3=$ud;
      var $4=$2;
      var $5=$3;
      var $6=FUNCTION_TABLE[$4](0, 0, 584, $5);
      var $7=$6;
      $mrb=$7;
      var $8=$mrb;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $12=$mrb;
      var $13=$12;
      assert(584 % 1 === 0);_memcpy($13, 79168, 584);
      var $14=$3;
      var $15=$mrb;
      var $16=(($15+580)|0);
      HEAP32[(($16)>>2)]=$14;
      var $17=$2;
      var $18=$mrb;
      var $19=(($18+4)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$mrb;
      var $21=(($20+524)|0);
      HEAP32[(($21)>>2)]=1;
      var $22=$mrb;
      _mrb_init_heap($22);
      var $23=$mrb;
      var $24=_mrb_malloc($23, 52);
      var $25=$24;
      var $26=$mrb;
      var $27=(($26+8)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$mrb;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      assert(52 % 1 === 0);_memcpy($31, 79752, 52);
      var $32=$mrb;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$mrb;
      var $36=(($35+12)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=$mrb;
      _mrb_init_core($37);
      var $38=$mrb;
      $1=$38;
      label = 4; break;
    case 4: 
      var $40=$1;
      return $40;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_alloca($mrb, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p;
      $2=$mrb;
      $3=$size;
      var $4=$2;
      var $5=$3;
      var $6=((($5)+(4))|0);
      var $7=_mrb_malloc($4, $6);
      var $8=$7;
      $p=$8;
      var $9=$p;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $13=$2;
      var $14=(($13+560)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$p;
      var $17=(($16)|0);
      HEAP32[(($17)>>2)]=$15;
      var $18=$p;
      var $19=$2;
      var $20=(($19+560)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$p;
      var $22=(($21+4)|0);
      var $23=(($22)|0);
      $1=$23;
      label = 4; break;
    case 4: 
      var $25=$1;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_open() {
  var label = 0;
  var $mrb;
  var $1=_mrb_open_allocf(262, 0);
  $mrb=$1;
  var $2=$mrb;
  return $2;
}
Module["_mrb_open"] = _mrb_open;
function _allocf($mrb, $p, $size, $ud) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$mrb;
      $3=$p;
      $4=$size;
      $5=$ud;
      var $6=$4;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$3;
      _free($9);
      $1=0;
      label = 4; break;
    case 3: 
      var $11=$3;
      var $12=$4;
      var $13=_realloc($11, $12);
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_irep_free($mrb, $irep) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$irep;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP8[($4)];
      var $6=(($5)&(255));
      var $7=$6 & 1;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$1;
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      _mrb_free($10, $14);
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=$2;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      _mrb_free($16, $20);
      var $21=$1;
      var $22=$2;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      _mrb_free($21, $25);
      var $26=$1;
      var $27=$2;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      _mrb_free($26, $29);
      var $30=$1;
      var $31=$2;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      _mrb_free($30, $34);
      var $35=$1;
      var $36=$2;
      var $37=$36;
      _mrb_free($35, $37);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_context($mrb, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$c;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $7=$1;
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _mrb_free($7, $11);
      var $12=$1;
      var $13=$2;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      _mrb_free($12, $16);
      var $17=$1;
      var $18=$2;
      var $19=(($18+28)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      _mrb_free($17, $21);
      var $22=$1;
      var $23=$2;
      var $24=(($23+36)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      _mrb_free($22, $26);
      var $27=$1;
      var $28=$2;
      var $29=$28;
      _mrb_free($27, $29);
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_close($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      $1=$mrb;
      var $2=$1;
      _mrb_final_core($2);
      var $3=$1;
      _mrb_gc_free_gv($3);
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$1;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>(0)) < (($8)>>>(0));
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$1;
      var $12=$i;
      var $13=$1;
      var $14=(($13+24)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+($12<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      _mrb_irep_free($11, $17);
      label = 4; break;
    case 4: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 2; break;
    case 5: 
      var $22=$1;
      var $23=$1;
      var $24=(($23+24)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      _mrb_free($22, $26);
      var $27=$1;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      _mrb_free_context($27, $30);
      var $31=$1;
      _mrb_free_symtbl($31);
      var $32=$1;
      _mrb_free_heap($32);
      var $33=$1;
      _mrb_alloca_free($33);
      var $34=$1;
      var $35=$1;
      var $36=$35;
      _mrb_free($34, $36);
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mrb_close"] = _mrb_close;
function _mrb_alloca_free($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $tmp;
      $1=$mrb;
      var $2=$1;
      var $3=(($2)|(0))==0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $6=$1;
      var $7=(($6+560)|0);
      var $8=HEAP32[(($7)>>2)];
      $p=$8;
      label = 4; break;
    case 4: 
      var $10=$p;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$p;
      $tmp=$13;
      var $14=$p;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      $p=$16;
      var $17=$1;
      var $18=$tmp;
      var $19=$18;
      _mrb_free($17, $19);
      label = 4; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_add_irep($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $irep;
      var $max;
      var $i;
      var $old_capa;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+24)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 5; break; } else { label = 2; break; }
    case 2: 
      $max=256;
      var $7=$1;
      var $8=(($7+28)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$max;
      var $11=(($9)>>>(0)) > (($10)>>>(0));
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$1;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)+(1))|0);
      $max=$16;
      label = 4; break;
    case 4: 
      var $18=$1;
      var $19=$max;
      var $20=_mrb_calloc($18, $19, 4);
      var $21=$20;
      var $22=$1;
      var $23=(($22+24)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$max;
      var $25=$1;
      var $26=(($25+32)|0);
      HEAP32[(($26)>>2)]=$24;
      label = 15; break;
    case 5: 
      var $28=$1;
      var $29=(($28+32)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$1;
      var $32=(($31+28)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($30)>>>(0)) <= (($33)>>>(0));
      if ($34) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $36=$1;
      var $37=(($36+32)|0);
      var $38=HEAP32[(($37)>>2)];
      $old_capa=$38;
      label = 7; break;
    case 7: 
      var $40=$1;
      var $41=(($40+32)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$1;
      var $44=(($43+28)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($42)>>>(0)) <= (($45)>>>(0));
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$1;
      var $49=(($48+32)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=($50<<1);
      HEAP32[(($49)>>2)]=$51;
      label = 7; break;
    case 9: 
      var $53=$1;
      var $54=$1;
      var $55=(($54+24)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=$1;
      var $59=(($58+32)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=($60<<2);
      var $62=_mrb_realloc($53, $57, $61);
      var $63=$62;
      var $64=$1;
      var $65=(($64+24)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$old_capa;
      $i=$66;
      label = 10; break;
    case 10: 
      var $68=$i;
      var $69=$1;
      var $70=(($69+32)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)>>>(0)) < (($71)>>>(0));
      if ($72) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $74=$i;
      var $75=$1;
      var $76=(($75+24)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+($74<<2))|0);
      HEAP32[(($78)>>2)]=0;
      label = 12; break;
    case 12: 
      var $80=$i;
      var $81=((($80)+(1))|0);
      $i=$81;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $85=$1;
      var $86=_mrb_malloc($85, 44);
      var $87=$86;
      $irep=$87;
      var $88=$irep;
      var $89=$88;
      assert(44 % 1 === 0);_memcpy($89, 79912, 44);
      var $90=$irep;
      var $91=$1;
      var $92=(($91+28)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$1;
      var $95=(($94+24)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+($93<<2))|0);
      HEAP32[(($97)>>2)]=$90;
      var $98=$1;
      var $99=(($98+28)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)+(1))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=$irep;
      var $103=(($102)|0);
      HEAP32[(($103)>>2)]=$100;
      var $104=$irep;
      return $104;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_top_self($agg_result, $mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+40)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=(($8+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=_mrb_obj_alloc($7, 8, $10);
      var $12=$11;
      var $13=$1;
      var $14=(($13+40)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$1;
      var $16=$1;
      var $17=(($16+40)|0);
      var $18=HEAP32[(($17)>>2)];
      _mrb_define_singleton_method($15, $18, ((108588)|0), 544, 0);
      var $19=$1;
      var $20=$1;
      var $21=(($20+40)|0);
      var $22=HEAP32[(($21)>>2)];
      _mrb_define_singleton_method($19, $22, ((112520)|0), 544, 0);
      label = 3; break;
    case 3: 
      var $24=$1;
      var $25=(($24+40)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      _mrb_obj_value29($agg_result, $27);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_main($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_str_new($agg_result, $2, ((107544)|0), 4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_value29($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_modify($mrb, $s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $shared;
      var $ptr;
      var $p;
      var $len;
      var $p1;
      $1=$mrb;
      $2=$s;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $7=$6 & 2097151;
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      $shared=$14;
      var $15=$shared;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==1;
      if ($18) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $20=$2;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$shared;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|(0))==(($25)|(0));
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$shared;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+20)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$shared;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+16)|0);
      var $38=$37;
      HEAP32[(($38)>>2)]=$35;
      var $39=$1;
      var $40=$shared;
      var $41=$40;
      _mrb_free($39, $41);
      label = 8; break;
    case 5: 
      var $43=$2;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      $p=$45;
      var $46=$2;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      $len=$48;
      var $49=$1;
      var $50=$len;
      var $51=((($50)+(1))|0);
      var $52=_mrb_malloc($49, $51);
      $ptr=$52;
      var $53=$p;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $56=$ptr;
      var $57=$p;
      var $58=$len;
      assert($58 % 1 === 0);_memcpy($56, $57, $58);
      label = 7; break;
    case 7: 
      var $60=$len;
      var $61=$ptr;
      var $62=(($61+$60)|0);
      HEAP8[($62)]=0;
      var $63=$ptr;
      var $64=$2;
      var $65=(($64+20)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$len;
      var $67=$2;
      var $68=(($67+16)|0);
      var $69=$68;
      HEAP32[(($69)>>2)]=$66;
      var $70=$1;
      var $71=$shared;
      _str_decref($70, $71);
      label = 8; break;
    case 8: 
      var $73=$2;
      var $74=$73;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 >>> 11;
      var $77=$76 & 2097151;
      var $78=$77 & -2;
      var $79=$78 & 2097151;
      var $80=$73;
      var $81=$79 & 2097151;
      var $82=$81 << 11;
      var $83=HEAP32[(($80)>>2)];
      var $84=$83 & 2047;
      var $85=$84 | $82;
      HEAP32[(($80)>>2)]=$85;
      label = 13; break;
    case 9: 
      var $87=$2;
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89 >>> 11;
      var $91=$90 & 2097151;
      var $92=$91 & 2;
      var $93=(($92)|(0))!=0;
      if ($93) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $95=$2;
      var $96=(($95+20)|0);
      var $97=HEAP32[(($96)>>2)];
      $p1=$97;
      var $98=$1;
      var $99=$2;
      var $100=(($99+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=((($101)+(1))|0);
      var $103=_mrb_malloc($98, $102);
      var $104=$2;
      var $105=(($104+20)|0);
      HEAP32[(($105)>>2)]=$103;
      var $106=$p1;
      var $107=(($106)|(0))!=0;
      if ($107) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $109=$2;
      var $110=(($109+20)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$p1;
      var $113=$2;
      var $114=(($113+12)|0);
      var $115=HEAP32[(($114)>>2)];
      assert($115 % 1 === 0);_memcpy($111, $112, $115);
      label = 12; break;
    case 12: 
      var $117=$2;
      var $118=(($117+12)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=$2;
      var $121=(($120+20)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122+$119)|0);
      HEAP8[($123)]=0;
      var $124=$2;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$2;
      var $128=(($127+16)|0);
      var $129=$128;
      HEAP32[(($129)>>2)]=$126;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_decref($mrb, $shared) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$shared;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=((($5)-(1))|0);
      HEAP32[(($4)>>2)]=$6;
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $12=$2;
      var $13=(($12)|0);
      var $14=HEAP8[($13)];
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $17=$1;
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      _mrb_free($17, $20);
      label = 4; break;
    case 4: 
      var $22=$1;
      var $23=$2;
      var $24=$23;
      _mrb_free($22, $24);
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_resize($agg_result, $mrb, $str, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $slen;
      var $s;
      $1=$mrb;
      $2=$len;
      var $3=(($str)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $s=$6;
      var $7=$1;
      var $8=$s;
      _mrb_str_modify($7, $8);
      var $9=$s;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      $slen=$11;
      var $12=$2;
      var $13=$slen;
      var $14=(($12)|(0))!=(($13)|(0));
      if ($14) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $16=$slen;
      var $17=$2;
      var $18=(($16)|(0)) < (($17)|(0));
      if ($18) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $20=$slen;
      var $21=$2;
      var $22=((($20)-($21))|0);
      var $23=(($22)|(0)) > 1024;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$1;
      var $26=$s;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=((($29)+(1))|0);
      var $31=_mrb_realloc($25, $28, $30);
      var $32=$s;
      var $33=(($32+20)|0);
      HEAP32[(($33)>>2)]=$31;
      label = 5; break;
    case 5: 
      var $35=$2;
      var $36=$s;
      var $37=(($36+16)|0);
      var $38=$37;
      HEAP32[(($38)>>2)]=$35;
      var $39=$2;
      var $40=$s;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$2;
      var $43=$s;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+$42)|0);
      HEAP8[($46)]=0;
      label = 6; break;
    case 6: 
      var $48=$agg_result;
      var $49=$str;
      assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_with_class($mrb, $s, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$s;
  var $3=(($obj)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$2;
  var $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=$8;
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_buf_new($agg_result, $mrb, $capa) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      $1=$mrb;
      $2=$capa;
      var $3=$1;
      var $4=$1;
      var $5=(($4+60)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_mrb_obj_alloc($3, 16, $6);
      var $8=$7;
      $s=$8;
      var $9=$2;
      var $10=(($9)|(0)) < 128;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=128;
      label = 3; break;
    case 3: 
      var $13=$s;
      var $14=(($13+12)|0);
      HEAP32[(($14)>>2)]=0;
      var $15=$2;
      var $16=$s;
      var $17=(($16+16)|0);
      var $18=$17;
      HEAP32[(($18)>>2)]=$15;
      var $19=$1;
      var $20=$2;
      var $21=((($20)+(1))|0);
      var $22=_mrb_malloc($19, $21);
      var $23=$s;
      var $24=(($23+20)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$s;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0);
      HEAP8[($28)]=0;
      var $29=$s;
      var $30=$29;
      _mrb_obj_value44($agg_result, $30);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value44($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_buf_cat($agg_result, $mrb, $str, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$ptr;
      $3=$len;
      var $4=$3;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$agg_result;
      var $8=$str;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $10=$1;
      var $11=(($str)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=$2;
      var $16=$3;
      _str_buf_cat($10, $14, $15, $16);
      var $17=$agg_result;
      var $18=$str;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_buf_cat($mrb, $s, $ptr, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $capa;
      var $total;
      var $off;
      $1=$mrb;
      $2=$s;
      $3=$ptr;
      $4=$len;
      $off=-1;
      var $5=$1;
      var $6=$2;
      _mrb_str_modify($5, $6);
      var $7=$3;
      var $8=$2;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>(0)) >= (($10)>>>(0));
      if ($11) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+20)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$2;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>(0)) <= (($20)>>>(0));
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$3;
      var $24=$2;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$23;
      var $28=$26;
      var $29=((($27)-($28))|0);
      $off=$29;
      label = 4; break;
    case 4: 
      var $31=$4;
      var $32=(($31)|(0))==0;
      if ($32) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 20; break;
    case 6: 
      var $35=$2;
      var $36=(($35+16)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      $capa=$38;
      var $39=$2;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$4;
      var $43=(((2147483647)-($42))|0);
      var $44=(($41)|(0)) >= (($43)|(0));
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$1;
      var $47=$1;
      var $48=_mrb_class_get($47, ((104964)|0));
      _mrb_raise($46, $48, ((95416)|0));
      label = 8; break;
    case 8: 
      var $50=$2;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$4;
      var $54=((($52)+($53))|0);
      $total=$54;
      var $55=$capa;
      var $56=$total;
      var $57=(($55)|(0)) <= (($56)|(0));
      if ($57) { label = 9; break; } else { label = 17; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $60=$total;
      var $61=$capa;
      var $62=(($60)|(0)) > (($61)|(0));
      if ($62) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $64=$capa;
      var $65=((($64)+(1))|0);
      var $66=(($65)|(0)) >= 1073741823;
      if ($66) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $68=$total;
      var $69=((($68)+(4095))|0);
      var $70=((((($69)|(0)))/(4096))&-1);
      $capa=$70;
      label = 14; break;
    case 13: 
      var $72=$capa;
      var $73=((($72)+(1))|0);
      var $74=($73<<1);
      $capa=$74;
      label = 10; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $77=$1;
      var $78=$2;
      var $79=(($78+20)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$capa;
      var $82=((($81)+(1))|0);
      var $83=_mrb_realloc($77, $80, $82);
      var $84=$2;
      var $85=(($84+20)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=$capa;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=$88;
      HEAP32[(($89)>>2)]=$86;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $92=$off;
      var $93=(($92)|(0))!=-1;
      if ($93) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $95=$2;
      var $96=(($95+20)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$off;
      var $99=(($97+$98)|0);
      $3=$99;
      label = 19; break;
    case 19: 
      var $101=$2;
      var $102=(($101+20)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$2;
      var $105=(($104+12)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($103+$106)|0);
      var $108=$3;
      var $109=$4;
      assert($109 % 1 === 0);_memcpy($107, $108, $109);
      var $110=$total;
      var $111=$2;
      var $112=(($111+12)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$total;
      var $114=$2;
      var $115=(($114+20)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+$113)|0);
      HEAP8[($117)]=0;
      label = 20; break;
    case 20: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new($agg_result, $mrb, $p, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $s;
  $1=$mrb;
  $2=$p;
  $3=$len;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=_str_new($4, $5, $6);
  $s=$7;
  var $8=$s;
  var $9=$8;
  _mrb_obj_value44($agg_result, $9);
  return;
}
function _str_new($mrb, $p, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      $1=$mrb;
      $2=$p;
      $3=$len;
      var $4=$1;
      var $5=$1;
      var $6=(($5+60)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=_mrb_obj_alloc($4, 16, $7);
      var $9=$8;
      $s=$9;
      var $10=$3;
      var $11=$s;
      var $12=(($11+12)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$3;
      var $14=$s;
      var $15=(($14+16)|0);
      var $16=$15;
      HEAP32[(($16)>>2)]=$13;
      var $17=$1;
      var $18=$3;
      var $19=((($18)+(1))|0);
      var $20=_mrb_malloc($17, $19);
      var $21=$s;
      var $22=(($21+20)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=$2;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $26=$s;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$2;
      var $30=$3;
      assert($30 % 1 === 0);_memcpy($28, $29, $30);
      label = 3; break;
    case 3: 
      var $32=$3;
      var $33=$s;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+$32)|0);
      HEAP8[($36)]=0;
      var $37=$s;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_cstr($agg_result, $mrb, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $len;
      $1=$mrb;
      $2=$p;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $6=$2;
      var $7=_strlen($6);
      $len=$7;
      var $8=$len;
      var $9=(($8)|(0)) < 0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_get($12, ((104964)|0));
      _mrb_raise($11, $13, ((111956)|0));
      label = 4; break;
    case 4: 
      label = 6; break;
    case 5: 
      $len=0;
      label = 6; break;
    case 6: 
      var $17=$1;
      var $18=$1;
      var $19=(($18+60)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=_mrb_obj_alloc($17, 16, $20);
      var $22=$21;
      $s=$22;
      var $23=$1;
      var $24=$len;
      var $25=((($24)+(1))|0);
      var $26=_mrb_malloc($23, $25);
      var $27=$s;
      var $28=(($27+20)|0);
      HEAP32[(($28)>>2)]=$26;
      var $29=$2;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $32=$s;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=$len;
      assert($36 % 1 === 0);_memcpy($34, $35, $36);
      label = 8; break;
    case 8: 
      var $38=$len;
      var $39=$s;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+$38)|0);
      HEAP8[($42)]=0;
      var $43=$len;
      var $44=$s;
      var $45=(($44+12)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$len;
      var $47=$s;
      var $48=(($47+16)|0);
      var $49=$48;
      HEAP32[(($49)>>2)]=$46;
      var $50=$s;
      var $51=$50;
      _mrb_obj_value44($agg_result, $51);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_static($agg_result, $mrb, $p, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $s;
  $1=$mrb;
  $2=$p;
  $3=$len;
  var $4=$1;
  var $5=$1;
  var $6=(($5+60)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=_mrb_obj_alloc($4, 16, $7);
  var $9=$8;
  $s=$9;
  var $10=$3;
  var $11=$s;
  var $12=(($11+12)|0);
  HEAP32[(($12)>>2)]=$10;
  var $13=$s;
  var $14=(($13+16)|0);
  var $15=$14;
  HEAP32[(($15)>>2)]=0;
  var $16=$2;
  var $17=$s;
  var $18=(($17+20)|0);
  HEAP32[(($18)>>2)]=$16;
  var $19=$s;
  var $20=$19;
  var $21=HEAP32[(($20)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | 4096;
  HEAP32[(($20)>>2)]=$23;
  var $24=$s;
  var $25=$24;
  _mrb_obj_value44($agg_result, $25);
  return;
}
function _mrb_gc_free_str($mrb, $str) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$str;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $7=$6 & 2097151;
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      _str_decref($11, $15);
      label = 6; break;
    case 3: 
      var $17=$2;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $21=$20 & 2097151;
      var $22=$21 & 2;
      var $23=(($22)|(0))==0;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$1;
      var $26=$2;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      _mrb_free($25, $28);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_literal($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $orig;
      var $shared;
      $1=$mrb;
      var $2=$1;
      var $3=$1;
      var $4=(($3+60)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_mrb_obj_alloc($2, 16, $5);
      var $7=$6;
      $s=$7;
      var $8=(($str)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $orig=$11;
      var $12=$orig;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 11;
      var $16=$15 & 2097151;
      var $17=$16 & 1;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $20=$1;
      var $21=$orig;
      _str_make_shared($20, $21);
      label = 3; break;
    case 3: 
      var $23=$orig;
      var $24=(($23+16)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      $shared=$26;
      var $27=$shared;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=((($29)+(1))|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=$shared;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$s;
      var $35=(($34+20)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$shared;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$s;
      var $40=(($39+12)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$shared;
      var $42=$s;
      var $43=(($42+16)|0);
      var $44=$43;
      HEAP32[(($44)>>2)]=$41;
      var $45=$s;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 >>> 11;
      var $49=$48 & 2097151;
      var $50=$49 | 1;
      var $51=$50 & 2097151;
      var $52=$45;
      var $53=$51 & 2097151;
      var $54=$53 << 11;
      var $55=HEAP32[(($52)>>2)];
      var $56=$55 & 2047;
      var $57=$56 | $54;
      HEAP32[(($52)>>2)]=$57;
      var $58=$s;
      var $59=$58;
      _mrb_obj_value44($agg_result, $59);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _str_make_shared($mrb, $s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $shared;
      $1=$mrb;
      $2=$s;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $7=$6 & 2097151;
      var $8=$7 & 1;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 9; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=_mrb_malloc($11, 16);
      var $13=$12;
      $shared=$13;
      var $14=$shared;
      var $15=(($14+4)|0);
      HEAP32[(($15)>>2)]=1;
      var $16=$2;
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 >>> 11;
      var $20=$19 & 2097151;
      var $21=$20 & 2;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $24=$shared;
      var $25=(($24)|0);
      HEAP8[($25)]=1;
      var $26=$2;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$shared;
      var $30=(($29+8)|0);
      HEAP32[(($30)>>2)]=$28;
      var $31=$2;
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 >>> 11;
      var $35=$34 & 2097151;
      var $36=$35 & -3;
      var $37=$36 & 2097151;
      var $38=$31;
      var $39=$37 & 2097151;
      var $40=$39 << 11;
      var $41=HEAP32[(($38)>>2)];
      var $42=$41 & 2047;
      var $43=$42 | $40;
      HEAP32[(($38)>>2)]=$43;
      label = 8; break;
    case 4: 
      var $45=$shared;
      var $46=(($45)|0);
      HEAP8[($46)]=0;
      var $47=$2;
      var $48=(($47+16)|0);
      var $49=$48;
      var $50=HEAP32[(($49)>>2)];
      var $51=$2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50)|(0)) > (($53)|(0));
      if ($54) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $56=$1;
      var $57=$2;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$2;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($62)+(1))|0);
      var $64=_mrb_realloc($56, $59, $63);
      var $65=$shared;
      var $66=(($65+8)|0);
      HEAP32[(($66)>>2)]=$64;
      var $67=$2;
      var $68=(($67+20)|0);
      HEAP32[(($68)>>2)]=$64;
      label = 7; break;
    case 6: 
      var $70=$2;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$shared;
      var $74=(($73+8)|0);
      HEAP32[(($74)>>2)]=$72;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $77=$2;
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$shared;
      var $81=(($80+12)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$shared;
      var $83=$2;
      var $84=(($83+16)|0);
      var $85=$84;
      HEAP32[(($85)>>2)]=$82;
      var $86=$2;
      var $87=$86;
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 >>> 11;
      var $90=$89 & 2097151;
      var $91=$90 | 1;
      var $92=$91 & 2097151;
      var $93=$86;
      var $94=$92 & 2097151;
      var $95=$94 << 11;
      var $96=HEAP32[(($93)>>2)];
      var $97=$96 & 2047;
      var $98=$97 | $95;
      HEAP32[(($93)>>2)]=$98;
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_concat($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s1;
      var $s2;
      var $len;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=(($self)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $s1=$6;
      var $7=$1;
      var $8=$s1;
      _mrb_str_modify($7, $8);
      var $9=(($other+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==16;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$1;
      _mrb_str_to_str($2, $13, $other);
      var $14=$other;
      var $15=$2;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $17=(($other)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      $s2=$20;
      var $21=$s1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$s2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($23)+($26))|0);
      $len=$27;
      var $28=$s1;
      var $29=(($28+16)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$len;
      var $33=(($31)|(0)) < (($32)|(0));
      if ($33) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$len;
      var $36=$s1;
      var $37=(($36+16)|0);
      var $38=$37;
      HEAP32[(($38)>>2)]=$35;
      var $39=$1;
      var $40=$s1;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$len;
      var $44=((($43)+(1))|0);
      var $45=_mrb_realloc($39, $42, $44);
      var $46=$s1;
      var $47=(($46+20)|0);
      HEAP32[(($47)>>2)]=$45;
      label = 5; break;
    case 5: 
      var $49=$s1;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$s1;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51+$54)|0);
      var $56=$s2;
      var $57=(($56+20)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$s2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      assert($61 % 1 === 0);_memcpy($55, $58, $61);
      var $62=$len;
      var $63=$s1;
      var $64=(($63+12)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$len;
      var $66=$s1;
      var $67=(($66+20)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+$65)|0);
      HEAP8[($69)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_str($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      $1=$mrb;
      var $4=(($str+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==16;
      if ($6) { label = 6; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      _mrb_check_convert_type($2, $8, $str, 16, ((96576)|0), ((98344)|0));
      var $9=$s;
      var $10=$2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=(($s+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==0;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=(($s)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=$1;
      _mrb_convert_type($3, $20, $str, 16, ((96576)|0), ((95388)|0));
      var $21=$s;
      var $22=$3;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $24=$agg_result;
      var $25=$s;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $27=$agg_result;
      var $28=$str;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_plus($agg_result, $mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  var $s2;
  var $t;
  $1=$mrb;
  var $2=(($a)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $s=$5;
  var $6=(($b)|0);
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=$8;
  $s2=$9;
  var $10=$1;
  var $11=$s;
  var $12=(($11+12)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$s2;
  var $15=(($14+12)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=((($13)+($16))|0);
  var $18=_str_new($10, 0, $17);
  $t=$18;
  var $19=$t;
  var $20=(($19+20)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=$s;
  var $23=(($22+20)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$s;
  var $26=(($25+12)|0);
  var $27=HEAP32[(($26)>>2)];
  assert($27 % 1 === 0);_memcpy($21, $24, $27);
  var $28=$t;
  var $29=(($28+20)|0);
  var $30=HEAP32[(($29)>>2)];
  var $31=$s;
  var $32=(($31+12)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=(($30+$33)|0);
  var $35=$s2;
  var $36=(($35+20)|0);
  var $37=HEAP32[(($36)>>2)];
  var $38=$s2;
  var $39=(($38+12)|0);
  var $40=HEAP32[(($39)>>2)];
  assert($40 % 1 === 0);_memcpy($34, $37, $40);
  var $41=$t;
  var $42=$41;
  _mrb_obj_value44($agg_result, $42);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_size($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $s=$5;
  var $6=$s;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  _mrb_fixnum_value47($agg_result, $8);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value47($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_hash($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $len;
      var $p;
      var $key;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$s;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $len=$8;
      var $9=$s;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      $p=$11;
      $key=0;
      label = 2; break;
    case 2: 
      var $13=$len;
      var $14=((($13)-(1))|0);
      $len=$14;
      var $15=(($13)|(0))!=0;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$key;
      var $18=((($17)*(65599))&-1);
      var $19=$p;
      var $20=HEAP8[($19)];
      var $21=(($20 << 24) >> 24);
      var $22=((($18)+($21))|0);
      $key=$22;
      var $23=$p;
      var $24=(($23+1)|0);
      $p=$24;
      label = 2; break;
    case 4: 
      var $26=$key;
      var $27=$key;
      var $28=$27 >> 5;
      var $29=((($26)+($28))|0);
      $key=$29;
      var $30=$key;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cmp($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $len;
      var $retval;
      var $s1;
      var $s2;
      $2=$mrb;
      var $3=(($str1)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $s1=$6;
      var $7=(($str2)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      $s2=$10;
      var $11=$s1;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$s2;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|(0)) > (($16)|(0));
      if ($17) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $19=$s2;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $27 = $21;label = 4; break;
    case 3: 
      var $23=$s1;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $27 = $25;label = 4; break;
    case 4: 
      var $27;
      $len=$27;
      var $28=$s1;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$s2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$len;
      var $35=_memcmp($30, $33, $34);
      $retval=$35;
      var $36=$retval;
      var $37=(($36)|(0))==0;
      if ($37) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $39=$s1;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$s2;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($41)|(0))==(($44)|(0));
      if ($45) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 13; break;
    case 7: 
      var $48=$s1;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$s2;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50)|(0)) > (($53)|(0));
      if ($54) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=1;
      label = 13; break;
    case 9: 
      $1=-1;
      label = 13; break;
    case 10: 
      var $58=$retval;
      var $59=(($58)|(0)) > 0;
      if ($59) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=1;
      label = 13; break;
    case 12: 
      $1=-1;
      label = 13; break;
    case 13: 
      var $63=$1;
      STACKTOP = __stackBase__;
      return $63;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_equal($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      $2=$mrb;
      var $4=$2;
      var $5=_mrb_obj_equal($4, $str1, $str2);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 11; break;
    case 3: 
      var $9=(($str2+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==16;
      if ($11) { label = 10; break; } else { label = 4; break; }
    case 4: 
      var $13=(($str2+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==0;
      if ($15) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $17=(($str2)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 6; break; }
    case 6: 
      $1=0;
      label = 11; break;
    case 7: 
      var $23=$2;
      var $24=$2;
      var $25=_mrb_intern2($24, ((98344)|0), 6);
      var $26=_mrb_respond_to($23, $str2, $25);
      var $27=(($26)|(0))!=0;
      if ($27) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $1=0;
      label = 11; break;
    case 9: 
      var $30=$2;
      _mrb_funcall($3, $30, $str2, ((98344)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=$str2;
      var $32=$3;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      var $33=$2;
      var $34=_mrb_equal($33, $str2, $str1);
      $1=$34;
      label = 11; break;
    case 10: 
      var $36=$2;
      var $37=_str_eql($36, $str1, $str2);
      $1=$37;
      label = 11; break;
    case 11: 
      var $39=$1;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _str_eql($mrb, $str1, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $len;
      $2=$mrb;
      var $3=(($str1)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $len=$8;
      var $9=$len;
      var $10=(($str2)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($9)|(0))!=(($15)|(0));
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $19=(($str1)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($str2)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$len;
      var $32=_memcmp($24, $30, $31);
      var $33=(($32)|(0))==0;
      if ($33) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $37=$1;
      STACKTOP = __stackBase__;
      return $37;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_dup($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  $1=$mrb;
  var $2=(($str)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $s=$5;
  var $6=$1;
  var $7=$s;
  var $8=(($7+20)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$s;
  var $11=(($10+12)|0);
  var $12=HEAP32[(($11)>>2)];
  _mrb_str_new($agg_result, $6, $9, $12);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_substr($agg_result, $mrb, $str, $beg, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $str2=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$beg;
      $3=$len;
      var $5=$3;
      var $6=(($5)|(0)) < 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 3: 
      var $9=(($str)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $3=0;
      label = 5; break;
    case 5: 
      var $18=$2;
      var $19=(($str)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($18)|(0)) > (($24)|(0));
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 7: 
      var $28=$2;
      var $29=(($28)|(0)) < 0;
      if ($29) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $31=(($str)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$2;
      var $38=((($37)+($36))|0);
      $2=$38;
      var $39=$2;
      var $40=(($39)|(0)) < 0;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $44=$2;
      var $45=$3;
      var $46=((($44)+($45))|0);
      var $47=(($str)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($46)|(0)) > (($52)|(0));
      if ($53) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55=(($str)|0);
      var $56=$55;
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=((($60)-($61))|0);
      $3=$62;
      label = 13; break;
    case 13: 
      var $64=$3;
      var $65=(($64)|(0)) <= 0;
      if ($65) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $3=0;
      label = 15; break;
    case 15: 
      var $68=$1;
      var $69=$2;
      var $70=$3;
      _mrb_str_subseq($4, $68, $str, $69, $70);
      var $71=$str2;
      var $72=$4;
      assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
      var $73=$agg_result;
      var $74=$str2;
      assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value48($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_subseq($agg_result, $mrb, $str, $beg, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $orig;
  var $s;
  var $shared;
  $1=$mrb;
  $2=$beg;
  $3=$len;
  var $4=(($str)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  $orig=$7;
  var $8=$1;
  var $9=$orig;
  _str_make_shared($8, $9);
  var $10=$orig;
  var $11=(($10+16)|0);
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  $shared=$13;
  var $14=$1;
  var $15=$1;
  var $16=(($15+60)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=_mrb_obj_alloc($14, 16, $17);
  var $19=$18;
  $s=$19;
  var $20=$orig;
  var $21=(($20+20)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=$2;
  var $24=(($22+$23)|0);
  var $25=$s;
  var $26=(($25+20)|0);
  HEAP32[(($26)>>2)]=$24;
  var $27=$3;
  var $28=$s;
  var $29=(($28+12)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$shared;
  var $31=$s;
  var $32=(($31+16)|0);
  var $33=$32;
  HEAP32[(($33)>>2)]=$30;
  var $34=$s;
  var $35=$34;
  var $36=HEAP32[(($35)>>2)];
  var $37=$36 >>> 11;
  var $38=$37 & 2097151;
  var $39=$38 | 1;
  var $40=$39 & 2097151;
  var $41=$34;
  var $42=$40 & 2097151;
  var $43=$42 << 11;
  var $44=HEAP32[(($41)>>2)];
  var $45=$44 & 2047;
  var $46=$45 | $43;
  HEAP32[(($41)>>2)]=$46;
  var $47=$shared;
  var $48=(($47+4)|0);
  var $49=HEAP32[(($48)>>2)];
  var $50=((($49)+(1))|0);
  HEAP32[(($48)>>2)]=$50;
  var $51=$s;
  var $52=$51;
  _mrb_obj_value44($agg_result, $52);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_buf_append($agg_result, $mrb, $str, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  var $4=(($str2)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=(($7+20)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($str2)|0);
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=$12;
  var $14=(($13+12)|0);
  var $15=HEAP32[(($14)>>2)];
  _mrb_str_cat($2, $3, $str, $9, $15);
  var $16=$agg_result;
  var $17=$str;
  assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat($agg_result, $mrb, $str, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$ptr;
      $3=$len;
      var $4=$3;
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((104964)|0));
      _mrb_raise($7, $9, ((111992)|0));
      label = 3; break;
    case 3: 
      var $11=$1;
      var $12=(($str)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=$2;
      var $17=$3;
      _str_buf_cat($11, $15, $16, $17);
      var $18=$agg_result;
      var $19=$str;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_intern($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_intern_str($2, $self);
  $id=$3;
  var $4=$id;
  _mrb_symbol_value($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_as_string($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($obj+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==16;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$agg_result;
      var $8=$obj;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $10=$1;
      _mrb_funcall($2, $10, $obj, ((95388)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=$str;
      var $12=$2;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($str+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==16;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$1;
      _mrb_any_to_s($agg_result, $17, $obj);
      label = 6; break;
    case 5: 
      var $19=$agg_result;
      var $20=$str;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ptr_to_str($agg_result, $mrb, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $p_str;
      var $p1;
      var $p2;
      var $n;
      var $c;
      $1=$mrb;
      $2=$p;
      var $3=$2;
      var $4=$3;
      $n=$4;
      var $5=$1;
      var $6=_str_new($5, 0, 10);
      $p_str=$6;
      var $7=$p_str;
      var $8=(($7+20)|0);
      var $9=HEAP32[(($8)>>2)];
      $p1=$9;
      var $10=$p1;
      var $11=(($10+1)|0);
      $p1=$11;
      HEAP8[($10)]=48;
      var $12=$p1;
      var $13=(($12+1)|0);
      $p1=$13;
      HEAP8[($12)]=120;
      var $14=$p1;
      $p2=$14;
      label = 2; break;
    case 2: 
      var $16=$n;
      var $17=((($16)|(0)))%(16);
      var $18=((79872+$17)|0);
      var $19=HEAP8[($18)];
      var $20=$p2;
      var $21=(($20+1)|0);
      $p2=$21;
      HEAP8[($20)]=$19;
      var $22=$n;
      var $23=((((($22)|(0)))/(16))&-1);
      $n=$23;
      label = 3; break;
    case 3: 
      var $25=$n;
      var $26=(($25)|(0)) > 0;
      if ($26) { label = 2; break; } else { label = 4; break; }
    case 4: 
      var $28=$p2;
      HEAP8[($28)]=0;
      var $29=$p2;
      var $30=$p_str;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$29;
      var $34=$32;
      var $35=((($33)-($34))|0);
      var $36=$p_str;
      var $37=(($36+12)|0);
      HEAP32[(($37)>>2)]=$35;
      label = 5; break;
    case 5: 
      var $39=$p1;
      var $40=$p2;
      var $41=(($39)>>>(0)) < (($40)>>>(0));
      if ($41) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $43=$p1;
      var $44=HEAP8[($43)];
      $c=$44;
      var $45=$p2;
      var $46=((($45)-(1))|0);
      $p2=$46;
      var $47=HEAP8[($46)];
      var $48=$p1;
      var $49=(($48+1)|0);
      $p1=$49;
      HEAP8[($48)]=$47;
      var $50=$c;
      var $51=$p2;
      HEAP8[($51)]=$50;
      label = 5; break;
    case 7: 
      var $53=$p_str;
      var $54=$53;
      _mrb_obj_value44($agg_result, $54);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_string_type($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_check_convert_type($agg_result, $2, $str, 16, ((96576)|0), ((98344)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_cstr_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $end=__stackBase__;
      var $sign;
      var $c;
      var $n;
      var $val;
      var $5=(__stackBase__)+(4);
      var $us;
      var $6=(__stackBase__)+(16);
      var $7=(__stackBase__)+(28);
      $1=$mrb;
      $2=$str;
      $3=$base;
      $4=$badcheck;
      $sign=1;
      var $8=$2;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $11=$4;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 106; break;
    case 4: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 107; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$2;
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=_isspace($19);
      var $21=(($20)|(0))!=0;
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $23=$2;
      var $24=(($23+1)|0);
      $2=$24;
      label = 6; break;
    case 8: 
      var $26=$2;
      var $27=(($26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28 << 24) >> 24);
      var $30=(($29)|(0))==43;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$2;
      var $33=(($32+1)|0);
      $2=$33;
      label = 13; break;
    case 10: 
      var $35=$2;
      var $36=(($35)|0);
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=(($38)|(0))==45;
      if ($39) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $41=$2;
      var $42=(($41+1)|0);
      $2=$42;
      $sign=0;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $45=$2;
      var $46=(($45)|0);
      var $47=HEAP8[($46)];
      var $48=(($47 << 24) >> 24);
      var $49=(($48)|(0))==43;
      if ($49) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $51=$2;
      var $52=(($51)|0);
      var $53=HEAP8[($52)];
      var $54=(($53 << 24) >> 24);
      var $55=(($54)|(0))==45;
      if ($55) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $57=$4;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 106; break;
    case 17: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 107; break;
    case 18: 
      var $62=$3;
      var $63=(($62)|(0)) <= 0;
      if ($63) { label = 19; break; } else { label = 32; break; }
    case 19: 
      var $65=$2;
      var $66=(($65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67 << 24) >> 24);
      var $69=(($68)|(0))==48;
      if ($69) { label = 20; break; } else { label = 27; break; }
    case 20: 
      var $71=$2;
      var $72=(($71+1)|0);
      var $73=HEAP8[($72)];
      var $74=(($73 << 24) >> 24);
      if ((($74)|(0))==120 | (($74)|(0))==88) {
        label = 21; break;
      }
      else if ((($74)|(0))==98 | (($74)|(0))==66) {
        label = 22; break;
      }
      else if ((($74)|(0))==111 | (($74)|(0))==79) {
        label = 23; break;
      }
      else if ((($74)|(0))==100 | (($74)|(0))==68) {
        label = 24; break;
      }
      else {
      label = 25; break;
      }
    case 21: 
      $3=16;
      label = 26; break;
    case 22: 
      $3=2;
      label = 26; break;
    case 23: 
      $3=8;
      label = 26; break;
    case 24: 
      $3=10;
      label = 26; break;
    case 25: 
      $3=8;
      label = 26; break;
    case 26: 
      label = 31; break;
    case 27: 
      var $82=$3;
      var $83=(($82)|(0)) < -1;
      if ($83) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $85=$3;
      var $86=(((-$85))|0);
      $3=$86;
      label = 30; break;
    case 29: 
      $3=10;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $91=$3;
      if ((($91)|(0))==2) {
        label = 33; break;
      }
      else if ((($91)|(0))==3) {
        label = 38; break;
      }
      else if ((($91)|(0))==8) {
        label = 39; break;
      }
      else if ((($91)|(0))==4 | (($91)|(0))==5 | (($91)|(0))==6 | (($91)|(0))==7) {
        label = 44; break;
      }
      else if ((($91)|(0))==10) {
        label = 45; break;
      }
      else if ((($91)|(0))==9 | (($91)|(0))==11 | (($91)|(0))==12 | (($91)|(0))==13 | (($91)|(0))==14 | (($91)|(0))==15) {
        label = 50; break;
      }
      else if ((($91)|(0))==16) {
        label = 51; break;
      }
      else {
      label = 56; break;
      }
    case 33: 
      var $93=$2;
      var $94=(($93)|0);
      var $95=HEAP8[($94)];
      var $96=(($95 << 24) >> 24);
      var $97=(($96)|(0))==48;
      if ($97) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $99=$2;
      var $100=(($99+1)|0);
      var $101=HEAP8[($100)];
      var $102=(($101 << 24) >> 24);
      var $103=(($102)|(0))==98;
      if ($103) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $105=$2;
      var $106=(($105+1)|0);
      var $107=HEAP8[($106)];
      var $108=(($107 << 24) >> 24);
      var $109=(($108)|(0))==66;
      if ($109) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $111=$2;
      var $112=(($111+2)|0);
      $2=$112;
      label = 37; break;
    case 37: 
      label = 60; break;
    case 38: 
      label = 60; break;
    case 39: 
      var $116=$2;
      var $117=(($116)|0);
      var $118=HEAP8[($117)];
      var $119=(($118 << 24) >> 24);
      var $120=(($119)|(0))==48;
      if ($120) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $122=$2;
      var $123=(($122+1)|0);
      var $124=HEAP8[($123)];
      var $125=(($124 << 24) >> 24);
      var $126=(($125)|(0))==111;
      if ($126) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $128=$2;
      var $129=(($128+1)|0);
      var $130=HEAP8[($129)];
      var $131=(($130 << 24) >> 24);
      var $132=(($131)|(0))==79;
      if ($132) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $134=$2;
      var $135=(($134+2)|0);
      $2=$135;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 60; break;
    case 45: 
      var $139=$2;
      var $140=(($139)|0);
      var $141=HEAP8[($140)];
      var $142=(($141 << 24) >> 24);
      var $143=(($142)|(0))==48;
      if ($143) { label = 46; break; } else { label = 49; break; }
    case 46: 
      var $145=$2;
      var $146=(($145+1)|0);
      var $147=HEAP8[($146)];
      var $148=(($147 << 24) >> 24);
      var $149=(($148)|(0))==100;
      if ($149) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $151=$2;
      var $152=(($151+1)|0);
      var $153=HEAP8[($152)];
      var $154=(($153 << 24) >> 24);
      var $155=(($154)|(0))==68;
      if ($155) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $157=$2;
      var $158=(($157+2)|0);
      $2=$158;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 60; break;
    case 51: 
      var $162=$2;
      var $163=(($162)|0);
      var $164=HEAP8[($163)];
      var $165=(($164 << 24) >> 24);
      var $166=(($165)|(0))==48;
      if ($166) { label = 52; break; } else { label = 55; break; }
    case 52: 
      var $168=$2;
      var $169=(($168+1)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      var $172=(($171)|(0))==120;
      if ($172) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $174=$2;
      var $175=(($174+1)|0);
      var $176=HEAP8[($175)];
      var $177=(($176 << 24) >> 24);
      var $178=(($177)|(0))==88;
      if ($178) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $180=$2;
      var $181=(($180+2)|0);
      $2=$181;
      label = 55; break;
    case 55: 
      label = 60; break;
    case 56: 
      var $184=$3;
      var $185=(($184)|(0)) < 2;
      if ($185) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $187=$3;
      var $188=36 < (($187)|(0));
      if ($188) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $190=$1;
      var $191=$1;
      var $192=_mrb_class_get($191, ((104964)|0));
      var $193=$3;
      _mrb_fixnum_value47($5, $193);
      _mrb_raisef($190, $192, ((94488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $196=$2;
      var $197=HEAP8[($196)];
      var $198=(($197 << 24) >> 24);
      var $199=(($198)|(0))==48;
      if ($199) { label = 61; break; } else { label = 75; break; }
    case 61: 
      $us=0;
      label = 62; break;
    case 62: 
      var $202=$2;
      var $203=(($202+1)|0);
      $2=$203;
      var $204=HEAP8[($203)];
      var $205=(($204 << 24) >> 24);
      $c=$205;
      var $206=(($205)|(0))==48;
      if ($206) { var $211 = 1;label = 64; break; } else { label = 63; break; }
    case 63: 
      var $208=$c;
      var $209=(($208)|(0))==95;
      var $211 = $209;label = 64; break;
    case 64: 
      var $211;
      if ($211) { label = 65; break; } else { label = 71; break; }
    case 65: 
      var $213=$c;
      var $214=(($213)|(0))==95;
      if ($214) { label = 66; break; } else { label = 69; break; }
    case 66: 
      var $216=$us;
      var $217=((($216)+(1))|0);
      $us=$217;
      var $218=(($217)|(0)) >= 2;
      if ($218) { label = 67; break; } else { label = 68; break; }
    case 67: 
      label = 71; break;
    case 68: 
      label = 70; break;
    case 69: 
      $us=0;
      label = 70; break;
    case 70: 
      label = 62; break;
    case 71: 
      var $224=$2;
      var $225=HEAP8[($224)];
      var $226=(($225 << 24) >> 24);
      $c=$226;
      var $227=(($226)|(0))!=0;
      if ($227) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $229=$c;
      var $230=(($229) & 255);
      var $231=(($230)&(255));
      var $232=_isspace($231);
      var $233=(($232)|(0))!=0;
      if ($233) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $235=$2;
      var $236=((($235)-(1))|0);
      $2=$236;
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $239=$2;
      var $240=HEAP8[($239)];
      var $241=(($240 << 24) >> 24);
      $c=$241;
      var $242=$c;
      var $243=_isdigit($242);
      var $244=(($243)|(0))!=0;
      if ($244) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $246=$c;
      var $247=((($246)-(48))|0);
      var $270 = $247;label = 84; break;
    case 77: 
      var $249=$c;
      var $250=_islower($249);
      var $251=(($250)|(0))!=0;
      if ($251) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $253=$c;
      var $254=((($253)-(97))|0);
      var $255=((($254)+(10))|0);
      var $268 = $255;label = 83; break;
    case 79: 
      var $257=$c;
      var $258=_isupper($257);
      var $259=(($258)|(0))!=0;
      if ($259) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $261=$c;
      var $262=((($261)-(65))|0);
      var $263=((($262)+(10))|0);
      var $266 = $263;label = 82; break;
    case 81: 
      var $266 = -1;label = 82; break;
    case 82: 
      var $266;
      var $268 = $266;label = 83; break;
    case 83: 
      var $268;
      var $270 = $268;label = 84; break;
    case 84: 
      var $270;
      $c=$270;
      var $271=$c;
      var $272=(($271)|(0)) < 0;
      if ($272) { label = 86; break; } else { label = 85; break; }
    case 85: 
      var $274=$c;
      var $275=$3;
      var $276=(($274)|(0)) >= (($275)|(0));
      if ($276) { label = 86; break; } else { label = 89; break; }
    case 86: 
      var $278=$4;
      var $279=(($278)|(0))!=0;
      if ($279) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 106; break;
    case 88: 
      _mrb_fixnum_value47($agg_result, 0);
      label = 107; break;
    case 89: 
      var $283=$2;
      var $284=$3;
      var $285=_strtoul($283, $end, $284);
      $n=$285;
      var $286=$n;
      var $287=(($286)>>>(0)) > 2147483647;
      if ($287) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $289=$1;
      var $290=$1;
      var $291=_mrb_class_get($290, ((104964)|0));
      var $292=$1;
      var $293=$2;
      _mrb_str_new_cstr($6, $292, $293);
      _mrb_raisef($289, $291, ((93560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
      label = 91; break;
    case 91: 
      var $295=$n;
      $val=$295;
      var $296=$4;
      var $297=(($296)|(0))!=0;
      if ($297) { label = 92; break; } else { label = 102; break; }
    case 92: 
      var $299=HEAP32[(($end)>>2)];
      var $300=$2;
      var $301=(($299)|(0))==(($300)|(0));
      if ($301) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 106; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $305=HEAP32[(($end)>>2)];
      var $306=HEAP8[($305)];
      var $307=(($306 << 24) >> 24);
      var $308=(($307)|(0))!=0;
      if ($308) { label = 96; break; } else { var $316 = 0;label = 97; break; }
    case 96: 
      var $310=HEAP32[(($end)>>2)];
      var $311=HEAP8[($310)];
      var $312=(($311)&(255));
      var $313=_isspace($312);
      var $314=(($313)|(0))!=0;
      var $316 = $314;label = 97; break;
    case 97: 
      var $316;
      if ($316) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $318=HEAP32[(($end)>>2)];
      var $319=(($318+1)|0);
      HEAP32[(($end)>>2)]=$319;
      label = 95; break;
    case 99: 
      var $321=HEAP32[(($end)>>2)];
      var $322=HEAP8[($321)];
      var $323=(($322 << 24) >> 24)!=0;
      if ($323) { label = 100; break; } else { label = 101; break; }
    case 100: 
      label = 106; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $327=$sign;
      var $328=(($327 << 24) >> 24);
      var $329=(($328)|(0))!=0;
      if ($329) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $331=$val;
      var $336 = $331;label = 105; break;
    case 104: 
      var $333=$val;
      var $334=(((-$333))|0);
      var $336 = $334;label = 105; break;
    case 105: 
      var $336;
      _mrb_fixnum_value47($agg_result, $336);
      label = 107; break;
    case 106: 
      var $338=$1;
      var $339=$1;
      var $340=_mrb_class_get($339, ((104964)|0));
      var $341=$1;
      var $342=$2;
      _mrb_str_new_cstr($7, $341, $342);
      _mrb_raisef($338, $340, ((113620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
      _mrb_fixnum_value47($agg_result, 0);
      label = 107; break;
    case 107: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_string_value_cstr($mrb, $ptr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ps;
      var $s;
      $1=$mrb;
      $2=$ptr;
      var $3=$2;
      var $4=(($3)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $ps=$7;
      var $8=$ps;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $s=$10;
      var $11=$s;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$ps;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$s;
      var $18=_strlen($17);
      var $19=(($16)|(0))!=(($18)|(0));
      if ($19) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $21=$1;
      var $22=$1;
      var $23=_mrb_class_get($22, ((104964)|0));
      _mrb_raise($21, $23, ((100884)|0));
      label = 4; break;
    case 4: 
      var $25=$s;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_inum($agg_result, $mrb, $str, $base, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      var $len;
      var $4=__stackBase__;
      var $temp_str;
      $1=$mrb;
      $2=$base;
      $3=$badcheck;
      var $5=$1;
      _mrb_str_to_str($4, $5, $str);
      var $6=$str;
      var $7=$4;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=$3;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=_mrb_string_value_cstr($11, $str);
      $s=$12;
      label = 4; break;
    case 3: 
      var $14=(($str)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      $s=$19;
      label = 4; break;
    case 4: 
      var $21=$s;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $24=(($str)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      $len=$29;
      var $30=$len;
      var $31=$s;
      var $32=(($31+$30)|0);
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24)!=0;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $36=$1;
      var $37=$s;
      var $38=$len;
      var $39=_str_new($36, $37, $38);
      $temp_str=$39;
      var $40=$temp_str;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      $s=$42;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $45=$1;
      var $46=$s;
      var $47=$2;
      var $48=$3;
      _mrb_cstr_to_inum($agg_result, $45, $46, $47, $48);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cstr_to_dbl($mrb, $p, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $end=__stackBase__;
      var $d;
      var $5=(__stackBase__)+(4);
      var $buf=(__stackBase__)+(16);
      var $n;
      var $e;
      var $prev;
      $2=$mrb;
      $3=$p;
      $4=$badcheck;
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 61; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$3;
      var $12=HEAP8[($11)];
      var $13=(($12)&(255));
      var $14=_isspace($13);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$3;
      var $18=(($17+1)|0);
      $3=$18;
      label = 4; break;
    case 6: 
      var $20=$4;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 11; break; } else { label = 7; break; }
    case 7: 
      var $23=$3;
      var $24=(($23)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|(0))==48;
      if ($27) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $29=$3;
      var $30=(($29+1)|0);
      var $31=HEAP8[($30)];
      var $32=(($31 << 24) >> 24);
      var $33=(($32)|(0))==120;
      if ($33) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $35=$3;
      var $36=(($35+1)|0);
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=(($38)|(0))==88;
      if ($39) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 61; break;
    case 11: 
      var $42=$3;
      var $43=_strtod($42, $end);
      $d=$43;
      var $44=$3;
      var $45=HEAP32[(($end)>>2)];
      var $46=(($44)|(0))==(($45)|(0));
      if ($46) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $48=$4;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 13; break; } else { label = 15; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $52=$2;
      var $53=$2;
      var $54=_mrb_class_get($53, ((104964)|0));
      var $55=$2;
      var $56=$3;
      _mrb_str_new_cstr($5, $55, $56);
      _mrb_raisef($52, $54, ((113012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 15; break;
    case 15: 
      var $58=$d;
      $1=$58;
      label = 61; break;
    case 16: 
      var $60=HEAP32[(($end)>>2)];
      var $61=HEAP8[($60)];
      var $62=(($61 << 24) >> 24)!=0;
      if ($62) { label = 17; break; } else { label = 60; break; }
    case 17: 
      var $64=(($buf)|0);
      $n=$64;
      var $65=(($buf)|0);
      var $66=(($65+74)|0);
      var $67=((($66)-(1))|0);
      $e=$67;
      $prev=0;
      label = 18; break;
    case 18: 
      var $69=$3;
      var $70=HEAP32[(($end)>>2)];
      var $71=(($69)>>>(0)) < (($70)>>>(0));
      if ($71) { label = 19; break; } else { var $77 = 0;label = 20; break; }
    case 19: 
      var $73=$n;
      var $74=$e;
      var $75=(($73)>>>(0)) < (($74)>>>(0));
      var $77 = $75;label = 20; break;
    case 20: 
      var $77;
      if ($77) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $79=$3;
      var $80=(($79+1)|0);
      $3=$80;
      var $81=HEAP8[($79)];
      var $82=$n;
      var $83=(($82+1)|0);
      $n=$83;
      HEAP8[($82)]=$81;
      $prev=$81;
      label = 18; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $86=$3;
      var $87=HEAP8[($86)];
      var $88=(($87 << 24) >> 24)!=0;
      if ($88) { label = 24; break; } else { label = 42; break; }
    case 24: 
      var $90=$3;
      var $91=HEAP8[($90)];
      var $92=(($91 << 24) >> 24);
      var $93=(($92)|(0))==95;
      if ($93) { label = 25; break; } else { label = 39; break; }
    case 25: 
      var $95=$4;
      var $96=(($95)|(0))!=0;
      if ($96) { label = 26; break; } else { label = 34; break; }
    case 26: 
      var $98=$n;
      var $99=(($buf)|0);
      var $100=(($98)|(0))==(($99)|(0));
      if ($100) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $102=$prev;
      var $103=(($102 << 24) >> 24);
      var $104=48 <= (($103)|(0));
      if ($104) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $106=$prev;
      var $107=(($106 << 24) >> 24);
      var $108=(($107)|(0)) <= 57;
      if ($108) { label = 30; break; } else { label = 29; break; }
    case 29: 
      label = 14; break;
    case 30: 
      var $111=$3;
      var $112=(($111+1)|0);
      $3=$112;
      var $113=$3;
      var $114=HEAP8[($113)];
      var $115=(($114 << 24) >> 24);
      var $116=48 <= (($115)|(0));
      if ($116) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $118=$3;
      var $119=HEAP8[($118)];
      var $120=(($119 << 24) >> 24);
      var $121=(($120)|(0)) <= 57;
      if ($121) { label = 33; break; } else { label = 32; break; }
    case 32: 
      label = 14; break;
    case 33: 
      label = 38; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $126=$3;
      var $127=(($126+1)|0);
      $3=$127;
      var $128=HEAP8[($127)];
      var $129=(($128 << 24) >> 24);
      var $130=(($129)|(0))==95;
      if ($130) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 35; break;
    case 37: 
      label = 23; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $135=$3;
      var $136=(($135+1)|0);
      $3=$136;
      var $137=HEAP8[($135)];
      $prev=$137;
      var $138=$n;
      var $139=$e;
      var $140=(($138)>>>(0)) < (($139)>>>(0));
      if ($140) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $142=$prev;
      var $143=$n;
      var $144=(($143+1)|0);
      $n=$144;
      HEAP8[($143)]=$142;
      label = 41; break;
    case 41: 
      label = 23; break;
    case 42: 
      var $147=$n;
      HEAP8[($147)]=0;
      var $148=(($buf)|0);
      $3=$148;
      var $149=$4;
      var $150=(($149)|(0))!=0;
      if ($150) { label = 47; break; } else { label = 43; break; }
    case 43: 
      var $152=$3;
      var $153=(($152)|0);
      var $154=HEAP8[($153)];
      var $155=(($154 << 24) >> 24);
      var $156=(($155)|(0))==48;
      if ($156) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $158=$3;
      var $159=(($158+1)|0);
      var $160=HEAP8[($159)];
      var $161=(($160 << 24) >> 24);
      var $162=(($161)|(0))==120;
      if ($162) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $164=$3;
      var $165=(($164+1)|0);
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|(0))==88;
      if ($168) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=0;
      label = 61; break;
    case 47: 
      var $171=$3;
      var $172=_strtod($171, $end);
      $d=$172;
      var $173=$4;
      var $174=(($173)|(0))!=0;
      if ($174) { label = 48; break; } else { label = 59; break; }
    case 48: 
      var $176=HEAP32[(($end)>>2)];
      var $177=(($176)|(0))!=0;
      if ($177) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $179=$3;
      var $180=HEAP32[(($end)>>2)];
      var $181=(($179)|(0))==(($180)|(0));
      if ($181) { label = 50; break; } else { label = 51; break; }
    case 50: 
      label = 14; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $185=HEAP32[(($end)>>2)];
      var $186=HEAP8[($185)];
      var $187=(($186 << 24) >> 24);
      var $188=(($187)|(0))!=0;
      if ($188) { label = 53; break; } else { var $196 = 0;label = 54; break; }
    case 53: 
      var $190=HEAP32[(($end)>>2)];
      var $191=HEAP8[($190)];
      var $192=(($191)&(255));
      var $193=_isspace($192);
      var $194=(($193)|(0))!=0;
      var $196 = $194;label = 54; break;
    case 54: 
      var $196;
      if ($196) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $198=HEAP32[(($end)>>2)];
      var $199=(($198+1)|0);
      HEAP32[(($end)>>2)]=$199;
      label = 52; break;
    case 56: 
      var $201=HEAP32[(($end)>>2)];
      var $202=HEAP8[($201)];
      var $203=(($202 << 24) >> 24)!=0;
      if ($203) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 14; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $208=$d;
      $1=$208;
      label = 61; break;
    case 61: 
      var $210=$1;
      STACKTOP = __stackBase__;
      return $210;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_dbl($mrb, $str, $badcheck) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $len;
      var $3=__stackBase__;
      var $temp_str;
      $1=$mrb;
      $2=$badcheck;
      var $4=$1;
      _mrb_str_to_str($3, $4, $str);
      var $5=$str;
      var $6=$3;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=(($str)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      $s=$12;
      var $13=(($str)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      $len=$18;
      var $19=$s;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 2; break; } else { label = 8; break; }
    case 2: 
      var $22=$2;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $25=$s;
      var $26=$len;
      var $27=_memchr($25, 0, $26);
      var $28=(($27)|(0))!=0;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$1;
      var $31=$1;
      var $32=_mrb_class_get($31, ((104964)|0));
      _mrb_raise($30, $32, ((112544)|0));
      label = 5; break;
    case 5: 
      var $34=$len;
      var $35=$s;
      var $36=(($35+$34)|0);
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24)!=0;
      if ($38) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $40=$1;
      var $41=$s;
      var $42=$len;
      var $43=_str_new($40, $41, $42);
      $temp_str=$43;
      var $44=$temp_str;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      $s=$46;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $49=$1;
      var $50=$s;
      var $51=$2;
      var $52=_mrb_cstr_to_dbl($49, $50, $51);
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_dump($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $len;
      var $p;
      var $pend;
      var $q;
      var $result;
      var $c;
      var $c1;
      $1=$mrb;
      $len=2;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $p=$7;
      var $8=$p;
      var $9=(($str)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($8+$14)|0);
      $pend=$15;
      label = 2; break;
    case 2: 
      var $17=$p;
      var $18=$pend;
      var $19=(($17)>>>(0)) < (($18)>>>(0));
      if ($19) { label = 3; break; } else { label = 16; break; }
    case 3: 
      var $21=$p;
      var $22=(($21+1)|0);
      $p=$22;
      var $23=HEAP8[($21)];
      $c=$23;
      var $24=$c;
      var $25=(($24)&(255));
      if ((($25)|(0))==34 | (($25)|(0))==92 | (($25)|(0))==10 | (($25)|(0))==13 | (($25)|(0))==9 | (($25)|(0))==12 | (($25)|(0))==11 | (($25)|(0))==8 | (($25)|(0))==7 | (($25)|(0))==27) {
        label = 4; break;
      }
      else if ((($25)|(0))==35) {
        label = 5; break;
      }
      else {
      label = 11; break;
      }
    case 4: 
      var $27=$len;
      var $28=((($27)+(2))|0);
      $len=$28;
      label = 15; break;
    case 5: 
      var $30=$p;
      var $31=$pend;
      var $32=(($30)>>>(0)) < (($31)>>>(0));
      if ($32) { label = 6; break; } else { var $51 = 0;label = 10; break; }
    case 6: 
      var $34=$p;
      var $35=HEAP8[($34)];
      var $36=(($35 << 24) >> 24);
      var $37=(($36)|(0))==36;
      if ($37) { var $49 = 1;label = 9; break; } else { label = 7; break; }
    case 7: 
      var $39=$p;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($41)|(0))==64;
      if ($42) { var $49 = 1;label = 9; break; } else { label = 8; break; }
    case 8: 
      var $44=$p;
      var $45=HEAP8[($44)];
      var $46=(($45 << 24) >> 24);
      var $47=(($46)|(0))==123;
      var $49 = $47;label = 9; break;
    case 9: 
      var $49;
      var $51 = $49;label = 10; break;
    case 10: 
      var $51;
      var $52=$51 ? 2 : 1;
      var $53=$len;
      var $54=((($53)+($52))|0);
      $len=$54;
      label = 15; break;
    case 11: 
      var $56=$c;
      var $57=(($56)&(255));
      var $58=_isprint($57);
      var $59=(($58)|(0))!=0;
      if ($59) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $61=$len;
      var $62=((($61)+(1))|0);
      $len=$62;
      label = 14; break;
    case 13: 
      var $64=$len;
      var $65=((($64)+(4))|0);
      $len=$65;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 2; break;
    case 16: 
      var $69=$1;
      var $70=$len;
      var $71=_str_new($69, 0, $70);
      $result=$71;
      var $72=$1;
      var $73=$result;
      _str_with_class($72, $73, $str);
      var $74=(($str)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      $p=$79;
      var $80=$p;
      var $81=(($str)|0);
      var $82=$81;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($80+$86)|0);
      $pend=$87;
      var $88=$result;
      var $89=(($88+20)|0);
      var $90=HEAP32[(($89)>>2)];
      $q=$90;
      var $91=$q;
      var $92=(($91+1)|0);
      $q=$92;
      HEAP8[($91)]=34;
      label = 17; break;
    case 17: 
      var $94=$p;
      var $95=$pend;
      var $96=(($94)>>>(0)) < (($95)>>>(0));
      if ($96) { label = 18; break; } else { label = 39; break; }
    case 18: 
      var $98=$p;
      var $99=(($98+1)|0);
      $p=$99;
      var $100=HEAP8[($98)];
      $c1=$100;
      var $101=$c1;
      var $102=(($101)&(255));
      if ((($102)|(0))==34 | (($102)|(0))==92) {
        label = 19; break;
      }
      else if ((($102)|(0))==10) {
        label = 20; break;
      }
      else if ((($102)|(0))==13) {
        label = 21; break;
      }
      else if ((($102)|(0))==9) {
        label = 22; break;
      }
      else if ((($102)|(0))==12) {
        label = 23; break;
      }
      else if ((($102)|(0))==11) {
        label = 24; break;
      }
      else if ((($102)|(0))==8) {
        label = 25; break;
      }
      else if ((($102)|(0))==7) {
        label = 26; break;
      }
      else if ((($102)|(0))==27) {
        label = 27; break;
      }
      else if ((($102)|(0))==35) {
        label = 28; break;
      }
      else {
      label = 34; break;
      }
    case 19: 
      var $104=$q;
      var $105=(($104+1)|0);
      $q=$105;
      HEAP8[($104)]=92;
      var $106=$c1;
      var $107=$q;
      var $108=(($107+1)|0);
      $q=$108;
      HEAP8[($107)]=$106;
      label = 38; break;
    case 20: 
      var $110=$q;
      var $111=(($110+1)|0);
      $q=$111;
      HEAP8[($110)]=92;
      var $112=$q;
      var $113=(($112+1)|0);
      $q=$113;
      HEAP8[($112)]=110;
      label = 38; break;
    case 21: 
      var $115=$q;
      var $116=(($115+1)|0);
      $q=$116;
      HEAP8[($115)]=92;
      var $117=$q;
      var $118=(($117+1)|0);
      $q=$118;
      HEAP8[($117)]=114;
      label = 38; break;
    case 22: 
      var $120=$q;
      var $121=(($120+1)|0);
      $q=$121;
      HEAP8[($120)]=92;
      var $122=$q;
      var $123=(($122+1)|0);
      $q=$123;
      HEAP8[($122)]=116;
      label = 38; break;
    case 23: 
      var $125=$q;
      var $126=(($125+1)|0);
      $q=$126;
      HEAP8[($125)]=92;
      var $127=$q;
      var $128=(($127+1)|0);
      $q=$128;
      HEAP8[($127)]=102;
      label = 38; break;
    case 24: 
      var $130=$q;
      var $131=(($130+1)|0);
      $q=$131;
      HEAP8[($130)]=92;
      var $132=$q;
      var $133=(($132+1)|0);
      $q=$133;
      HEAP8[($132)]=118;
      label = 38; break;
    case 25: 
      var $135=$q;
      var $136=(($135+1)|0);
      $q=$136;
      HEAP8[($135)]=92;
      var $137=$q;
      var $138=(($137+1)|0);
      $q=$138;
      HEAP8[($137)]=98;
      label = 38; break;
    case 26: 
      var $140=$q;
      var $141=(($140+1)|0);
      $q=$141;
      HEAP8[($140)]=92;
      var $142=$q;
      var $143=(($142+1)|0);
      $q=$143;
      HEAP8[($142)]=97;
      label = 38; break;
    case 27: 
      var $145=$q;
      var $146=(($145+1)|0);
      $q=$146;
      HEAP8[($145)]=92;
      var $147=$q;
      var $148=(($147+1)|0);
      $q=$148;
      HEAP8[($147)]=101;
      label = 38; break;
    case 28: 
      var $150=$p;
      var $151=$pend;
      var $152=(($150)>>>(0)) < (($151)>>>(0));
      if ($152) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $154=$p;
      var $155=HEAP8[($154)];
      var $156=(($155 << 24) >> 24);
      var $157=(($156)|(0))==36;
      if ($157) { label = 32; break; } else { label = 30; break; }
    case 30: 
      var $159=$p;
      var $160=HEAP8[($159)];
      var $161=(($160 << 24) >> 24);
      var $162=(($161)|(0))==64;
      if ($162) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $164=$p;
      var $165=HEAP8[($164)];
      var $166=(($165 << 24) >> 24);
      var $167=(($166)|(0))==123;
      if ($167) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $169=$q;
      var $170=(($169+1)|0);
      $q=$170;
      HEAP8[($169)]=92;
      label = 33; break;
    case 33: 
      var $172=$q;
      var $173=(($172+1)|0);
      $q=$173;
      HEAP8[($172)]=35;
      label = 38; break;
    case 34: 
      var $175=$c1;
      var $176=(($175)&(255));
      var $177=_isprint($176);
      var $178=(($177)|(0))!=0;
      if ($178) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $180=$c1;
      var $181=$q;
      var $182=(($181+1)|0);
      $q=$182;
      HEAP8[($181)]=$180;
      label = 37; break;
    case 36: 
      var $184=$q;
      var $185=(($184+1)|0);
      $q=$185;
      HEAP8[($184)]=92;
      var $186=$c1;
      var $187=(($186)&(255));
      var $188=((($187)|(0)))%(8);
      var $189=((($188)+(48))|0);
      var $190=(($189) & 255);
      var $191=$q;
      var $192=(($191+2)|0);
      HEAP8[($192)]=$190;
      var $193=$c1;
      var $194=(($193)&(255));
      var $195=((((($194)|(0)))/(8))&-1);
      var $196=(($195) & 255);
      $c1=$196;
      var $197=$c1;
      var $198=(($197)&(255));
      var $199=((($198)|(0)))%(8);
      var $200=((($199)+(48))|0);
      var $201=(($200) & 255);
      var $202=$q;
      var $203=(($202+1)|0);
      HEAP8[($203)]=$201;
      var $204=$c1;
      var $205=(($204)&(255));
      var $206=((((($205)|(0)))/(8))&-1);
      var $207=(($206) & 255);
      $c1=$207;
      var $208=$c1;
      var $209=(($208)&(255));
      var $210=((($209)|(0)))%(8);
      var $211=((($210)+(48))|0);
      var $212=(($211) & 255);
      var $213=$q;
      var $214=(($213)|0);
      HEAP8[($214)]=$212;
      var $215=$q;
      var $216=(($215+3)|0);
      $q=$216;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 17; break;
    case 39: 
      var $220=$q;
      var $221=(($220+1)|0);
      $q=$221;
      HEAP8[($220)]=34;
      var $222=$result;
      var $223=$222;
      _mrb_obj_value44($agg_result, $223);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat_cstr($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$ptr;
  var $3=$1;
  var $4=$2;
  var $5=$2;
  var $6=_strlen($5);
  _mrb_str_cat($agg_result, $3, $str, $4, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_append($agg_result, $mrb, $str, $str2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $str2; $str2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  _mrb_str_to_str($2, $3, $str2);
  var $4=$str2;
  var $5=$2;
  assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
  var $6=$1;
  _mrb_str_buf_append($agg_result, $6, $str, $str2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_inspect($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $pend;
      var $buf=__stackBase__;
      var $result=(__stackBase__)+(16);
      var $c;
      var $cc;
      var $2=(__stackBase__)+(28);
      var $3=(__stackBase__)+(40);
      var $4=(__stackBase__)+(52);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(76);
      $1=$mrb;
      var $7=$1;
      _mrb_str_new($result, $7, ((111424)|0), 1);
      var $8=(($str)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $p=$13;
      var $14=(($str)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($str)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($19+$25)|0);
      $pend=$26;
      label = 2; break;
    case 2: 
      var $28=$p;
      var $29=$pend;
      var $30=(($28)>>>(0)) < (($29)>>>(0));
      if ($30) { label = 3; break; } else { label = 27; break; }
    case 3: 
      var $32=$p;
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24);
      $c=$34;
      var $35=$c;
      var $36=(($35)|(0))==34;
      if ($36) { label = 10; break; } else { label = 4; break; }
    case 4: 
      var $38=$c;
      var $39=(($38)|(0))==92;
      if ($39) { label = 10; break; } else { label = 5; break; }
    case 5: 
      var $41=$c;
      var $42=(($41)|(0))==35;
      if ($42) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $44=$p;
      var $45=$pend;
      var $46=(($44)>>>(0)) < (($45)>>>(0));
      if ($46) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $48=$p;
      var $49=HEAP8[($48)];
      var $50=(($49 << 24) >> 24);
      var $51=(($50)|(0))==36;
      if ($51) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $53=$p;
      var $54=HEAP8[($53)];
      var $55=(($54 << 24) >> 24);
      var $56=(($55)|(0))==64;
      if ($56) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $58=$p;
      var $59=HEAP8[($58)];
      var $60=(($59 << 24) >> 24);
      var $61=(($60)|(0))==123;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $63=(($buf)|0);
      HEAP8[($63)]=92;
      var $64=$c;
      var $65=(($64) & 255);
      var $66=(($buf+1)|0);
      HEAP8[($66)]=$65;
      var $67=$1;
      var $68=(($buf)|0);
      _mrb_str_buf_cat($2, $67, $result, $68, 2);
      label = 26; break;
    case 11: 
      var $70=$c;
      var $71=(($70) & 255);
      var $72=(($71)&(255));
      var $73=_isprint($72);
      var $74=(($73)|(0))!=0;
      if ($74) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $76=$c;
      var $77=(($76) & 255);
      var $78=(($buf)|0);
      HEAP8[($78)]=$77;
      var $79=$1;
      var $80=(($buf)|0);
      _mrb_str_buf_cat($3, $79, $result, $80, 1);
      label = 26; break;
    case 13: 
      var $82=$c;
      if ((($82)|(0))==10) {
        label = 14; break;
      }
      else if ((($82)|(0))==13) {
        label = 15; break;
      }
      else if ((($82)|(0))==9) {
        label = 16; break;
      }
      else if ((($82)|(0))==12) {
        label = 17; break;
      }
      else if ((($82)|(0))==11) {
        label = 18; break;
      }
      else if ((($82)|(0))==8) {
        label = 19; break;
      }
      else if ((($82)|(0))==7) {
        label = 20; break;
      }
      else if ((($82)|(0))==27) {
        label = 21; break;
      }
      else {
      label = 22; break;
      }
    case 14: 
      $cc=110;
      label = 23; break;
    case 15: 
      $cc=114;
      label = 23; break;
    case 16: 
      $cc=116;
      label = 23; break;
    case 17: 
      $cc=102;
      label = 23; break;
    case 18: 
      $cc=118;
      label = 23; break;
    case 19: 
      $cc=98;
      label = 23; break;
    case 20: 
      $cc=97;
      label = 23; break;
    case 21: 
      $cc=101;
      label = 23; break;
    case 22: 
      $cc=0;
      label = 23; break;
    case 23: 
      var $93=$cc;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $96=(($buf)|0);
      HEAP8[($96)]=92;
      var $97=$cc;
      var $98=(($97) & 255);
      var $99=(($buf+1)|0);
      HEAP8[($99)]=$98;
      var $100=$1;
      var $101=(($buf)|0);
      _mrb_str_buf_cat($4, $100, $result, $101, 2);
      label = 26; break;
    case 25: 
      var $103=(($buf)|0);
      HEAP8[($103)]=92;
      var $104=$c;
      var $105=((($104)>>>(0)))%(8);
      var $106=((($105)+(48))|0);
      var $107=(($106) & 255);
      var $108=(($buf+3)|0);
      HEAP8[($108)]=$107;
      var $109=$c;
      var $110=Math.floor(((($109)>>>(0)))/(8));
      $c=$110;
      var $111=$c;
      var $112=((($111)>>>(0)))%(8);
      var $113=((($112)+(48))|0);
      var $114=(($113) & 255);
      var $115=(($buf+2)|0);
      HEAP8[($115)]=$114;
      var $116=$c;
      var $117=Math.floor(((($116)>>>(0)))/(8));
      $c=$117;
      var $118=$c;
      var $119=((($118)>>>(0)))%(8);
      var $120=((($119)+(48))|0);
      var $121=(($120) & 255);
      var $122=(($buf+1)|0);
      HEAP8[($122)]=$121;
      var $123=$1;
      var $124=(($buf)|0);
      _mrb_str_buf_cat($5, $123, $result, $124, 4);
      label = 26; break;
    case 26: 
      var $126=$p;
      var $127=(($126+1)|0);
      $p=$127;
      label = 2; break;
    case 27: 
      var $129=$1;
      _mrb_str_buf_cat($6, $129, $result, ((111424)|0), 1);
      var $130=$agg_result;
      var $131=$result;
      assert(12 % 1 === 0);HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($130)+(4))>>2)]=HEAP32[((($131)+(4))>>2)];HEAP32[((($130)+(8))>>2)]=HEAP32[((($131)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_string($mrb) {
  var label = 0;
  var $1;
  var $s;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((96576)|0), $5);
  var $7=$1;
  var $8=(($7+60)|0);
  HEAP32[(($8)>>2)]=$6;
  $s=$6;
  var $9=$s;
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11 >>> 11;
  var $13=$12 & 2097151;
  var $14=$13 & -256;
  var $15=$14 | 16;
  var $16=$s;
  var $17=$15 & 2097151;
  var $18=$16;
  var $19=$17 & 2097151;
  var $20=$19 << 11;
  var $21=HEAP32[(($18)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | $20;
  HEAP32[(($18)>>2)]=$23;
  var $24=$1;
  var $25=$s;
  var $26=$1;
  var $27=_mrb_class_get($26, ((110920)|0));
  _mrb_include_module($24, $25, $27);
  var $28=$1;
  var $29=$s;
  _mrb_define_method($28, $29, ((110476)|0), 562, 262144);
  var $30=$1;
  var $31=$s;
  _mrb_define_method($30, $31, ((110116)|0), 26, 0);
  var $32=$1;
  var $33=$s;
  _mrb_define_method($32, $33, ((109664)|0), 564, 0);
  var $34=$1;
  var $35=$s;
  _mrb_define_method($34, $35, ((109192)|0), 564, 0);
  var $36=$1;
  var $37=$s;
  _mrb_define_method($36, $37, ((108412)|0), 194, 262144);
  var $38=$1;
  var $39=$s;
  _mrb_define_method($38, $39, ((108296)|0), 464, 262144);
  var $40=$1;
  var $41=$s;
  _mrb_define_method($40, $41, ((107704)|0), 600, 262144);
  var $42=$1;
  var $43=$s;
  _mrb_define_method($42, $43, ((107432)|0), 460, 262144);
  var $44=$1;
  var $45=$s;
  _mrb_define_method($44, $45, ((107092)|0), 614, 4096);
  var $46=$1;
  var $47=$s;
  _mrb_define_method($46, $47, ((106604)|0), 182, 0);
  var $48=$1;
  var $49=$s;
  _mrb_define_method($48, $49, ((106200)|0), 10, 262144);
  var $50=$1;
  var $51=$s;
  _mrb_define_method($50, $51, ((105868)|0), 690, 4096);
  var $52=$1;
  var $53=$s;
  _mrb_define_method($52, $53, ((105576)|0), 148, 4096);
  var $54=$1;
  var $55=$s;
  _mrb_define_method($54, $55, ((105264)|0), 220, 262144);
  var $56=$1;
  var $57=$s;
  _mrb_define_method($56, $57, ((104792)|0), 680, 262144);
  var $58=$1;
  var $59=$s;
  _mrb_define_method($58, $59, ((104680)|0), 312, 0);
  var $60=$1;
  var $61=$s;
  _mrb_define_method($60, $61, ((104092)|0), 664, 0);
  var $62=$1;
  var $63=$s;
  _mrb_define_method($62, $63, ((103836)|0), 130, 0);
  var $64=$1;
  var $65=$s;
  _mrb_define_method($64, $65, ((103620)|0), 706, 262144);
  var $66=$1;
  var $67=$s;
  _mrb_define_method($66, $67, ((103412)|0), 460, 262144);
  var $68=$1;
  var $69=$s;
  _mrb_define_method($68, $69, ((103220)|0), 460, 262144);
  var $70=$1;
  var $71=$s;
  _mrb_define_method($70, $71, ((102912)|0), 510, 262144);
  var $72=$1;
  var $73=$s;
  _mrb_define_method($72, $73, ((102740)|0), 306, 262144);
  var $74=$1;
  var $75=$s;
  _mrb_define_method($74, $75, ((102468)|0), 322, 4096);
  var $76=$1;
  var $77=$s;
  _mrb_define_method($76, $77, ((102100)|0), 308, 262144);
  var $78=$1;
  var $79=$s;
  _mrb_define_method($78, $79, ((101900)|0), 528, 262144);
  var $80=$1;
  var $81=$s;
  _mrb_define_method($80, $81, ((101376)|0), 286, 0);
  var $82=$1;
  var $83=$s;
  _mrb_define_method($82, $83, ((101076)|0), 460, 262144);
  var $84=$1;
  var $85=$s;
  _mrb_define_method($84, $85, ((100792)|0), 528, 262144);
  var $86=$1;
  var $87=$s;
  _mrb_define_method($86, $87, ((100548)|0), 142, 0);
  var $88=$1;
  var $89=$s;
  _mrb_define_method($88, $89, ((100324)|0), 256, 0);
  var $90=$1;
  var $91=$s;
  _mrb_define_method($90, $91, ((100136)|0), 380, 4096);
  var $92=$1;
  var $93=$s;
  _mrb_define_method($92, $93, ((99936)|0), 460, 262144);
  var $94=$1;
  var $95=$s;
  _mrb_define_method($94, $95, ((99744)|0), 614, 4096);
  var $96=$1;
  var $97=$s;
  _mrb_define_method($96, $97, ((99484)|0), 300, 4096);
  var $98=$1;
  var $99=$s;
  _mrb_define_method($98, $99, ((99276)|0), 460, 262144);
  var $100=$1;
  var $101=$s;
  _mrb_define_method($100, $101, ((98724)|0), 460, 262144);
  var $102=$1;
  var $103=$s;
  _mrb_define_method($102, $103, ((98476)|0), 68, 4096);
  var $104=$1;
  var $105=$s;
  _mrb_define_method($104, $105, ((98208)|0), 66, 0);
  var $106=$1;
  var $107=$s;
  _mrb_define_method($106, $107, ((95388)|0), 58, 0);
  var $108=$1;
  var $109=$s;
  _mrb_define_method($108, $109, ((98344)|0), 58, 0);
  var $110=$1;
  var $111=$s;
  _mrb_define_method($110, $111, ((97968)|0), 286, 0);
  var $112=$1;
  var $113=$s;
  _mrb_define_method($112, $113, ((97788)|0), 476, 262144);
  var $114=$1;
  var $115=$s;
  _mrb_define_method($114, $115, ((97528)|0), 406, 262144);
  var $116=$1;
  var $117=$s;
  _mrb_define_method($116, $117, ((97392)|0), 552, 0);
  var $118=$1;
  var $119=$s;
  _mrb_define_method($118, $119, ((97288)|0), 424, 0);
  return;
}
function _mrb_str_plus_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((96620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str,tempInt));
  var $4=$1;
  _mrb_str_plus($agg_result, $4, $self, $str);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_bytesize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $s=$5;
  var $6=$s;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  _mrb_fixnum_value47($agg_result, $8);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_times($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $n;
      var $len;
      var $times=__stackBase__;
      var $str2;
      var $p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((95936)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$times,tempInt));
      var $4=HEAP32[(($times)>>2)];
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((104964)|0));
      _mrb_raise($7, $9, ((95496)|0));
      label = 3; break;
    case 3: 
      var $11=HEAP32[(($times)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $14=HEAP32[(($times)>>2)];
      var $15=(((2147483647)/((($14)|(0))))&-1);
      var $16=(($self)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($15)|(0)) < (($21)|(0));
      if ($22) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $24=$1;
      var $25=$1;
      var $26=_mrb_class_get($25, ((104964)|0));
      _mrb_raise($24, $26, ((111956)|0));
      label = 6; break;
    case 6: 
      var $28=(($self)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=HEAP32[(($times)>>2)];
      var $35=Math.imul($33,$34);
      $len=$35;
      var $36=$1;
      var $37=$len;
      var $38=_str_new($36, 0, $37);
      $str2=$38;
      var $39=$1;
      var $40=$str2;
      _str_with_class($39, $40, $self);
      var $41=$str2;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      $p=$43;
      var $44=$len;
      var $45=(($44)|(0)) > 0;
      if ($45) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $47=(($self)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $n=$52;
      var $53=$p;
      var $54=(($self)|0);
      var $55=$54;
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$n;
      assert($60 % 1 === 0);_memcpy($53, $59, $60);
      label = 8; break;
    case 8: 
      var $62=$n;
      var $63=$len;
      var $64=((((($63)|(0)))/(2))&-1);
      var $65=(($62)|(0)) <= (($64)|(0));
      if ($65) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $67=$p;
      var $68=$n;
      var $69=(($67+$68)|0);
      var $70=$p;
      var $71=$n;
      assert($71 % 1 === 0);_memcpy($69, $70, $71);
      var $72=$n;
      var $73=($72<<1);
      $n=$73;
      label = 8; break;
    case 10: 
      var $75=$p;
      var $76=$n;
      var $77=(($75+$76)|0);
      var $78=$p;
      var $79=$len;
      var $80=$n;
      var $81=((($79)-($80))|0);
      assert($81 % 1 === 0);_memcpy($77, $78, $81);
      label = 11; break;
    case 11: 
      var $83=$str2;
      var $84=(($83+12)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$p;
      var $87=(($86+$85)|0);
      HEAP8[($87)]=0;
      var $88=$str2;
      var $89=$88;
      _mrb_obj_value44($agg_result, $89);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cmp_m($agg_result, $mrb, $str1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str2=__stackBase__;
      var $result;
      var $tmp=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((96444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $5=(($str2+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==16;
      if ($7) { label = 14; break; } else { label = 2; break; }
    case 2: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_intern2($10, ((95388)|0), 4);
      var $12=_mrb_respond_to($9, $str2, $11);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 4: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_intern2($17, ((108296)|0), 3);
      var $19=_mrb_respond_to($16, $str2, $18);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 5; break; }
    case 5: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 6: 
      var $23=$1;
      _mrb_funcall($tmp, $23, $str2, ((108296)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str1)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str1)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str1)+(8))>>2)],tempInt));
      var $24=(($tmp+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))==0;
      if ($26) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $28=(($tmp)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))!=0;
      if ($31) { label = 9; break; } else { label = 8; break; }
    case 8: 
      _mrb_nil_value48($agg_result);
      label = 16; break;
    case 9: 
      var $34=(($tmp)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))!=0;
      if ($37) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $39=$1;
      _mrb_fixnum_value47($2, 0);
      _mrb_funcall($agg_result, $39, $2, ((95988)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
      label = 16; break;
    case 11: 
      var $41=(($tmp)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=(((-$43))|0);
      $result=$44;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 15; break;
    case 14: 
      var $48=$1;
      var $49=_mrb_str_cmp($48, $str1, $str2);
      $result=$49;
      label = 15; break;
    case 15: 
      var $51=$result;
      _mrb_fixnum_value47($agg_result, $51);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_equal_m($agg_result, $mrb, $str1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str1; $str1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str2=__stackBase__;
  var $equal_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((96444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
  var $4=$1;
  var $5=_mrb_str_equal($4, $str1, $str2);
  var $6=(($5) & 255);
  $equal_p=$6;
  var $7=$equal_p;
  _mrb_bool_value($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _noregexp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=_mrb_class_get($3, ((96180)|0));
  _mrb_raise($2, $4, ((96076)|0));
  _mrb_nil_value48($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_aref_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a1=__stackBase__;
      var $a2=(__stackBase__)+(12);
      var $argc;
      var $2=(__stackBase__)+(24);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((96368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a1,HEAP32[(((tempInt)+(4))>>2)]=$a2,tempInt));
      $argc=$4;
      var $5=$argc;
      var $6=(($5)|(0))==2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      _regexp_check($8, $a1);
      var $9=$1;
      var $10=(($a1)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=(($a2)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      _mrb_str_substr($agg_result, $9, $str, $12, $15);
      label = 6; break;
    case 3: 
      var $17=$argc;
      var $18=(($17)|(0))!=1;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$1;
      var $21=$1;
      var $22=_mrb_class_get($21, ((104964)|0));
      var $23=$argc;
      _mrb_fixnum_value47($2, $23);
      _mrb_raisef($20, $22, ((96252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $25=$1;
      _mrb_str_aref($agg_result, $25, $str, $a1);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_capitalize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_capitalize_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_capitalize_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $1=$mrb;
      $modify=0;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$s;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value48($agg_result);
      label = 14; break;
    case 4: 
      var $19=$s;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      $p=$21;
      var $22=$s;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$s;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24+$27)|0);
      $pend=$28;
      var $29=$p;
      var $30=HEAP8[($29)];
      var $31=(($30)&(255));
      var $32=_islower($31);
      var $33=(($32)|(0))!=0;
      if ($33) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35=$p;
      var $36=HEAP8[($35)];
      var $37=(($36)&(255));
      var $38=_toupper($37);
      var $39=(($38) & 255);
      var $40=$p;
      HEAP8[($40)]=$39;
      $modify=1;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $43=$p;
      var $44=(($43+1)|0);
      $p=$44;
      var $45=$pend;
      var $46=(($44)>>>(0)) < (($45)>>>(0));
      if ($46) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $48=$p;
      var $49=HEAP8[($48)];
      var $50=(($49)&(255));
      var $51=_isupper($50);
      var $52=(($51)|(0))!=0;
      if ($52) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $54=$p;
      var $55=HEAP8[($54)];
      var $56=(($55)&(255));
      var $57=_tolower($56);
      var $58=(($57) & 255);
      var $59=$p;
      HEAP8[($59)]=$58;
      $modify=1;
      label = 10; break;
    case 10: 
      label = 7; break;
    case 11: 
      var $62=$modify;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $65=$agg_result;
      var $66=$str;
      assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
      label = 14; break;
    case 13: 
      _mrb_nil_value48($agg_result);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_chomp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_chomp_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chomp_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $rs=__stackBase__;
      var $newline;
      var $p;
      var $pp;
      var $rslen;
      var $len;
      var $s;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      $len=$10;
      var $11=$1;
      var $12=_mrb_get_args($11, ((96528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$rs,tempInt));
      var $13=(($12)|(0))==0;
      if ($13) { label = 2; break; } else { label = 15; break; }
    case 2: 
      var $15=$len;
      var $16=(($15)|(0))==0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $20=$len;
      var $21=((($20)-(1))|0);
      var $22=$s;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+$21)|0);
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $28=(($27)|(0))==10;
      if ($28) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $30=$s;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=$s;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0)) > 0;
      if ($37) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $39=$s;
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      var $43=$s;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+$42)|0);
      var $47=HEAP8[($46)];
      var $48=(($47 << 24) >> 24);
      var $49=(($48)|(0))==13;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $51=$s;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $57=$len;
      var $58=((($57)-(1))|0);
      var $59=$s;
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+$58)|0);
      var $63=HEAP8[($62)];
      var $64=(($63 << 24) >> 24);
      var $65=(($64)|(0))==13;
      if ($65) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $67=$s;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)-(1))|0);
      HEAP32[(($68)>>2)]=$70;
      label = 13; break;
    case 12: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $74=$s;
      var $75=(($74+12)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$s;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+$76)|0);
      HEAP8[($80)]=0;
      var $81=$agg_result;
      var $82=$str;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 44; break;
    case 15: 
      var $84=$len;
      var $85=(($84)|(0))==0;
      if ($85) { label = 18; break; } else { label = 16; break; }
    case 16: 
      var $87=(($rs+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88)|(0))==0;
      if ($89) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $91=(($rs)|0);
      var $92=$91;
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93)|(0))!=0;
      if ($94) { label = 19; break; } else { label = 18; break; }
    case 18: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 19: 
      var $97=$s;
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      $p=$99;
      var $100=(($rs)|0);
      var $101=$100;
      var $102=HEAP32[(($101)>>2)];
      var $103=$102;
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      $rslen=$105;
      var $106=$rslen;
      var $107=(($106)|(0))==0;
      if ($107) { label = 20; break; } else { label = 31; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $110=$len;
      var $111=(($110)|(0)) > 0;
      if ($111) { label = 22; break; } else { var $121 = 0;label = 23; break; }
    case 22: 
      var $113=$len;
      var $114=((($113)-(1))|0);
      var $115=$p;
      var $116=(($115+$114)|0);
      var $117=HEAP8[($116)];
      var $118=(($117 << 24) >> 24);
      var $119=(($118)|(0))==10;
      var $121 = $119;label = 23; break;
    case 23: 
      var $121;
      if ($121) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $123=$len;
      var $124=((($123)-(1))|0);
      $len=$124;
      var $125=$len;
      var $126=(($125)|(0)) > 0;
      if ($126) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $128=$len;
      var $129=((($128)-(1))|0);
      var $130=$p;
      var $131=(($130+$129)|0);
      var $132=HEAP8[($131)];
      var $133=(($132 << 24) >> 24);
      var $134=(($133)|(0))==13;
      if ($134) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $136=$len;
      var $137=((($136)-(1))|0);
      $len=$137;
      label = 27; break;
    case 27: 
      label = 21; break;
    case 28: 
      var $140=$len;
      var $141=$s;
      var $142=(($141+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)|(0)) < (($143)|(0));
      if ($144) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $146=$len;
      var $147=$s;
      var $148=(($147+12)|0);
      HEAP32[(($148)>>2)]=$146;
      var $149=$len;
      var $150=$p;
      var $151=(($150+$149)|0);
      HEAP8[($151)]=0;
      var $152=$agg_result;
      var $153=$str;
      assert(12 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];
      label = 44; break;
    case 30: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 31: 
      var $156=$rslen;
      var $157=$len;
      var $158=(($156)|(0)) > (($157)|(0));
      if ($158) { label = 32; break; } else { label = 33; break; }
    case 32: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 33: 
      var $161=$rslen;
      var $162=((($161)-(1))|0);
      var $163=(($rs)|0);
      var $164=$163;
      var $165=HEAP32[(($164)>>2)];
      var $166=$165;
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+$162)|0);
      var $170=HEAP8[($169)];
      var $171=(($170 << 24) >> 24);
      $newline=$171;
      var $172=$rslen;
      var $173=(($172)|(0))==1;
      if ($173) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $175=$newline;
      var $176=(($175)|(0))==10;
      if ($176) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $178=$rslen;
      var $179=((($178)-(1))|0);
      var $180=(($rs)|0);
      var $181=$180;
      var $182=HEAP32[(($181)>>2)];
      var $183=$182;
      var $184=(($183+20)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=(($185+$179)|0);
      var $187=HEAP8[($186)];
      var $188=(($187 << 24) >> 24);
      $newline=$188;
      label = 36; break;
    case 36: 
      var $190=$rslen;
      var $191=(($190)|(0))==1;
      if ($191) { label = 37; break; } else { label = 39; break; }
    case 37: 
      var $193=$newline;
      var $194=(($193)|(0))==10;
      if ($194) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 5; break;
    case 39: 
      var $197=$p;
      var $198=$len;
      var $199=(($197+$198)|0);
      var $200=$rslen;
      var $201=(((-$200))|0);
      var $202=(($199+$201)|0);
      $pp=$202;
      var $203=$len;
      var $204=((($203)-(1))|0);
      var $205=$p;
      var $206=(($205+$204)|0);
      var $207=HEAP8[($206)];
      var $208=(($207 << 24) >> 24);
      var $209=$newline;
      var $210=(($208)|(0))==(($209)|(0));
      if ($210) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $212=$rslen;
      var $213=(($212)|(0)) <= 1;
      if ($213) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $215=(($rs)|0);
      var $216=$215;
      var $217=HEAP32[(($216)>>2)];
      var $218=$217;
      var $219=(($218+20)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$pp;
      var $222=$rslen;
      var $223=_memcmp($220, $221, $222);
      var $224=(($223)|(0))==0;
      if ($224) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $226=$len;
      var $227=$rslen;
      var $228=((($226)-($227))|0);
      var $229=$s;
      var $230=(($229+12)|0);
      HEAP32[(($230)>>2)]=$228;
      var $231=$s;
      var $232=(($231+12)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=$p;
      var $235=(($234+$233)|0);
      HEAP8[($235)]=0;
      var $236=$agg_result;
      var $237=$str;
      assert(12 % 1 === 0);HEAP32[(($236)>>2)]=HEAP32[(($237)>>2)];HEAP32[((($236)+(4))>>2)]=HEAP32[((($237)+(4))>>2)];HEAP32[((($236)+(8))>>2)]=HEAP32[((($237)+(8))>>2)];
      label = 44; break;
    case 43: 
      _mrb_nil_value48($agg_result);
      label = 44; break;
    case 44: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_chop($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_chop_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_chop_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $len;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0)) > 0;
      if ($11) { label = 2; break; } else { label = 8; break; }
    case 2: 
      var $13=$s;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=((($15)-(1))|0);
      $len=$16;
      var $17=$len;
      var $18=$s;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+$17)|0);
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=(($23)|(0))==10;
      if ($24) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $26=$len;
      var $27=(($26)|(0)) > 0;
      if ($27) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $29=$len;
      var $30=((($29)-(1))|0);
      var $31=$s;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+$30)|0);
      var $35=HEAP8[($34)];
      var $36=(($35 << 24) >> 24);
      var $37=(($36)|(0))==13;
      if ($37) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $39=$len;
      var $40=((($39)-(1))|0);
      $len=$40;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $43=$len;
      var $44=$s;
      var $45=(($44+12)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$len;
      var $47=$s;
      var $48=(($47+20)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+$46)|0);
      HEAP8[($50)]=0;
      var $51=$agg_result;
      var $52=$str;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 9; break;
    case 8: 
      _mrb_nil_value48($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_downcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_downcase_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_downcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $1=$mrb;
      $modify=0;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $p=$10;
      var $11=$s;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$s;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13+$16)|0);
      $pend=$17;
      label = 2; break;
    case 2: 
      var $19=$p;
      var $20=$pend;
      var $21=(($19)>>>(0)) < (($20)>>>(0));
      if ($21) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=_isupper($25);
      var $27=(($26)|(0))!=0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$p;
      var $30=HEAP8[($29)];
      var $31=(($30)&(255));
      var $32=_tolower($31);
      var $33=(($32) & 255);
      var $34=$p;
      HEAP8[($34)]=$33;
      $modify=1;
      label = 5; break;
    case 5: 
      var $36=$p;
      var $37=(($36+1)|0);
      $p=$37;
      label = 2; break;
    case 6: 
      var $39=$modify;
      var $40=(($39)|(0))!=0;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$agg_result;
      var $43=$str;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      label = 9; break;
    case 8: 
      _mrb_nil_value48($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $s=$5;
  var $6=$s;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|(0))==0;
  var $10=(($9)&(1));
  var $11=(($10) & 255);
  _mrb_bool_value($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_eql($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str2=__stackBase__;
      var $eql_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((96444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $4=(($str2+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==16;
      if ($6) { label = 2; break; } else { var $12 = 0;label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=_str_eql($8, $self, $str2);
      var $10=(($9)|(0))!=0;
      var $12 = $10;label = 3; break;
    case 3: 
      var $12;
      var $13=(($12)&(1));
      var $14=(($13) & 255);
      $eql_p=$14;
      var $15=$eql_p;
      _mrb_bool_value($agg_result, $15);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_hash_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $key;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_str_hash($2, $self);
  $key=$3;
  var $4=$key;
  _mrb_fixnum_value47($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_include($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $str2=__stackBase__;
      var $include_p;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((96444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $5=(($str2+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==3;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=(($self)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+20)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($str2)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($self)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_memchr($14, $17, $23);
      var $25=(($24)|(0))!=0;
      var $26=(($25)&(1));
      var $27=(($26) & 255);
      $include_p=$27;
      label = 4; break;
    case 3: 
      var $29=$1;
      _mrb_str_to_str($2, $29, $str2);
      var $30=$str2;
      var $31=$2;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=$1;
      var $33=_mrb_str_index($32, $self, $str2, 0);
      $i=$33;
      var $34=$i;
      var $35=(($34)|(0))!=-1;
      var $36=(($35)&(1));
      var $37=(($36) & 255);
      $include_p=$37;
      label = 4; break;
    case 4: 
      var $39=$include_p;
      _mrb_bool_value($agg_result, $39);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_index_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $sub=(__stackBase__)+(8);
      var $pos;
      var $2=(__stackBase__)+(20);
      var $c;
      var $len;
      var $p;
      var $tmp=(__stackBase__)+(32);
      var $3=(__stackBase__)+(44);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((108412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $6=HEAP32[(($argc)>>2)];
      var $7=(($6)|(0))==2;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=HEAP32[(($argv)>>2)];
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $pos=$13;
      var $14=HEAP32[(($argv)>>2)];
      var $15=(($14)|0);
      var $16=$sub;
      var $17=$15;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 7; break;
    case 3: 
      $pos=0;
      var $19=HEAP32[(($argc)>>2)];
      var $20=(($19)|(0)) > 0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=HEAP32[(($argv)>>2)];
      var $23=(($22)|0);
      var $24=$sub;
      var $25=$23;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 6; break;
    case 5: 
      _mrb_nil_value48($2);
      var $27=$sub;
      var $28=$2;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $31=$1;
      _regexp_check($31, $sub);
      var $32=$pos;
      var $33=(($32)|(0)) < 0;
      if ($33) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $35=(($str)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$pos;
      var $42=((($41)+($40))|0);
      $pos=$42;
      var $43=$pos;
      var $44=(($43)|(0)) < 0;
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _mrb_nil_value48($agg_result);
      label = 27; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $48=(($sub+8)|0);
      var $49=HEAP32[(($48)>>2)];
      if ((($49)|(0))==3) {
        label = 12; break;
      }
      else if ((($49)|(0))==16) {
        label = 23; break;
      }
      else {
      label = 19; break;
      }
    case 12: 
      var $51=(($sub)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      $c=$53;
      var $54=(($str)|0);
      var $55=$54;
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=(($57+12)|0);
      var $59=HEAP32[(($58)>>2)];
      $len=$59;
      var $60=(($str)|0);
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62;
      var $64=(($63+20)|0);
      var $65=HEAP32[(($64)>>2)];
      $p=$65;
      label = 13; break;
    case 13: 
      var $67=$pos;
      var $68=$len;
      var $69=(($67)|(0)) < (($68)|(0));
      if ($69) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $71=$pos;
      var $72=$p;
      var $73=(($72+$71)|0);
      var $74=HEAP8[($73)];
      var $75=(($74)&(255));
      var $76=$c;
      var $77=(($75)|(0))==(($76)|(0));
      if ($77) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $79=$pos;
      _mrb_fixnum_value47($agg_result, $79);
      label = 27; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $82=$pos;
      var $83=((($82)+(1))|0);
      $pos=$83;
      label = 13; break;
    case 18: 
      _mrb_nil_value48($agg_result);
      label = 27; break;
    case 19: 
      var $86=$1;
      _mrb_check_string_type($3, $86, $sub);
      var $87=$tmp;
      var $88=$3;
      assert(12 % 1 === 0);HEAP32[(($87)>>2)]=HEAP32[(($88)>>2)];HEAP32[((($87)+(4))>>2)]=HEAP32[((($88)+(4))>>2)];HEAP32[((($87)+(8))>>2)]=HEAP32[((($88)+(8))>>2)];
      var $89=(($tmp+8)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90)|(0))==0;
      if ($91) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $93=(($tmp)|0);
      var $94=$93;
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|(0))!=0;
      if ($96) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $98=$1;
      var $99=$1;
      var $100=_mrb_class_get($99, ((107284)|0));
      _mrb_raisef($98, $100, ((97068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
      label = 22; break;
    case 22: 
      var $102=$sub;
      var $103=$tmp;
      assert(12 % 1 === 0);HEAP32[(($102)>>2)]=HEAP32[(($103)>>2)];HEAP32[((($102)+(4))>>2)]=HEAP32[((($103)+(4))>>2)];HEAP32[((($102)+(8))>>2)]=HEAP32[((($103)+(8))>>2)];
      label = 23; break;
    case 23: 
      var $105=$1;
      var $106=$pos;
      var $107=_mrb_str_index($105, $str, $sub, $106);
      $pos=$107;
      label = 24; break;
    case 24: 
      var $109=$pos;
      var $110=(($109)|(0))==-1;
      if ($110) { label = 25; break; } else { label = 26; break; }
    case 25: 
      _mrb_nil_value48($agg_result);
      label = 27; break;
    case 26: 
      var $113=$pos;
      _mrb_fixnum_value47($agg_result, $113);
      label = 27; break;
    case 27: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str2=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((96528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
      var $5=(($4)|(0))==1;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($self)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($str2)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      _str_replace($2, $7, $11, $15);
      label = 3; break;
    case 3: 
      var $17=$agg_result;
      var $18=$self;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_replace($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((96620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str2,tempInt));
  var $4=$1;
  var $5=(($str)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=(($str2)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  _str_replace($agg_result, $4, $8, $12);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_reverse($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s2;
      var $s;
      var $e;
      var $p;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0)) <= 1;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      _mrb_str_dup($agg_result, $10, $str);
      label = 7; break;
    case 3: 
      var $12=$1;
      var $13=(($str)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_str_new($12, 0, $18);
      $s2=$19;
      var $20=$1;
      var $21=$s2;
      _str_with_class($20, $21, $str);
      var $22=(($str)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      $s=$27;
      var $28=(($str)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($str)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($33+$39)|0);
      var $41=((($40)-(1))|0);
      $e=$41;
      var $42=$s2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      $p=$44;
      label = 4; break;
    case 4: 
      var $46=$e;
      var $47=$s;
      var $48=(($46)>>>(0)) >= (($47)>>>(0));
      if ($48) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $50=$e;
      var $51=((($50)-(1))|0);
      $e=$51;
      var $52=HEAP8[($50)];
      var $53=$p;
      var $54=(($53+1)|0);
      $p=$54;
      HEAP8[($53)]=$52;
      label = 4; break;
    case 6: 
      var $56=$s2;
      var $57=$56;
      _mrb_obj_value44($agg_result, $57);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_reverse_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $p;
      var $e;
      var $c;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0)) > 1;
      if ($11) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $13=$s;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      $p=$15;
      var $16=$p;
      var $17=$s;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=((($20)-(1))|0);
      $e=$21;
      label = 3; break;
    case 3: 
      var $23=$p;
      var $24=$e;
      var $25=(($23)>>>(0)) < (($24)>>>(0));
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=$p;
      var $28=HEAP8[($27)];
      $c=$28;
      var $29=$e;
      var $30=HEAP8[($29)];
      var $31=$p;
      var $32=(($31+1)|0);
      $p=$32;
      HEAP8[($31)]=$30;
      var $33=$c;
      var $34=$e;
      var $35=((($34)-(1))|0);
      $e=$35;
      HEAP8[($34)]=$33;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $38=$agg_result;
      var $39=$str;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_rindex_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 68)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $sub=(__stackBase__)+(8);
      var $vpos=(__stackBase__)+(20);
      var $pos;
      var $len;
      var $2=(__stackBase__)+(32);
      var $c;
      var $len1;
      var $p;
      var $tmp=(__stackBase__)+(44);
      var $3=(__stackBase__)+(56);
      $1=$mrb;
      var $4=(($str)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $len=$9;
      var $10=$1;
      var $11=_mrb_get_args($10, ((108412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $12=HEAP32[(($argc)>>2)];
      var $13=(($12)|(0))==2;
      if ($13) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $15=HEAP32[(($argv)>>2)];
      var $16=(($15)|0);
      var $17=$sub;
      var $18=$16;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      var $19=HEAP32[(($argv)>>2)];
      var $20=(($19+12)|0);
      var $21=$vpos;
      var $22=$20;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      var $23=(($vpos)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      $pos=$25;
      var $26=$pos;
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $29=$len;
      var $30=$pos;
      var $31=((($30)+($29))|0);
      $pos=$31;
      var $32=$pos;
      var $33=(($32)|(0)) < 0;
      if ($33) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$1;
      _regexp_check($35, $sub);
      _mrb_nil_value48($agg_result);
      label = 29; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $38=$pos;
      var $39=$len;
      var $40=(($38)|(0)) > (($39)|(0));
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$len;
      $pos=$42;
      label = 8; break;
    case 8: 
      label = 13; break;
    case 9: 
      var $45=$len;
      $pos=$45;
      var $46=HEAP32[(($argc)>>2)];
      var $47=(($46)|(0)) > 0;
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $49=HEAP32[(($argv)>>2)];
      var $50=(($49)|0);
      var $51=$sub;
      var $52=$50;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 12; break;
    case 11: 
      _mrb_nil_value48($2);
      var $54=$sub;
      var $55=$2;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $58=$1;
      _regexp_check($58, $sub);
      var $59=(($sub+8)|0);
      var $60=HEAP32[(($59)>>2)];
      if ((($60)|(0))==3) {
        label = 14; break;
      }
      else if ((($60)|(0))==16) {
        label = 25; break;
      }
      else {
      label = 21; break;
      }
    case 14: 
      var $62=(($sub)|0);
      var $63=$62;
      var $64=HEAP32[(($63)>>2)];
      $c=$64;
      var $65=(($str)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      $len1=$70;
      var $71=(($str)|0);
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      $p=$76;
      var $77=$len1;
      $pos=$77;
      label = 15; break;
    case 15: 
      var $79=$pos;
      var $80=(($79)|(0)) >= 0;
      if ($80) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $82=$pos;
      var $83=$p;
      var $84=(($83+$82)|0);
      var $85=HEAP8[($84)];
      var $86=(($85)&(255));
      var $87=$c;
      var $88=(($86)|(0))==(($87)|(0));
      if ($88) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $90=$pos;
      _mrb_fixnum_value47($agg_result, $90);
      label = 29; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $93=$pos;
      var $94=((($93)-(1))|0);
      $pos=$94;
      label = 15; break;
    case 20: 
      _mrb_nil_value48($agg_result);
      label = 29; break;
    case 21: 
      var $97=$1;
      _mrb_check_string_type($3, $97, $sub);
      var $98=$tmp;
      var $99=$3;
      assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
      var $100=(($tmp+8)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101)|(0))==0;
      if ($102) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $104=(($tmp)|0);
      var $105=$104;
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106)|(0))!=0;
      if ($107) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $109=$1;
      var $110=$1;
      var $111=_mrb_class_get($110, ((107284)|0));
      _mrb_raisef($109, $111, ((97068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($sub)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($sub)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($sub)+(8))>>2)],tempInt));
      label = 24; break;
    case 24: 
      var $113=$sub;
      var $114=$tmp;
      assert(12 % 1 === 0);HEAP32[(($113)>>2)]=HEAP32[(($114)>>2)];HEAP32[((($113)+(4))>>2)]=HEAP32[((($114)+(4))>>2)];HEAP32[((($113)+(8))>>2)]=HEAP32[((($114)+(8))>>2)];
      label = 25; break;
    case 25: 
      var $116=$1;
      var $117=$pos;
      var $118=_mrb_str_rindex($116, $str, $sub, $117);
      $pos=$118;
      var $119=$pos;
      var $120=(($119)|(0)) >= 0;
      if ($120) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $122=$pos;
      _mrb_fixnum_value47($agg_result, $122);
      label = 29; break;
    case 27: 
      label = 28; break;
    case 28: 
      _mrb_nil_value48($agg_result);
      label = 29; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_split_m($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 148)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argc;
      var $spat=__stackBase__;
      var $split_type;
      var $i;
      var $lim_p;
      var $beg;
      var $end;
      var $lim=(__stackBase__)+(12);
      var $result=(__stackBase__)+(16);
      var $tmp=(__stackBase__)+(28);
      var $2=(__stackBase__)+(40);
      var $3=(__stackBase__)+(52);
      var $ptr;
      var $eptr;
      var $bptr;
      var $skip;
      var $c;
      var $ai;
      var $4=(__stackBase__)+(64);
      var $ptr1;
      var $temp;
      var $eptr2;
      var $slen;
      var $ai3;
      var $5=(__stackBase__)+(76);
      var $sptr;
      var $ai4;
      var $6=(__stackBase__)+(88);
      var $7=(__stackBase__)+(100);
      var $8=(__stackBase__)+(112);
      var $9=(__stackBase__)+(124);
      var $len;
      var $10=(__stackBase__)+(136);
      $1=$mrb;
      _mrb_nil_value48($spat);
      $split_type=1;
      $i=0;
      HEAP32[(($lim)>>2)]=0;
      var $11=$1;
      var $12=_mrb_get_args($11, ((97200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$spat,HEAP32[(((tempInt)+(4))>>2)]=$lim,tempInt));
      $argc=$12;
      var $13=HEAP32[(($lim)>>2)];
      var $14=(($13)|(0)) > 0;
      if ($14) { label = 2; break; } else { var $19 = 0;label = 3; break; }
    case 2: 
      var $16=$argc;
      var $17=(($16)|(0))==2;
      var $19 = $17;label = 3; break;
    case 3: 
      var $19;
      var $20=(($19)&(1));
      $lim_p=$20;
      var $21=$argc;
      var $22=(($21)|(0))==2;
      if ($22) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $24=HEAP32[(($lim)>>2)];
      var $25=(($24)|(0))==1;
      if ($25) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $27=(($str)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))==0;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$1;
      _mrb_ary_new_capa($agg_result, $35, 0);
      label = 77; break;
    case 7: 
      var $37=$1;
      _mrb_ary_new_from_values($agg_result, $37, 1, $str);
      label = 77; break;
    case 8: 
      $i=1;
      label = 9; break;
    case 9: 
      var $40=$argc;
      var $41=(($40)|(0))==0;
      if ($41) { label = 12; break; } else { label = 10; break; }
    case 10: 
      var $43=(($spat+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0))==0;
      if ($45) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $47=(($spat)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))!=0;
      if ($50) { label = 13; break; } else { label = 12; break; }
    case 12: 
      $split_type=0;
      label = 20; break;
    case 13: 
      var $53=(($spat+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|(0))==16;
      if ($55) { label = 14; break; } else { label = 18; break; }
    case 14: 
      $split_type=1;
      var $57=(($spat)|0);
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))==1;
      if ($63) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $65=(($spat)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      var $69=(($68+20)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0);
      var $72=HEAP8[($71)];
      var $73=(($72 << 24) >> 24);
      var $74=(($73)|(0))==32;
      if ($74) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $split_type=0;
      label = 17; break;
    case 17: 
      label = 19; break;
    case 18: 
      var $78=$1;
      _noregexp($2, $78, $str);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $81=$1;
      _mrb_ary_new($3, $81);
      var $82=$result;
      var $83=$3;
      assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];
      $beg=0;
      var $84=$split_type;
      var $85=(($84)|(0))==0;
      if ($85) { label = 21; break; } else { label = 39; break; }
    case 21: 
      var $87=(($str)|0);
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=(($90+20)|0);
      var $92=HEAP32[(($91)>>2)];
      $ptr=$92;
      var $93=(($str)|0);
      var $94=$93;
      var $95=HEAP32[(($94)>>2)];
      var $96=$95;
      var $97=(($96+20)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($str)|0);
      var $100=$99;
      var $101=HEAP32[(($100)>>2)];
      var $102=$101;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($98+$104)|0);
      $eptr=$105;
      var $106=$ptr;
      $bptr=$106;
      $skip=1;
      var $107=$beg;
      $end=$107;
      label = 22; break;
    case 22: 
      var $109=$ptr;
      var $110=$eptr;
      var $111=(($109)>>>(0)) < (($110)>>>(0));
      if ($111) { label = 23; break; } else { label = 38; break; }
    case 23: 
      var $113=$1;
      var $114=_mrb_gc_arena_save($113);
      $ai=$114;
      var $115=$ptr;
      var $116=(($115+1)|0);
      $ptr=$116;
      var $117=HEAP8[($115)];
      var $118=(($117)&(255));
      $c=$118;
      var $119=$skip;
      var $120=(($119)|(0))!=0;
      if ($120) { label = 24; break; } else { label = 31; break; }
    case 24: 
      var $122=$c;
      var $123=(($122) & 255);
      var $124=(($123)&(255));
      var $125=((80120+$124)|0);
      var $126=HEAP8[($125)];
      var $127=(($126 << 24) >> 24)!=0;
      if ($127) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $129=$ptr;
      var $130=$bptr;
      var $131=$129;
      var $132=$130;
      var $133=((($131)-($132))|0);
      $beg=$133;
      label = 30; break;
    case 26: 
      var $135=$ptr;
      var $136=$bptr;
      var $137=$135;
      var $138=$136;
      var $139=((($137)-($138))|0);
      $end=$139;
      $skip=0;
      var $140=$lim_p;
      var $141=(($140)|(0))!=0;
      if ($141) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $143=HEAP32[(($lim)>>2)];
      var $144=$i;
      var $145=(($143)|(0)) <= (($144)|(0));
      if ($145) { label = 28; break; } else { label = 29; break; }
    case 28: 
      label = 38; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 37; break;
    case 31: 
      var $150=$c;
      var $151=(($150) & 255);
      var $152=(($151)&(255));
      var $153=((80120+$152)|0);
      var $154=HEAP8[($153)];
      var $155=(($154 << 24) >> 24)!=0;
      if ($155) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $157=$1;
      var $158=$1;
      var $159=$beg;
      var $160=$end;
      var $161=$beg;
      var $162=((($160)-($161))|0);
      _mrb_str_subseq($4, $158, $str, $159, $162);
      _mrb_ary_push($157, $result, $4);
      var $163=$1;
      var $164=$ai;
      _mrb_gc_arena_restore($163, $164);
      $skip=1;
      var $165=$ptr;
      var $166=$bptr;
      var $167=$165;
      var $168=$166;
      var $169=((($167)-($168))|0);
      $beg=$169;
      var $170=$lim_p;
      var $171=(($170)|(0))!=0;
      if ($171) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $173=$i;
      var $174=((($173)+(1))|0);
      $i=$174;
      label = 34; break;
    case 34: 
      label = 36; break;
    case 35: 
      var $177=$ptr;
      var $178=$bptr;
      var $179=$177;
      var $180=$178;
      var $181=((($179)-($180))|0);
      $end=$181;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 22; break;
    case 38: 
      label = 60; break;
    case 39: 
      var $186=$split_type;
      var $187=(($186)|(0))==1;
      if ($187) { label = 40; break; } else { label = 58; break; }
    case 40: 
      var $189=(($str)|0);
      var $190=$189;
      var $191=HEAP32[(($190)>>2)];
      var $192=$191;
      var $193=(($192+20)|0);
      var $194=HEAP32[(($193)>>2)];
      $ptr1=$194;
      var $195=$ptr1;
      $temp=$195;
      var $196=(($str)|0);
      var $197=$196;
      var $198=HEAP32[(($197)>>2)];
      var $199=$198;
      var $200=(($199+20)|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=(($str)|0);
      var $203=$202;
      var $204=HEAP32[(($203)>>2)];
      var $205=$204;
      var $206=(($205+12)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($201+$207)|0);
      $eptr2=$208;
      var $209=(($spat)|0);
      var $210=$209;
      var $211=HEAP32[(($210)>>2)];
      var $212=$211;
      var $213=(($212+12)|0);
      var $214=HEAP32[(($213)>>2)];
      $slen=$214;
      var $215=$slen;
      var $216=(($215)|(0))==0;
      if ($216) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $218=$1;
      var $219=_mrb_gc_arena_save($218);
      $ai3=$219;
      label = 42; break;
    case 42: 
      var $221=$ptr1;
      var $222=$eptr2;
      var $223=(($221)>>>(0)) < (($222)>>>(0));
      if ($223) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $225=$1;
      var $226=$1;
      var $227=$ptr1;
      var $228=$temp;
      var $229=$227;
      var $230=$228;
      var $231=((($229)-($230))|0);
      _mrb_str_subseq($5, $226, $str, $231, 1);
      _mrb_ary_push($225, $result, $5);
      var $232=$1;
      var $233=$ai3;
      _mrb_gc_arena_restore($232, $233);
      var $234=$ptr1;
      var $235=(($234+1)|0);
      $ptr1=$235;
      var $236=$lim_p;
      var $237=(($236)|(0))!=0;
      if ($237) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $239=HEAP32[(($lim)>>2)];
      var $240=$i;
      var $241=((($240)+(1))|0);
      $i=$241;
      var $242=(($239)|(0)) <= (($241)|(0));
      if ($242) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 47; break;
    case 46: 
      label = 42; break;
    case 47: 
      label = 57; break;
    case 48: 
      var $247=(($spat)|0);
      var $248=$247;
      var $249=HEAP32[(($248)>>2)];
      var $250=$249;
      var $251=(($250+20)|0);
      var $252=HEAP32[(($251)>>2)];
      $sptr=$252;
      var $253=$1;
      var $254=_mrb_gc_arena_save($253);
      $ai4=$254;
      label = 49; break;
    case 49: 
      var $256=$ptr1;
      var $257=$eptr2;
      var $258=(($256)>>>(0)) < (($257)>>>(0));
      if ($258) { label = 50; break; } else { var $271 = 0;label = 51; break; }
    case 50: 
      var $260=$sptr;
      var $261=$slen;
      var $262=$ptr1;
      var $263=$eptr2;
      var $264=$ptr1;
      var $265=$263;
      var $266=$264;
      var $267=((($265)-($266))|0);
      var $268=_mrb_memsearch($260, $261, $262, $267);
      $end=$268;
      var $269=(($268)|(0)) >= 0;
      var $271 = $269;label = 51; break;
    case 51: 
      var $271;
      if ($271) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $273=$1;
      var $274=$1;
      var $275=$ptr1;
      var $276=$temp;
      var $277=$275;
      var $278=$276;
      var $279=((($277)-($278))|0);
      var $280=$end;
      _mrb_str_subseq($6, $274, $str, $279, $280);
      _mrb_ary_push($273, $result, $6);
      var $281=$1;
      var $282=$ai4;
      _mrb_gc_arena_restore($281, $282);
      var $283=$end;
      var $284=$slen;
      var $285=((($283)+($284))|0);
      var $286=$ptr1;
      var $287=(($286+$285)|0);
      $ptr1=$287;
      var $288=$lim_p;
      var $289=(($288)|(0))!=0;
      if ($289) { label = 53; break; } else { label = 55; break; }
    case 53: 
      var $291=HEAP32[(($lim)>>2)];
      var $292=$i;
      var $293=((($292)+(1))|0);
      $i=$293;
      var $294=(($291)|(0)) <= (($293)|(0));
      if ($294) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 56; break;
    case 55: 
      label = 49; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $299=$ptr1;
      var $300=$temp;
      var $301=$299;
      var $302=$300;
      var $303=((($301)-($302))|0);
      $beg=$303;
      label = 59; break;
    case 58: 
      var $305=$1;
      _noregexp($7, $305, $str);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $308=(($str)|0);
      var $309=$308;
      var $310=HEAP32[(($309)>>2)];
      var $311=$310;
      var $312=(($311+12)|0);
      var $313=HEAP32[(($312)>>2)];
      var $314=(($313)|(0)) > 0;
      if ($314) { label = 61; break; } else { label = 68; break; }
    case 61: 
      var $316=$lim_p;
      var $317=(($316)|(0))!=0;
      if ($317) { label = 64; break; } else { label = 62; break; }
    case 62: 
      var $319=(($str)|0);
      var $320=$319;
      var $321=HEAP32[(($320)>>2)];
      var $322=$321;
      var $323=(($322+12)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$beg;
      var $326=(($324)|(0)) > (($325)|(0));
      if ($326) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $328=HEAP32[(($lim)>>2)];
      var $329=(($328)|(0)) < 0;
      if ($329) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $331=(($str)|0);
      var $332=$331;
      var $333=HEAP32[(($332)>>2)];
      var $334=$333;
      var $335=(($334+12)|0);
      var $336=HEAP32[(($335)>>2)];
      var $337=$beg;
      var $338=(($336)|(0))==(($337)|(0));
      if ($338) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $340=$1;
      _mrb_str_new_empty($8, $340, $str);
      var $341=$tmp;
      var $342=$8;
      assert(12 % 1 === 0);HEAP32[(($341)>>2)]=HEAP32[(($342)>>2)];HEAP32[((($341)+(4))>>2)]=HEAP32[((($342)+(4))>>2)];HEAP32[((($341)+(8))>>2)]=HEAP32[((($342)+(8))>>2)];
      label = 67; break;
    case 66: 
      var $344=$1;
      var $345=$beg;
      var $346=(($str)|0);
      var $347=$346;
      var $348=HEAP32[(($347)>>2)];
      var $349=$348;
      var $350=(($349+12)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$beg;
      var $353=((($351)-($352))|0);
      _mrb_str_subseq($9, $344, $str, $345, $353);
      var $354=$tmp;
      var $355=$9;
      assert(12 % 1 === 0);HEAP32[(($354)>>2)]=HEAP32[(($355)>>2)];HEAP32[((($354)+(4))>>2)]=HEAP32[((($355)+(4))>>2)];HEAP32[((($354)+(8))>>2)]=HEAP32[((($355)+(8))>>2)];
      label = 67; break;
    case 67: 
      var $357=$1;
      _mrb_ary_push($357, $result, $tmp);
      label = 68; break;
    case 68: 
      var $359=$lim_p;
      var $360=(($359)|(0))!=0;
      if ($360) { label = 76; break; } else { label = 69; break; }
    case 69: 
      var $362=HEAP32[(($lim)>>2)];
      var $363=(($362)|(0))==0;
      if ($363) { label = 70; break; } else { label = 76; break; }
    case 70: 
      label = 71; break;
    case 71: 
      var $366=(($result)|0);
      var $367=$366;
      var $368=HEAP32[(($367)>>2)];
      var $369=$368;
      var $370=(($369+12)|0);
      var $371=HEAP32[(($370)>>2)];
      $len=$371;
      var $372=(($371)|(0)) > 0;
      if ($372) { label = 72; break; } else { var $393 = 0;label = 73; break; }
    case 72: 
      var $374=$len;
      var $375=((($374)-(1))|0);
      var $376=(($result)|0);
      var $377=$376;
      var $378=HEAP32[(($377)>>2)];
      var $379=$378;
      var $380=(($379+20)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=(($381+((($375)*(12))&-1))|0);
      var $383=$tmp;
      var $384=$382;
      assert(12 % 1 === 0);HEAP32[(($383)>>2)]=HEAP32[(($384)>>2)];HEAP32[((($383)+(4))>>2)]=HEAP32[((($384)+(4))>>2)];HEAP32[((($383)+(8))>>2)]=HEAP32[((($384)+(8))>>2)];
      var $385=(($tmp)|0);
      var $386=$385;
      var $387=HEAP32[(($386)>>2)];
      var $388=$387;
      var $389=(($388+12)|0);
      var $390=HEAP32[(($389)>>2)];
      var $391=(($390)|(0))==0;
      var $393 = $391;label = 73; break;
    case 73: 
      var $393;
      if ($393) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $395=$1;
      _mrb_ary_pop($10, $395, $result);
      label = 71; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $398=$agg_result;
      var $399=$result;
      assert(12 % 1 === 0);HEAP32[(($398)>>2)]=HEAP32[(($399)>>2)];HEAP32[((($398)+(4))>>2)]=HEAP32[((($399)+(4))>>2)];HEAP32[((($398)+(8))>>2)]=HEAP32[((($399)+(8))>>2)];
      label = 77; break;
    case 77: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_i($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $base;
      var $2=(__stackBase__)+(8);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((108412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $5=HEAP32[(($argc)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $base=10;
      label = 4; break;
    case 3: 
      var $9=HEAP32[(($argv)>>2)];
      var $10=(($9)|0);
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      label = 4; break;
    case 4: 
      var $15=$base;
      var $16=(($15)|(0)) < 0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((104964)|0));
      var $21=$base;
      _mrb_fixnum_value47($2, $21);
      _mrb_raisef($18, $20, ((94488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $23=$1;
      var $24=$base;
      _mrb_str_to_inum($agg_result, $23, $self, $24, 0);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_to_f($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_str_to_dbl($2, $self, 0);
  _mrb_float_value53($agg_result, $3);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_to_s($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_obj_class($2, $self);
      var $4=$1;
      var $5=(($4+60)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($3)|(0))!=(($6)|(0));
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      _mrb_str_dup($agg_result, $9, $self);
      label = 4; break;
    case 3: 
      var $11=$agg_result;
      var $12=$self;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_upcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_upcase_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_upcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $p;
      var $pend;
      var $modify;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      $modify=0;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=(($str)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $p=$13;
      var $14=(($str)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($str)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($19+$25)|0);
      $pend=$26;
      label = 2; break;
    case 2: 
      var $28=$p;
      var $29=$pend;
      var $30=(($28)>>>(0)) < (($29)>>>(0));
      if ($30) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $32=$p;
      var $33=HEAP8[($32)];
      var $34=(($33)&(255));
      var $35=_islower($34);
      var $36=(($35)|(0))!=0;
      if ($36) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $38=$p;
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=_toupper($40);
      var $42=(($41) & 255);
      var $43=$p;
      HEAP8[($43)]=$42;
      $modify=1;
      label = 5; break;
    case 5: 
      var $45=$p;
      var $46=(($45+1)|0);
      $p=$46;
      label = 2; break;
    case 6: 
      var $48=$modify;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $51=$agg_result;
      var $52=$str;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      label = 9; break;
    case 8: 
      _mrb_nil_value48($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_bytes($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $a=__stackBase__;
      var $p;
      var $pend;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($str)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $s=$6;
      var $7=$1;
      var $8=$s;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      _mrb_ary_new_capa($a, $7, $10);
      var $11=$s;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $p=$13;
      var $14=$p;
      var $15=$s;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $pend=$18;
      label = 2; break;
    case 2: 
      var $20=$p;
      var $21=$pend;
      var $22=(($20)>>>(0)) < (($21)>>>(0));
      if ($22) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $24=$1;
      var $25=$p;
      var $26=(($25)|0);
      var $27=HEAP8[($26)];
      var $28=(($27)&(255));
      _mrb_fixnum_value47($2, $28);
      _mrb_ary_push($24, $a, $2);
      var $29=$p;
      var $30=(($29+1)|0);
      $p=$30;
      label = 2; break;
    case 4: 
      var $32=$agg_result;
      var $33=$a;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value53($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_memsearch($x0, $m, $y0, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $x;
      var $y;
      var $ys;
      var $ye;
      $2=$x0;
      $3=$m;
      $4=$y0;
      $5=$n;
      var $6=$2;
      $x=$6;
      var $7=$4;
      $y=$7;
      var $8=$3;
      var $9=$5;
      var $10=(($8)|(0)) > (($9)|(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 19; break;
    case 3: 
      var $13=$3;
      var $14=$5;
      var $15=(($13)|(0))==(($14)|(0));
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$2;
      var $18=$4;
      var $19=$3;
      var $20=_memcmp($17, $18, $19);
      var $21=(($20)|(0))==0;
      var $22=$21 ? 0 : -1;
      $1=$22;
      label = 19; break;
    case 5: 
      var $24=$3;
      var $25=(($24)|(0)) < 1;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 19; break;
    case 7: 
      var $28=$3;
      var $29=(($28)|(0))==1;
      if ($29) { label = 8; break; } else { label = 15; break; }
    case 8: 
      var $31=$y;
      $ys=$31;
      var $32=$ys;
      var $33=$5;
      var $34=(($32+$33)|0);
      $ye=$34;
      label = 9; break;
    case 9: 
      var $36=$y;
      var $37=$ye;
      var $38=(($36)>>>(0)) < (($37)>>>(0));
      if ($38) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $40=$x;
      var $41=HEAP8[($40)];
      var $42=(($41)&(255));
      var $43=$y;
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $46=(($42)|(0))==(($45)|(0));
      if ($46) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $48=$y;
      var $49=$ys;
      var $50=$48;
      var $51=$49;
      var $52=((($50)-($51))|0);
      $1=$52;
      label = 19; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $55=$y;
      var $56=(($55+1)|0);
      $y=$56;
      label = 9; break;
    case 14: 
      $1=-1;
      label = 19; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $62=$2;
      var $63=$3;
      var $64=$4;
      var $65=$5;
      var $66=_mrb_memsearch_qs($62, $63, $64, $65);
      $1=$66;
      label = 19; break;
    case 19: 
      var $68=$1;
      return $68;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_new_empty($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s;
  $1=$mrb;
  var $2=$1;
  var $3=_str_new($2, 0, 0);
  $s=$3;
  var $4=$1;
  var $5=$s;
  _str_with_class($4, $5, $str);
  var $6=$s;
  var $7=$6;
  _mrb_obj_value44($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_memsearch_qs($xs, $m, $ys, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1024)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $x;
      var $xe;
      var $y;
      var $i;
      var $qstable=__stackBase__;
      $2=$xs;
      $3=$m;
      $4=$ys;
      $5=$n;
      var $6=$2;
      $x=$6;
      var $7=$2;
      var $8=$3;
      var $9=(($7+$8)|0);
      $xe=$9;
      var $10=$4;
      $y=$10;
      $i=0;
      label = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($12)|(0)) < 256;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=$3;
      var $16=((($15)+(1))|0);
      var $17=$i;
      var $18=(($qstable+($17<<2))|0);
      HEAP32[(($18)>>2)]=$16;
      label = 4; break;
    case 4: 
      var $20=$i;
      var $21=((($20)+(1))|0);
      $i=$21;
      label = 2; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $24=$x;
      var $25=$xe;
      var $26=(($24)>>>(0)) < (($25)>>>(0));
      if ($26) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $28=$xe;
      var $29=$x;
      var $30=$28;
      var $31=$29;
      var $32=((($30)-($31))|0);
      var $33=$x;
      var $34=HEAP8[($33)];
      var $35=(($34)&(255));
      var $36=(($qstable+($35<<2))|0);
      HEAP32[(($36)>>2)]=$32;
      label = 8; break;
    case 8: 
      var $38=$x;
      var $39=(($38+1)|0);
      $x=$39;
      label = 6; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $42=$y;
      var $43=$3;
      var $44=(($42+$43)|0);
      var $45=$4;
      var $46=$5;
      var $47=(($45+$46)|0);
      var $48=(($44)>>>(0)) <= (($47)>>>(0));
      if ($48) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $50=$2;
      var $51=HEAP8[($50)];
      var $52=(($51)&(255));
      var $53=$y;
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=(($52)|(0))==(($55)|(0));
      if ($56) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $58=$2;
      var $59=$y;
      var $60=$3;
      var $61=_memcmp($58, $59, $60);
      var $62=(($61)|(0))==0;
      if ($62) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $64=$y;
      var $65=$4;
      var $66=$64;
      var $67=$65;
      var $68=((($66)-($67))|0);
      $1=$68;
      label = 17; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $71=(($qstable)|0);
      var $72=$3;
      var $73=$y;
      var $74=(($73+$72)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&(255));
      var $77=(($71+($76<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$y;
      var $80=(($79+$78)|0);
      $y=$80;
      label = 10; break;
    case 16: 
      $1=-1;
      label = 17; break;
    case 17: 
      var $83=$1;
      STACKTOP = __stackBase__;
      return $83;
    default: assert(0, "bad label: " + label);
  }
}
function _regexp_check($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_obj_classname($3, $obj);
      var $5=_memcmp($4, ((96740)|0), 6);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      _noregexp($2, $8, $obj);
      label = 3; break;
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_rindex($mrb, $str, $sub, $pos) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      var $sbeg;
      var $t;
      var $ps;
      var $psub;
      var $len;
      $2=$mrb;
      $3=$pos;
      var $4=(($str)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $ps=$7;
      var $8=(($sub)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $psub=$11;
      var $12=$psub;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      $len=$14;
      var $15=$ps;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$len;
      var $19=(($17)|(0)) < (($18)|(0));
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=-1;
      label = 13; break;
    case 3: 
      var $22=$ps;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$3;
      var $26=((($24)-($25))|0);
      var $27=$len;
      var $28=(($26)|(0)) < (($27)|(0));
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$ps;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$len;
      var $34=((($32)-($33))|0);
      $3=$34;
      label = 5; break;
    case 5: 
      var $36=$ps;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      $sbeg=$38;
      var $39=$ps;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$3;
      var $43=(($41+$42)|0);
      $s=$43;
      var $44=$psub;
      var $45=(($44+20)|0);
      var $46=HEAP32[(($45)>>2)];
      $t=$46;
      var $47=$len;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 6; break; } else { label = 12; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $51=$sbeg;
      var $52=$s;
      var $53=(($51)>>>(0)) <= (($52)>>>(0));
      if ($53) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $55=$s;
      var $56=$t;
      var $57=$len;
      var $58=_memcmp($55, $56, $57);
      var $59=(($58)|(0))==0;
      if ($59) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $61=$s;
      var $62=$ps;
      var $63=(($62+20)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$61;
      var $66=$64;
      var $67=((($65)-($66))|0);
      $1=$67;
      label = 13; break;
    case 10: 
      var $69=$s;
      var $70=((($69)-(1))|0);
      $s=$70;
      label = 7; break;
    case 11: 
      $1=-1;
      label = 13; break;
    case 12: 
      var $73=$3;
      $1=$73;
      label = 13; break;
    case 13: 
      var $75=$1;
      STACKTOP = __stackBase__;
      return $75;
    default: assert(0, "bad label: " + label);
  }
}
function _str_replace($agg_result, $mrb, $s1, $s2) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$s1;
      $3=$s2;
      var $4=$3;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 11;
      var $8=$7 & 2097151;
      var $9=$8 & 1;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 7; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $13=$2;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 11;
      var $17=$16 & 2097151;
      var $18=$17 & 1;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$1;
      var $22=$2;
      var $23=(($22+16)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      _str_decref($21, $25);
      label = 6; break;
    case 5: 
      var $27=$1;
      var $28=$2;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      _mrb_free($27, $30);
      label = 6; break;
    case 6: 
      var $32=$3;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=(($35+20)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=$3;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$2;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$3;
      var $43=(($42+16)|0);
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=$2;
      var $47=(($46+16)|0);
      var $48=$47;
      HEAP32[(($48)>>2)]=$45;
      var $49=$2;
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 >>> 11;
      var $53=$52 & 2097151;
      var $54=$53 | 1;
      var $55=$54 & 2097151;
      var $56=$49;
      var $57=$55 & 2097151;
      var $58=$57 << 11;
      var $59=HEAP32[(($56)>>2)];
      var $60=$59 & 2047;
      var $61=$60 | $58;
      HEAP32[(($56)>>2)]=$61;
      var $62=$2;
      var $63=(($62+16)|0);
      var $64=$63;
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)+(1))|0);
      HEAP32[(($66)>>2)]=$68;
      label = 14; break;
    case 7: 
      var $70=$3;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0)) > 10;
      if ($73) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $75=$1;
      var $76=$3;
      _str_make_shared($75, $76);
      label = 3; break;
    case 9: 
      var $78=$2;
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 >>> 11;
      var $82=$81 & 2097151;
      var $83=$82 & 1;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $86=$1;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=$88;
      var $90=HEAP32[(($89)>>2)];
      _str_decref($86, $90);
      var $91=$2;
      var $92=$91;
      var $93=HEAP32[(($92)>>2)];
      var $94=$93 >>> 11;
      var $95=$94 & 2097151;
      var $96=$95 & -2;
      var $97=$96 & 2097151;
      var $98=$91;
      var $99=$97 & 2097151;
      var $100=$99 << 11;
      var $101=HEAP32[(($98)>>2)];
      var $102=$101 & 2047;
      var $103=$102 | $100;
      HEAP32[(($98)>>2)]=$103;
      var $104=$1;
      var $105=$3;
      var $106=(($105+12)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)+(1))|0);
      var $109=_mrb_malloc($104, $108);
      var $110=$2;
      var $111=(($110+20)|0);
      HEAP32[(($111)>>2)]=$109;
      label = 12; break;
    case 11: 
      var $113=$1;
      var $114=$2;
      var $115=(($114+20)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$3;
      var $118=(($117+12)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=((($119)+(1))|0);
      var $121=_mrb_realloc($113, $116, $120);
      var $122=$2;
      var $123=(($122+20)|0);
      HEAP32[(($123)>>2)]=$121;
      label = 12; break;
    case 12: 
      var $125=$2;
      var $126=(($125+20)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$3;
      var $129=(($128+20)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$3;
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      assert($133 % 1 === 0);_memcpy($127, $130, $133);
      var $134=$3;
      var $135=(($134+12)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$2;
      var $138=(($137+20)|0);
      var $139=HEAP32[(($138)>>2)];
      var $140=(($139+$136)|0);
      HEAP8[($140)]=0;
      var $141=$3;
      var $142=(($141+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$2;
      var $145=(($144+12)|0);
      HEAP32[(($145)>>2)]=$143;
      var $146=$3;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$2;
      var $150=(($149+16)|0);
      var $151=$150;
      HEAP32[(($151)>>2)]=$148;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $154=$2;
      var $155=$154;
      _mrb_obj_value44($agg_result, $155);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_index($mrb, $str, $sub, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sub; $sub = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sub)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sub)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sub)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $pos;
      var $s;
      var $sptr;
      var $len;
      var $slen;
      $2=$mrb;
      $3=$offset;
      var $4=(($str)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      $len=$9;
      var $10=(($sub)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      $slen=$15;
      var $16=$3;
      var $17=(($16)|(0)) < 0;
      if ($17) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $19=$len;
      var $20=$3;
      var $21=((($20)+($19))|0);
      $3=$21;
      var $22=$3;
      var $23=(($22)|(0)) < 0;
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 14; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $27=$len;
      var $28=$3;
      var $29=((($27)-($28))|0);
      var $30=$slen;
      var $31=(($29)|(0)) < (($30)|(0));
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 14; break;
    case 7: 
      var $34=(($str)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      $s=$39;
      var $40=$3;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $43=$3;
      var $44=$s;
      var $45=(($44+$43)|0);
      $s=$45;
      label = 9; break;
    case 9: 
      var $47=$slen;
      var $48=(($47)|(0))==0;
      if ($48) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $50=$3;
      $1=$50;
      label = 14; break;
    case 11: 
      var $52=(($sub)|0);
      var $53=$52;
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      $sptr=$57;
      var $58=(($sub)|0);
      var $59=$58;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60;
      var $62=(($61+12)|0);
      var $63=HEAP32[(($62)>>2)];
      $slen=$63;
      var $64=(($str)|0);
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=$66;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$3;
      var $71=((($69)-($70))|0);
      $len=$71;
      var $72=$sptr;
      var $73=$slen;
      var $74=$s;
      var $75=$len;
      var $76=_mrb_memsearch($72, $73, $74, $75);
      $pos=$76;
      var $77=$pos;
      var $78=(($77)|(0)) < 0;
      if ($78) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $80=$pos;
      $1=$80;
      label = 14; break;
    case 13: 
      var $82=$pos;
      var $83=$3;
      var $84=((($82)+($83))|0);
      $1=$84;
      label = 14; break;
    case 14: 
      var $86=$1;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_aref($agg_result, $mrb, $str, $indx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $indx; $indx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($indx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($indx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($indx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $idx;
      var $2=__stackBase__;
      var $beg=(__stackBase__)+(12);
      var $len=(__stackBase__)+(16);
      var $tmp=(__stackBase__)+(20);
      var $3=(__stackBase__)+(32);
      $1=$mrb;
      var $4=$1;
      _regexp_check($4, $indx);
      var $5=(($indx+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==3) {
        label = 2; break;
      }
      else if ((($6)|(0))==16) {
        label = 8; break;
      }
      else if ((($6)|(0))==17) {
        label = 11; break;
      }
      else {
      label = 14; break;
      }
    case 2: 
      var $8=(($indx)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      $idx=$10;
      label = 3; break;
    case 3: 
      var $12=$1;
      var $13=$idx;
      _mrb_str_substr($2, $12, $str, $13, 1);
      var $14=$str;
      var $15=$2;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=(($str+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=(($str)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $25=(($str)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))==0;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value48($agg_result);
      label = 15; break;
    case 7: 
      var $34=$agg_result;
      var $35=$str;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 15; break;
    case 8: 
      var $37=$1;
      var $38=_mrb_str_index($37, $str, $indx, 0);
      var $39=(($38)|(0))!=-1;
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $41=$1;
      _mrb_str_dup($agg_result, $41, $indx);
      label = 15; break;
    case 10: 
      _mrb_nil_value48($agg_result);
      label = 15; break;
    case 11: 
      var $44=(($str)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      HEAP32[(($len)>>2)]=$49;
      var $50=$1;
      var $51=HEAP32[(($len)>>2)];
      var $52=_mrb_range_beg_len($50, $indx, $beg, $len, $51);
      var $53=(($52)|(0))!=0;
      if ($53) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55=$1;
      var $56=HEAP32[(($beg)>>2)];
      var $57=HEAP32[(($len)>>2)];
      _mrb_str_subseq($3, $55, $str, $56, $57);
      var $58=$tmp;
      var $59=$3;
      assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
      var $60=$agg_result;
      var $61=$tmp;
      assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
      label = 15; break;
    case 13: 
      _mrb_nil_value48($agg_result);
      label = 15; break;
    case 14: 
      var $64=(($indx)|0);
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      $idx=$66;
      label = 3; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_n2s($h) {
  var label = 0;
  var $1;
  var $sz;
  $1=$h;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $sz=$4;
  var $5=$1;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=$1;
  var $8=(($7+4)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=$sz;
  var $10=$9 >>> 2;
  var $11=$sz;
  var $12=$11 >>> 1;
  var $13=$10 | $12;
  var $14=$1;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$1;
  var $17=(($16+40)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$sz;
  var $20=$19;
  var $21=Math.floor(((($20)>>>(0)))/(4));
  var $22=_mrb_malloc($18, $21);
  var $23=$1;
  var $24=(($23+16)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+16)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$sz;
  var $29=Math.floor(((($28)>>>(0)))/(8));
  var $30=(($27+$29)|0);
  var $31=$1;
  var $32=(($31+20)|0);
  HEAP32[(($32)>>2)]=$30;
  var $33=$1;
  var $34=(($33+16)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$sz;
  var $37=Math.floor(((($36)>>>(0)))/(8));
  _kh_fill_flags($35, -1, $37);
  var $38=$1;
  var $39=(($38+20)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=$sz;
  var $42=Math.floor(((($41)>>>(0)))/(8));
  _kh_fill_flags($40, 0, $42);
  var $43=$1;
  var $44=(($43+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$sz;
  var $47=($46<<3);
  var $48=_mrb_malloc($45, $47);
  var $49=$48;
  var $50=$1;
  var $51=(($50+24)|0);
  HEAP32[(($51)>>2)]=$49;
  var $52=$1;
  var $53=(($52+40)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$sz;
  var $56=($55<<1);
  var $57=_mrb_malloc($54, $56);
  var $58=$57;
  var $59=$1;
  var $60=(($59+28)|0);
  HEAP32[(($60)>>2)]=$58;
  var $61=$sz;
  var $62=((($61)-(1))|0);
  var $63=$1;
  var $64=(($63+32)|0);
  HEAP32[(($64)>>2)]=$62;
  var $65=$sz;
  var $66=Math.floor(((($65)>>>(0)))/(2));
  var $67=((($66)-(1))|0);
  var $68=$1;
  var $69=(($68+36)|0);
  HEAP32[(($69)>>2)]=$67;
  return;
}
function _kh_fill_flags($p, $c, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$c;
      $3=$len;
      label = 2; break;
    case 2: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)>>>(0)) > 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=$1;
      var $11=(($10+1)|0);
      $1=$11;
      HEAP8[($10)]=$9;
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sym_hash_func($mrb, $s_0, $s_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s=__stackBase__;
      var $h;
      var $i;
      var $p;
      $1=$mrb;
      var $2=(($s)|0);
      HEAP32[(($2)>>2)]=$s_0;
      var $3=(($s+4)|0);
      HEAP32[(($3)>>2)]=$s_1;
      $h=0;
      var $4=(($s+4)|0);
      var $5=HEAP32[(($4)>>2)];
      $p=$5;
      $i=0;
      label = 2; break;
    case 2: 
      var $7=$i;
      var $8=(($s)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($7)>>>(0)) < (($9)>>>(0));
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $12=$h;
      var $13=$12 << 5;
      var $14=$h;
      var $15=((($13)-($14))|0);
      var $16=$p;
      var $17=(($16+1)|0);
      $p=$17;
      var $18=HEAP8[($16)];
      var $19=(($18 << 24) >> 24);
      var $20=((($15)+($19))|0);
      $h=$20;
      label = 4; break;
    case 4: 
      var $22=$i;
      var $23=((($22)+(1))|0);
      $i=$23;
      label = 2; break;
    case 5: 
      var $25=$h;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_n2s_size($mrb, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h;
      $1=$mrb;
      $2=$size;
      var $3=$1;
      var $4=_mrb_calloc($3, 1, 44);
      var $5=$4;
      $h=$5;
      var $6=$2;
      var $7=(($6)>>>(0)) < 8;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=((($11)-(1))|0);
      $2=$12;
      var $13=$2;
      var $14=$13 >>> 1;
      var $15=$2;
      var $16=$15 | $14;
      $2=$16;
      var $17=$2;
      var $18=$17 >>> 2;
      var $19=$2;
      var $20=$19 | $18;
      $2=$20;
      var $21=$2;
      var $22=$21 >>> 4;
      var $23=$2;
      var $24=$23 | $22;
      $2=$24;
      var $25=$2;
      var $26=$25 >>> 8;
      var $27=$2;
      var $28=$27 | $26;
      $2=$28;
      var $29=$2;
      var $30=$29 >>> 16;
      var $31=$2;
      var $32=$31 | $30;
      $2=$32;
      var $33=$2;
      var $34=((($33)+(1))|0);
      $2=$34;
      label = 5; break;
    case 5: 
      var $36=$2;
      var $37=$h;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$1;
      var $40=$h;
      var $41=(($40+40)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$h;
      _kh_alloc_n2s($42);
      var $43=$h;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_n2s($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_n2s_size($2, 32);
  return $3;
}
function _kh_destroy_n2s($h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$h;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _mrb_free($7, $11);
      var $12=$1;
      var $13=(($12+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_free($14, $18);
      var $19=$1;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      _mrb_free($21, $24);
      var $25=$1;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=$28;
      _mrb_free($27, $29);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_n2s($h, $key_0, $key_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $key=__stackBase__;
      var $k;
      $2=$h;
      var $3=(($key)|0);
      HEAP32[(($3)>>2)]=$key_0;
      var $4=(($key+4)|0);
      HEAP32[(($4)>>2)]=$key_1;
      var $5=$2;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($key)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($key+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=_sym_hash_func($7, $9, $11);
      var $13=$2;
      var $14=(($13+32)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$12 & $15;
      $k=$16;
      label = 2; break;
    case 2: 
      var $18=$k;
      var $19=Math.floor(((($18)>>>(0)))/(8));
      var $20=$2;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=$k;
      var $27=((($26)>>>(0)))%(8);
      var $28=((114652+$27)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255));
      var $31=$25 & $30;
      var $32=(($31)|(0))!=0;
      var $33=$32 ^ 1;
      if ($33) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $35=$k;
      var $36=Math.floor(((($35)>>>(0)))/(8));
      var $37=$2;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+$36)|0);
      var $41=HEAP8[($40)];
      var $42=(($41)&(255));
      var $43=$k;
      var $44=((($43)>>>(0)))%(8);
      var $45=((114652+$44)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&(255));
      var $48=$42 & $47;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 8; break; } else { label = 4; break; }
    case 4: 
      var $51=$k;
      var $52=$2;
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<3))|0);
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($key)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($57)|(0))==(($59)|(0));
      if ($60) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $62=$k;
      var $63=$2;
      var $64=(($63+24)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+($62<<3))|0);
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($key+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$k;
      var $72=$2;
      var $73=(($72+24)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+($71<<3))|0);
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=_memcmp($68, $70, $77);
      var $79=(($78)|(0))==0;
      if ($79) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $81=$k;
      $1=$81;
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $84=$k;
      var $85=$2;
      var $86=(($85+36)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($84)+($87))|0);
      var $89=$2;
      var $90=(($89+32)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$88 & $91;
      $k=$92;
      label = 2; break;
    case 9: 
      var $94=$2;
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      $1=$96;
      label = 10; break;
    case 10: 
      var $98=$1;
      STACKTOP = __stackBase__;
      return $98;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_n2s($h, $new_n_buckets) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $1=$h;
      $2=$new_n_buckets;
      var $3=$2;
      var $4=(($3)>>>(0)) < 8;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$2;
      var $9=((($8)-(1))|0);
      $2=$9;
      var $10=$2;
      var $11=$10 >>> 1;
      var $12=$2;
      var $13=$12 | $11;
      $2=$13;
      var $14=$2;
      var $15=$14 >>> 2;
      var $16=$2;
      var $17=$16 | $15;
      $2=$17;
      var $18=$2;
      var $19=$18 >>> 4;
      var $20=$2;
      var $21=$20 | $19;
      $2=$21;
      var $22=$2;
      var $23=$22 >>> 8;
      var $24=$2;
      var $25=$24 | $23;
      $2=$25;
      var $26=$2;
      var $27=$26 >>> 16;
      var $28=$2;
      var $29=$28 | $27;
      $2=$29;
      var $30=$2;
      var $31=((($30)+(1))|0);
      $2=$31;
      label = 5; break;
    case 5: 
      var $33=$1;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      $old_e_flags=$35;
      var $36=$1;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      $old_keys=$38;
      var $39=$1;
      var $40=(($39+28)|0);
      var $41=HEAP32[(($40)>>2)];
      $old_vals=$41;
      var $42=$1;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      $old_n_buckets=$44;
      var $45=$2;
      var $46=$1;
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$1;
      _kh_alloc_n2s($48);
      $i=0;
      label = 6; break;
    case 6: 
      var $50=$i;
      var $51=$old_n_buckets;
      var $52=(($50)>>>(0)) < (($51)>>>(0));
      if ($52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $54=$i;
      var $55=Math.floor(((($54)>>>(0)))/(8));
      var $56=$old_e_flags;
      var $57=(($56+$55)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&(255));
      var $60=$i;
      var $61=((($60)>>>(0)))%(8);
      var $62=((114652+$61)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&(255));
      var $65=$59 & $64;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$1;
      var $69=$i;
      var $70=$old_keys;
      var $71=(($70+($69<<3))|0);
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($71+4)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=_kh_put_n2s($68, $73, $75);
      $k=$76;
      var $77=$i;
      var $78=$old_vals;
      var $79=(($78+($77<<1))|0);
      var $80=HEAP16[(($79)>>1)];
      var $81=$k;
      var $82=$1;
      var $83=(($82+28)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+($81<<1))|0);
      HEAP16[(($85)>>1)]=$80;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $88=$i;
      var $89=((($88)+(1))|0);
      $i=$89;
      label = 6; break;
    case 11: 
      var $91=$1;
      var $92=(($91+40)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$old_e_flags;
      _mrb_free($93, $94);
      var $95=$1;
      var $96=(($95+40)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$old_keys;
      var $99=$98;
      _mrb_free($97, $99);
      var $100=$1;
      var $101=(($100+40)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$old_vals;
      var $104=$103;
      _mrb_free($102, $104);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_n2s($h, $key_0, $key_1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $key=__stackBase__;
      var $k;
      $1=$h;
      var $2=(($key)|0);
      HEAP32[(($2)>>2)]=$key_0;
      var $3=(($key+4)|0);
      HEAP32[(($3)>>2)]=$key_1;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)>>>(0)) >= (($9)>>>(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=($15<<1);
      _kh_resize_n2s($12, $16);
      label = 3; break;
    case 3: 
      var $18=$1;
      var $19=(($18+40)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($key)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($key+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_sym_hash_func($20, $22, $24);
      var $26=$1;
      var $27=(($26+32)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$25 & $28;
      $k=$29;
      label = 4; break;
    case 4: 
      var $31=$k;
      var $32=Math.floor(((($31)>>>(0)))/(8));
      var $33=$1;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+$32)|0);
      var $37=HEAP8[($36)];
      var $38=(($37)&(255));
      var $39=$k;
      var $40=((($39)>>>(0)))%(8);
      var $41=((114652+$40)|0);
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$38 & $43;
      var $45=(($44)|(0))!=0;
      if ($45) { var $63 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $47=$k;
      var $48=Math.floor(((($47)>>>(0)))/(8));
      var $49=$1;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+$48)|0);
      var $53=HEAP8[($52)];
      var $54=(($53)&(255));
      var $55=$k;
      var $56=((($55)>>>(0)))%(8);
      var $57=((114652+$56)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&(255));
      var $60=$54 & $59;
      var $61=(($60)|(0))!=0;
      var $63 = $61;label = 6; break;
    case 6: 
      var $63;
      var $64=$63 ^ 1;
      if ($64) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $66=$k;
      var $67=$1;
      var $68=(($67+24)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($66<<3))|0);
      var $71=(($70)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($key)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($72)|(0))==(($74)|(0));
      if ($75) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $77=$k;
      var $78=$1;
      var $79=(($78+24)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+($77<<3))|0);
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($key+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$k;
      var $87=$1;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+($86<<3))|0);
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=_memcmp($83, $85, $92);
      var $94=(($93)|(0))==0;
      if ($94) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $97=$k;
      var $98=$1;
      var $99=(($98+36)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($97)+($100))|0);
      var $102=$1;
      var $103=(($102+32)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$101 & $104;
      $k=$105;
      label = 4; break;
    case 11: 
      var $107=$k;
      var $108=Math.floor(((($107)>>>(0)))/(8));
      var $109=$1;
      var $110=(($109+16)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+$108)|0);
      var $113=HEAP8[($112)];
      var $114=(($113)&(255));
      var $115=$k;
      var $116=((($115)>>>(0)))%(8);
      var $117=((114652+$116)|0);
      var $118=HEAP8[($117)];
      var $119=(($118)&(255));
      var $120=$114 & $119;
      var $121=(($120)|(0))!=0;
      if ($121) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $123=$k;
      var $124=$1;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($123<<3))|0);
      var $128=$127;
      var $129=$key;
      assert(8 % 1 === 0);HEAP32[(($128)>>2)]=HEAP32[(($129)>>2)];HEAP32[((($128)+(4))>>2)]=HEAP32[((($129)+(4))>>2)];
      var $130=$k;
      var $131=((($130)>>>(0)))%(8);
      var $132=((114652+$131)|0);
      var $133=HEAP8[($132)];
      var $134=(($133)&(255));
      var $135=$134 ^ -1;
      var $136=$k;
      var $137=Math.floor(((($136)>>>(0)))/(8));
      var $138=$1;
      var $139=(($138+16)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+$137)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&(255));
      var $144=$143 & $135;
      var $145=(($144) & 255);
      HEAP8[($141)]=$145;
      var $146=$1;
      var $147=(($146+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=((($148)+(1))|0);
      HEAP32[(($147)>>2)]=$149;
      var $150=$1;
      var $151=(($150+8)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=((($152)+(1))|0);
      HEAP32[(($151)>>2)]=$153;
      label = 16; break;
    case 13: 
      var $155=$k;
      var $156=Math.floor(((($155)>>>(0)))/(8));
      var $157=$1;
      var $158=(($157+20)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159+$156)|0);
      var $161=HEAP8[($160)];
      var $162=(($161)&(255));
      var $163=$k;
      var $164=((($163)>>>(0)))%(8);
      var $165=((114652+$164)|0);
      var $166=HEAP8[($165)];
      var $167=(($166)&(255));
      var $168=$162 & $167;
      var $169=(($168)|(0))!=0;
      if ($169) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $171=$k;
      var $172=$1;
      var $173=(($172+24)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+($171<<3))|0);
      var $176=$175;
      var $177=$key;
      assert(8 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];
      var $178=$k;
      var $179=((($178)>>>(0)))%(8);
      var $180=((114652+$179)|0);
      var $181=HEAP8[($180)];
      var $182=(($181)&(255));
      var $183=$182 ^ -1;
      var $184=$k;
      var $185=Math.floor(((($184)>>>(0)))/(8));
      var $186=$1;
      var $187=(($186+20)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+$185)|0);
      var $190=HEAP8[($189)];
      var $191=(($190)&(255));
      var $192=$191 & $183;
      var $193=(($192) & 255);
      HEAP8[($189)]=$193;
      var $194=$1;
      var $195=(($194+4)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=((($196)+(1))|0);
      HEAP32[(($195)>>2)]=$197;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $200=$k;
      STACKTOP = __stackBase__;
      return $200;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern2($mrb, $name, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $h;
      var $sname=__stackBase__;
      var $k;
      var $sym;
      var $p;
      $2=$mrb;
      $3=$name;
      $4=$len;
      var $5=$2;
      var $6=(($5+568)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$4;
      var $9=(($sname)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$3;
      var $11=(($sname+4)|0);
      HEAP32[(($11)>>2)]=$10;
      var $12=$h;
      var $13=(($sname)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($sname+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_kh_get_n2s($12, $14, $16);
      $k=$17;
      var $18=$k;
      var $19=$h;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)|(0))!=(($21)|(0));
      if ($22) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $24=$k;
      var $25=$h;
      var $26=(($25+28)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+($24<<1))|0);
      var $29=HEAP16[(($28)>>1)];
      $1=$29;
      label = 4; break;
    case 3: 
      var $31=$2;
      var $32=(($31+564)|0);
      var $33=HEAP16[(($32)>>1)];
      var $34=((($33)+(1))&65535);
      HEAP16[(($32)>>1)]=$34;
      $sym=$34;
      var $35=$2;
      var $36=$4;
      var $37=((($36)+(1))|0);
      var $38=_mrb_malloc($35, $37);
      $p=$38;
      var $39=$p;
      var $40=$3;
      var $41=$4;
      assert($41 % 1 === 0);_memcpy($39, $40, $41);
      var $42=$4;
      var $43=$p;
      var $44=(($43+$42)|0);
      HEAP8[($44)]=0;
      var $45=$p;
      var $46=(($sname+4)|0);
      HEAP32[(($46)>>2)]=$45;
      var $47=$h;
      var $48=(($sname)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($sname+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=_kh_put_n2s($47, $49, $51);
      $k=$52;
      var $53=$sym;
      var $54=$k;
      var $55=$h;
      var $56=(($55+28)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+($54<<1))|0);
      HEAP16[(($58)>>1)]=$53;
      var $59=$sym;
      $1=$59;
      label = 4; break;
    case 4: 
      var $61=$1;
      STACKTOP = __stackBase__;
      return $61;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern_cstr($mrb, $name) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$name;
  var $3=$1;
  var $4=$2;
  var $5=$2;
  var $6=_strlen($5);
  var $7=_mrb_intern2($3, $4, $6);
  return $7;
}
function _mrb_intern_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($str)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=(($6+20)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($str)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  var $13=(($12+12)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=_mrb_intern2($2, $8, $14);
  STACKTOP = __stackBase__;
  return $15;
}
function _mrb_check_intern($agg_result, $mrb, $name, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $h;
      var $sname=__stackBase__;
      var $k;
      $1=$mrb;
      $2=$name;
      $3=$len;
      var $4=$1;
      var $5=(($4+568)|0);
      var $6=HEAP32[(($5)>>2)];
      $h=$6;
      var $7=$3;
      var $8=(($sname)|0);
      HEAP32[(($8)>>2)]=$7;
      var $9=$2;
      var $10=(($sname+4)|0);
      HEAP32[(($10)>>2)]=$9;
      var $11=$h;
      var $12=(($sname)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($sname+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=_kh_get_n2s($11, $13, $15);
      $k=$16;
      var $17=$k;
      var $18=$h;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|(0))!=(($20)|(0));
      if ($21) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $23=$k;
      var $24=$h;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($23<<1))|0);
      var $28=HEAP16[(($27)>>1)];
      _mrb_symbol_value90($agg_result, $28);
      label = 4; break;
    case 3: 
      _mrb_nil_value91($agg_result);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value90($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value91($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_intern_str($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($str)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=(($6+20)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($str)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  var $13=(($12+12)|0);
  var $14=HEAP32[(($13)>>2)];
  _mrb_check_intern($agg_result, $2, $8, $14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_sym2name_len($mrb, $sym, $lenp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $h;
      var $k;
      var $sname=__stackBase__;
      $2=$mrb;
      $3=$sym;
      $4=$lenp;
      var $5=$2;
      var $6=(($5+568)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      $k=0;
      label = 2; break;
    case 2: 
      var $9=$k;
      var $10=$h;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($9)|(0))!=(($12)|(0));
      if ($13) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $15=$k;
      var $16=Math.floor(((($15)>>>(0)))/(8));
      var $17=$h;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+$16)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&(255));
      var $23=$k;
      var $24=((($23)>>>(0)))%(8);
      var $25=((114652+$24)|0);
      var $26=HEAP8[($25)];
      var $27=(($26)&(255));
      var $28=$22 & $27;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 8; break; } else { label = 4; break; }
    case 4: 
      var $31=$k;
      var $32=Math.floor(((($31)>>>(0)))/(8));
      var $33=$h;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+$32)|0);
      var $37=HEAP8[($36)];
      var $38=(($37)&(255));
      var $39=$k;
      var $40=((($39)>>>(0)))%(8);
      var $41=((114652+$40)|0);
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$38 & $43;
      var $45=(($44)|(0))!=0;
      if ($45) { label = 8; break; } else { label = 5; break; }
    case 5: 
      var $47=$k;
      var $48=$h;
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+($47<<1))|0);
      var $52=HEAP16[(($51)>>1)];
      var $53=(($52 << 16) >> 16);
      var $54=$3;
      var $55=(($54 << 16) >> 16);
      var $56=(($53)|(0))==(($55)|(0));
      if ($56) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $58=$k;
      var $59=$h;
      var $60=(($59+24)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($58<<3))|0);
      var $63=$sname;
      var $64=$62;
      assert(8 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];
      var $65=(($sname)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$4;
      HEAP32[(($67)>>2)]=$66;
      var $68=(($sname+4)|0);
      var $69=HEAP32[(($68)>>2)];
      $1=$69;
      label = 11; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $73=$k;
      var $74=((($73)+(1))|0);
      $k=$74;
      label = 2; break;
    case 10: 
      var $76=$4;
      HEAP32[(($76)>>2)]=0;
      $1=0;
      label = 11; break;
    case 11: 
      var $78=$1;
      STACKTOP = __stackBase__;
      return $78;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_symtbl($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+568)|0);
      var $4=HEAP32[(($3)>>2)];
      $h=$4;
      $k=0;
      label = 2; break;
    case 2: 
      var $6=$k;
      var $7=$h;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0))!=(($9)|(0));
      if ($10) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $12=$k;
      var $13=Math.floor(((($12)>>>(0)))/(8));
      var $14=$h;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$13)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=$k;
      var $21=((($20)>>>(0)))%(8);
      var $22=((114652+$21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$19 & $24;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $28=$k;
      var $29=Math.floor(((($28)>>>(0)))/(8));
      var $30=$h;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29)|0);
      var $34=HEAP8[($33)];
      var $35=(($34)&(255));
      var $36=$k;
      var $37=((($36)>>>(0)))%(8);
      var $38=((114652+$37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$35 & $40;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $44=$1;
      var $45=$k;
      var $46=$h;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($45<<3))|0);
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      _mrb_free($44, $51);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $54=$k;
      var $55=((($54)+(1))|0);
      $k=$55;
      label = 2; break;
    case 8: 
      var $57=$1;
      var $58=(($57+568)|0);
      var $59=HEAP32[(($58)>>2)];
      _kh_destroy_n2s($59);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_symtbl($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_n2s($2);
  var $4=$1;
  var $5=(($4+568)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _mrb_sym_to_s($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id;
  var $p;
  var $len=__stackBase__;
  $1=$mrb;
  var $2=(($sym)|0);
  var $3=$2;
  var $4=HEAP16[(($3)>>1)];
  $id=$4;
  var $5=$1;
  var $6=$id;
  var $7=_mrb_sym2name_len($5, $6, $len);
  $p=$7;
  var $8=$1;
  var $9=$p;
  var $10=HEAP32[(($len)>>2)];
  _mrb_str_new_static($agg_result, $8, $9, $10);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_sym2str($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $len=__stackBase__;
      var $name;
      var $str=(__stackBase__)+(4);
      var $3=(__stackBase__)+(16);
      $1=$mrb;
      $2=$sym;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_sym2name_len($4, $5, $len);
      $name=$6;
      var $7=$name;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_undef_value($agg_result);
      label = 7; break;
    case 3: 
      var $11=$1;
      var $12=$name;
      var $13=HEAP32[(($len)>>2)];
      _mrb_str_new_static($3, $11, $12, $13);
      var $14=$str;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=$name;
      var $17=_symname_p($16);
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $20=$name;
      var $21=_strlen($20);
      var $22=HEAP32[(($len)>>2)];
      var $23=(($21)|(0))==(($22)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$agg_result;
      var $26=$str;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $28=$1;
      _mrb_str_dump($agg_result, $28, $str);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=5;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _symname_p($name) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $m;
      var $localid;
      $2=$name;
      var $3=$2;
      $m=$3;
      $localid=0;
      var $4=$m;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 68; break;
    case 3: 
      var $8=$m;
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24);
      if ((($10)|(0))==0) {
        label = 4; break;
      }
      else if ((($10)|(0))==36) {
        label = 5; break;
      }
      else if ((($10)|(0))==64) {
        label = 8; break;
      }
      else if ((($10)|(0))==60) {
        label = 11; break;
      }
      else if ((($10)|(0))==62) {
        label = 18; break;
      }
      else if ((($10)|(0))==61) {
        label = 22; break;
      }
      else if ((($10)|(0))==42) {
        label = 29; break;
      }
      else if ((($10)|(0))==33) {
        label = 32; break;
      }
      else if ((($10)|(0))==43 | (($10)|(0))==45) {
        label = 35; break;
      }
      else if ((($10)|(0))==124) {
        label = 38; break;
      }
      else if ((($10)|(0))==38) {
        label = 41; break;
      }
      else if ((($10)|(0))==94 | (($10)|(0))==47 | (($10)|(0))==37 | (($10)|(0))==126 | (($10)|(0))==96) {
        label = 44; break;
      }
      else if ((($10)|(0))==91) {
        label = 45; break;
      }
      else {
      label = 50; break;
      }
    case 4: 
      $1=0;
      label = 68; break;
    case 5: 
      var $13=$m;
      var $14=(($13+1)|0);
      $m=$14;
      var $15=_is_special_global_name($14);
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=1;
      label = 68; break;
    case 7: 
      label = 51; break;
    case 8: 
      var $20=$m;
      var $21=(($20+1)|0);
      $m=$21;
      var $22=HEAP8[($21)];
      var $23=(($22 << 24) >> 24);
      var $24=(($23)|(0))==64;
      if ($24) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $26=$m;
      var $27=(($26+1)|0);
      $m=$27;
      label = 10; break;
    case 10: 
      label = 51; break;
    case 11: 
      var $30=$m;
      var $31=(($30+1)|0);
      $m=$31;
      var $32=HEAP8[($31)];
      var $33=(($32 << 24) >> 24);
      if ((($33)|(0))==60) {
        label = 12; break;
      }
      else if ((($33)|(0))==61) {
        label = 13; break;
      }
      else {
      label = 16; break;
      }
    case 12: 
      var $35=$m;
      var $36=(($35+1)|0);
      $m=$36;
      label = 17; break;
    case 13: 
      var $38=$m;
      var $39=(($38+1)|0);
      $m=$39;
      var $40=HEAP8[($39)];
      var $41=(($40 << 24) >> 24);
      var $42=(($41)|(0))==62;
      if ($42) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $44=$m;
      var $45=(($44+1)|0);
      $m=$45;
      label = 15; break;
    case 15: 
      label = 17; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 67; break;
    case 18: 
      var $50=$m;
      var $51=(($50+1)|0);
      $m=$51;
      var $52=HEAP8[($51)];
      var $53=(($52 << 24) >> 24);
      if ((($53)|(0))==62 | (($53)|(0))==61) {
        label = 19; break;
      }
      else {
      label = 20; break;
      }
    case 19: 
      var $55=$m;
      var $56=(($55+1)|0);
      $m=$56;
      label = 21; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 67; break;
    case 22: 
      var $60=$m;
      var $61=(($60+1)|0);
      $m=$61;
      var $62=HEAP8[($61)];
      var $63=(($62 << 24) >> 24);
      if ((($63)|(0))==126) {
        label = 23; break;
      }
      else if ((($63)|(0))==61) {
        label = 24; break;
      }
      else {
      label = 27; break;
      }
    case 23: 
      var $65=$m;
      var $66=(($65+1)|0);
      $m=$66;
      label = 28; break;
    case 24: 
      var $68=$m;
      var $69=(($68+1)|0);
      $m=$69;
      var $70=HEAP8[($69)];
      var $71=(($70 << 24) >> 24);
      var $72=(($71)|(0))==61;
      if ($72) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $74=$m;
      var $75=(($74+1)|0);
      $m=$75;
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      $1=0;
      label = 68; break;
    case 28: 
      label = 67; break;
    case 29: 
      var $80=$m;
      var $81=(($80+1)|0);
      $m=$81;
      var $82=HEAP8[($81)];
      var $83=(($82 << 24) >> 24);
      var $84=(($83)|(0))==42;
      if ($84) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $86=$m;
      var $87=(($86+1)|0);
      $m=$87;
      label = 31; break;
    case 31: 
      label = 67; break;
    case 32: 
      var $90=$m;
      var $91=(($90+1)|0);
      $m=$91;
      var $92=HEAP8[($91)];
      var $93=(($92 << 24) >> 24);
      var $94=(($93)|(0))==61;
      if ($94) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $96=$m;
      var $97=(($96+1)|0);
      $m=$97;
      label = 34; break;
    case 34: 
      label = 67; break;
    case 35: 
      var $100=$m;
      var $101=(($100+1)|0);
      $m=$101;
      var $102=HEAP8[($101)];
      var $103=(($102 << 24) >> 24);
      var $104=(($103)|(0))==64;
      if ($104) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $106=$m;
      var $107=(($106+1)|0);
      $m=$107;
      label = 37; break;
    case 37: 
      label = 67; break;
    case 38: 
      var $110=$m;
      var $111=(($110+1)|0);
      $m=$111;
      var $112=HEAP8[($111)];
      var $113=(($112 << 24) >> 24);
      var $114=(($113)|(0))==124;
      if ($114) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $116=$m;
      var $117=(($116+1)|0);
      $m=$117;
      label = 40; break;
    case 40: 
      label = 67; break;
    case 41: 
      var $120=$m;
      var $121=(($120+1)|0);
      $m=$121;
      var $122=HEAP8[($121)];
      var $123=(($122 << 24) >> 24);
      var $124=(($123)|(0))==38;
      if ($124) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $126=$m;
      var $127=(($126+1)|0);
      $m=$127;
      label = 43; break;
    case 43: 
      label = 67; break;
    case 44: 
      var $130=$m;
      var $131=(($130+1)|0);
      $m=$131;
      label = 67; break;
    case 45: 
      var $133=$m;
      var $134=(($133+1)|0);
      $m=$134;
      var $135=HEAP8[($134)];
      var $136=(($135 << 24) >> 24);
      var $137=(($136)|(0))!=93;
      if ($137) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=0;
      label = 68; break;
    case 47: 
      var $140=$m;
      var $141=(($140+1)|0);
      $m=$141;
      var $142=HEAP8[($141)];
      var $143=(($142 << 24) >> 24);
      var $144=(($143)|(0))==61;
      if ($144) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $146=$m;
      var $147=(($146+1)|0);
      $m=$147;
      label = 49; break;
    case 49: 
      label = 67; break;
    case 50: 
      var $150=$m;
      var $151=HEAP8[($150)];
      var $152=(($151)&(255));
      var $153=_isupper($152);
      var $154=(($153)|(0))!=0;
      var $155=$154 ^ 1;
      var $156=(($155)&(1));
      $localid=$156;
      label = 51; break;
    case 51: 
      var $158=$m;
      var $159=HEAP8[($158)];
      var $160=(($159 << 24) >> 24);
      var $161=(($160)|(0))!=95;
      if ($161) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $163=$m;
      var $164=HEAP8[($163)];
      var $165=(($164)&(255));
      var $166=_isalpha($165);
      var $167=(($166)|(0))!=0;
      if ($167) { label = 54; break; } else { label = 53; break; }
    case 53: 
      $1=0;
      label = 68; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $171=$m;
      var $172=HEAP8[($171)];
      var $173=(($172 << 24) >> 24);
      var $174=(($173)|(0))!=-1;
      if ($174) { label = 56; break; } else { var $189 = 0;label = 59; break; }
    case 56: 
      var $176=$m;
      var $177=HEAP8[($176)];
      var $178=(($177)&(255));
      var $179=_isalnum($178);
      var $180=(($179)|(0))!=0;
      if ($180) { var $187 = 1;label = 58; break; } else { label = 57; break; }
    case 57: 
      var $182=$m;
      var $183=HEAP8[($182)];
      var $184=(($183 << 24) >> 24);
      var $185=(($184)|(0))==95;
      var $187 = $185;label = 58; break;
    case 58: 
      var $187;
      var $189 = $187;label = 59; break;
    case 59: 
      var $189;
      if ($189) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $191=$m;
      var $192=(($191+1)|0);
      $m=$192;
      label = 55; break;
    case 61: 
      var $194=$localid;
      var $195=(($194)|(0))!=0;
      if ($195) { label = 62; break; } else { label = 66; break; }
    case 62: 
      var $197=$m;
      var $198=HEAP8[($197)];
      var $199=(($198 << 24) >> 24);
      if ((($199)|(0))==33 | (($199)|(0))==63 | (($199)|(0))==61) {
        label = 63; break;
      }
      else {
      label = 64; break;
      }
    case 63: 
      var $201=$m;
      var $202=(($201+1)|0);
      $m=$202;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $207=$m;
      var $208=HEAP8[($207)];
      var $209=(($208 << 24) >> 24);
      var $210=(($209)|(0))!=0;
      var $211=$210 ? 0 : 1;
      $1=$211;
      label = 68; break;
    case 68: 
      var $213=$1;
      return $213;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_sym2name($mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $len=__stackBase__;
      var $name;
      var $str=(__stackBase__)+(4);
      var $4=(__stackBase__)+(16);
      $2=$mrb;
      $3=$sym;
      var $5=$2;
      var $6=$3;
      var $7=_mrb_sym2name_len($5, $6, $len);
      $name=$7;
      var $8=$name;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 7; break;
    case 3: 
      var $12=$name;
      var $13=_symname_p($12);
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $16=$name;
      var $17=_strlen($16);
      var $18=HEAP32[(($len)>>2)];
      var $19=(($17)|(0))==(($18)|(0));
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$name;
      $1=$21;
      label = 7; break;
    case 6: 
      var $23=$2;
      var $24=$2;
      var $25=$name;
      var $26=HEAP32[(($len)>>2)];
      _mrb_str_new_static($4, $24, $25, $26);
      _mrb_str_dump($str, $23, $4);
      var $27=(($str)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      $1=$32;
      label = 7; break;
    case 7: 
      var $34=$1;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_symbol($mrb) {
  var label = 0;
  var $1;
  var $sym;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((95348)|0), $5);
  var $7=$1;
  var $8=(($7+92)|0);
  HEAP32[(($8)>>2)]=$6;
  $sym=$6;
  var $9=$1;
  var $10=$sym;
  _mrb_define_method($9, $10, ((109868)|0), 430, 262144);
  var $11=$1;
  var $12=$sym;
  _mrb_define_method($11, $12, ((105676)|0), 620, 0);
  var $13=$1;
  var $14=$sym;
  _mrb_define_method($13, $14, ((102792)|0), 620, 0);
  var $15=$1;
  var $16=$sym;
  _mrb_define_method($15, $16, ((99992)|0), 722, 0);
  var $17=$1;
  var $18=$sym;
  _mrb_define_method($17, $18, ((97416)|0), 688, 0);
  var $19=$1;
  var $20=$sym;
  _mrb_define_method($19, $20, ((96176)|0), 56, 262144);
  var $21=$1;
  var $22=_mrb_intern94($21, ((95044)|0));
  var $23=$1;
  var $24=(($23+36)|0);
  HEAP16[(($24)>>1)]=$22;
  return;
}
function _sym_equal($agg_result, $mrb, $sym1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym1; $sym1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $sym2=__stackBase__;
  var $equal_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((94216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym2,tempInt));
  var $4=$1;
  var $5=_mrb_obj_equal($4, $sym1, $sym2);
  var $6=(($5) & 255);
  $equal_p=$6;
  var $7=$equal_p;
  _mrb_bool_value96($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _sym_to_sym($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$sym;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _sym_inspect($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $sym; $sym = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sym)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sym)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sym)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str=__stackBase__;
      var $name;
      var $len=(__stackBase__)+(12);
      var $id;
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      $1=$mrb;
      var $4=(($sym)|0);
      var $5=$4;
      var $6=HEAP16[(($5)>>1)];
      $id=$6;
      var $7=$1;
      var $8=$id;
      var $9=_mrb_sym2name_len($7, $8, $len);
      $name=$9;
      var $10=$1;
      var $11=HEAP32[(($len)>>2)];
      var $12=((($11)+(1))|0);
      _mrb_str_new($2, $10, 0, $12);
      var $13=$str;
      var $14=$2;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      var $15=(($str)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0);
      HEAP8[($21)]=58;
      var $22=(($str)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+1)|0);
      var $29=$name;
      var $30=HEAP32[(($len)>>2)];
      assert($30 % 1 === 0);_memcpy($28, $29, $30);
      var $31=$name;
      var $32=_symname_p($31);
      var $33=(($32)|(0))!=0;
      if ($33) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $35=$name;
      var $36=_strlen($35);
      var $37=HEAP32[(($len)>>2)];
      var $38=(($36)|(0))!=(($37)|(0));
      if ($38) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $40=$1;
      _mrb_str_dump($3, $40, $str);
      var $41=$str;
      var $42=$3;
      assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
      var $43=(($str)|0);
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      assert(2 % 1 === 0);HEAP8[($48)]=HEAP8[((((93312)|0))|0)];HEAP8[((($48)+(1))|0)]=HEAP8[(((((93312)|0))+(1))|0)];
      label = 4; break;
    case 4: 
      var $50=$agg_result;
      var $51=$str;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_fill_flags112($p, $c, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$c;
      $3=$len;
      label = 2; break;
    case 2: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)>>>(0)) > 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=$1;
      var $11=(($10+1)|0);
      $1=$11;
      HEAP8[($10)]=$9;
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_iv($h, $key) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $k;
      $2=$h;
      $3=$key;
      var $4=$3;
      var $5=(($4 << 16) >> 16);
      var $6=$3;
      var $7=(($6 << 16) >> 16);
      var $8=$7 << 2;
      var $9=$5 ^ $8;
      var $10=$3;
      var $11=(($10 << 16) >> 16);
      var $12=$11 >> 2;
      var $13=$9 ^ $12;
      var $14=$2;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$13 & $16;
      $k=$17;
      label = 2; break;
    case 2: 
      var $19=$k;
      var $20=Math.floor(((($19)>>>(0)))/(8));
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&(255));
      var $27=$k;
      var $28=((($27)>>>(0)))%(8);
      var $29=((114612+$28)|0);
      var $30=HEAP8[($29)];
      var $31=(($30)&(255));
      var $32=$26 & $31;
      var $33=(($32)|(0))!=0;
      var $34=$33 ^ 1;
      if ($34) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $36=$k;
      var $37=Math.floor(((($36)>>>(0)))/(8));
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37)|0);
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$k;
      var $45=((($44)>>>(0)))%(8);
      var $46=((114612+$45)|0);
      var $47=HEAP8[($46)];
      var $48=(($47)&(255));
      var $49=$43 & $48;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $52=$k;
      var $53=$2;
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<1))|0);
      var $57=HEAP16[(($56)>>1)];
      var $58=(($57 << 16) >> 16);
      var $59=$3;
      var $60=(($59 << 16) >> 16);
      var $61=(($58)|(0))==(($60)|(0));
      if ($61) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $63=$k;
      $1=$63;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $66=$k;
      var $67=$2;
      var $68=(($67+36)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($66)+($69))|0);
      var $71=$2;
      var $72=(($71+32)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$70 & $73;
      $k=$74;
      label = 2; break;
    case 8: 
      var $76=$2;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      $1=$78;
      label = 9; break;
    case 9: 
      var $80=$1;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _sym_cmp($agg_result, $mrb, $s1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s1; $s1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s2=__stackBase__;
      var $sym1;
      var $sym2;
      var $p1;
      var $p2;
      var $retval;
      var $len;
      var $len1=(__stackBase__)+(12);
      var $len2=(__stackBase__)+(16);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94216)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $4=(($s2+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=4;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value91($agg_result);
      label = 17; break;
    case 3: 
      var $9=(($s1)|0);
      var $10=$9;
      var $11=HEAP16[(($10)>>1)];
      $sym1=$11;
      var $12=(($s2)|0);
      var $13=$12;
      var $14=HEAP16[(($13)>>1)];
      $sym2=$14;
      var $15=$sym1;
      var $16=(($15 << 16) >> 16);
      var $17=$sym2;
      var $18=(($17 << 16) >> 16);
      var $19=(($16)|(0))==(($18)|(0));
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_fixnum_value95($agg_result, 0);
      label = 17; break;
    case 5: 
      var $22=$1;
      var $23=$sym1;
      var $24=_mrb_sym2name_len($22, $23, $len1);
      $p1=$24;
      var $25=$1;
      var $26=$sym2;
      var $27=_mrb_sym2name_len($25, $26, $len2);
      $p2=$27;
      var $28=HEAP32[(($len1)>>2)];
      var $29=HEAP32[(($len2)>>2)];
      var $30=(($28)>>>(0)) > (($29)>>>(0));
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $32=HEAP32[(($len2)>>2)];
      var $36 = $32;label = 8; break;
    case 7: 
      var $34=HEAP32[(($len1)>>2)];
      var $36 = $34;label = 8; break;
    case 8: 
      var $36;
      $len=$36;
      var $37=$p1;
      var $38=$p2;
      var $39=$len;
      var $40=_memcmp($37, $38, $39);
      $retval=$40;
      var $41=$retval;
      var $42=(($41)|(0))==0;
      if ($42) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $44=HEAP32[(($len1)>>2)];
      var $45=HEAP32[(($len2)>>2)];
      var $46=(($44)|(0))==(($45)|(0));
      if ($46) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _mrb_fixnum_value95($agg_result, 0);
      label = 17; break;
    case 11: 
      var $49=HEAP32[(($len1)>>2)];
      var $50=HEAP32[(($len2)>>2)];
      var $51=(($49)>>>(0)) > (($50)>>>(0));
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _mrb_fixnum_value95($agg_result, 1);
      label = 17; break;
    case 13: 
      _mrb_fixnum_value95($agg_result, -1);
      label = 17; break;
    case 14: 
      var $55=$retval;
      var $56=(($55)|(0)) > 0;
      if ($56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      _mrb_fixnum_value95($agg_result, 1);
      label = 17; break;
    case 16: 
      _mrb_fixnum_value95($agg_result, -1);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern94($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_fixnum_value95($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value96($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _is_special_global_name($m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$m;
      var $3=$2;
      var $4=HEAP8[($3)];
      var $5=(($4 << 24) >> 24);
      if ((($5)|(0))==126 | (($5)|(0))==42 | (($5)|(0))==36 | (($5)|(0))==63 | (($5)|(0))==33 | (($5)|(0))==64 | (($5)|(0))==47 | (($5)|(0))==92 | (($5)|(0))==59 | (($5)|(0))==44 | (($5)|(0))==46 | (($5)|(0))==61 | (($5)|(0))==58 | (($5)|(0))==60 | (($5)|(0))==62 | (($5)|(0))==34 | (($5)|(0))==38 | (($5)|(0))==96 | (($5)|(0))==39 | (($5)|(0))==43 | (($5)|(0))==48) {
        label = 2; break;
      }
      else if ((($5)|(0))==45) {
        label = 3; break;
      }
      else {
      label = 8; break;
      }
    case 2: 
      var $7=$2;
      var $8=(($7+1)|0);
      $2=$8;
      label = 14; break;
    case 3: 
      var $10=$2;
      var $11=(($10+1)|0);
      $2=$11;
      var $12=$2;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      var $15=(($14)|(0))!=-1;
      if ($15) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $17=$2;
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=_isalnum($19);
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $23=$2;
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=(($25)|(0))==95;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$2;
      var $29=(($28+1)|0);
      $2=$29;
      label = 7; break;
    case 7: 
      label = 14; break;
    case 8: 
      var $32=$2;
      var $33=HEAP8[($32)];
      var $34=(($33)&(255));
      var $35=_isdigit($34);
      var $36=(($35)|(0))!=0;
      if ($36) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $1=0;
      label = 15; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $40=$2;
      var $41=(($40+1)|0);
      $2=$41;
      label = 12; break;
    case 12: 
      var $43=$2;
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $46=_isdigit($45);
      var $47=(($46)|(0))!=0;
      if ($47) { label = 11; break; } else { label = 13; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $50=$2;
      var $51=HEAP8[($50)];
      var $52=(($51 << 24) >> 24)!=0;
      var $53=$52 ^ 1;
      var $54=(($53)&(1));
      $1=$54;
      label = 15; break;
    case 15: 
      var $56=$1;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_iv($h) {
  var label = 0;
  var $1;
  var $sz;
  $1=$h;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $sz=$4;
  var $5=$1;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=$1;
  var $8=(($7+4)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=$sz;
  var $10=$9 >>> 2;
  var $11=$sz;
  var $12=$11 >>> 1;
  var $13=$10 | $12;
  var $14=$1;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$1;
  var $17=(($16+40)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$sz;
  var $20=$19;
  var $21=Math.floor(((($20)>>>(0)))/(4));
  var $22=_mrb_malloc($18, $21);
  var $23=$1;
  var $24=(($23+16)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+16)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$sz;
  var $29=Math.floor(((($28)>>>(0)))/(8));
  var $30=(($27+$29)|0);
  var $31=$1;
  var $32=(($31+20)|0);
  HEAP32[(($32)>>2)]=$30;
  var $33=$1;
  var $34=(($33+16)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$sz;
  var $37=Math.floor(((($36)>>>(0)))/(8));
  _kh_fill_flags112($35, -1, $37);
  var $38=$1;
  var $39=(($38+20)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=$sz;
  var $42=Math.floor(((($41)>>>(0)))/(8));
  _kh_fill_flags112($40, 0, $42);
  var $43=$1;
  var $44=(($43+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$sz;
  var $47=($46<<1);
  var $48=_mrb_malloc($45, $47);
  var $49=$48;
  var $50=$1;
  var $51=(($50+24)|0);
  HEAP32[(($51)>>2)]=$49;
  var $52=$1;
  var $53=(($52+40)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$sz;
  var $56=((($55)*(12))&-1);
  var $57=_mrb_malloc($54, $56);
  var $58=$57;
  var $59=$1;
  var $60=(($59+28)|0);
  HEAP32[(($60)>>2)]=$58;
  var $61=$sz;
  var $62=((($61)-(1))|0);
  var $63=$1;
  var $64=(($63+32)|0);
  HEAP32[(($64)>>2)]=$62;
  var $65=$sz;
  var $66=Math.floor(((($65)>>>(0)))/(2));
  var $67=((($66)-(1))|0);
  var $68=$1;
  var $69=(($68+36)|0);
  HEAP32[(($69)>>2)]=$67;
  return;
}
function _kh_init_iv_size($mrb, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h;
      $1=$mrb;
      $2=$size;
      var $3=$1;
      var $4=_mrb_calloc($3, 1, 44);
      var $5=$4;
      $h=$5;
      var $6=$2;
      var $7=(($6)>>>(0)) < 8;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=((($11)-(1))|0);
      $2=$12;
      var $13=$2;
      var $14=$13 >>> 1;
      var $15=$2;
      var $16=$15 | $14;
      $2=$16;
      var $17=$2;
      var $18=$17 >>> 2;
      var $19=$2;
      var $20=$19 | $18;
      $2=$20;
      var $21=$2;
      var $22=$21 >>> 4;
      var $23=$2;
      var $24=$23 | $22;
      $2=$24;
      var $25=$2;
      var $26=$25 >>> 8;
      var $27=$2;
      var $28=$27 | $26;
      $2=$28;
      var $29=$2;
      var $30=$29 >>> 16;
      var $31=$2;
      var $32=$31 | $30;
      $2=$32;
      var $33=$2;
      var $34=((($33)+(1))|0);
      $2=$34;
      label = 5; break;
    case 5: 
      var $36=$2;
      var $37=$h;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$1;
      var $40=$h;
      var $41=(($40+40)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$h;
      _kh_alloc_iv($42);
      var $43=$h;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_iv($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_iv_size($2, 32);
  return $3;
}
function _kh_destroy_iv($h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$h;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _mrb_free($7, $11);
      var $12=$1;
      var $13=(($12+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_free($14, $18);
      var $19=$1;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      _mrb_free($21, $24);
      var $25=$1;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=$28;
      _mrb_free($27, $29);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_iv($h, $new_n_buckets) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $1=$h;
      $2=$new_n_buckets;
      var $3=$2;
      var $4=(($3)>>>(0)) < 8;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$2;
      var $9=((($8)-(1))|0);
      $2=$9;
      var $10=$2;
      var $11=$10 >>> 1;
      var $12=$2;
      var $13=$12 | $11;
      $2=$13;
      var $14=$2;
      var $15=$14 >>> 2;
      var $16=$2;
      var $17=$16 | $15;
      $2=$17;
      var $18=$2;
      var $19=$18 >>> 4;
      var $20=$2;
      var $21=$20 | $19;
      $2=$21;
      var $22=$2;
      var $23=$22 >>> 8;
      var $24=$2;
      var $25=$24 | $23;
      $2=$25;
      var $26=$2;
      var $27=$26 >>> 16;
      var $28=$2;
      var $29=$28 | $27;
      $2=$29;
      var $30=$2;
      var $31=((($30)+(1))|0);
      $2=$31;
      label = 5; break;
    case 5: 
      var $33=$1;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      $old_e_flags=$35;
      var $36=$1;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      $old_keys=$38;
      var $39=$1;
      var $40=(($39+28)|0);
      var $41=HEAP32[(($40)>>2)];
      $old_vals=$41;
      var $42=$1;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      $old_n_buckets=$44;
      var $45=$2;
      var $46=$1;
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$1;
      _kh_alloc_iv($48);
      $i=0;
      label = 6; break;
    case 6: 
      var $50=$i;
      var $51=$old_n_buckets;
      var $52=(($50)>>>(0)) < (($51)>>>(0));
      if ($52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $54=$i;
      var $55=Math.floor(((($54)>>>(0)))/(8));
      var $56=$old_e_flags;
      var $57=(($56+$55)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&(255));
      var $60=$i;
      var $61=((($60)>>>(0)))%(8);
      var $62=((114612+$61)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&(255));
      var $65=$59 & $64;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$1;
      var $69=$i;
      var $70=$old_keys;
      var $71=(($70+($69<<1))|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=_kh_put_iv($68, $72);
      $k=$73;
      var $74=$k;
      var $75=$1;
      var $76=(($75+28)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+((($74)*(12))&-1))|0);
      var $79=$i;
      var $80=$old_vals;
      var $81=(($80+((($79)*(12))&-1))|0);
      var $82=$78;
      var $83=$81;
      assert(12 % 1 === 0);HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)];HEAP32[((($82)+(8))>>2)]=HEAP32[((($83)+(8))>>2)];
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $86=$i;
      var $87=((($86)+(1))|0);
      $i=$87;
      label = 6; break;
    case 11: 
      var $89=$1;
      var $90=(($89+40)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$old_e_flags;
      _mrb_free($91, $92);
      var $93=$1;
      var $94=(($93+40)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$old_keys;
      var $97=$96;
      _mrb_free($95, $97);
      var $98=$1;
      var $99=(($98+40)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$old_vals;
      var $102=$101;
      _mrb_free($100, $102);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_special_set($mrb, $i, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$i;
  STACKTOP = __stackBase__;
  return;
}
function _kh_del_iv($h, $x) {
  var label = 0;
  var $1;
  var $2;
  $1=$h;
  $2=$x;
  var $3=$2;
  var $4=((($3)>>>(0)))%(8);
  var $5=((114612+$4)|0);
  var $6=HEAP8[($5)];
  var $7=(($6)&(255));
  var $8=$2;
  var $9=Math.floor(((($8)>>>(0)))/(8));
  var $10=$1;
  var $11=(($10+20)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+$9)|0);
  var $14=HEAP8[($13)];
  var $15=(($14)&(255));
  var $16=$15 | $7;
  var $17=(($16) & 255);
  HEAP8[($13)]=$17;
  var $18=$1;
  var $19=(($18+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20)-(1))|0);
  HEAP32[(($19)>>2)]=$21;
  return;
}
function _iv_size($mrb, $t) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $h;
      $2=$mrb;
      $3=$t;
      var $4=$3;
      var $5=(($4)|0);
      $h=$5;
      var $6=$h;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$h;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _obj_iv_p($obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      if ((($3)|(0))==8 | (($3)|(0))==9 | (($3)|(0))==10 | (($3)|(0))==12 | (($3)|(0))==15 | (($3)|(0))==21) {
        label = 2; break;
      }
      else {
      label = 3; break;
      }
    case 2: 
      $1=1;
      label = 4; break;
    case 3: 
      $1=0;
      label = 4; break;
    case 4: 
      var $7=$1;
      STACKTOP = __stackBase__;
      return $7;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_iv($h, $key) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $k;
      $1=$h;
      $2=$key;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>(0)) >= (($8)>>>(0));
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=($14<<1);
      _kh_resize_iv($11, $15);
      label = 3; break;
    case 3: 
      var $17=$2;
      var $18=(($17 << 16) >> 16);
      var $19=$2;
      var $20=(($19 << 16) >> 16);
      var $21=$20 << 2;
      var $22=$18 ^ $21;
      var $23=$2;
      var $24=(($23 << 16) >> 16);
      var $25=$24 >> 2;
      var $26=$22 ^ $25;
      var $27=$1;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$26 & $29;
      $k=$30;
      label = 4; break;
    case 4: 
      var $32=$k;
      var $33=Math.floor(((($32)>>>(0)))/(8));
      var $34=$1;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+$33)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255));
      var $40=$k;
      var $41=((($40)>>>(0)))%(8);
      var $42=((114612+$41)|0);
      var $43=HEAP8[($42)];
      var $44=(($43)&(255));
      var $45=$39 & $44;
      var $46=(($45)|(0))!=0;
      if ($46) { var $64 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $48=$k;
      var $49=Math.floor(((($48)>>>(0)))/(8));
      var $50=$1;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+$49)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=$k;
      var $57=((($56)>>>(0)))%(8);
      var $58=((114612+$57)|0);
      var $59=HEAP8[($58)];
      var $60=(($59)&(255));
      var $61=$55 & $60;
      var $62=(($61)|(0))!=0;
      var $64 = $62;label = 6; break;
    case 6: 
      var $64;
      var $65=$64 ^ 1;
      if ($65) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $67=$k;
      var $68=$1;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+($67<<1))|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=(($72 << 16) >> 16);
      var $74=$2;
      var $75=(($74 << 16) >> 16);
      var $76=(($73)|(0))==(($75)|(0));
      if ($76) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $79=$k;
      var $80=$1;
      var $81=(($80+36)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($79)+($82))|0);
      var $84=$1;
      var $85=(($84+32)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$83 & $86;
      $k=$87;
      label = 4; break;
    case 10: 
      var $89=$k;
      var $90=Math.floor(((($89)>>>(0)))/(8));
      var $91=$1;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+$90)|0);
      var $95=HEAP8[($94)];
      var $96=(($95)&(255));
      var $97=$k;
      var $98=((($97)>>>(0)))%(8);
      var $99=((114612+$98)|0);
      var $100=HEAP8[($99)];
      var $101=(($100)&(255));
      var $102=$96 & $101;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $105=$2;
      var $106=$k;
      var $107=$1;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+($106<<1))|0);
      HEAP16[(($110)>>1)]=$105;
      var $111=$k;
      var $112=((($111)>>>(0)))%(8);
      var $113=((114612+$112)|0);
      var $114=HEAP8[($113)];
      var $115=(($114)&(255));
      var $116=$115 ^ -1;
      var $117=$k;
      var $118=Math.floor(((($117)>>>(0)))/(8));
      var $119=$1;
      var $120=(($119+16)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+$118)|0);
      var $123=HEAP8[($122)];
      var $124=(($123)&(255));
      var $125=$124 & $116;
      var $126=(($125) & 255);
      HEAP8[($122)]=$126;
      var $127=$1;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=$1;
      var $132=(($131+8)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($133)+(1))|0);
      HEAP32[(($132)>>2)]=$134;
      label = 15; break;
    case 12: 
      var $136=$k;
      var $137=Math.floor(((($136)>>>(0)))/(8));
      var $138=$1;
      var $139=(($138+20)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+$137)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&(255));
      var $144=$k;
      var $145=((($144)>>>(0)))%(8);
      var $146=((114612+$145)|0);
      var $147=HEAP8[($146)];
      var $148=(($147)&(255));
      var $149=$143 & $148;
      var $150=(($149)|(0))!=0;
      if ($150) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $152=$2;
      var $153=$k;
      var $154=$1;
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+($153<<1))|0);
      HEAP16[(($157)>>1)]=$152;
      var $158=$k;
      var $159=((($158)>>>(0)))%(8);
      var $160=((114612+$159)|0);
      var $161=HEAP8[($160)];
      var $162=(($161)&(255));
      var $163=$162 ^ -1;
      var $164=$k;
      var $165=Math.floor(((($164)>>>(0)))/(8));
      var $166=$1;
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+$165)|0);
      var $170=HEAP8[($169)];
      var $171=(($170)&(255));
      var $172=$171 & $163;
      var $173=(($172) & 255);
      HEAP8[($169)]=$173;
      var $174=$1;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=((($176)+(1))|0);
      HEAP32[(($175)>>2)]=$177;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $180=$k;
      return $180;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_copy_iv($mrb, $h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h2;
      var $k;
      var $k2;
      $1=$mrb;
      $2=$h;
      var $3=$1;
      var $4=_kh_init_iv($3);
      $h2=$4;
      $k=0;
      label = 2; break;
    case 2: 
      var $6=$k;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0))!=(($9)|(0));
      if ($10) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $12=$k;
      var $13=Math.floor(((($12)>>>(0)))/(8));
      var $14=$2;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$13)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=$k;
      var $21=((($20)>>>(0)))%(8);
      var $22=((114612+$21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$19 & $24;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $28=$k;
      var $29=Math.floor(((($28)>>>(0)))/(8));
      var $30=$2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29)|0);
      var $34=HEAP8[($33)];
      var $35=(($34)&(255));
      var $36=$k;
      var $37=((($36)>>>(0)))%(8);
      var $38=((114612+$37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$35 & $40;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $44=$h2;
      var $45=$k;
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($45<<1))|0);
      var $50=HEAP16[(($49)>>1)];
      var $51=_kh_put_iv($44, $50);
      $k2=$51;
      var $52=$k2;
      var $53=$h2;
      var $54=(($53+28)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+((($52)*(12))&-1))|0);
      var $57=$k;
      var $58=$2;
      var $59=(($58+28)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+((($57)*(12))&-1))|0);
      var $62=$56;
      var $63=$61;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $66=$k;
      var $67=((($66)+(1))|0);
      $k=$67;
      label = 2; break;
    case 8: 
      var $69=$h2;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_gv($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+20)|0);
  var $5=HEAP32[(($4)>>2)];
  _mark_tbl($2, $5);
  return;
}
function _mark_tbl($mrb, $t) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$t;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$2;
      var $8=_iv_foreach($6, $7, 214, 0);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_gv($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+20)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      _iv_free($7, $10);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_free($mrb, $t) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$t;
  var $3=$2;
  var $4=(($3)|0);
  _kh_destroy_iv($4);
  return;
}
function _mrb_gc_mark_iv($mrb, $obj) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$obj;
  var $3=$1;
  var $4=$2;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  _mark_tbl($3, $6);
  return;
}
function _mrb_gc_mark_iv_size($mrb, $obj) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$obj;
  var $3=$1;
  var $4=$2;
  var $5=(($4+12)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=_iv_size($3, $6);
  return $7;
}
function _mrb_gc_free_iv($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$obj;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      _iv_free($8, $11);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_special_get($agg_result, $mrb, $i) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$i;
  _mrb_fixnum_value115($agg_result, 0);
  return;
}
function _mrb_fixnum_value115($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_get($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $v=__stackBase__;
      $1=$mrb;
      $2=$obj;
      $3=$sym;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=$1;
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$3;
      var $14=_iv_get($9, $12, $13, $v);
      var $15=(($14)&(255));
      var $16=(($15)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$agg_result;
      var $19=$v;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 5; break;
    case 4: 
      _mrb_nil_value116($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_get($mrb, $t, $sym, $vp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $h;
      var $k;
      $2=$mrb;
      $3=$t;
      $4=$sym;
      $5=$vp;
      var $6=$3;
      var $7=(($6)|0);
      $h=$7;
      var $8=$h;
      var $9=$4;
      var $10=_kh_get_iv($8, $9);
      $k=$10;
      var $11=$k;
      var $12=$h;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|(0))!=(($14)|(0));
      if ($15) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $17=$5;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20=$5;
      var $21=$k;
      var $22=$h;
      var $23=(($22+28)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+((($21)*(12))&-1))|0);
      var $26=$20;
      var $27=$25;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 4; break;
    case 4: 
      $1=1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $31=$1;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value116($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_get($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$sym;
      var $3=_obj_iv_p($obj);
      var $4=(($3 << 24) >> 24)!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=(($obj)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=$2;
      _mrb_obj_iv_get($agg_result, $6, $10, $11);
      label = 4; break;
    case 3: 
      _mrb_nil_value116($agg_result);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_set($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $t;
      $1=$mrb;
      $2=$obj;
      $3=$sym;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $t=$6;
      var $7=$t;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$1;
      var $11=_iv_new($10);
      var $12=$2;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=$11;
      $t=$11;
      label = 3; break;
    case 3: 
      var $15=$1;
      var $16=$2;
      var $17=$16;
      _mrb_write_barrier($15, $17);
      var $18=$1;
      var $19=$t;
      var $20=$3;
      _iv_put($18, $19, $20, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_new($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_iv_size($2, 8);
  var $4=$3;
  return $4;
}
function _iv_put($mrb, $t, $sym, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $h;
  var $k;
  $1=$mrb;
  $2=$t;
  $3=$sym;
  var $4=$2;
  var $5=(($4)|0);
  $h=$5;
  var $6=$h;
  var $7=$3;
  var $8=_kh_put_iv($6, $7);
  $k=$8;
  var $9=$k;
  var $10=$h;
  var $11=(($10+28)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+((($9)*(12))&-1))|0);
  var $14=$13;
  var $15=$val;
  assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_iv_ifnone($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $t;
      $1=$mrb;
      $2=$obj;
      $3=$sym;
      var $4=$2;
      var $5=(($4+12)|0);
      var $6=HEAP32[(($5)>>2)];
      $t=$6;
      var $7=$t;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$1;
      var $11=_iv_new($10);
      var $12=$2;
      var $13=(($12+12)|0);
      HEAP32[(($13)>>2)]=$11;
      $t=$11;
      label = 6; break;
    case 3: 
      var $15=$1;
      var $16=$t;
      var $17=$3;
      var $18=_iv_get($15, $16, $17, $v);
      var $19=(($18 << 24) >> 24)!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$1;
      var $24=$2;
      var $25=$24;
      _mrb_write_barrier($23, $25);
      var $26=$1;
      var $27=$t;
      var $28=$3;
      _iv_put($26, $27, $28, $v);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_set($mrb, $obj, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$sym;
      var $3=_obj_iv_p($obj);
      var $4=(($3 << 24) >> 24)!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=(($obj)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=$2;
      _mrb_obj_iv_set($6, $10, $11, $v);
      label = 4; break;
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((93324)|0));
      _mrb_raise($13, $15, ((108620)|0));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_iv_defined($mrb, $obj, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $t;
      $2=$mrb;
      $3=$obj;
      $4=$sym;
      var $5=$3;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      $t=$7;
      var $8=$t;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$2;
      var $12=$t;
      var $13=$4;
      var $14=_iv_get($11, $12, $13, 0);
      $1=$14;
      label = 4; break;
    case 3: 
      $1=0;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_copy($mrb, $dest, $src) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $src; $src = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($src)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($src)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($src)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $d;
      var $s;
      $1=$mrb;
      var $2=(($dest)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $d=$5;
      var $6=(($src)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $s=$9;
      var $10=$d;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$1;
      var $16=$d;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      _iv_free($15, $18);
      var $19=$d;
      var $20=(($19+12)|0);
      HEAP32[(($20)>>2)]=0;
      label = 3; break;
    case 3: 
      var $22=$s;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=$1;
      var $28=$s;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=_iv_copy($27, $30);
      var $32=$d;
      var $33=(($32+12)|0);
      HEAP32[(($33)>>2)]=$31;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_copy($mrb, $t) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$t;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=_kh_copy_iv($3, $5);
  var $7=$6;
  return $7;
}
function _mrb_obj_iv_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 96)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      var $len;
      var $cn;
      var $3=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      var $6=(__stackBase__)+(48);
      var $7=(__stackBase__)+(60);
      var $8=(__stackBase__)+(72);
      var $9=(__stackBase__)+(84);
      $1=$mrb;
      $2=$obj;
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      $t=$12;
      var $13=$1;
      var $14=$t;
      var $15=_iv_size($13, $14);
      $len=$15;
      var $16=$len;
      var $17=(($16)>>>(0)) > 0;
      if ($17) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $19=$1;
      var $20=$2;
      var $21=$20;
      _mrb_obj_value117($3, $21);
      var $22=_mrb_obj_classname($19, $3);
      $cn=$22;
      var $23=$1;
      _mrb_str_buf_new($str, $23, 30);
      var $24=$1;
      _mrb_str_buf_cat($4, $24, $str, ((108284)|0), 2);
      var $25=$1;
      var $26=$cn;
      _mrb_str_cat2($5, $25, $str, $26);
      var $27=$1;
      _mrb_str_cat($6, $27, $str, ((104668)|0), 1);
      var $28=$1;
      var $29=$1;
      var $30=$2;
      var $31=$30;
      _mrb_ptr_to_str($7, $29, $31);
      _mrb_str_concat($28, $str, $7);
      var $32=$1;
      var $33=$t;
      var $34=$str;
      var $35=_iv_foreach($32, $33, 298, $34);
      var $36=$1;
      _mrb_str_cat($8, $36, $str, ((101876)|0), 1);
      var $37=$agg_result;
      var $38=$str;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $40=$1;
      var $41=$2;
      var $42=$41;
      _mrb_obj_value117($9, $42);
      _mrb_any_to_s($agg_result, $40, $9);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value117($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat2($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$ptr;
  var $3=$1;
  var $4=$2;
  _mrb_str_cat_cstr($agg_result, $3, $str, $4);
  STACKTOP = __stackBase__;
  return;
}
function _iv_foreach($mrb, $t, $func, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $h;
      var $k;
      var $n;
      $2=$mrb;
      $3=$t;
      $4=$func;
      $5=$p;
      var $6=$3;
      var $7=(($6)|0);
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 14; break; }
    case 2: 
      $k=0;
      label = 3; break;
    case 3: 
      var $12=$k;
      var $13=$h;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0))!=(($15)|(0));
      if ($16) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $18=$k;
      var $19=Math.floor(((($18)>>>(0)))/(8));
      var $20=$h;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=$k;
      var $27=((($26)>>>(0)))%(8);
      var $28=((114612+$27)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255));
      var $31=$25 & $30;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 11; break; } else { label = 5; break; }
    case 5: 
      var $34=$k;
      var $35=Math.floor(((($34)>>>(0)))/(8));
      var $36=$h;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+$35)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&(255));
      var $42=$k;
      var $43=((($42)>>>(0)))%(8);
      var $44=((114612+$43)|0);
      var $45=HEAP8[($44)];
      var $46=(($45)&(255));
      var $47=$41 & $46;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $50=$4;
      var $51=$2;
      var $52=$k;
      var $53=$h;
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<1))|0);
      var $57=HEAP16[(($56)>>1)];
      var $58=$k;
      var $59=$h;
      var $60=(($59+28)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+((($58)*(12))&-1))|0);
      var $63=$5;
      var $64=FUNCTION_TABLE[$50]($51, $57, $62, $63);
      $n=$64;
      var $65=$n;
      var $66=(($65)|(0)) > 0;
      if ($66) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 15; break;
    case 8: 
      var $69=$n;
      var $70=(($69)|(0)) < 0;
      if ($70) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $72=$h;
      var $73=$k;
      _kh_del_iv($72, $73);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $77=$k;
      var $78=((($77)+(1))|0);
      $k=$78;
      label = 3; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=1;
      label = 15; break;
    case 15: 
      var $82=$1;
      return $82;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $str=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $4=(__stackBase__)+(16);
      var $5=(__stackBase__)+(28);
      var $6=(__stackBase__)+(40);
      var $7=(__stackBase__)+(52);
      var $8=(__stackBase__)+(64);
      var $9=(__stackBase__)+(76);
      $1=$mrb;
      $2=$sym;
      $3=$p;
      var $10=$3;
      var $11=$10;
      var $12=$str;
      var $13=$11;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=(($str)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0);
      var $21=HEAP8[($20)];
      var $22=(($21 << 24) >> 24);
      var $23=(($22)|(0))==45;
      if ($23) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $25=(($str)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|0);
      HEAP8[($31)]=35;
      var $32=$1;
      _mrb_str_cat($4, $32, $str, ((113352)|0), 1);
      label = 4; break;
    case 3: 
      var $34=$1;
      _mrb_str_cat($5, $34, $str, ((112504)|0), 2);
      label = 4; break;
    case 4: 
      var $36=$1;
      var $37=$2;
      var $38=_mrb_sym2name_len($36, $37, $len);
      $s=$38;
      var $39=$1;
      var $40=$s;
      var $41=HEAP32[(($len)>>2)];
      _mrb_str_cat($6, $39, $str, $40, $41);
      var $42=$1;
      _mrb_str_cat($7, $42, $str, ((111940)|0), 1);
      var $43=$1;
      var $44=$1;
      _mrb_inspect($8, $44, $v);
      _mrb_str_append($9, $43, $str, $8);
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_iv_remove($agg_result, $mrb, $obj, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      var $val=__stackBase__;
      $1=$mrb;
      $2=$sym;
      var $3=_obj_iv_p($obj);
      var $4=(($3 << 24) >> 24)!=0;
      if ($4) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $6=(($obj)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      $t=$11;
      var $12=$t;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=$1;
      var $16=$t;
      var $17=$2;
      var $18=_iv_del($15, $16, $17, $val);
      var $19=(($18)&(255));
      var $20=(($19)|(0))!=0;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=$agg_result;
      var $23=$val;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      _mrb_undef_value118($agg_result);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_del($mrb, $t, $sym, $vp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $h;
      var $k;
      var $val=__stackBase__;
      $2=$mrb;
      $3=$t;
      $4=$sym;
      $5=$vp;
      var $6=$3;
      var $7=(($6)|0);
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $11=$h;
      var $12=$4;
      var $13=_kh_get_iv($11, $12);
      $k=$13;
      var $14=$k;
      var $15=$h;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14)|(0))!=(($17)|(0));
      if ($18) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $20=$k;
      var $21=$h;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+((($20)*(12))&-1))|0);
      var $25=$val;
      var $26=$24;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$h;
      var $28=$k;
      _kh_del_iv($27, $28);
      var $29=$5;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $32=$5;
      var $33=$32;
      var $34=$val;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      label = 5; break;
    case 5: 
      $1=1;
      label = 8; break;
    case 6: 
      label = 7; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $39=$1;
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value118($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=5;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_iv_get($agg_result, $mrb, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  var $4=$1;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|0);
  var $10=$2;
  _mrb_iv_get($agg_result, $3, $9, $10);
  return;
}
function _mrb_vm_iv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  var $4=$1;
  var $5=(($4+8)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6+4)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|0);
  var $10=$2;
  _mrb_iv_set($3, $9, $10, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_instance_variables($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      _mrb_ary_new($2, $3);
      var $4=$ary;
      var $5=$2;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $6=_obj_iv_p($self);
      var $7=(($6)&(255));
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $10=(($self)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$1;
      var $19=(($self)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$ary;
      var $26=_iv_foreach($18, $24, 114, $25);
      label = 4; break;
    case 4: 
      var $28=$agg_result;
      var $29=$ary;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $4=(__stackBase__)+(16);
      $1=$mrb;
      $2=$sym;
      $3=$p;
      var $5=$3;
      var $6=$5;
      var $7=$ary;
      var $8=$6;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$1;
      var $10=$2;
      var $11=_mrb_sym2name_len($9, $10, $len);
      $s=$11;
      var $12=HEAP32[(($len)>>2)];
      var $13=(($12)>>>(0)) > 1;
      if ($13) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $15=$s;
      var $16=(($15)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24);
      var $19=(($18)|(0))==64;
      if ($19) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $21=$s;
      var $22=(($21+1)|0);
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|(0))!=64;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=$1;
      var $28=$2;
      _mrb_symbol_value120($4, $28);
      _mrb_ary_push($27, $ary, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_class_variables($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary=__stackBase__;
      var $c;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      _mrb_ary_new($2, $3);
      var $4=$ary;
      var $5=$2;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $6=(($mod)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $c=$9;
      label = 2; break;
    case 2: 
      var $11=$c;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $14=$c;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$c;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$ary;
      var $24=_iv_foreach($19, $22, 156, $23);
      label = 5; break;
    case 5: 
      var $26=$c;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      $c=$28;
      label = 2; break;
    case 6: 
      var $30=$agg_result;
      var $31=$ary;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $4=(__stackBase__)+(16);
      $1=$mrb;
      $2=$sym;
      $3=$p;
      var $5=$3;
      var $6=$5;
      var $7=$ary;
      var $8=$6;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$1;
      var $10=$2;
      var $11=_mrb_sym2name_len($9, $10, $len);
      $s=$11;
      var $12=HEAP32[(($len)>>2)];
      var $13=(($12)>>>(0)) > 2;
      if ($13) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $15=$s;
      var $16=(($15)|0);
      var $17=HEAP8[($16)];
      var $18=(($17 << 24) >> 24);
      var $19=(($18)|(0))==64;
      if ($19) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $21=$s;
      var $22=(($21+1)|0);
      var $23=HEAP8[($22)];
      var $24=(($23 << 24) >> 24);
      var $25=(($24)|(0))==64;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=$1;
      var $28=$2;
      _mrb_symbol_value120($4, $28);
      _mrb_ary_push($27, $ary, $4);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cv_get($agg_result, $mrb, $c, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cls;
      var $t;
      var $v=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      $1=$mrb;
      $2=$c;
      $3=$sym;
      var $6=$2;
      $cls=$6;
      label = 2; break;
    case 2: 
      var $8=$2;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      $t=$18;
      var $19=$1;
      var $20=$t;
      var $21=$3;
      var $22=_iv_get($19, $20, $21, $v);
      var $23=(($22 << 24) >> 24)!=0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$agg_result;
      var $26=$v;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $29=$2;
      var $30=(($29+20)|0);
      var $31=HEAP32[(($30)>>2)];
      $2=$31;
      label = 2; break;
    case 8: 
      var $33=$1;
      var $34=$3;
      var $35=$1;
      var $36=$3;
      _mrb_sym2str($4, $35, $36);
      var $37=$cls;
      var $38=$37;
      _mrb_obj_value117($5, $38);
      _mrb_name_error($33, $34, ((99212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      _mrb_nil_value116($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_get($agg_result, $mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  var $4=(($mod)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=$2;
  _mrb_mod_cv_get($agg_result, $3, $7, $8);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_set($mrb, $c, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cls;
      var $t;
      $1=$mrb;
      $2=$c;
      $3=$sym;
      var $4=$2;
      $cls=$4;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $14=$2;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      $t=$16;
      var $17=$1;
      var $18=$t;
      var $19=$3;
      var $20=_iv_get($17, $18, $19, 0);
      var $21=(($20 << 24) >> 24)!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$1;
      var $24=$2;
      var $25=$24;
      _mrb_write_barrier($23, $25);
      var $26=$1;
      var $27=$t;
      var $28=$3;
      _iv_put($26, $27, $28, $v);
      label = 11; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      $2=$33;
      label = 2; break;
    case 8: 
      var $35=$cls;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $40=$1;
      var $41=_iv_new($40);
      var $42=$cls;
      var $43=(($42+12)|0);
      HEAP32[(($43)>>2)]=$41;
      label = 10; break;
    case 10: 
      var $45=$1;
      var $46=$cls;
      var $47=$46;
      _mrb_write_barrier($45, $47);
      var $48=$1;
      var $49=$cls;
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$3;
      _iv_put($48, $51, $52, $v);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_set($mrb, $mod, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  var $4=(($mod)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=$2;
  _mrb_mod_cv_set($3, $7, $8, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cv_defined($mrb, $c, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $t;
      $2=$mrb;
      $3=$c;
      $4=$sym;
      label = 2; break;
    case 2: 
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $9=$3;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $14=$3;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      $t=$16;
      var $17=$2;
      var $18=$t;
      var $19=$4;
      var $20=_iv_get($17, $18, $19, 0);
      var $21=(($20 << 24) >> 24)!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=1;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $25=$3;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      $3=$27;
      label = 2; break;
    case 8: 
      $1=0;
      label = 9; break;
    case 9: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_cv_defined($mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  var $4=(($mod)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  var $8=$2;
  var $9=_mrb_mod_cv_defined($3, $7, $8);
  STACKTOP = __stackBase__;
  return $9;
}
function _mrb_vm_cv_get($agg_result, $mrb, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $c=$11;
      var $12=$c;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      $c=$21;
      label = 3; break;
    case 3: 
      var $23=$1;
      var $24=$c;
      var $25=$2;
      _mrb_mod_cv_get($agg_result, $23, $24, $25);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_cv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $t;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $c=$11;
      var $12=$c;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      $c=$21;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $24=$c;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $27=$c;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $32=$c;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      $t=$34;
      var $35=$1;
      var $36=$t;
      var $37=$2;
      var $38=_iv_get($35, $36, $37, 0);
      var $39=(($38 << 24) >> 24)!=0;
      if ($39) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $41=$1;
      var $42=$c;
      var $43=$42;
      _mrb_write_barrier($41, $43);
      var $44=$1;
      var $45=$t;
      var $46=$2;
      _iv_put($44, $45, $46, $v);
      label = 13; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $49=$c;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      $c=$51;
      label = 4; break;
    case 10: 
      var $53=$1;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+28)|0);
      var $59=HEAP32[(($58)>>2)];
      $c=$59;
      var $60=$c;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))!=0;
      if ($63) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $65=$1;
      var $66=_iv_new($65);
      var $67=$c;
      var $68=(($67+12)|0);
      HEAP32[(($68)>>2)]=$66;
      label = 12; break;
    case 12: 
      var $70=$1;
      var $71=$c;
      var $72=$71;
      _mrb_write_barrier($70, $72);
      var $73=$1;
      var $74=$c;
      var $75=(($74+12)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$2;
      _iv_put($73, $76, $77, $v);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_defined($mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $m;
      var $t;
      $2=$mrb;
      $3=$sym;
      var $4=(($mod)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $m=$7;
      var $8=$m;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      $t=$10;
      var $11=$t;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $15=$2;
      var $16=$t;
      var $17=$3;
      var $18=_iv_get($15, $16, $17, 0);
      $1=$18;
      label = 4; break;
    case 4: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_get($agg_result, $mrb, $mod, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  _mod_const_check($3, $mod);
  var $4=$1;
  var $5=(($mod)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=$2;
  _const_get($agg_result, $4, $8, $9);
  STACKTOP = __stackBase__;
  return;
}
function _mod_const_check($mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($mod+8)|0);
      var $3=HEAP32[(($2)>>2)];
      if ((($3)|(0))==9 | (($3)|(0))==10 | (($3)|(0))==12) {
        label = 2; break;
      }
      else {
      label = 3; break;
      }
    case 2: 
      label = 4; break;
    case 3: 
      var $6=$1;
      var $7=$1;
      var $8=_mrb_class_get($7, ((94012)|0));
      _mrb_raise($6, $8, ((114000)|0));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _const_get($agg_result, $mrb, $base, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $v=__stackBase__;
      var $t;
      var $retry;
      var $cm;
      var $4=(__stackBase__)+(12);
      var $name=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      var $6=(__stackBase__)+(48);
      $1=$mrb;
      $2=$base;
      $3=$sym;
      var $7=$2;
      $c=$7;
      $retry=0;
      label = 2; break;
    case 2: 
      label = 3; break;
    case 3: 
      var $10=$c;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $13=$c;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $18=$c;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      $t=$20;
      var $21=$1;
      var $22=$t;
      var $23=$3;
      var $24=_iv_get($21, $22, $23, $v);
      var $25=(($24 << 24) >> 24)!=0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$agg_result;
      var $28=$v;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 19; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $31=$c;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      $c=$33;
      label = 3; break;
    case 9: 
      var $35=$retry;
      var $36=(($35 << 24) >> 24)!=0;
      if ($36) { label = 13; break; } else { label = 10; break; }
    case 10: 
      var $38=$2;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $41=$2;
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & 255;
      var $45=(($44)|(0))==10;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $47=$1;
      var $48=(($47+44)|0);
      var $49=HEAP32[(($48)>>2)];
      $c=$49;
      $retry=1;
      label = 2; break;
    case 13: 
      var $51=$2;
      $c=$51;
      var $52=$1;
      var $53=_mrb_intern2($52, ((95892)|0), 13);
      $cm=$53;
      label = 14; break;
    case 14: 
      var $55=$c;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $58=$1;
      var $59=$c;
      var $60=$59;
      _mrb_obj_value117($4, $60);
      var $61=$cm;
      var $62=_mrb_respond_to($58, $4, $61);
      var $63=(($62)|(0))!=0;
      if ($63) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $65=$3;
      _mrb_symbol_value120($name, $65);
      var $66=$1;
      var $67=$c;
      var $68=$67;
      _mrb_obj_value117($5, $68);
      var $69=$cm;
      _mrb_funcall_argv($agg_result, $66, $5, $69, 1, $name);
      label = 19; break;
    case 17: 
      var $71=$c;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      $c=$73;
      label = 14; break;
    case 18: 
      var $75=$1;
      var $76=$3;
      var $77=$1;
      var $78=$3;
      _mrb_sym2str($6, $77, $78);
      _mrb_name_error($75, $76, ((94808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
      _mrb_nil_value116($agg_result);
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_const_get($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $c2;
      var $v=__stackBase__;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $c=$11;
      var $12=$c;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      $c=$21;
      label = 3; break;
    case 3: 
      var $23=$c;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $26=$c;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $31=$1;
      var $32=$c;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=_iv_get($31, $34, $35, $v);
      var $37=(($36)&(255));
      var $38=(($37)|(0))!=0;
      if ($38) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $40=$agg_result;
      var $41=$v;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      label = 16; break;
    case 7: 
      var $43=$c;
      $c2=$43;
      label = 8; break;
    case 8: 
      var $45=$1;
      var $46=$c2;
      var $47=_mrb_class_outer_module($45, $46);
      $c2=$47;
      var $48=$c2;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 10; break; } else { label = 9; break; }
    case 9: 
      label = 14; break;
    case 10: 
      var $52=$c2;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|(0))!=0;
      if ($55) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $57=$1;
      var $58=$c2;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=_iv_get($57, $60, $61, $v);
      var $63=(($62)&(255));
      var $64=(($63)|(0))!=0;
      if ($64) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $66=$agg_result;
      var $67=$v;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      label = 16; break;
    case 13: 
      label = 8; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $71=$1;
      var $72=$c;
      var $73=$2;
      _const_get($agg_result, $71, $72, $73);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_set($mrb, $mod, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$sym;
  var $3=$1;
  _mod_const_check($3, $mod);
  var $4=$1;
  var $5=$2;
  _mrb_iv_set($4, $mod, $5, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vm_const_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      $c=$11;
      var $12=$c;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+28)|0);
      var $21=HEAP32[(($20)>>2)];
      $c=$21;
      label = 3; break;
    case 3: 
      var $23=$1;
      var $24=$c;
      var $25=$24;
      var $26=$2;
      _mrb_obj_iv_set($23, $25, $26, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_const($mrb, $mod, $name, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$mod;
  $3=$name;
  var $4=$1;
  var $5=$2;
  var $6=$5;
  var $7=$1;
  var $8=$3;
  var $9=_mrb_intern119($7, $8);
  _mrb_obj_iv_set($4, $6, $9, $v);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern119($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_mod_constants($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary=__stackBase__;
      var $c;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($mod)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $c=$6;
      var $7=$1;
      _mrb_ary_new($2, $7);
      var $8=$ary;
      var $9=$2;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 2; break;
    case 2: 
      var $11=$c;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $14=$c;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$c;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$ary;
      var $24=_iv_foreach($19, $22, 714, $23);
      label = 5; break;
    case 5: 
      var $26=$c;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      $c=$28;
      var $29=$c;
      var $30=$1;
      var $31=(($30+44)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|(0))==(($32)|(0));
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      label = 2; break;
    case 8: 
      var $37=$agg_result;
      var $38=$ary;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _const_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ary=__stackBase__;
      var $s;
      var $len=(__stackBase__)+(12);
      var $4=(__stackBase__)+(16);
      $1=$mrb;
      $2=$sym;
      $3=$p;
      var $5=$3;
      var $6=$5;
      var $7=$ary;
      var $8=$6;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$1;
      var $10=$2;
      var $11=_mrb_sym2name_len($9, $10, $len);
      $s=$11;
      var $12=HEAP32[(($len)>>2)];
      var $13=(($12)>>>(0)) > 1;
      if ($13) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $15=$s;
      var $16=(($15)|0);
      var $17=HEAP8[($16)];
      var $18=(($17)&(255));
      var $19=_isupper($18);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $22=$1;
      var $23=$2;
      _mrb_symbol_value120($4, $23);
      _mrb_ary_push($22, $ary, $4);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gv_get($agg_result, $mrb, $sym) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $v=__stackBase__;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value116($agg_result);
      label = 6; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=_iv_get($9, $12, $13, $v);
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$agg_result;
      var $18=$v;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 6; break;
    case 5: 
      _mrb_nil_value116($agg_result);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gv_set($mrb, $sym, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      $1=$mrb;
      $2=$sym;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      var $9=_iv_new($8);
      var $10=$1;
      var $11=(($10+20)|0);
      HEAP32[(($11)>>2)]=$9;
      $t=$9;
      label = 4; break;
    case 3: 
      var $13=$1;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      $t=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      var $18=$t;
      var $19=$2;
      _iv_put($17, $18, $19, $v);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_f_global_variables($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $t;
      var $ary=__stackBase__;
      var $i;
      var $buf=(__stackBase__)+(12);
      var $2=(__stackBase__)+(16);
      $1=$mrb;
      var $3=$1;
      var $4=(($3+20)|0);
      var $5=HEAP32[(($4)>>2)];
      $t=$5;
      var $6=$1;
      _mrb_ary_new($ary, $6);
      var $7=$t;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$t;
      var $12=$ary;
      var $13=_iv_foreach($10, $11, 246, $12);
      label = 3; break;
    case 3: 
      var $15=(($buf)|0);
      HEAP8[($15)]=36;
      var $16=(($buf+2)|0);
      HEAP8[($16)]=0;
      $i=1;
      label = 4; break;
    case 4: 
      var $18=$i;
      var $19=(($18)>>>(0)) <= 9;
      if ($19) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $21=$i;
      var $22=((($21)+(48))|0);
      var $23=(($22) & 255);
      var $24=(($buf+1)|0);
      HEAP8[($24)]=$23;
      var $25=$1;
      var $26=$1;
      var $27=(($buf)|0);
      var $28=_mrb_intern2($26, $27, 2);
      _mrb_symbol_value120($2, $28);
      _mrb_ary_push($25, $ary, $2);
      label = 6; break;
    case 6: 
      var $30=$i;
      var $31=((($30)+(1))|0);
      $i=$31;
      label = 4; break;
    case 7: 
      var $33=$agg_result;
      var $34=$ary;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gv_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $ary=__stackBase__;
  var $4=(__stackBase__)+(12);
  $1=$mrb;
  $2=$sym;
  $3=$p;
  var $5=$3;
  var $6=$5;
  var $7=$ary;
  var $8=$6;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  var $9=$1;
  var $10=$2;
  _mrb_symbol_value120($4, $10);
  _mrb_ary_push($9, $ary, $4);
  STACKTOP = __stackBase__;
  return 0;
}
function _mrb_symbol_value120($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_const_defined_at($mrb, $klass, $id) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$klass;
  $3=$id;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=_mrb_const_defined_0($4, $5, $6, 1, 0);
  var $8=(($7)&(255));
  return $8;
}
function _mrb_const_defined_0($mrb, $klass, $id, $exclude, $recurse) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tmp;
      var $mod_retry;
      $2=$mrb;
      $3=$klass;
      $4=$id;
      $5=$exclude;
      $6=$recurse;
      $mod_retry=0;
      var $7=$3;
      $tmp=$7;
      label = 2; break;
    case 2: 
      label = 3; break;
    case 3: 
      var $10=$tmp;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $13=$tmp;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $18=$2;
      var $19=$tmp;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$4;
      var $23=_iv_get($18, $21, $22, 0);
      var $24=(($23)&(255));
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=1;
      label = 16; break;
    case 7: 
      var $28=$6;
      var $29=(($28 << 24) >> 24)!=0;
      if ($29) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $31=$3;
      var $32=$2;
      var $33=(($32+44)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)|(0))!=(($34)|(0));
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 11; break;
    case 10: 
      var $38=$tmp;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      $tmp=$40;
      label = 3; break;
    case 11: 
      var $42=$5;
      var $43=(($42 << 24) >> 24)!=0;
      if ($43) { label = 15; break; } else { label = 12; break; }
    case 12: 
      var $45=$mod_retry;
      var $46=(($45 << 24) >> 24)!=0;
      if ($46) { label = 15; break; } else { label = 13; break; }
    case 13: 
      var $48=$3;
      var $49=$48;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50 & 255;
      var $52=(($51)|(0))==10;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $mod_retry=1;
      var $54=$2;
      var $55=(($54+44)|0);
      var $56=HEAP32[(($55)>>2)];
      $tmp=$56;
      label = 2; break;
    case 15: 
      $1=0;
      label = 16; break;
    case 16: 
      var $59=$1;
      return $59;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_attr_get($agg_result, $mrb, $obj, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$id;
  var $3=$1;
  var $4=$2;
  _mrb_iv_get($agg_result, $3, $obj, $4);
  STACKTOP = __stackBase__;
  return;
}
function _csym_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $a;
      var $c;
      $2=$mrb;
      $3=$sym;
      $4=$p;
      var $5=$4;
      var $6=$5;
      $a=$6;
      var $7=$a;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      $c=$9;
      var $10=(($v+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$c;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 255;
      var $16=(($11)|(0))==(($15)|(0));
      if ($16) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $18=(($v)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=$c;
      var $23=(($21)|(0))==(($22)|(0));
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$3;
      var $26=$a;
      var $27=(($26+4)|0);
      HEAP16[(($27)>>1)]=$25;
      $1=1;
      label = 5; break;
    case 4: 
      $1=0;
      label = 5; break;
    case 5: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($v+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==0) {
        label = 2; break;
      }
      else if ((($4)|(0))==2) {
        label = 5; break;
      }
      else if ((($4)|(0))==4) {
        label = 6; break;
      }
      else if ((($4)|(0))==3) {
        label = 7; break;
      }
      else if ((($4)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $6=(($v)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 10; break;
    case 4: 
      var $15=$2;
      var $16=(($15+88)|0);
      var $17=HEAP32[(($16)>>2)];
      $1=$17;
      label = 10; break;
    case 5: 
      var $19=$2;
      var $20=(($19+80)|0);
      var $21=HEAP32[(($20)>>2)];
      $1=$21;
      label = 10; break;
    case 6: 
      var $23=$2;
      var $24=(($23+92)|0);
      var $25=HEAP32[(($24)>>2)];
      $1=$25;
      label = 10; break;
    case 7: 
      var $27=$2;
      var $28=(($27+76)|0);
      var $29=HEAP32[(($28)>>2)];
      $1=$29;
      label = 10; break;
    case 8: 
      var $31=$2;
      var $32=(($31+72)|0);
      var $33=HEAP32[(($32)>>2)];
      $1=$33;
      label = 10; break;
    case 9: 
      var $35=(($v)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      $1=$40;
      label = 10; break;
    case 10: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_sym($mrb, $c, $outer) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $name=__stackBase__;
      var $5=(__stackBase__)+(12);
      var $arg=(__stackBase__)+(24);
      $2=$mrb;
      $3=$c;
      $4=$outer;
      var $6=$2;
      var $7=$3;
      var $8=$7;
      var $9=$2;
      var $10=_mrb_intern2($9, ((97040)|0), 11);
      _mrb_obj_iv_get($5, $6, $8, $10);
      var $11=$name;
      var $12=$5;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($name+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==0;
      if ($15) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $17=(($name)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $22=$4;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 7; break;
    case 5: 
      var $26=$3;
      var $27=(($arg)|0);
      HEAP32[(($27)>>2)]=$26;
      var $28=(($arg+4)|0);
      HEAP16[(($28)>>1)]=0;
      var $29=$2;
      var $30=$4;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$arg;
      var $34=_iv_foreach($29, $32, 320, $33);
      var $35=(($arg+4)|0);
      var $36=HEAP16[(($35)>>1)];
      $1=$36;
      label = 7; break;
    case 6: 
      var $38=(($name)|0);
      var $39=$38;
      var $40=HEAP16[(($39)>>1)];
      $1=$40;
      label = 7; break;
    case 7: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _iv_mark_i($mrb, $sym, $v, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$sym;
      $3=$p;
      label = 2; break;
    case 2: 
      var $5=(($v+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)>>>(0)) >= 8;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($v)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      _mrb_gc_mark($9, $13);
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_funcall($agg_result, $mrb, $self, $name, $argc, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 212)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mid;
      var $v=__stackBase__;
      var $ap=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(16);
      var $ap1=(__stackBase__)+(208);
      var $i;
      $1=$mrb;
      $2=$name;
      $3=$argc;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_intern140($4, $5);
      $mid=$6;
      var $7=$3;
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$mid;
      _mrb_funcall_argv($agg_result, $10, $self, $11, 0, 0);
      label = 12; break;
    case 3: 
      var $13=$3;
      var $14=(($13)|(0))==1;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$ap;
      HEAP32[(($16)>>2)]=varrp;
      var $17=HEAP32[(($ap)>>2)];
      var $18=$17;
      var $19=(($17+12)|0);
      HEAP32[(($ap)>>2)]=$19;
      var $20=$v;
      var $21=$18;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=$ap;
      var $23=$1;
      var $24=$mid;
      _mrb_funcall_argv($agg_result, $23, $self, $24, 1, $v);
      label = 12; break;
    case 5: 
      var $26=$3;
      var $27=(($26)|(0)) > 16;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$1;
      var $30=$1;
      var $31=_mrb_class_get($30, ((112184)|0));
      _mrb_raise($29, $31, ((113092)|0));
      label = 7; break;
    case 7: 
      var $33=$ap1;
      HEAP32[(($33)>>2)]=varrp;
      $i=0;
      label = 8; break;
    case 8: 
      var $35=$i;
      var $36=$3;
      var $37=(($35)|(0)) < (($36)|(0));
      if ($37) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $39=$i;
      var $40=(($argv+((($39)*(12))&-1))|0);
      var $41=HEAP32[(($ap1)>>2)];
      var $42=$41;
      var $43=(($41+12)|0);
      HEAP32[(($ap1)>>2)]=$43;
      var $44=$40;
      var $45=$42;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      label = 10; break;
    case 10: 
      var $47=$i;
      var $48=((($47)+(1))|0);
      $i=$48;
      label = 8; break;
    case 11: 
      var $50=$ap1;
      var $51=$1;
      var $52=$mid;
      var $53=$3;
      var $54=(($argv)|0);
      _mrb_funcall_argv($agg_result, $51, $self, $52, $53, $54);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern140($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_funcall_argv($agg_result, $mrb, $self, $mid, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  $1=$mrb;
  $2=$mid;
  $3=$argc;
  $4=$argv;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  _mrb_nil_value148($5);
  _mrb_funcall_with_block($agg_result, $6, $self, $7, $8, $9, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_funcall_with_block($agg_result, $mrb, $self, $mid, $argc, $argv, $blk) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $blk; $blk = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($blk)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($blk)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($blk)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  var mySetjmpIds = {};
  var setjmpTable = {"2": function(value) { label = 28; $22 = value },dummy: 0};
  while(1) try { switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $val=__stackBase__;
      var $c_jmp=(__stackBase__)+(12);
      var $old_ci;
      var $5=(__stackBase__)+(52);
      var $6=(__stackBase__)+(64);
      var $p;
      var $c=(__stackBase__)+(76);
      var $undef;
      var $ci;
      var $n;
      var $7=(__stackBase__)+(80);
      var $8=(__stackBase__)+(92);
      var $ai;
      var $9=(__stackBase__)+(104);
      var $10=(__stackBase__)+(116);
      $1=$mrb;
      $2=$mid;
      $3=$argc;
      $4=$argv;
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 9; break; } else { label = 2; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      $old_ci=$20;
      var $21=(($c_jmp)|0);
      var $22=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($21)>>2)]=tempInt, 0);
      label = 28; break;
    case 28: 
      var $23=(($22)|(0))!=0;
      if ($23) { label = 3; break; } else { label = 7; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $26=$old_ci;
      var $27=$1;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($26)|(0))!=(($31)|(0));
      if ($32) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $34=$1;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$1;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+16)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($38+((($45)*(12))&-1))|0);
      var $47=$1;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+4)|0);
      HEAP32[(($50)>>2)]=$46;
      var $51=$1;
      _cipop($51);
      label = 4; break;
    case 6: 
      var $53=$1;
      var $54=(($53)|0);
      HEAP32[(($54)>>2)]=0;
      var $55=$1;
      var $56=(($55+16)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      _mrb_obj_value143($5, $58);
      var $59=$val;
      var $60=$5;
      assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
      label = 8; break;
    case 7: 
      var $62=$c_jmp;
      var $63=$1;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$1;
      var $66=$2;
      var $67=$3;
      var $68=$4;
      _mrb_funcall_with_block($6, $65, $self, $66, $67, $68, $blk);
      var $69=$val;
      var $70=$6;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      var $71=$1;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=0;
      label = 8; break;
    case 8: 
      label = 27; break;
    case 9: 
      $undef=0;
      var $75=$1;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      if ($80) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $82=$1;
      _stack_init($82);
      label = 11; break;
    case 11: 
      var $84=$1;
      var $85=(($84+8)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      $n=$90;
      var $91=$3;
      var $92=(($91)|(0)) < 0;
      if ($92) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $94=$1;
      var $95=$1;
      var $96=_mrb_class_get($95, ((112184)|0));
      var $97=$3;
      _mrb_fixnum_value144($7, $97);
      _mrb_raisef($94, $96, ((108040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
      label = 13; break;
    case 13: 
      var $99=$1;
      var $100=_mrb_class($99, $self);
      HEAP32[(($c)>>2)]=$100;
      var $101=$1;
      var $102=$2;
      var $103=_mrb_method_search_vm($101, $c, $102);
      $p=$103;
      var $104=$p;
      var $105=(($104)|(0))!=0;
      if ($105) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $107=$2;
      $undef=$107;
      var $108=$1;
      var $109=_mrb_intern2($108, ((104520)|0), 14);
      $2=$109;
      var $110=$1;
      var $111=$2;
      var $112=_mrb_method_search_vm($110, $c, $111);
      $p=$112;
      var $113=$n;
      var $114=((($113)+(1))|0);
      $n=$114;
      var $115=$3;
      var $116=((($115)+(1))|0);
      $3=$116;
      label = 15; break;
    case 15: 
      var $118=$1;
      var $119=_cipush($118);
      $ci=$119;
      var $120=$2;
      var $121=$ci;
      var $122=(($121)|0);
      HEAP16[(($122)>>1)]=$120;
      var $123=$p;
      var $124=$ci;
      var $125=(($124+4)|0);
      HEAP32[(($125)>>2)]=$123;
      var $126=$1;
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$1;
      var $132=(($131+8)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$130;
      var $137=$135;
      var $138=((($136)-($137))|0);
      var $139=((((($138)|(0)))/(12))&-1);
      var $140=$ci;
      var $141=(($140+8)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$3;
      var $143=$ci;
      var $144=(($143+16)|0);
      HEAP32[(($144)>>2)]=$142;
      var $145=$p;
      var $146=(($145+16)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$ci;
      var $149=(($148+28)|0);
      HEAP32[(($149)>>2)]=$147;
      var $150=$p;
      var $151=$150;
      var $152=HEAP32[(($151)>>2)];
      var $153=$152 >>> 11;
      var $154=$153 & 2097151;
      var $155=$154 & 128;
      var $156=(($155)|(0))!=0;
      if ($156) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $158=$3;
      var $159=((($158)+(2))|0);
      var $160=$ci;
      var $161=(($160+12)|0);
      HEAP32[(($161)>>2)]=$159;
      label = 18; break;
    case 17: 
      var $163=$p;
      var $164=(($163+12)|0);
      var $165=$164;
      var $166=HEAP32[(($165)>>2)];
      var $167=(($166+6)|0);
      var $168=HEAP16[(($167)>>1)];
      var $169=(($168)&(65535));
      var $170=$n;
      var $171=((($169)+($170))|0);
      var $172=$ci;
      var $173=(($172+12)|0);
      HEAP32[(($173)>>2)]=$171;
      label = 18; break;
    case 18: 
      var $175=$ci;
      var $176=(($175+24)|0);
      HEAP32[(($176)>>2)]=-1;
      var $177=$1;
      var $178=(($177+8)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=(($179+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=$n;
      var $183=(($181+((($182)*(12))&-1))|0);
      var $184=$1;
      var $185=(($184+8)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186+4)|0);
      HEAP32[(($187)>>2)]=$183;
      var $188=$1;
      var $189=$ci;
      var $190=(($189+12)|0);
      var $191=HEAP32[(($190)>>2)];
      _stack_extend($188, $191, 0);
      var $192=$1;
      var $193=(($192+8)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194+4)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|0);
      var $198=$197;
      var $199=$self;
      assert(12 % 1 === 0);HEAP32[(($198)>>2)]=HEAP32[(($199)>>2)];HEAP32[((($198)+(4))>>2)]=HEAP32[((($199)+(4))>>2)];HEAP32[((($198)+(8))>>2)]=HEAP32[((($199)+(8))>>2)];
      var $200=$undef;
      var $201=(($200 << 16) >> 16)!=0;
      if ($201) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $203=$1;
      var $204=(($203+8)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=(($205+4)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($207+12)|0);
      var $209=$undef;
      _mrb_symbol_value145($8, $209);
      var $210=$208;
      var $211=$8;
      assert(12 % 1 === 0);HEAP32[(($210)>>2)]=HEAP32[(($211)>>2)];HEAP32[((($210)+(4))>>2)]=HEAP32[((($211)+(4))>>2)];HEAP32[((($210)+(8))>>2)]=HEAP32[((($211)+(8))>>2)];
      var $212=$1;
      var $213=(($212+8)|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($216+24)|0);
      var $218=$4;
      var $219=$3;
      var $220=((($219)-(1))|0);
      _stack_copy($217, $218, $220);
      label = 23; break;
    case 20: 
      var $222=$3;
      var $223=(($222)|(0)) > 0;
      if ($223) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $225=$1;
      var $226=(($225+8)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227+4)|0);
      var $229=HEAP32[(($228)>>2)];
      var $230=(($229+12)|0);
      var $231=$4;
      var $232=$3;
      _stack_copy($230, $231, $232);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $235=$3;
      var $236=((($235)+(1))|0);
      var $237=$1;
      var $238=(($237+8)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241+((($236)*(12))&-1))|0);
      var $243=$242;
      var $244=$blk;
      assert(12 % 1 === 0);HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];HEAP32[((($243)+(8))>>2)]=HEAP32[((($244)+(8))>>2)];
      var $245=$p;
      var $246=$245;
      var $247=HEAP32[(($246)>>2)];
      var $248=$247 >>> 11;
      var $249=$248 & 2097151;
      var $250=$249 & 128;
      var $251=(($250)|(0))!=0;
      if ($251) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $253=$1;
      var $254=_mrb_gc_arena_save($253);
      $ai=$254;
      var $255=$p;
      var $256=(($255+12)|0);
      var $257=$256;
      var $258=HEAP32[(($257)>>2)];
      var $259=$1;
      FUNCTION_TABLE[$258]($9, $259, $self);
      var $260=$val;
      var $261=$9;
      assert(12 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($261)+(4))>>2)];HEAP32[((($260)+(8))>>2)]=HEAP32[((($261)+(8))>>2)];
      var $262=$1;
      var $263=$ai;
      _mrb_gc_arena_restore($262, $263);
      var $264=$1;
      var $265=(($264+8)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=(($266+8)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$1;
      var $270=(($269+8)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($271+16)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($273+8)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($268+((($275)*(12))&-1))|0);
      var $277=$1;
      var $278=(($277+8)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($279+4)|0);
      HEAP32[(($280)>>2)]=$276;
      var $281=$1;
      _cipop($281);
      label = 26; break;
    case 25: 
      var $283=$1;
      var $284=$p;
      _mrb_run($10, $283, $284, $self);
      var $285=$val;
      var $286=$10;
      assert(12 % 1 === 0);HEAP32[(($285)>>2)]=HEAP32[(($286)>>2)];HEAP32[((($285)+(4))>>2)]=HEAP32[((($286)+(4))>>2)];HEAP32[((($285)+(8))>>2)]=HEAP32[((($286)+(8))>>2)];
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $289=$1;
      _mrb_gc_protect($289, $val);
      var $290=$agg_result;
      var $291=$val;
      assert(12 % 1 === 0);HEAP32[(($290)>>2)]=HEAP32[(($291)>>2)];HEAP32[((($290)+(4))>>2)]=HEAP32[((($291)+(4))>>2)];HEAP32[((($290)+(8))>>2)]=HEAP32[((($291)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _cipop($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $e;
      var $len;
      var $p;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $c=$4;
      var $5=$c;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+40)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$c;
      var $13=(($12+16)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+40)|0);
      var $16=HEAP32[(($15)>>2)];
      $e=$16;
      var $17=$e;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 >>> 11;
      var $21=$20 & 2097151;
      $len=$21;
      var $22=$1;
      var $23=$len;
      var $24=((($23)*(12))&-1);
      var $25=_mrb_malloc($22, $24);
      var $26=$25;
      $p=$26;
      var $27=$e;
      var $28=(($27+20)|0);
      HEAP32[(($28)>>2)]=-1;
      var $29=$p;
      var $30=$e;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$len;
      _stack_copy($29, $32, $33);
      var $34=$p;
      var $35=$e;
      var $36=(($35+12)|0);
      HEAP32[(($36)>>2)]=$34;
      label = 3; break;
    case 3: 
      var $38=$c;
      var $39=(($38+16)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=((($40)-(44))|0);
      HEAP32[(($39)>>2)]=$41;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value143($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_init($mrb) {
  var label = 0;
  var $1;
  var $c;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+8)|0);
  var $4=HEAP32[(($3)>>2)];
  $c=$4;
  var $5=$1;
  var $6=_mrb_calloc($5, 128, 12);
  var $7=$6;
  var $8=$c;
  var $9=(($8+8)|0);
  HEAP32[(($9)>>2)]=$7;
  var $10=$c;
  var $11=(($10+8)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+1536)|0);
  var $14=$c;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$c;
  var $17=(($16+8)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$c;
  var $20=(($19+4)|0);
  HEAP32[(($20)>>2)]=$18;
  var $21=$1;
  var $22=_mrb_calloc($21, 32, 44);
  var $23=$22;
  var $24=$c;
  var $25=(($24+20)|0);
  HEAP32[(($25)>>2)]=$23;
  var $26=$c;
  var $27=(($26+20)|0);
  var $28=HEAP32[(($27)>>2)];
  var $29=(($28+1408)|0);
  var $30=$c;
  var $31=(($30+24)|0);
  HEAP32[(($31)>>2)]=$29;
  var $32=$c;
  var $33=(($32+20)|0);
  var $34=HEAP32[(($33)>>2)];
  var $35=$c;
  var $36=(($35+16)|0);
  HEAP32[(($36)>>2)]=$34;
  var $37=$1;
  var $38=(($37+44)|0);
  var $39=HEAP32[(($38)>>2)];
  var $40=$c;
  var $41=(($40+16)|0);
  var $42=HEAP32[(($41)>>2)];
  var $43=(($42+28)|0);
  HEAP32[(($43)>>2)]=$39;
  return;
}
function _mrb_fixnum_value144($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cipush($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $ci;
      var $eidx;
      var $ridx;
      var $size;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $c=$4;
      var $5=$c;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $ci=$7;
      var $8=$ci;
      var $9=(($8+36)|0);
      var $10=HEAP32[(($9)>>2)];
      $eidx=$10;
      var $11=$ci;
      var $12=(($11+32)|0);
      var $13=HEAP32[(($12)>>2)];
      $ridx=$13;
      var $14=$ci;
      var $15=(($14+44)|0);
      var $16=$c;
      var $17=(($16+24)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)|(0))==(($18)|(0));
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $21=$ci;
      var $22=$c;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$21;
      var $26=$24;
      var $27=((($25)-($26))|0);
      var $28=((((($27)|(0)))/(44))&-1);
      $size=$28;
      var $29=$1;
      var $30=$c;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=$size;
      var $35=((($34)*(44))&-1);
      var $36=($35<<1);
      var $37=_mrb_realloc($29, $33, $36);
      var $38=$37;
      var $39=$c;
      var $40=(($39+20)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$c;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$size;
      var $45=(($43+((($44)*(44))&-1))|0);
      var $46=$c;
      var $47=(($46+16)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$c;
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$size;
      var $52=($51<<1);
      var $53=(($50+((($52)*(44))&-1))|0);
      var $54=$c;
      var $55=(($54+24)|0);
      HEAP32[(($55)>>2)]=$53;
      label = 3; break;
    case 3: 
      var $57=$c;
      var $58=(($57+16)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+44)|0);
      HEAP32[(($58)>>2)]=$60;
      $ci=$60;
      var $61=$ci;
      var $62=(($61+12)|0);
      HEAP32[(($62)>>2)]=2;
      var $63=$eidx;
      var $64=$ci;
      var $65=(($64+36)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$ridx;
      var $67=$ci;
      var $68=(($67+32)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$ci;
      var $70=(($69+40)|0);
      HEAP32[(($70)>>2)]=0;
      var $71=$ci;
      return $71;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_extend($mrb, $room, $keep) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $size;
      var $off;
      var $oldbase;
      $1=$mrb;
      $2=$room;
      $3=$keep;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$2;
      var $10=(($8+((($9)*(12))&-1))|0);
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($10)>>>(0)) >= (($15)>>>(0));
      if ($16) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $18=$1;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      $oldbase=$22;
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$27;
      var $34=$32;
      var $35=((($33)-($34))|0);
      var $36=((((($35)|(0)))/(12))&-1);
      $size=$36;
      var $37=$1;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$1;
      var $43=(($42+8)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$41;
      var $48=$46;
      var $49=((($47)-($48))|0);
      var $50=((((($49)|(0)))/(12))&-1);
      $off=$50;
      var $51=$3;
      var $52=$size;
      var $53=(($51)|(0)) > (($52)|(0));
      if ($53) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $55=$size;
      $3=$55;
      label = 4; break;
    case 4: 
      var $57=$2;
      var $58=$size;
      var $59=(($57)|(0)) <= (($58)|(0));
      if ($59) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $61=$size;
      var $62=((($61)+(128))|0);
      $size=$62;
      label = 7; break;
    case 6: 
      var $64=$2;
      var $65=$size;
      var $66=((($65)+($64))|0);
      $size=$66;
      label = 7; break;
    case 7: 
      var $68=$1;
      var $69=$1;
      var $70=(($69+8)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+8)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73;
      var $75=$size;
      var $76=((($75)*(12))&-1);
      var $77=_mrb_realloc($68, $74, $76);
      var $78=$77;
      var $79=$1;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+8)|0);
      HEAP32[(($82)>>2)]=$78;
      var $83=$1;
      var $84=(($83+8)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$off;
      var $89=(($87+((($88)*(12))&-1))|0);
      var $90=$1;
      var $91=(($90+8)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+4)|0);
      HEAP32[(($93)>>2)]=$89;
      var $94=$1;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+8)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$size;
      var $100=(($98+((($99)*(12))&-1))|0);
      var $101=$1;
      var $102=(($101+8)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=(($103+12)|0);
      HEAP32[(($104)>>2)]=$100;
      var $105=$1;
      var $106=$oldbase;
      var $107=$1;
      var $108=(($107+8)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+8)|0);
      var $111=HEAP32[(($110)>>2)];
      _envadjust($105, $106, $111);
      var $112=$size;
      var $113=(($112)|(0)) > 262016;
      if ($113) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $115=$1;
      var $116=$1;
      var $117=_mrb_class_get($116, ((94760)|0));
      _mrb_raise($115, $117, ((110788)|0));
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $120=$2;
      var $121=$3;
      var $122=(($120)|(0)) > (($121)|(0));
      if ($122) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $124=$3;
      var $125=$1;
      var $126=(($125+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+((($124)*(12))&-1))|0);
      var $131=$2;
      var $132=$3;
      var $133=((($131)-($132))|0);
      _stack_clear($130, $133);
      label = 12; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value145($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _stack_copy($dst, $src, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$dst;
      $2=$src;
      $3=$size;
      label = 2; break;
    case 2: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)>>>(0)) > 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$1;
      var $10=(($9+12)|0);
      $1=$10;
      var $11=$2;
      var $12=(($11+12)|0);
      $2=$12;
      var $13=$9;
      var $14=$11;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_run($agg_result, $mrb, $proc, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 820)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  var mySetjmpIds = {};
  var setjmpTable = {"1": function(value) { label = 709; $67 = value },dummy: 0};
  while(1) try { switch(label) {
    case 1: 
      var $1;
      var $2;
      var $irep;
      var $pc;
      var $pool;
      var $syms;
      var $regs;
      var $i;
      var $ai;
      var $prev_jmp;
      var $c_jmp=__stackBase__;
      var $3=(__stackBase__)+(40);
      var $4=(__stackBase__)+(52);
      var $5=(__stackBase__)+(64);
      var $6=(__stackBase__)+(76);
      var $7=(__stackBase__)+(88);
      var $a;
      var $8=(__stackBase__)+(100);
      var $a1;
      var $regs_a;
      var $up;
      var $e;
      var $9=(__stackBase__)+(112);
      var $idx;
      var $up2;
      var $e3;
      var $regs_a4;
      var $idx5;
      var $a6;
      var $p;
      var $n;
      var $a7;
      var $a8;
      var $a9;
      var $n10;
      var $m;
      var $c=(__stackBase__)+(124);
      var $ci;
      var $recv=(__stackBase__)+(128);
      var $result=(__stackBase__)+(140);
      var $mid;
      var $sym=(__stackBase__)+(152);
      var $10=(__stackBase__)+(164);
      var $11=(__stackBase__)+(176);
      var $ci11;
      var $recv12=(__stackBase__)+(188);
      var $m13;
      var $12=(__stackBase__)+(200);
      var $13=(__stackBase__)+(212);
      var $recv14=(__stackBase__)+(224);
      var $ci15;
      var $m16;
      var $c17=(__stackBase__)+(236);
      var $mid18;
      var $a19;
      var $n20;
      var $14=(__stackBase__)+(240);
      var $15=(__stackBase__)+(252);
      var $16=(__stackBase__)+(264);
      var $a21;
      var $bx;
      var $m1;
      var $r;
      var $m2;
      var $lv;
      var $stack;
      var $e22;
      var $exc=(__stackBase__)+(276);
      var $17=(__stackBase__)+(288);
      var $18=(__stackBase__)+(300);
      var $pp;
      var $rest;
      var $len;
      var $ary;
      var $19=(__stackBase__)+(312);
      var $ax;
      var $m123;
      var $o;
      var $r24;
      var $m225;
      var $argc;
      var $argv;
      var $argv0;
      var $len26;
      var $blk;
      var $ary27;
      var $mlen;
      var $20=(__stackBase__)+(324);
      var $21=(__stackBase__)+(336);
      var $ci28;
      var $eidx;
      var $22=(__stackBase__)+(348);
      var $23=(__stackBase__)+(360);
      var $ci29;
      var $acc;
      var $eidx30;
      var $v=(__stackBase__)+(372);
      var $e31;
      var $exc32=(__stackBase__)+(384);
      var $24=(__stackBase__)+(396);
      var $a33;
      var $n34;
      var $m35;
      var $c36=(__stackBase__)+(408);
      var $ci37;
      var $recv38=(__stackBase__)+(412);
      var $mid39;
      var $sym40=(__stackBase__)+(424);
      var $25=(__stackBase__)+(436);
      var $26=(__stackBase__)+(448);
      var $a41;
      var $bx42;
      var $m143;
      var $r44;
      var $m245;
      var $lv46;
      var $stack47;
      var $e48;
      var $a49;
      var $x;
      var $y;
      var $z;
      var $regs_a50;
      var $x51;
      var $y52;
      var $27=(__stackBase__)+(460);
      var $a53;
      var $x54;
      var $y55;
      var $z56;
      var $x57;
      var $y58;
      var $a59;
      var $x60;
      var $y61;
      var $z62;
      var $x63;
      var $y64;
      var $a65;
      var $x66;
      var $y67;
      var $x68;
      var $y69;
      var $a70;
      var $x71;
      var $y72;
      var $z73;
      var $a74;
      var $regs_a75;
      var $x76;
      var $y77;
      var $z78;
      var $a79;
      var $a80;
      var $a81;
      var $a82;
      var $a83;
      var $a84;
      var $28=(__stackBase__)+(472);
      var $29=(__stackBase__)+(484);
      var $a85;
      var $c86;
      var $v87=(__stackBase__)+(496);
      var $30=(__stackBase__)+(508);
      var $a88;
      var $v89=(__stackBase__)+(520);
      var $pre;
      var $post;
      var $31=(__stackBase__)+(532);
      var $ary90;
      var $len91;
      var $i92;
      var $32=(__stackBase__)+(544);
      var $33=(__stackBase__)+(556);
      var $34=(__stackBase__)+(568);
      var $b;
      var $c93;
      var $lim;
      var $hash=(__stackBase__)+(580);
      var $p94;
      var $c95;
      var $35=(__stackBase__)+(592);
      var $36=(__stackBase__)+(604);
      var $c96;
      var $a97;
      var $base=(__stackBase__)+(616);
      var $super=(__stackBase__)+(628);
      var $id;
      var $37=(__stackBase__)+(640);
      var $38=(__stackBase__)+(652);
      var $c98;
      var $a99;
      var $base100=(__stackBase__)+(664);
      var $id101;
      var $39=(__stackBase__)+(676);
      var $40=(__stackBase__)+(688);
      var $a102;
      var $ci103;
      var $recv104=(__stackBase__)+(700);
      var $p105;
      var $41=(__stackBase__)+(712);
      var $a106;
      var $c107;
      var $42=(__stackBase__)+(724);
      var $exc108=(__stackBase__)+(736);
      var $43=(__stackBase__)+(748);
      var $b109;
      var $44=(__stackBase__)+(760);
      var $n110;
      var $msg=(__stackBase__)+(772);
      var $exc111=(__stackBase__)+(784);
      var $45=(__stackBase__)+(796);
      var $46=(__stackBase__)+(808);
      $1=$mrb;
      $2=$proc;
      var $47=$2;
      var $48=(($47+12)|0);
      var $49=$48;
      var $50=HEAP32[(($49)>>2)];
      $irep=$50;
      var $51=$irep;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      $pc=$53;
      var $54=$irep;
      var $55=(($54+16)|0);
      var $56=HEAP32[(($55)>>2)];
      $pool=$56;
      var $57=$irep;
      var $58=(($57+20)|0);
      var $59=HEAP32[(($58)>>2)];
      $syms=$59;
      $regs=0;
      var $60=$1;
      var $61=_mrb_gc_arena_save($60);
      $ai=$61;
      var $62=$1;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      $prev_jmp=$65;
      var $66=(($c_jmp)|0);
      var $67=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($66)>>2)]=tempInt, 0);
      label = 709; break;
    case 709: 
      var $68=(($67)|(0))==0;
      if ($68) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $70=$c_jmp;
      var $71=$1;
      var $72=(($71)|0);
      HEAP32[(($72)>>2)]=$70;
      label = 4; break;
    case 3: 
      label = 222; break;
    case 4: 
      var $75=$1;
      var $76=(($75+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      if ($80) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $82=$1;
      _stack_init($82);
      label = 6; break;
    case 6: 
      var $84=$1;
      var $85=$irep;
      var $86=(($85+6)|0);
      var $87=HEAP16[(($86)>>1)];
      var $88=(($87)&(65535));
      var $89=$irep;
      var $90=(($89+6)|0);
      var $91=HEAP16[(($90)>>1)];
      var $92=(($91)&(65535));
      _stack_extend($84, $88, $92);
      var $93=$2;
      var $94=$1;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+16)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+4)|0);
      HEAP32[(($99)>>2)]=$93;
      var $100=$irep;
      var $101=(($100+6)|0);
      var $102=HEAP16[(($101)>>1)];
      var $103=(($102)&(65535));
      var $104=((($103)+(1))|0);
      var $105=$1;
      var $106=(($105+8)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+16)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+12)|0);
      HEAP32[(($110)>>2)]=$104;
      var $111=$1;
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113+4)|0);
      var $115=HEAP32[(($114)>>2)];
      $regs=$115;
      var $116=$regs;
      var $117=(($116)|0);
      var $118=$117;
      var $119=$self;
      assert(12 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($119)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($119)+(4))>>2)];HEAP32[((($118)+(8))>>2)]=HEAP32[((($119)+(8))>>2)];
      var $120=$pc;
      var $121=HEAP32[(($120)>>2)];
      $i=$121;
      var $122=$i;
      var $123=$122 & 127;
      var $124=((77372+($123<<2))|0);
      var $125=HEAP32[(($124)>>2)];
      var $5859 = $125;label = 708; break;
    case 7: 
      var $127=$pc;
      var $128=(($127+4)|0);
      $pc=$128;
      var $129=HEAP32[(($128)>>2)];
      $i=$129;
      var $130=$i;
      var $131=$130 & 127;
      var $132=((77372+($131<<2))|0);
      var $133=HEAP32[(($132)>>2)];
      var $5859 = $133;label = 708; break;
    case 8: 
      var $135=$i;
      var $136=$135 >>> 23;
      var $137=$136 & 511;
      var $138=$regs;
      var $139=(($138+((($137)*(12))&-1))|0);
      var $140=$i;
      var $141=$140 >>> 14;
      var $142=$141 & 511;
      var $143=$regs;
      var $144=(($143+((($142)*(12))&-1))|0);
      var $145=$139;
      var $146=$144;
      assert(12 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];
      var $147=$pc;
      var $148=(($147+4)|0);
      $pc=$148;
      var $149=HEAP32[(($148)>>2)];
      $i=$149;
      var $150=$i;
      var $151=$150 & 127;
      var $152=((77372+($151<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $5859 = $153;label = 708; break;
    case 9: 
      var $155=$i;
      var $156=$155 >>> 23;
      var $157=$156 & 511;
      var $158=$regs;
      var $159=(($158+((($157)*(12))&-1))|0);
      var $160=$i;
      var $161=$160 >>> 7;
      var $162=$161 & 65535;
      var $163=$pool;
      var $164=(($163+((($162)*(12))&-1))|0);
      var $165=$159;
      var $166=$164;
      assert(12 % 1 === 0);HEAP32[(($165)>>2)]=HEAP32[(($166)>>2)];HEAP32[((($165)+(4))>>2)]=HEAP32[((($166)+(4))>>2)];HEAP32[((($165)+(8))>>2)]=HEAP32[((($166)+(8))>>2)];
      var $167=$pc;
      var $168=(($167+4)|0);
      $pc=$168;
      var $169=HEAP32[(($168)>>2)];
      $i=$169;
      var $170=$i;
      var $171=$170 & 127;
      var $172=((77372+($171<<2))|0);
      var $173=HEAP32[(($172)>>2)];
      var $5859 = $173;label = 708; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $176=$i;
      var $177=$176 >>> 23;
      var $178=$177 & 511;
      var $179=$regs;
      var $180=(($179+((($178)*(12))&-1))|0);
      var $181=(($180+8)|0);
      HEAP32[(($181)>>2)]=3;
      var $182=$i;
      var $183=$182 >>> 7;
      var $184=$183 & 65535;
      var $185=((($184)-(32767))|0);
      var $186=$i;
      var $187=$186 >>> 23;
      var $188=$187 & 511;
      var $189=$regs;
      var $190=(($189+((($188)*(12))&-1))|0);
      var $191=(($190)|0);
      var $192=$191;
      HEAP32[(($192)>>2)]=$185;
      label = 12; break;
    case 12: 
      var $194=$pc;
      var $195=(($194+4)|0);
      $pc=$195;
      var $196=HEAP32[(($195)>>2)];
      $i=$196;
      var $197=$i;
      var $198=$197 & 127;
      var $199=((77372+($198<<2))|0);
      var $200=HEAP32[(($199)>>2)];
      var $5859 = $200;label = 708; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $203=$i;
      var $204=$203 >>> 23;
      var $205=$204 & 511;
      var $206=$regs;
      var $207=(($206+((($205)*(12))&-1))|0);
      var $208=(($207+8)|0);
      HEAP32[(($208)>>2)]=4;
      var $209=$i;
      var $210=$209 >>> 7;
      var $211=$210 & 65535;
      var $212=$syms;
      var $213=(($212+($211<<1))|0);
      var $214=HEAP16[(($213)>>1)];
      var $215=$i;
      var $216=$215 >>> 23;
      var $217=$216 & 511;
      var $218=$regs;
      var $219=(($218+((($217)*(12))&-1))|0);
      var $220=(($219)|0);
      var $221=$220;
      HEAP16[(($221)>>1)]=$214;
      label = 15; break;
    case 15: 
      var $223=$pc;
      var $224=(($223+4)|0);
      $pc=$224;
      var $225=HEAP32[(($224)>>2)];
      $i=$225;
      var $226=$i;
      var $227=$226 & 127;
      var $228=((77372+($227<<2))|0);
      var $229=HEAP32[(($228)>>2)];
      var $5859 = $229;label = 708; break;
    case 16: 
      var $231=$i;
      var $232=$231 >>> 23;
      var $233=$232 & 511;
      var $234=$regs;
      var $235=(($234+((($233)*(12))&-1))|0);
      var $236=$regs;
      var $237=(($236)|0);
      var $238=$235;
      var $239=$237;
      assert(12 % 1 === 0);HEAP32[(($238)>>2)]=HEAP32[(($239)>>2)];HEAP32[((($238)+(4))>>2)]=HEAP32[((($239)+(4))>>2)];HEAP32[((($238)+(8))>>2)]=HEAP32[((($239)+(8))>>2)];
      var $240=$pc;
      var $241=(($240+4)|0);
      $pc=$241;
      var $242=HEAP32[(($241)>>2)];
      $i=$242;
      var $243=$i;
      var $244=$243 & 127;
      var $245=((77372+($244<<2))|0);
      var $246=HEAP32[(($245)>>2)];
      var $5859 = $246;label = 708; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $249=$i;
      var $250=$249 >>> 23;
      var $251=$250 & 511;
      var $252=$regs;
      var $253=(($252+((($251)*(12))&-1))|0);
      var $254=(($253+8)|0);
      HEAP32[(($254)>>2)]=2;
      var $255=$i;
      var $256=$255 >>> 23;
      var $257=$256 & 511;
      var $258=$regs;
      var $259=(($258+((($257)*(12))&-1))|0);
      var $260=(($259)|0);
      var $261=$260;
      HEAP32[(($261)>>2)]=1;
      label = 19; break;
    case 19: 
      var $263=$pc;
      var $264=(($263+4)|0);
      $pc=$264;
      var $265=HEAP32[(($264)>>2)];
      $i=$265;
      var $266=$i;
      var $267=$266 & 127;
      var $268=((77372+($267<<2))|0);
      var $269=HEAP32[(($268)>>2)];
      var $5859 = $269;label = 708; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $272=$i;
      var $273=$272 >>> 23;
      var $274=$273 & 511;
      var $275=$regs;
      var $276=(($275+((($274)*(12))&-1))|0);
      var $277=(($276+8)|0);
      HEAP32[(($277)>>2)]=0;
      var $278=$i;
      var $279=$278 >>> 23;
      var $280=$279 & 511;
      var $281=$regs;
      var $282=(($281+((($280)*(12))&-1))|0);
      var $283=(($282)|0);
      var $284=$283;
      HEAP32[(($284)>>2)]=1;
      label = 22; break;
    case 22: 
      var $286=$pc;
      var $287=(($286+4)|0);
      $pc=$287;
      var $288=HEAP32[(($287)>>2)];
      $i=$288;
      var $289=$i;
      var $290=$289 & 127;
      var $291=((77372+($290<<2))|0);
      var $292=HEAP32[(($291)>>2)];
      var $5859 = $292;label = 708; break;
    case 23: 
      var $294=$i;
      var $295=$294 >>> 23;
      var $296=$295 & 511;
      var $297=$regs;
      var $298=(($297+((($296)*(12))&-1))|0);
      var $299=$1;
      var $300=$i;
      var $301=$300 >>> 7;
      var $302=$301 & 65535;
      var $303=$syms;
      var $304=(($303+($302<<1))|0);
      var $305=HEAP16[(($304)>>1)];
      _mrb_gv_get($3, $299, $305);
      var $306=$298;
      var $307=$3;
      assert(12 % 1 === 0);HEAP32[(($306)>>2)]=HEAP32[(($307)>>2)];HEAP32[((($306)+(4))>>2)]=HEAP32[((($307)+(4))>>2)];HEAP32[((($306)+(8))>>2)]=HEAP32[((($307)+(8))>>2)];
      var $308=$pc;
      var $309=(($308+4)|0);
      $pc=$309;
      var $310=HEAP32[(($309)>>2)];
      $i=$310;
      var $311=$i;
      var $312=$311 & 127;
      var $313=((77372+($312<<2))|0);
      var $314=HEAP32[(($313)>>2)];
      var $5859 = $314;label = 708; break;
    case 24: 
      var $316=$1;
      var $317=$i;
      var $318=$317 >>> 7;
      var $319=$318 & 65535;
      var $320=$syms;
      var $321=(($320+($319<<1))|0);
      var $322=HEAP16[(($321)>>1)];
      var $323=$i;
      var $324=$323 >>> 23;
      var $325=$324 & 511;
      var $326=$regs;
      var $327=(($326+((($325)*(12))&-1))|0);
      _mrb_gv_set($316, $322, $327);
      var $328=$pc;
      var $329=(($328+4)|0);
      $pc=$329;
      var $330=HEAP32[(($329)>>2)];
      $i=$330;
      var $331=$i;
      var $332=$331 & 127;
      var $333=((77372+($332<<2))|0);
      var $334=HEAP32[(($333)>>2)];
      var $5859 = $334;label = 708; break;
    case 25: 
      var $336=$i;
      var $337=$336 >>> 23;
      var $338=$337 & 511;
      var $339=$regs;
      var $340=(($339+((($338)*(12))&-1))|0);
      var $341=$1;
      var $342=$i;
      var $343=$342 >>> 7;
      var $344=$343 & 65535;
      var $345=(($344) & 65535);
      _mrb_vm_special_get($4, $341, $345);
      var $346=$340;
      var $347=$4;
      assert(12 % 1 === 0);HEAP32[(($346)>>2)]=HEAP32[(($347)>>2)];HEAP32[((($346)+(4))>>2)]=HEAP32[((($347)+(4))>>2)];HEAP32[((($346)+(8))>>2)]=HEAP32[((($347)+(8))>>2)];
      var $348=$pc;
      var $349=(($348+4)|0);
      $pc=$349;
      var $350=HEAP32[(($349)>>2)];
      $i=$350;
      var $351=$i;
      var $352=$351 & 127;
      var $353=((77372+($352<<2))|0);
      var $354=HEAP32[(($353)>>2)];
      var $5859 = $354;label = 708; break;
    case 26: 
      var $356=$1;
      var $357=$i;
      var $358=$357 >>> 7;
      var $359=$358 & 65535;
      var $360=(($359) & 65535);
      var $361=$i;
      var $362=$361 >>> 23;
      var $363=$362 & 511;
      var $364=$regs;
      var $365=(($364+((($363)*(12))&-1))|0);
      _mrb_vm_special_set($356, $360, $365);
      var $366=$pc;
      var $367=(($366+4)|0);
      $pc=$367;
      var $368=HEAP32[(($367)>>2)];
      $i=$368;
      var $369=$i;
      var $370=$369 & 127;
      var $371=((77372+($370<<2))|0);
      var $372=HEAP32[(($371)>>2)];
      var $5859 = $372;label = 708; break;
    case 27: 
      var $374=$i;
      var $375=$374 >>> 23;
      var $376=$375 & 511;
      var $377=$regs;
      var $378=(($377+((($376)*(12))&-1))|0);
      var $379=$1;
      var $380=$i;
      var $381=$380 >>> 7;
      var $382=$381 & 65535;
      var $383=$syms;
      var $384=(($383+($382<<1))|0);
      var $385=HEAP16[(($384)>>1)];
      _mrb_vm_iv_get($5, $379, $385);
      var $386=$378;
      var $387=$5;
      assert(12 % 1 === 0);HEAP32[(($386)>>2)]=HEAP32[(($387)>>2)];HEAP32[((($386)+(4))>>2)]=HEAP32[((($387)+(4))>>2)];HEAP32[((($386)+(8))>>2)]=HEAP32[((($387)+(8))>>2)];
      var $388=$pc;
      var $389=(($388+4)|0);
      $pc=$389;
      var $390=HEAP32[(($389)>>2)];
      $i=$390;
      var $391=$i;
      var $392=$391 & 127;
      var $393=((77372+($392<<2))|0);
      var $394=HEAP32[(($393)>>2)];
      var $5859 = $394;label = 708; break;
    case 28: 
      var $396=$1;
      var $397=$i;
      var $398=$397 >>> 7;
      var $399=$398 & 65535;
      var $400=$syms;
      var $401=(($400+($399<<1))|0);
      var $402=HEAP16[(($401)>>1)];
      var $403=$i;
      var $404=$403 >>> 23;
      var $405=$404 & 511;
      var $406=$regs;
      var $407=(($406+((($405)*(12))&-1))|0);
      _mrb_vm_iv_set($396, $402, $407);
      var $408=$pc;
      var $409=(($408+4)|0);
      $pc=$409;
      var $410=HEAP32[(($409)>>2)];
      $i=$410;
      var $411=$i;
      var $412=$411 & 127;
      var $413=((77372+($412<<2))|0);
      var $414=HEAP32[(($413)>>2)];
      var $5859 = $414;label = 708; break;
    case 29: 
      var $416=$i;
      var $417=$416 >>> 23;
      var $418=$417 & 511;
      var $419=$regs;
      var $420=(($419+((($418)*(12))&-1))|0);
      var $421=$1;
      var $422=$i;
      var $423=$422 >>> 7;
      var $424=$423 & 65535;
      var $425=$syms;
      var $426=(($425+($424<<1))|0);
      var $427=HEAP16[(($426)>>1)];
      _mrb_vm_cv_get($6, $421, $427);
      var $428=$420;
      var $429=$6;
      assert(12 % 1 === 0);HEAP32[(($428)>>2)]=HEAP32[(($429)>>2)];HEAP32[((($428)+(4))>>2)]=HEAP32[((($429)+(4))>>2)];HEAP32[((($428)+(8))>>2)]=HEAP32[((($429)+(8))>>2)];
      var $430=$pc;
      var $431=(($430+4)|0);
      $pc=$431;
      var $432=HEAP32[(($431)>>2)];
      $i=$432;
      var $433=$i;
      var $434=$433 & 127;
      var $435=((77372+($434<<2))|0);
      var $436=HEAP32[(($435)>>2)];
      var $5859 = $436;label = 708; break;
    case 30: 
      var $438=$1;
      var $439=$i;
      var $440=$439 >>> 7;
      var $441=$440 & 65535;
      var $442=$syms;
      var $443=(($442+($441<<1))|0);
      var $444=HEAP16[(($443)>>1)];
      var $445=$i;
      var $446=$445 >>> 23;
      var $447=$446 & 511;
      var $448=$regs;
      var $449=(($448+((($447)*(12))&-1))|0);
      _mrb_vm_cv_set($438, $444, $449);
      var $450=$pc;
      var $451=(($450+4)|0);
      $pc=$451;
      var $452=HEAP32[(($451)>>2)];
      $i=$452;
      var $453=$i;
      var $454=$453 & 127;
      var $455=((77372+($454<<2))|0);
      var $456=HEAP32[(($455)>>2)];
      var $5859 = $456;label = 708; break;
    case 31: 
      var $458=$i;
      var $459=$458 >>> 23;
      var $460=$459 & 511;
      var $461=$regs;
      var $462=(($461+((($460)*(12))&-1))|0);
      var $463=$1;
      var $464=$i;
      var $465=$464 >>> 7;
      var $466=$465 & 65535;
      var $467=$syms;
      var $468=(($467+($466<<1))|0);
      var $469=HEAP16[(($468)>>1)];
      _mrb_vm_const_get($7, $463, $469);
      var $470=$462;
      var $471=$7;
      assert(12 % 1 === 0);HEAP32[(($470)>>2)]=HEAP32[(($471)>>2)];HEAP32[((($470)+(4))>>2)]=HEAP32[((($471)+(4))>>2)];HEAP32[((($470)+(8))>>2)]=HEAP32[((($471)+(8))>>2)];
      var $472=$pc;
      var $473=(($472+4)|0);
      $pc=$473;
      var $474=HEAP32[(($473)>>2)];
      $i=$474;
      var $475=$i;
      var $476=$475 & 127;
      var $477=((77372+($476<<2))|0);
      var $478=HEAP32[(($477)>>2)];
      var $5859 = $478;label = 708; break;
    case 32: 
      var $480=$1;
      var $481=$i;
      var $482=$481 >>> 7;
      var $483=$482 & 65535;
      var $484=$syms;
      var $485=(($484+($483<<1))|0);
      var $486=HEAP16[(($485)>>1)];
      var $487=$i;
      var $488=$487 >>> 23;
      var $489=$488 & 511;
      var $490=$regs;
      var $491=(($490+((($489)*(12))&-1))|0);
      _mrb_vm_const_set($480, $486, $491);
      var $492=$pc;
      var $493=(($492+4)|0);
      $pc=$493;
      var $494=HEAP32[(($493)>>2)];
      $i=$494;
      var $495=$i;
      var $496=$495 & 127;
      var $497=((77372+($496<<2))|0);
      var $498=HEAP32[(($497)>>2)];
      var $5859 = $498;label = 708; break;
    case 33: 
      var $500=$i;
      var $501=$500 >>> 23;
      var $502=$501 & 511;
      $a=$502;
      var $503=$a;
      var $504=$regs;
      var $505=(($504+((($503)*(12))&-1))|0);
      var $506=$1;
      var $507=$a;
      var $508=$regs;
      var $509=(($508+((($507)*(12))&-1))|0);
      var $510=$i;
      var $511=$510 >>> 7;
      var $512=$511 & 65535;
      var $513=$syms;
      var $514=(($513+($512<<1))|0);
      var $515=HEAP16[(($514)>>1)];
      _mrb_const_get($8, $506, $509, $515);
      var $516=$505;
      var $517=$8;
      assert(12 % 1 === 0);HEAP32[(($516)>>2)]=HEAP32[(($517)>>2)];HEAP32[((($516)+(4))>>2)]=HEAP32[((($517)+(4))>>2)];HEAP32[((($516)+(8))>>2)]=HEAP32[((($517)+(8))>>2)];
      var $518=$pc;
      var $519=(($518+4)|0);
      $pc=$519;
      var $520=HEAP32[(($519)>>2)];
      $i=$520;
      var $521=$i;
      var $522=$521 & 127;
      var $523=((77372+($522<<2))|0);
      var $524=HEAP32[(($523)>>2)];
      var $5859 = $524;label = 708; break;
    case 34: 
      var $526=$i;
      var $527=$526 >>> 23;
      var $528=$527 & 511;
      $a1=$528;
      var $529=$1;
      var $530=$a1;
      var $531=((($530)+(1))|0);
      var $532=$regs;
      var $533=(($532+((($531)*(12))&-1))|0);
      var $534=$i;
      var $535=$534 >>> 7;
      var $536=$535 & 65535;
      var $537=$syms;
      var $538=(($537+($536<<1))|0);
      var $539=HEAP16[(($538)>>1)];
      var $540=$a1;
      var $541=$regs;
      var $542=(($541+((($540)*(12))&-1))|0);
      _mrb_const_set($529, $533, $539, $542);
      var $543=$pc;
      var $544=(($543+4)|0);
      $pc=$544;
      var $545=HEAP32[(($544)>>2)];
      $i=$545;
      var $546=$i;
      var $547=$546 & 127;
      var $548=((77372+($547<<2))|0);
      var $549=HEAP32[(($548)>>2)];
      var $5859 = $549;label = 708; break;
    case 35: 
      var $551=$regs;
      var $552=$i;
      var $553=$552 >>> 23;
      var $554=$553 & 511;
      var $555=(($551+((($554)*(12))&-1))|0);
      $regs_a=$555;
      var $556=$i;
      var $557=$556 >>> 7;
      var $558=$557 & 127;
      $up=$558;
      var $559=$1;
      var $560=$up;
      var $561=_uvenv($559, $560);
      $e=$561;
      var $562=$e;
      var $563=(($562)|(0))!=0;
      if ($563) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $565=$regs_a;
      _mrb_nil_value148($9);
      var $566=$565;
      var $567=$9;
      assert(12 % 1 === 0);HEAP32[(($566)>>2)]=HEAP32[(($567)>>2)];HEAP32[((($566)+(4))>>2)]=HEAP32[((($567)+(4))>>2)];HEAP32[((($566)+(8))>>2)]=HEAP32[((($567)+(8))>>2)];
      label = 38; break;
    case 37: 
      var $569=$i;
      var $570=$569 >>> 14;
      var $571=$570 & 511;
      $idx=$571;
      var $572=$regs_a;
      var $573=$idx;
      var $574=$e;
      var $575=(($574+12)|0);
      var $576=HEAP32[(($575)>>2)];
      var $577=(($576+((($573)*(12))&-1))|0);
      var $578=$572;
      var $579=$577;
      assert(12 % 1 === 0);HEAP32[(($578)>>2)]=HEAP32[(($579)>>2)];HEAP32[((($578)+(4))>>2)]=HEAP32[((($579)+(4))>>2)];HEAP32[((($578)+(8))>>2)]=HEAP32[((($579)+(8))>>2)];
      label = 38; break;
    case 38: 
      var $581=$pc;
      var $582=(($581+4)|0);
      $pc=$582;
      var $583=HEAP32[(($582)>>2)];
      $i=$583;
      var $584=$i;
      var $585=$584 & 127;
      var $586=((77372+($585<<2))|0);
      var $587=HEAP32[(($586)>>2)];
      var $5859 = $587;label = 708; break;
    case 39: 
      var $589=$i;
      var $590=$589 >>> 7;
      var $591=$590 & 127;
      $up2=$591;
      var $592=$1;
      var $593=$up2;
      var $594=_uvenv($592, $593);
      $e3=$594;
      var $595=$e3;
      var $596=(($595)|(0))!=0;
      if ($596) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $598=$regs;
      var $599=$i;
      var $600=$599 >>> 23;
      var $601=$600 & 511;
      var $602=(($598+((($601)*(12))&-1))|0);
      $regs_a4=$602;
      var $603=$i;
      var $604=$603 >>> 14;
      var $605=$604 & 511;
      $idx5=$605;
      var $606=$idx5;
      var $607=$e3;
      var $608=(($607+12)|0);
      var $609=HEAP32[(($608)>>2)];
      var $610=(($609+((($606)*(12))&-1))|0);
      var $611=$regs_a4;
      var $612=$610;
      var $613=$611;
      assert(12 % 1 === 0);HEAP32[(($612)>>2)]=HEAP32[(($613)>>2)];HEAP32[((($612)+(4))>>2)]=HEAP32[((($613)+(4))>>2)];HEAP32[((($612)+(8))>>2)]=HEAP32[((($613)+(8))>>2)];
      var $614=$1;
      var $615=$e3;
      var $616=$615;
      _mrb_write_barrier($614, $616);
      label = 41; break;
    case 41: 
      var $618=$pc;
      var $619=(($618+4)|0);
      $pc=$619;
      var $620=HEAP32[(($619)>>2)];
      $i=$620;
      var $621=$i;
      var $622=$621 & 127;
      var $623=((77372+($622<<2))|0);
      var $624=HEAP32[(($623)>>2)];
      var $5859 = $624;label = 708; break;
    case 42: 
      var $626=$i;
      var $627=$626 >>> 7;
      var $628=$627 & 65535;
      var $629=((($628)-(32767))|0);
      var $630=$pc;
      var $631=(($630+($629<<2))|0);
      $pc=$631;
      var $632=$pc;
      var $633=HEAP32[(($632)>>2)];
      $i=$633;
      var $634=$i;
      var $635=$634 & 127;
      var $636=((77372+($635<<2))|0);
      var $637=HEAP32[(($636)>>2)];
      var $5859 = $637;label = 708; break;
    case 43: 
      var $639=$i;
      var $640=$639 >>> 23;
      var $641=$640 & 511;
      var $642=$regs;
      var $643=(($642+((($641)*(12))&-1))|0);
      var $644=(($643+8)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=(($645)|(0))!=0;
      if ($646) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $648=$i;
      var $649=$648 >>> 7;
      var $650=$649 & 65535;
      var $651=((($650)-(32767))|0);
      var $652=$pc;
      var $653=(($652+($651<<2))|0);
      $pc=$653;
      var $654=$pc;
      var $655=HEAP32[(($654)>>2)];
      $i=$655;
      var $656=$i;
      var $657=$656 & 127;
      var $658=((77372+($657<<2))|0);
      var $659=HEAP32[(($658)>>2)];
      var $5859 = $659;label = 708; break;
    case 45: 
      var $661=$pc;
      var $662=(($661+4)|0);
      $pc=$662;
      var $663=HEAP32[(($662)>>2)];
      $i=$663;
      var $664=$i;
      var $665=$664 & 127;
      var $666=((77372+($665<<2))|0);
      var $667=HEAP32[(($666)>>2)];
      var $5859 = $667;label = 708; break;
    case 46: 
      var $669=$i;
      var $670=$669 >>> 23;
      var $671=$670 & 511;
      var $672=$regs;
      var $673=(($672+((($671)*(12))&-1))|0);
      var $674=(($673+8)|0);
      var $675=HEAP32[(($674)>>2)];
      var $676=(($675)|(0))!=0;
      if ($676) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $678=$i;
      var $679=$678 >>> 7;
      var $680=$679 & 65535;
      var $681=((($680)-(32767))|0);
      var $682=$pc;
      var $683=(($682+($681<<2))|0);
      $pc=$683;
      var $684=$pc;
      var $685=HEAP32[(($684)>>2)];
      $i=$685;
      var $686=$i;
      var $687=$686 & 127;
      var $688=((77372+($687<<2))|0);
      var $689=HEAP32[(($688)>>2)];
      var $5859 = $689;label = 708; break;
    case 48: 
      var $691=$pc;
      var $692=(($691+4)|0);
      $pc=$692;
      var $693=HEAP32[(($692)>>2)];
      $i=$693;
      var $694=$i;
      var $695=$694 & 127;
      var $696=((77372+($695<<2))|0);
      var $697=HEAP32[(($696)>>2)];
      var $5859 = $697;label = 708; break;
    case 49: 
      var $699=$1;
      var $700=(($699+8)|0);
      var $701=HEAP32[(($700)>>2)];
      var $702=(($701+32)|0);
      var $703=HEAP32[(($702)>>2)];
      var $704=$1;
      var $705=(($704+8)|0);
      var $706=HEAP32[(($705)>>2)];
      var $707=(($706+16)|0);
      var $708=HEAP32[(($707)>>2)];
      var $709=(($708+32)|0);
      var $710=HEAP32[(($709)>>2)];
      var $711=(($703)|(0)) <= (($710)|(0));
      if ($711) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $713=$1;
      var $714=(($713+8)|0);
      var $715=HEAP32[(($714)>>2)];
      var $716=(($715+32)|0);
      var $717=HEAP32[(($716)>>2)];
      var $718=(($717)|(0))==0;
      if ($718) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $720=$1;
      var $721=(($720+8)|0);
      var $722=HEAP32[(($721)>>2)];
      var $723=(($722+32)|0);
      HEAP32[(($723)>>2)]=16;
      label = 53; break;
    case 52: 
      var $725=$1;
      var $726=(($725+8)|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=(($727+32)|0);
      var $729=HEAP32[(($728)>>2)];
      var $730=($729<<1);
      HEAP32[(($728)>>2)]=$730;
      label = 53; break;
    case 53: 
      var $732=$1;
      var $733=$1;
      var $734=(($733+8)|0);
      var $735=HEAP32[(($734)>>2)];
      var $736=(($735+28)|0);
      var $737=HEAP32[(($736)>>2)];
      var $738=$737;
      var $739=$1;
      var $740=(($739+8)|0);
      var $741=HEAP32[(($740)>>2)];
      var $742=(($741+32)|0);
      var $743=HEAP32[(($742)>>2)];
      var $744=($743<<2);
      var $745=_mrb_realloc($732, $738, $744);
      var $746=$745;
      var $747=$1;
      var $748=(($747+8)|0);
      var $749=HEAP32[(($748)>>2)];
      var $750=(($749+28)|0);
      HEAP32[(($750)>>2)]=$746;
      label = 54; break;
    case 54: 
      var $752=$pc;
      var $753=$i;
      var $754=$753 >>> 7;
      var $755=$754 & 65535;
      var $756=((($755)-(32767))|0);
      var $757=(($752+($756<<2))|0);
      var $758=$1;
      var $759=(($758+8)|0);
      var $760=HEAP32[(($759)>>2)];
      var $761=(($760+16)|0);
      var $762=HEAP32[(($761)>>2)];
      var $763=(($762+32)|0);
      var $764=HEAP32[(($763)>>2)];
      var $765=((($764)+(1))|0);
      HEAP32[(($763)>>2)]=$765;
      var $766=$1;
      var $767=(($766+8)|0);
      var $768=HEAP32[(($767)>>2)];
      var $769=(($768+28)|0);
      var $770=HEAP32[(($769)>>2)];
      var $771=(($770+($764<<2))|0);
      HEAP32[(($771)>>2)]=$757;
      var $772=$pc;
      var $773=(($772+4)|0);
      $pc=$773;
      var $774=HEAP32[(($773)>>2)];
      $i=$774;
      var $775=$i;
      var $776=$775 & 127;
      var $777=((77372+($776<<2))|0);
      var $778=HEAP32[(($777)>>2)];
      var $5859 = $778;label = 708; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $781=$1;
      var $782=(($781+16)|0);
      var $783=HEAP32[(($782)>>2)];
      var $784=$783;
      var $785=HEAP32[(($784)>>2)];
      var $786=$785 & 255;
      var $787=$i;
      var $788=$787 >>> 23;
      var $789=$788 & 511;
      var $790=$regs;
      var $791=(($790+((($789)*(12))&-1))|0);
      var $792=(($791+8)|0);
      HEAP32[(($792)>>2)]=$786;
      var $793=$1;
      var $794=(($793+16)|0);
      var $795=HEAP32[(($794)>>2)];
      var $796=$795;
      var $797=$i;
      var $798=$797 >>> 23;
      var $799=$798 & 511;
      var $800=$regs;
      var $801=(($800+((($799)*(12))&-1))|0);
      var $802=(($801)|0);
      var $803=$802;
      HEAP32[(($803)>>2)]=$796;
      label = 57; break;
    case 57: 
      var $805=$1;
      var $806=(($805+16)|0);
      HEAP32[(($806)>>2)]=0;
      var $807=$pc;
      var $808=(($807+4)|0);
      $pc=$808;
      var $809=HEAP32[(($808)>>2)];
      $i=$809;
      var $810=$i;
      var $811=$810 & 127;
      var $812=((77372+($811<<2))|0);
      var $813=HEAP32[(($812)>>2)];
      var $5859 = $813;label = 708; break;
    case 58: 
      var $815=$i;
      var $816=$815 >>> 23;
      var $817=$816 & 511;
      $a6=$817;
      label = 59; break;
    case 59: 
      var $819=$a6;
      var $820=((($819)-(1))|0);
      $a6=$820;
      var $821=(($819)|(0))!=0;
      if ($821) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $823=$1;
      var $824=(($823+8)|0);
      var $825=HEAP32[(($824)>>2)];
      var $826=(($825+16)|0);
      var $827=HEAP32[(($826)>>2)];
      var $828=(($827+32)|0);
      var $829=HEAP32[(($828)>>2)];
      var $830=((($829)-(1))|0);
      HEAP32[(($828)>>2)]=$830;
      label = 59; break;
    case 61: 
      var $832=$pc;
      var $833=(($832+4)|0);
      $pc=$833;
      var $834=HEAP32[(($833)>>2)];
      $i=$834;
      var $835=$i;
      var $836=$835 & 127;
      var $837=((77372+($836<<2))|0);
      var $838=HEAP32[(($837)>>2)];
      var $5859 = $838;label = 708; break;
    case 62: 
      var $840=$i;
      var $841=$840 >>> 23;
      var $842=$841 & 511;
      var $843=$regs;
      var $844=(($843+((($842)*(12))&-1))|0);
      var $845=(($844)|0);
      var $846=$845;
      var $847=HEAP32[(($846)>>2)];
      var $848=$847;
      var $849=$1;
      var $850=(($849+16)|0);
      HEAP32[(($850)>>2)]=$848;
      label = 222; break;
    case 63: 
      var $852=$1;
      var $853=$irep;
      var $854=(($853)|0);
      var $855=HEAP32[(($854)>>2)];
      var $856=$i;
      var $857=$856 >>> 7;
      var $858=$857 & 65535;
      var $859=((($855)+($858))|0);
      var $860=$1;
      var $861=(($860+24)|0);
      var $862=HEAP32[(($861)>>2)];
      var $863=(($862+($859<<2))|0);
      var $864=HEAP32[(($863)>>2)];
      var $865=_mrb_closure_new($852, $864);
      $p=$865;
      var $866=$1;
      var $867=(($866+8)|0);
      var $868=HEAP32[(($867)>>2)];
      var $869=(($868+40)|0);
      var $870=HEAP32[(($869)>>2)];
      var $871=$1;
      var $872=(($871+8)|0);
      var $873=HEAP32[(($872)>>2)];
      var $874=(($873+16)|0);
      var $875=HEAP32[(($874)>>2)];
      var $876=(($875+36)|0);
      var $877=HEAP32[(($876)>>2)];
      var $878=(($870)|(0)) <= (($877)|(0));
      if ($878) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $880=$1;
      var $881=(($880+8)|0);
      var $882=HEAP32[(($881)>>2)];
      var $883=(($882+40)|0);
      var $884=HEAP32[(($883)>>2)];
      var $885=(($884)|(0))==0;
      if ($885) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $887=$1;
      var $888=(($887+8)|0);
      var $889=HEAP32[(($888)>>2)];
      var $890=(($889+40)|0);
      HEAP32[(($890)>>2)]=16;
      label = 67; break;
    case 66: 
      var $892=$1;
      var $893=(($892+8)|0);
      var $894=HEAP32[(($893)>>2)];
      var $895=(($894+40)|0);
      var $896=HEAP32[(($895)>>2)];
      var $897=($896<<1);
      HEAP32[(($895)>>2)]=$897;
      label = 67; break;
    case 67: 
      var $899=$1;
      var $900=$1;
      var $901=(($900+8)|0);
      var $902=HEAP32[(($901)>>2)];
      var $903=(($902+36)|0);
      var $904=HEAP32[(($903)>>2)];
      var $905=$904;
      var $906=$1;
      var $907=(($906+8)|0);
      var $908=HEAP32[(($907)>>2)];
      var $909=(($908+40)|0);
      var $910=HEAP32[(($909)>>2)];
      var $911=($910<<2);
      var $912=_mrb_realloc($899, $905, $911);
      var $913=$912;
      var $914=$1;
      var $915=(($914+8)|0);
      var $916=HEAP32[(($915)>>2)];
      var $917=(($916+36)|0);
      HEAP32[(($917)>>2)]=$913;
      label = 68; break;
    case 68: 
      var $919=$p;
      var $920=$1;
      var $921=(($920+8)|0);
      var $922=HEAP32[(($921)>>2)];
      var $923=(($922+16)|0);
      var $924=HEAP32[(($923)>>2)];
      var $925=(($924+36)|0);
      var $926=HEAP32[(($925)>>2)];
      var $927=((($926)+(1))|0);
      HEAP32[(($925)>>2)]=$927;
      var $928=$1;
      var $929=(($928+8)|0);
      var $930=HEAP32[(($929)>>2)];
      var $931=(($930+36)|0);
      var $932=HEAP32[(($931)>>2)];
      var $933=(($932+($926<<2))|0);
      HEAP32[(($933)>>2)]=$919;
      var $934=$1;
      var $935=$ai;
      _mrb_gc_arena_restore($934, $935);
      var $936=$pc;
      var $937=(($936+4)|0);
      $pc=$937;
      var $938=HEAP32[(($937)>>2)];
      $i=$938;
      var $939=$i;
      var $940=$939 & 127;
      var $941=((77372+($940<<2))|0);
      var $942=HEAP32[(($941)>>2)];
      var $5859 = $942;label = 708; break;
    case 69: 
      var $944=$i;
      var $945=$944 >>> 23;
      var $946=$945 & 511;
      $a7=$946;
      $n=0;
      label = 70; break;
    case 70: 
      var $948=$n;
      var $949=$a7;
      var $950=(($948)|(0)) < (($949)|(0));
      if ($950) { label = 71; break; } else { label = 73; break; }
    case 71: 
      var $952=$1;
      var $953=$1;
      var $954=(($953+8)|0);
      var $955=HEAP32[(($954)>>2)];
      var $956=(($955+16)|0);
      var $957=HEAP32[(($956)>>2)];
      var $958=(($957+36)|0);
      var $959=HEAP32[(($958)>>2)];
      var $960=((($959)-(1))|0);
      HEAP32[(($958)>>2)]=$960;
      _ecall($952, $960);
      label = 72; break;
    case 72: 
      var $962=$n;
      var $963=((($962)+(1))|0);
      $n=$963;
      label = 70; break;
    case 73: 
      var $965=$1;
      var $966=$ai;
      _mrb_gc_arena_restore($965, $966);
      var $967=$pc;
      var $968=(($967+4)|0);
      $pc=$968;
      var $969=HEAP32[(($968)>>2)];
      $i=$969;
      var $970=$i;
      var $971=$970 & 127;
      var $972=((77372+($971<<2))|0);
      var $973=HEAP32[(($972)>>2)];
      var $5859 = $973;label = 708; break;
    case 74: 
      var $975=$i;
      var $976=$975 >>> 23;
      var $977=$976 & 511;
      $a8=$977;
      label = 75; break;
    case 75: 
      var $979=$a8;
      var $980=$regs;
      var $981=(($980+((($979)*(12))&-1))|0);
      var $982=(($981+8)|0);
      HEAP32[(($982)>>2)]=0;
      var $983=$a8;
      var $984=$regs;
      var $985=(($984+((($983)*(12))&-1))|0);
      var $986=(($985)|0);
      var $987=$986;
      HEAP32[(($987)>>2)]=0;
      label = 76; break;
    case 76: 
      var $989=$pc;
      var $990=(($989+4)|0);
      $pc=$990;
      var $991=HEAP32[(($990)>>2)];
      $i=$991;
      var $992=$i;
      var $993=$992 & 127;
      var $994=((77372+($993<<2))|0);
      var $995=HEAP32[(($994)>>2)];
      var $5859 = $995;label = 708; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $999=$i;
      var $1000=$999 >>> 23;
      var $1001=$1000 & 511;
      $a9=$1001;
      var $1002=$i;
      var $1003=$1002 >>> 7;
      var $1004=$1003 & 127;
      $n10=$1004;
      var $1005=$i;
      var $1006=$1005 >>> 14;
      var $1007=$1006 & 511;
      var $1008=$syms;
      var $1009=(($1008+($1007<<1))|0);
      var $1010=HEAP16[(($1009)>>1)];
      $mid=$1010;
      var $1011=$a9;
      var $1012=$regs;
      var $1013=(($1012+((($1011)*(12))&-1))|0);
      var $1014=$recv;
      var $1015=$1013;
      assert(12 % 1 === 0);HEAP32[(($1014)>>2)]=HEAP32[(($1015)>>2)];HEAP32[((($1014)+(4))>>2)]=HEAP32[((($1015)+(4))>>2)];HEAP32[((($1014)+(8))>>2)]=HEAP32[((($1015)+(8))>>2)];
      var $1016=$i;
      var $1017=$1016 & 127;
      var $1018=(($1017)|(0))!=33;
      if ($1018) { label = 80; break; } else { label = 88; break; }
    case 80: 
      var $1020=$n10;
      var $1021=(($1020)|(0))==127;
      if ($1021) { label = 81; break; } else { label = 84; break; }
    case 81: 
      label = 82; break;
    case 82: 
      var $1024=$a9;
      var $1025=((($1024)+(2))|0);
      var $1026=$regs;
      var $1027=(($1026+((($1025)*(12))&-1))|0);
      var $1028=(($1027+8)|0);
      HEAP32[(($1028)>>2)]=0;
      var $1029=$a9;
      var $1030=((($1029)+(2))|0);
      var $1031=$regs;
      var $1032=(($1031+((($1030)*(12))&-1))|0);
      var $1033=(($1032)|0);
      var $1034=$1033;
      HEAP32[(($1034)>>2)]=0;
      label = 83; break;
    case 83: 
      label = 87; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $1038=$a9;
      var $1039=$n10;
      var $1040=((($1038)+($1039))|0);
      var $1041=((($1040)+(1))|0);
      var $1042=$regs;
      var $1043=(($1042+((($1041)*(12))&-1))|0);
      var $1044=(($1043+8)|0);
      HEAP32[(($1044)>>2)]=0;
      var $1045=$a9;
      var $1046=$n10;
      var $1047=((($1045)+($1046))|0);
      var $1048=((($1047)+(1))|0);
      var $1049=$regs;
      var $1050=(($1049+((($1048)*(12))&-1))|0);
      var $1051=(($1050)|0);
      var $1052=$1051;
      HEAP32[(($1052)>>2)]=0;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $1056=$1;
      var $1057=_mrb_class($1056, $recv);
      HEAP32[(($c)>>2)]=$1057;
      var $1058=$1;
      var $1059=$mid;
      var $1060=_mrb_method_search_vm($1058, $c, $1059);
      $m=$1060;
      var $1061=$m;
      var $1062=(($1061)|(0))!=0;
      if ($1062) { label = 93; break; } else { label = 89; break; }
    case 89: 
      var $1064=$mid;
      _mrb_symbol_value145($sym, $1064);
      var $1065=$1;
      var $1066=_mrb_intern2($1065, ((104520)|0), 14);
      $mid=$1066;
      var $1067=$1;
      var $1068=$mid;
      var $1069=_mrb_method_search_vm($1067, $c, $1068);
      $m=$1069;
      var $1070=$n10;
      var $1071=(($1070)|(0))==127;
      if ($1071) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $1073=$1;
      var $1074=$a9;
      var $1075=((($1074)+(1))|0);
      var $1076=$regs;
      var $1077=(($1076+((($1075)*(12))&-1))|0);
      _mrb_ary_unshift($10, $1073, $1077, $sym);
      label = 92; break;
    case 91: 
      var $1079=$regs;
      var $1080=$a9;
      var $1081=(($1079+((($1080)*(12))&-1))|0);
      var $1082=(($1081+24)|0);
      var $1083=$regs;
      var $1084=$a9;
      var $1085=(($1083+((($1084)*(12))&-1))|0);
      var $1086=(($1085+12)|0);
      var $1087=$n10;
      var $1088=((($1087)+(1))|0);
      $n10=$1088;
      _value_move($1082, $1086, $1088);
      var $1089=$a9;
      var $1090=((($1089)+(1))|0);
      var $1091=$regs;
      var $1092=(($1091+((($1090)*(12))&-1))|0);
      var $1093=$1092;
      var $1094=$sym;
      assert(12 % 1 === 0);HEAP32[(($1093)>>2)]=HEAP32[(($1094)>>2)];HEAP32[((($1093)+(4))>>2)]=HEAP32[((($1094)+(4))>>2)];HEAP32[((($1093)+(8))>>2)]=HEAP32[((($1094)+(8))>>2)];
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $1097=$1;
      var $1098=_cipush($1097);
      $ci=$1098;
      var $1099=$mid;
      var $1100=$ci;
      var $1101=(($1100)|0);
      HEAP16[(($1101)>>1)]=$1099;
      var $1102=$m;
      var $1103=$ci;
      var $1104=(($1103+4)|0);
      HEAP32[(($1104)>>2)]=$1102;
      var $1105=$1;
      var $1106=(($1105+8)|0);
      var $1107=HEAP32[(($1106)>>2)];
      var $1108=(($1107+4)|0);
      var $1109=HEAP32[(($1108)>>2)];
      var $1110=$1;
      var $1111=(($1110+8)|0);
      var $1112=HEAP32[(($1111)>>2)];
      var $1113=(($1112+8)|0);
      var $1114=HEAP32[(($1113)>>2)];
      var $1115=$1109;
      var $1116=$1114;
      var $1117=((($1115)-($1116))|0);
      var $1118=((((($1117)|(0)))/(12))&-1);
      var $1119=$ci;
      var $1120=(($1119+8)|0);
      HEAP32[(($1120)>>2)]=$1118;
      var $1121=$n10;
      var $1122=(($1121)|(0))==127;
      if ($1122) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $1124=$ci;
      var $1125=(($1124+16)|0);
      HEAP32[(($1125)>>2)]=-1;
      label = 96; break;
    case 95: 
      var $1127=$n10;
      var $1128=$ci;
      var $1129=(($1128+16)|0);
      HEAP32[(($1129)>>2)]=$1127;
      label = 96; break;
    case 96: 
      var $1131=HEAP32[(($c)>>2)];
      var $1132=$1131;
      var $1133=HEAP32[(($1132)>>2)];
      var $1134=$1133 & 255;
      var $1135=(($1134)|(0))==11;
      if ($1135) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $1137=HEAP32[(($c)>>2)];
      var $1138=(($1137+4)|0);
      var $1139=HEAP32[(($1138)>>2)];
      var $1140=$ci;
      var $1141=(($1140+28)|0);
      HEAP32[(($1141)>>2)]=$1139;
      label = 99; break;
    case 98: 
      var $1143=HEAP32[(($c)>>2)];
      var $1144=$ci;
      var $1145=(($1144+28)|0);
      HEAP32[(($1145)>>2)]=$1143;
      label = 99; break;
    case 99: 
      var $1147=$pc;
      var $1148=(($1147+4)|0);
      var $1149=$ci;
      var $1150=(($1149+20)|0);
      HEAP32[(($1150)>>2)]=$1148;
      var $1151=$a9;
      var $1152=$ci;
      var $1153=(($1152+24)|0);
      HEAP32[(($1153)>>2)]=$1151;
      var $1154=$a9;
      var $1155=$1;
      var $1156=(($1155+8)|0);
      var $1157=HEAP32[(($1156)>>2)];
      var $1158=(($1157+4)|0);
      var $1159=HEAP32[(($1158)>>2)];
      var $1160=(($1159+((($1154)*(12))&-1))|0);
      HEAP32[(($1158)>>2)]=$1160;
      var $1161=$m;
      var $1162=$1161;
      var $1163=HEAP32[(($1162)>>2)];
      var $1164=$1163 >>> 11;
      var $1165=$1164 & 2097151;
      var $1166=$1165 & 128;
      var $1167=(($1166)|(0))!=0;
      if ($1167) { label = 100; break; } else { label = 110; break; }
    case 100: 
      var $1169=$n10;
      var $1170=(($1169)|(0))==127;
      if ($1170) { label = 101; break; } else { label = 102; break; }
    case 101: 
      var $1172=$ci;
      var $1173=(($1172+12)|0);
      HEAP32[(($1173)>>2)]=3;
      label = 103; break;
    case 102: 
      var $1175=$n10;
      var $1176=((($1175)+(2))|0);
      var $1177=$ci;
      var $1178=(($1177+12)|0);
      HEAP32[(($1178)>>2)]=$1176;
      label = 103; break;
    case 103: 
      var $1180=$m;
      var $1181=(($1180+12)|0);
      var $1182=$1181;
      var $1183=HEAP32[(($1182)>>2)];
      var $1184=$1;
      FUNCTION_TABLE[$1183]($11, $1184, $recv);
      var $1185=$result;
      var $1186=$11;
      assert(12 % 1 === 0);HEAP32[(($1185)>>2)]=HEAP32[(($1186)>>2)];HEAP32[((($1185)+(4))>>2)]=HEAP32[((($1186)+(4))>>2)];HEAP32[((($1185)+(8))>>2)]=HEAP32[((($1186)+(8))>>2)];
      var $1187=$1;
      var $1188=(($1187+8)|0);
      var $1189=HEAP32[(($1188)>>2)];
      var $1190=(($1189+4)|0);
      var $1191=HEAP32[(($1190)>>2)];
      var $1192=(($1191)|0);
      var $1193=$1192;
      var $1194=$result;
      assert(12 % 1 === 0);HEAP32[(($1193)>>2)]=HEAP32[(($1194)>>2)];HEAP32[((($1193)+(4))>>2)]=HEAP32[((($1194)+(4))>>2)];HEAP32[((($1193)+(8))>>2)]=HEAP32[((($1194)+(8))>>2)];
      var $1195=$1;
      var $1196=$ai;
      _mrb_gc_arena_restore($1195, $1196);
      var $1197=$1;
      var $1198=(($1197+16)|0);
      var $1199=HEAP32[(($1198)>>2)];
      var $1200=(($1199)|(0))!=0;
      if ($1200) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 222; break;
    case 105: 
      var $1203=$1;
      var $1204=(($1203+8)|0);
      var $1205=HEAP32[(($1204)>>2)];
      var $1206=(($1205+16)|0);
      var $1207=HEAP32[(($1206)>>2)];
      $ci=$1207;
      var $1208=$ci;
      var $1209=(($1208+28)|0);
      var $1210=HEAP32[(($1209)>>2)];
      var $1211=(($1210)|(0))!=0;
      if ($1211) { label = 109; break; } else { label = 106; break; }
    case 106: 
      var $1213=$ci;
      var $1214=((($1213)-(44))|0);
      var $1215=(($1214+4)|0);
      var $1216=HEAP32[(($1215)>>2)];
      var $1217=$1216;
      var $1218=HEAP32[(($1217)>>2)];
      var $1219=$1218 >>> 11;
      var $1220=$1219 & 2097151;
      var $1221=$1220 & 128;
      var $1222=(($1221)|(0))!=0;
      if ($1222) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $1224=$ci;
      var $1225=((($1224)-(44))|0);
      var $1226=(($1225+4)|0);
      var $1227=HEAP32[(($1226)>>2)];
      var $1228=(($1227+12)|0);
      var $1229=$1228;
      var $1230=HEAP32[(($1229)>>2)];
      $irep=$1230;
      var $1231=$irep;
      var $1232=(($1231+16)|0);
      var $1233=HEAP32[(($1232)>>2)];
      $pool=$1233;
      var $1234=$irep;
      var $1235=(($1234+20)|0);
      var $1236=HEAP32[(($1235)>>2)];
      $syms=$1236;
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $1239=$1;
      var $1240=(($1239+8)|0);
      var $1241=HEAP32[(($1240)>>2)];
      var $1242=(($1241+8)|0);
      var $1243=HEAP32[(($1242)>>2)];
      var $1244=$ci;
      var $1245=(($1244+8)|0);
      var $1246=HEAP32[(($1245)>>2)];
      var $1247=(($1243+((($1246)*(12))&-1))|0);
      var $1248=$1;
      var $1249=(($1248+8)|0);
      var $1250=HEAP32[(($1249)>>2)];
      var $1251=(($1250+4)|0);
      HEAP32[(($1251)>>2)]=$1247;
      $regs=$1247;
      var $1252=$ci;
      var $1253=(($1252+20)|0);
      var $1254=HEAP32[(($1253)>>2)];
      $pc=$1254;
      var $1255=$1;
      _cipop($1255);
      var $1256=$pc;
      var $1257=HEAP32[(($1256)>>2)];
      $i=$1257;
      var $1258=$i;
      var $1259=$1258 & 127;
      var $1260=((77372+($1259<<2))|0);
      var $1261=HEAP32[(($1260)>>2)];
      var $5859 = $1261;label = 708; break;
    case 110: 
      var $1263=$m;
      var $1264=$1;
      var $1265=(($1264+8)|0);
      var $1266=HEAP32[(($1265)>>2)];
      var $1267=(($1266+16)|0);
      var $1268=HEAP32[(($1267)>>2)];
      var $1269=(($1268+4)|0);
      HEAP32[(($1269)>>2)]=$1263;
      $2=$1263;
      var $1270=$m;
      var $1271=(($1270+12)|0);
      var $1272=$1271;
      var $1273=HEAP32[(($1272)>>2)];
      $irep=$1273;
      var $1274=$irep;
      var $1275=(($1274+16)|0);
      var $1276=HEAP32[(($1275)>>2)];
      $pool=$1276;
      var $1277=$irep;
      var $1278=(($1277+20)|0);
      var $1279=HEAP32[(($1278)>>2)];
      $syms=$1279;
      var $1280=$irep;
      var $1281=(($1280+6)|0);
      var $1282=HEAP16[(($1281)>>1)];
      var $1283=(($1282)&(65535));
      var $1284=$ci;
      var $1285=(($1284+12)|0);
      HEAP32[(($1285)>>2)]=$1283;
      var $1286=$ci;
      var $1287=(($1286+16)|0);
      var $1288=HEAP32[(($1287)>>2)];
      var $1289=(($1288)|(0)) < 0;
      if ($1289) { label = 111; break; } else { label = 115; break; }
    case 111: 
      var $1291=$1;
      var $1292=$irep;
      var $1293=(($1292+6)|0);
      var $1294=HEAP16[(($1293)>>1)];
      var $1295=(($1294)&(65535));
      var $1296=(($1295)|(0)) < 3;
      if ($1296) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $1304 = 3;label = 114; break;
    case 113: 
      var $1299=$irep;
      var $1300=(($1299+6)|0);
      var $1301=HEAP16[(($1300)>>1)];
      var $1302=(($1301)&(65535));
      var $1304 = $1302;label = 114; break;
    case 114: 
      var $1304;
      _stack_extend($1291, $1304, 3);
      label = 116; break;
    case 115: 
      var $1306=$1;
      var $1307=$irep;
      var $1308=(($1307+6)|0);
      var $1309=HEAP16[(($1308)>>1)];
      var $1310=(($1309)&(65535));
      var $1311=$ci;
      var $1312=(($1311+16)|0);
      var $1313=HEAP32[(($1312)>>2)];
      var $1314=((($1313)+(2))|0);
      _stack_extend($1306, $1310, $1314);
      label = 116; break;
    case 116: 
      var $1316=$1;
      var $1317=(($1316+8)|0);
      var $1318=HEAP32[(($1317)>>2)];
      var $1319=(($1318+4)|0);
      var $1320=HEAP32[(($1319)>>2)];
      $regs=$1320;
      var $1321=$irep;
      var $1322=(($1321+12)|0);
      var $1323=HEAP32[(($1322)>>2)];
      $pc=$1323;
      var $1324=$pc;
      var $1325=HEAP32[(($1324)>>2)];
      $i=$1325;
      var $1326=$i;
      var $1327=$1326 & 127;
      var $1328=((77372+($1327<<2))|0);
      var $1329=HEAP32[(($1328)>>2)];
      var $5859 = $1329;label = 708; break;
    case 117: 
      var $1331=$pc;
      var $1332=(($1331+4)|0);
      $pc=$1332;
      var $1333=HEAP32[(($1332)>>2)];
      $i=$1333;
      var $1334=$i;
      var $1335=$1334 & 127;
      var $1336=((77372+($1335<<2))|0);
      var $1337=HEAP32[(($1336)>>2)];
      var $5859 = $1337;label = 708; break;
    case 118: 
      var $1339=$1;
      var $1340=(($1339+8)|0);
      var $1341=HEAP32[(($1340)>>2)];
      var $1342=(($1341+4)|0);
      var $1343=HEAP32[(($1342)>>2)];
      var $1344=(($1343)|0);
      var $1345=$recv12;
      var $1346=$1344;
      assert(12 % 1 === 0);HEAP32[(($1345)>>2)]=HEAP32[(($1346)>>2)];HEAP32[((($1345)+(4))>>2)]=HEAP32[((($1346)+(4))>>2)];HEAP32[((($1345)+(8))>>2)]=HEAP32[((($1346)+(8))>>2)];
      var $1347=(($recv12)|0);
      var $1348=$1347;
      var $1349=HEAP32[(($1348)>>2)];
      var $1350=$1349;
      $m13=$1350;
      var $1351=$1;
      var $1352=(($1351+8)|0);
      var $1353=HEAP32[(($1352)>>2)];
      var $1354=(($1353+16)|0);
      var $1355=HEAP32[(($1354)>>2)];
      $ci11=$1355;
      var $1356=$m13;
      var $1357=(($1356+16)|0);
      var $1358=HEAP32[(($1357)>>2)];
      var $1359=$ci11;
      var $1360=(($1359+28)|0);
      HEAP32[(($1360)>>2)]=$1358;
      var $1361=$m13;
      var $1362=$ci11;
      var $1363=(($1362+4)|0);
      HEAP32[(($1363)>>2)]=$1361;
      var $1364=$m13;
      var $1365=(($1364+20)|0);
      var $1366=HEAP32[(($1365)>>2)];
      var $1367=(($1366)|(0))!=0;
      if ($1367) { label = 119; break; } else { label = 124; break; }
    case 119: 
      var $1369=$m13;
      var $1370=(($1369+20)|0);
      var $1371=HEAP32[(($1370)>>2)];
      var $1372=(($1371+16)|0);
      var $1373=HEAP16[(($1372)>>1)];
      var $1374=(($1373 << 16) >> 16)!=0;
      if ($1374) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $1376=$m13;
      var $1377=(($1376+20)|0);
      var $1378=HEAP32[(($1377)>>2)];
      var $1379=(($1378+16)|0);
      var $1380=HEAP16[(($1379)>>1)];
      var $1381=$ci11;
      var $1382=(($1381)|0);
      HEAP16[(($1382)>>1)]=$1380;
      label = 121; break;
    case 121: 
      var $1384=$m13;
      var $1385=(($1384+20)|0);
      var $1386=HEAP32[(($1385)>>2)];
      var $1387=(($1386+12)|0);
      var $1388=HEAP32[(($1387)>>2)];
      var $1389=(($1388)|(0))!=0;
      if ($1389) { label = 123; break; } else { label = 122; break; }
    case 122: 
      var $1391=$1;
      var $1392=(($1391+8)|0);
      var $1393=HEAP32[(($1392)>>2)];
      var $1394=(($1393+4)|0);
      var $1395=HEAP32[(($1394)>>2)];
      var $1396=$m13;
      var $1397=(($1396+20)|0);
      var $1398=HEAP32[(($1397)>>2)];
      var $1399=(($1398+12)|0);
      HEAP32[(($1399)>>2)]=$1395;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $1402=$m13;
      var $1403=$1402;
      var $1404=HEAP32[(($1403)>>2)];
      var $1405=$1404 >>> 11;
      var $1406=$1405 & 2097151;
      var $1407=$1406 & 128;
      var $1408=(($1407)|(0))!=0;
      if ($1408) { label = 125; break; } else { label = 128; break; }
    case 125: 
      var $1410=$m13;
      var $1411=(($1410+12)|0);
      var $1412=$1411;
      var $1413=HEAP32[(($1412)>>2)];
      var $1414=$1;
      FUNCTION_TABLE[$1413]($12, $1414, $recv12);
      var $1415=$recv12;
      var $1416=$12;
      assert(12 % 1 === 0);HEAP32[(($1415)>>2)]=HEAP32[(($1416)>>2)];HEAP32[((($1415)+(4))>>2)]=HEAP32[((($1416)+(4))>>2)];HEAP32[((($1415)+(8))>>2)]=HEAP32[((($1416)+(8))>>2)];
      var $1417=$1;
      var $1418=$ai;
      _mrb_gc_arena_restore($1417, $1418);
      var $1419=$1;
      var $1420=(($1419+16)|0);
      var $1421=HEAP32[(($1420)>>2)];
      var $1422=(($1421)|(0))!=0;
      if ($1422) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 222; break;
    case 127: 
      var $1425=$1;
      var $1426=(($1425+8)|0);
      var $1427=HEAP32[(($1426)>>2)];
      var $1428=(($1427+16)|0);
      var $1429=HEAP32[(($1428)>>2)];
      $ci11=$1429;
      var $1430=$1;
      var $1431=(($1430+8)|0);
      var $1432=HEAP32[(($1431)>>2)];
      var $1433=(($1432+8)|0);
      var $1434=HEAP32[(($1433)>>2)];
      var $1435=$ci11;
      var $1436=(($1435+8)|0);
      var $1437=HEAP32[(($1436)>>2)];
      var $1438=(($1434+((($1437)*(12))&-1))|0);
      var $1439=$1;
      var $1440=(($1439+8)|0);
      var $1441=HEAP32[(($1440)>>2)];
      var $1442=(($1441+4)|0);
      HEAP32[(($1442)>>2)]=$1438;
      $regs=$1438;
      var $1443=$ci11;
      var $1444=(($1443+24)|0);
      var $1445=HEAP32[(($1444)>>2)];
      var $1446=$regs;
      var $1447=(($1446+((($1445)*(12))&-1))|0);
      var $1448=$1447;
      var $1449=$recv12;
      assert(12 % 1 === 0);HEAP32[(($1448)>>2)]=HEAP32[(($1449)>>2)];HEAP32[((($1448)+(4))>>2)]=HEAP32[((($1449)+(4))>>2)];HEAP32[((($1448)+(8))>>2)]=HEAP32[((($1449)+(8))>>2)];
      var $1450=$ci11;
      var $1451=(($1450+20)|0);
      var $1452=HEAP32[(($1451)>>2)];
      $pc=$1452;
      var $1453=$1;
      _cipop($1453);
      var $1454=$1;
      var $1455=(($1454+8)|0);
      var $1456=HEAP32[(($1455)>>2)];
      var $1457=(($1456+16)|0);
      var $1458=HEAP32[(($1457)>>2)];
      var $1459=(($1458+4)|0);
      var $1460=HEAP32[(($1459)>>2)];
      var $1461=(($1460+12)|0);
      var $1462=$1461;
      var $1463=HEAP32[(($1462)>>2)];
      $irep=$1463;
      var $1464=$irep;
      var $1465=(($1464+16)|0);
      var $1466=HEAP32[(($1465)>>2)];
      $pool=$1466;
      var $1467=$irep;
      var $1468=(($1467+20)|0);
      var $1469=HEAP32[(($1468)>>2)];
      $syms=$1469;
      var $1470=$pc;
      var $1471=HEAP32[(($1470)>>2)];
      $i=$1471;
      var $1472=$i;
      var $1473=$1472 & 127;
      var $1474=((77372+($1473<<2))|0);
      var $1475=HEAP32[(($1474)>>2)];
      var $5859 = $1475;label = 708; break;
    case 128: 
      var $1477=$m13;
      $2=$1477;
      var $1478=$m13;
      var $1479=(($1478+12)|0);
      var $1480=$1479;
      var $1481=HEAP32[(($1480)>>2)];
      $irep=$1481;
      var $1482=$irep;
      var $1483=(($1482)|(0))!=0;
      if ($1483) { label = 130; break; } else { label = 129; break; }
    case 129: 
      var $1485=$1;
      var $1486=(($1485+8)|0);
      var $1487=HEAP32[(($1486)>>2)];
      var $1488=(($1487+4)|0);
      var $1489=HEAP32[(($1488)>>2)];
      var $1490=(($1489)|0);
      _mrb_nil_value148($13);
      var $1491=$1490;
      var $1492=$13;
      assert(12 % 1 === 0);HEAP32[(($1491)>>2)]=HEAP32[(($1492)>>2)];HEAP32[((($1491)+(4))>>2)]=HEAP32[((($1492)+(4))>>2)];HEAP32[((($1491)+(8))>>2)]=HEAP32[((($1492)+(8))>>2)];
      label = 219; break;
    case 130: 
      var $1494=$irep;
      var $1495=(($1494+16)|0);
      var $1496=HEAP32[(($1495)>>2)];
      $pool=$1496;
      var $1497=$irep;
      var $1498=(($1497+20)|0);
      var $1499=HEAP32[(($1498)>>2)];
      $syms=$1499;
      var $1500=$irep;
      var $1501=(($1500+6)|0);
      var $1502=HEAP16[(($1501)>>1)];
      var $1503=(($1502)&(65535));
      var $1504=$ci11;
      var $1505=(($1504+12)|0);
      HEAP32[(($1505)>>2)]=$1503;
      var $1506=$ci11;
      var $1507=(($1506+16)|0);
      var $1508=HEAP32[(($1507)>>2)];
      var $1509=(($1508)|(0)) < 0;
      if ($1509) { label = 131; break; } else { label = 135; break; }
    case 131: 
      var $1511=$1;
      var $1512=$irep;
      var $1513=(($1512+6)|0);
      var $1514=HEAP16[(($1513)>>1)];
      var $1515=(($1514)&(65535));
      var $1516=(($1515)|(0)) < 3;
      if ($1516) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $1524 = 3;label = 134; break;
    case 133: 
      var $1519=$irep;
      var $1520=(($1519+6)|0);
      var $1521=HEAP16[(($1520)>>1)];
      var $1522=(($1521)&(65535));
      var $1524 = $1522;label = 134; break;
    case 134: 
      var $1524;
      _stack_extend($1511, $1524, 3);
      label = 136; break;
    case 135: 
      var $1526=$1;
      var $1527=$irep;
      var $1528=(($1527+6)|0);
      var $1529=HEAP16[(($1528)>>1)];
      var $1530=(($1529)&(65535));
      var $1531=$ci11;
      var $1532=(($1531+16)|0);
      var $1533=HEAP32[(($1532)>>2)];
      var $1534=((($1533)+(2))|0);
      _stack_extend($1526, $1530, $1534);
      label = 136; break;
    case 136: 
      var $1536=$1;
      var $1537=(($1536+8)|0);
      var $1538=HEAP32[(($1537)>>2)];
      var $1539=(($1538+4)|0);
      var $1540=HEAP32[(($1539)>>2)];
      $regs=$1540;
      var $1541=$regs;
      var $1542=(($1541)|0);
      var $1543=$m13;
      var $1544=(($1543+20)|0);
      var $1545=HEAP32[(($1544)>>2)];
      var $1546=(($1545+12)|0);
      var $1547=HEAP32[(($1546)>>2)];
      var $1548=(($1547)|0);
      var $1549=$1542;
      var $1550=$1548;
      assert(12 % 1 === 0);HEAP32[(($1549)>>2)]=HEAP32[(($1550)>>2)];HEAP32[((($1549)+(4))>>2)]=HEAP32[((($1550)+(4))>>2)];HEAP32[((($1549)+(8))>>2)]=HEAP32[((($1550)+(8))>>2)];
      var $1551=$m13;
      var $1552=(($1551+12)|0);
      var $1553=$1552;
      var $1554=HEAP32[(($1553)>>2)];
      var $1555=(($1554+12)|0);
      var $1556=HEAP32[(($1555)>>2)];
      $pc=$1556;
      var $1557=$pc;
      var $1558=HEAP32[(($1557)>>2)];
      $i=$1558;
      var $1559=$i;
      var $1560=$1559 & 127;
      var $1561=((77372+($1560<<2))|0);
      var $1562=HEAP32[(($1561)>>2)];
      var $5859 = $1562;label = 708; break;
    case 137: 
      var $1564=$1;
      var $1565=(($1564+8)|0);
      var $1566=HEAP32[(($1565)>>2)];
      var $1567=(($1566+16)|0);
      var $1568=HEAP32[(($1567)>>2)];
      $ci15=$1568;
      var $1569=$ci15;
      var $1570=(($1569)|0);
      var $1571=HEAP16[(($1570)>>1)];
      $mid18=$1571;
      var $1572=$i;
      var $1573=$1572 >>> 23;
      var $1574=$1573 & 511;
      $a19=$1574;
      var $1575=$i;
      var $1576=$1575 >>> 7;
      var $1577=$1576 & 127;
      $n20=$1577;
      var $1578=$regs;
      var $1579=(($1578)|0);
      var $1580=$recv14;
      var $1581=$1579;
      assert(12 % 1 === 0);HEAP32[(($1580)>>2)]=HEAP32[(($1581)>>2)];HEAP32[((($1580)+(4))>>2)]=HEAP32[((($1581)+(4))>>2)];HEAP32[((($1580)+(8))>>2)]=HEAP32[((($1581)+(8))>>2)];
      var $1582=$1;
      var $1583=(($1582+8)|0);
      var $1584=HEAP32[(($1583)>>2)];
      var $1585=(($1584+16)|0);
      var $1586=HEAP32[(($1585)>>2)];
      var $1587=(($1586+28)|0);
      var $1588=HEAP32[(($1587)>>2)];
      var $1589=(($1588+20)|0);
      var $1590=HEAP32[(($1589)>>2)];
      HEAP32[(($c17)>>2)]=$1590;
      var $1591=$1;
      var $1592=$mid18;
      var $1593=_mrb_method_search_vm($1591, $c17, $1592);
      $m16=$1593;
      var $1594=$m16;
      var $1595=(($1594)|(0))!=0;
      if ($1595) { label = 144; break; } else { label = 138; break; }
    case 138: 
      var $1597=$1;
      var $1598=_mrb_intern2($1597, ((104520)|0), 14);
      $mid18=$1598;
      var $1599=$1;
      var $1600=$mid18;
      var $1601=_mrb_method_search_vm($1599, $c17, $1600);
      $m16=$1601;
      var $1602=$n20;
      var $1603=(($1602)|(0))==127;
      if ($1603) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $1605=$1;
      var $1606=$a19;
      var $1607=((($1606)+(1))|0);
      var $1608=$regs;
      var $1609=(($1608+((($1607)*(12))&-1))|0);
      var $1610=$ci15;
      var $1611=(($1610)|0);
      var $1612=HEAP16[(($1611)>>1)];
      _mrb_symbol_value145($14, $1612);
      _mrb_ary_unshift($15, $1605, $1609, $14);
      label = 143; break;
    case 140: 
      var $1614=$regs;
      var $1615=$a19;
      var $1616=(($1614+((($1615)*(12))&-1))|0);
      var $1617=(($1616+24)|0);
      var $1618=$regs;
      var $1619=$a19;
      var $1620=(($1618+((($1619)*(12))&-1))|0);
      var $1621=(($1620+12)|0);
      var $1622=$n20;
      var $1623=((($1622)+(1))|0);
      $n20=$1623;
      _value_move($1617, $1621, $1623);
      label = 141; break;
    case 141: 
      var $1625=$a19;
      var $1626=((($1625)+(1))|0);
      var $1627=$regs;
      var $1628=(($1627+((($1626)*(12))&-1))|0);
      var $1629=(($1628+8)|0);
      HEAP32[(($1629)>>2)]=4;
      var $1630=$ci15;
      var $1631=(($1630)|0);
      var $1632=HEAP16[(($1631)>>1)];
      var $1633=$a19;
      var $1634=((($1633)+(1))|0);
      var $1635=$regs;
      var $1636=(($1635+((($1634)*(12))&-1))|0);
      var $1637=(($1636)|0);
      var $1638=$1637;
      HEAP16[(($1638)>>1)]=$1632;
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      var $1642=$1;
      var $1643=_cipush($1642);
      $ci15=$1643;
      var $1644=$mid18;
      var $1645=$ci15;
      var $1646=(($1645)|0);
      HEAP16[(($1646)>>1)]=$1644;
      var $1647=$m16;
      var $1648=$ci15;
      var $1649=(($1648+4)|0);
      HEAP32[(($1649)>>2)]=$1647;
      var $1650=$1;
      var $1651=(($1650+8)|0);
      var $1652=HEAP32[(($1651)>>2)];
      var $1653=(($1652+4)|0);
      var $1654=HEAP32[(($1653)>>2)];
      var $1655=$1;
      var $1656=(($1655+8)|0);
      var $1657=HEAP32[(($1656)>>2)];
      var $1658=(($1657+8)|0);
      var $1659=HEAP32[(($1658)>>2)];
      var $1660=$1654;
      var $1661=$1659;
      var $1662=((($1660)-($1661))|0);
      var $1663=((((($1662)|(0)))/(12))&-1);
      var $1664=$ci15;
      var $1665=(($1664+8)|0);
      HEAP32[(($1665)>>2)]=$1663;
      var $1666=$n20;
      var $1667=(($1666)|(0))==127;
      if ($1667) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $1669=$ci15;
      var $1670=(($1669+16)|0);
      HEAP32[(($1670)>>2)]=-1;
      label = 147; break;
    case 146: 
      var $1672=$n20;
      var $1673=$ci15;
      var $1674=(($1673+16)|0);
      HEAP32[(($1674)>>2)]=$1672;
      label = 147; break;
    case 147: 
      var $1676=$m16;
      var $1677=(($1676+16)|0);
      var $1678=HEAP32[(($1677)>>2)];
      var $1679=$ci15;
      var $1680=(($1679+28)|0);
      HEAP32[(($1680)>>2)]=$1678;
      var $1681=$pc;
      var $1682=(($1681+4)|0);
      var $1683=$ci15;
      var $1684=(($1683+20)|0);
      HEAP32[(($1684)>>2)]=$1682;
      var $1685=$a19;
      var $1686=$1;
      var $1687=(($1686+8)|0);
      var $1688=HEAP32[(($1687)>>2)];
      var $1689=(($1688+4)|0);
      var $1690=HEAP32[(($1689)>>2)];
      var $1691=(($1690+((($1685)*(12))&-1))|0);
      HEAP32[(($1689)>>2)]=$1691;
      var $1692=$1;
      var $1693=(($1692+8)|0);
      var $1694=HEAP32[(($1693)>>2)];
      var $1695=(($1694+4)|0);
      var $1696=HEAP32[(($1695)>>2)];
      var $1697=(($1696)|0);
      var $1698=$1697;
      var $1699=$recv14;
      assert(12 % 1 === 0);HEAP32[(($1698)>>2)]=HEAP32[(($1699)>>2)];HEAP32[((($1698)+(4))>>2)]=HEAP32[((($1699)+(4))>>2)];HEAP32[((($1698)+(8))>>2)]=HEAP32[((($1699)+(8))>>2)];
      var $1700=$m16;
      var $1701=$1700;
      var $1702=HEAP32[(($1701)>>2)];
      var $1703=$1702 >>> 11;
      var $1704=$1703 & 2097151;
      var $1705=$1704 & 128;
      var $1706=(($1705)|(0))!=0;
      if ($1706) { label = 148; break; } else { label = 151; break; }
    case 148: 
      var $1708=$1;
      var $1709=(($1708+8)|0);
      var $1710=HEAP32[(($1709)>>2)];
      var $1711=(($1710+4)|0);
      var $1712=HEAP32[(($1711)>>2)];
      var $1713=(($1712)|0);
      var $1714=$m16;
      var $1715=(($1714+12)|0);
      var $1716=$1715;
      var $1717=HEAP32[(($1716)>>2)];
      var $1718=$1;
      FUNCTION_TABLE[$1717]($16, $1718, $recv14);
      var $1719=$1713;
      var $1720=$16;
      assert(12 % 1 === 0);HEAP32[(($1719)>>2)]=HEAP32[(($1720)>>2)];HEAP32[((($1719)+(4))>>2)]=HEAP32[((($1720)+(4))>>2)];HEAP32[((($1719)+(8))>>2)]=HEAP32[((($1720)+(8))>>2)];
      var $1721=$1;
      var $1722=$ai;
      _mrb_gc_arena_restore($1721, $1722);
      var $1723=$1;
      var $1724=(($1723+16)|0);
      var $1725=HEAP32[(($1724)>>2)];
      var $1726=(($1725)|(0))!=0;
      if ($1726) { label = 149; break; } else { label = 150; break; }
    case 149: 
      label = 222; break;
    case 150: 
      var $1729=$1;
      var $1730=(($1729+8)|0);
      var $1731=HEAP32[(($1730)>>2)];
      var $1732=(($1731+8)|0);
      var $1733=HEAP32[(($1732)>>2)];
      var $1734=$1;
      var $1735=(($1734+8)|0);
      var $1736=HEAP32[(($1735)>>2)];
      var $1737=(($1736+16)|0);
      var $1738=HEAP32[(($1737)>>2)];
      var $1739=(($1738+8)|0);
      var $1740=HEAP32[(($1739)>>2)];
      var $1741=(($1733+((($1740)*(12))&-1))|0);
      var $1742=$1;
      var $1743=(($1742+8)|0);
      var $1744=HEAP32[(($1743)>>2)];
      var $1745=(($1744+4)|0);
      HEAP32[(($1745)>>2)]=$1741;
      $regs=$1741;
      var $1746=$1;
      _cipop($1746);
      var $1747=$pc;
      var $1748=(($1747+4)|0);
      $pc=$1748;
      var $1749=HEAP32[(($1748)>>2)];
      $i=$1749;
      var $1750=$i;
      var $1751=$1750 & 127;
      var $1752=((77372+($1751<<2))|0);
      var $1753=HEAP32[(($1752)>>2)];
      var $5859 = $1753;label = 708; break;
    case 151: 
      var $1755=$a19;
      var $1756=$ci15;
      var $1757=(($1756+24)|0);
      HEAP32[(($1757)>>2)]=$1755;
      var $1758=$m16;
      var $1759=$ci15;
      var $1760=(($1759+4)|0);
      HEAP32[(($1760)>>2)]=$1758;
      var $1761=$m16;
      var $1762=(($1761+12)|0);
      var $1763=$1762;
      var $1764=HEAP32[(($1763)>>2)];
      $irep=$1764;
      var $1765=$irep;
      var $1766=(($1765+16)|0);
      var $1767=HEAP32[(($1766)>>2)];
      $pool=$1767;
      var $1768=$irep;
      var $1769=(($1768+20)|0);
      var $1770=HEAP32[(($1769)>>2)];
      $syms=$1770;
      var $1771=$irep;
      var $1772=(($1771+6)|0);
      var $1773=HEAP16[(($1772)>>1)];
      var $1774=(($1773)&(65535));
      var $1775=$ci15;
      var $1776=(($1775+12)|0);
      HEAP32[(($1776)>>2)]=$1774;
      var $1777=$n20;
      var $1778=(($1777)|(0))==127;
      if ($1778) { label = 152; break; } else { label = 156; break; }
    case 152: 
      var $1780=$1;
      var $1781=$irep;
      var $1782=(($1781+6)|0);
      var $1783=HEAP16[(($1782)>>1)];
      var $1784=(($1783)&(65535));
      var $1785=(($1784)|(0)) < 3;
      if ($1785) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $1793 = 3;label = 155; break;
    case 154: 
      var $1788=$irep;
      var $1789=(($1788+6)|0);
      var $1790=HEAP16[(($1789)>>1)];
      var $1791=(($1790)&(65535));
      var $1793 = $1791;label = 155; break;
    case 155: 
      var $1793;
      _stack_extend($1780, $1793, 3);
      label = 157; break;
    case 156: 
      var $1795=$1;
      var $1796=$irep;
      var $1797=(($1796+6)|0);
      var $1798=HEAP16[(($1797)>>1)];
      var $1799=(($1798)&(65535));
      var $1800=$ci15;
      var $1801=(($1800+16)|0);
      var $1802=HEAP32[(($1801)>>2)];
      var $1803=((($1802)+(2))|0);
      _stack_extend($1795, $1799, $1803);
      label = 157; break;
    case 157: 
      var $1805=$1;
      var $1806=(($1805+8)|0);
      var $1807=HEAP32[(($1806)>>2)];
      var $1808=(($1807+4)|0);
      var $1809=HEAP32[(($1808)>>2)];
      $regs=$1809;
      var $1810=$irep;
      var $1811=(($1810+12)|0);
      var $1812=HEAP32[(($1811)>>2)];
      $pc=$1812;
      var $1813=$pc;
      var $1814=HEAP32[(($1813)>>2)];
      $i=$1814;
      var $1815=$i;
      var $1816=$1815 & 127;
      var $1817=((77372+($1816<<2))|0);
      var $1818=HEAP32[(($1817)>>2)];
      var $5859 = $1818;label = 708; break;
    case 158: 
      var $1820=$i;
      var $1821=$1820 >>> 23;
      var $1822=$1821 & 511;
      $a21=$1822;
      var $1823=$i;
      var $1824=$1823 >>> 7;
      var $1825=$1824 & 65535;
      $bx=$1825;
      var $1826=$bx;
      var $1827=$1826 >> 10;
      var $1828=$1827 & 63;
      $m1=$1828;
      var $1829=$bx;
      var $1830=$1829 >> 9;
      var $1831=$1830 & 1;
      $r=$1831;
      var $1832=$bx;
      var $1833=$1832 >> 4;
      var $1834=$1833 & 31;
      $m2=$1834;
      var $1835=$bx;
      var $1836=$1835 >> 0;
      var $1837=$1836 & 15;
      $lv=$1837;
      var $1838=$lv;
      var $1839=(($1838)|(0))==0;
      if ($1839) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $1841=$regs;
      var $1842=(($1841+12)|0);
      $stack=$1842;
      label = 163; break;
    case 160: 
      var $1844=$1;
      var $1845=$lv;
      var $1846=((($1845)-(1))|0);
      var $1847=_uvenv($1844, $1846);
      $e22=$1847;
      var $1848=$e22;
      var $1849=(($1848)|(0))!=0;
      if ($1849) { label = 162; break; } else { label = 161; break; }
    case 161: 
      var $1851=$1;
      var $1852=$1;
      var $1853=_mrb_class_get($1852, ((99080)|0));
      _mrb_exc_new($17, $1851, $1853, ((77704)|0), 30);
      var $1854=$exc;
      var $1855=$17;
      assert(12 % 1 === 0);HEAP32[(($1854)>>2)]=HEAP32[(($1855)>>2)];HEAP32[((($1854)+(4))>>2)]=HEAP32[((($1855)+(4))>>2)];HEAP32[((($1854)+(8))>>2)]=HEAP32[((($1855)+(8))>>2)];
      var $1856=(($exc)|0);
      var $1857=$1856;
      var $1858=HEAP32[(($1857)>>2)];
      var $1859=$1858;
      var $1860=$1;
      var $1861=(($1860+16)|0);
      HEAP32[(($1861)>>2)]=$1859;
      label = 222; break;
    case 162: 
      var $1863=$e22;
      var $1864=(($1863+12)|0);
      var $1865=HEAP32[(($1864)>>2)];
      var $1866=(($1865+12)|0);
      $stack=$1866;
      label = 163; break;
    case 163: 
      var $1868=$r;
      var $1869=(($1868)|(0))==0;
      if ($1869) { label = 164; break; } else { label = 165; break; }
    case 164: 
      var $1871=$a21;
      var $1872=$regs;
      var $1873=(($1872+((($1871)*(12))&-1))|0);
      var $1874=$1;
      var $1875=$m1;
      var $1876=$m2;
      var $1877=((($1875)+($1876))|0);
      var $1878=$stack;
      _mrb_ary_new_from_values($18, $1874, $1877, $1878);
      var $1879=$1873;
      var $1880=$18;
      assert(12 % 1 === 0);HEAP32[(($1879)>>2)]=HEAP32[(($1880)>>2)];HEAP32[((($1879)+(4))>>2)]=HEAP32[((($1880)+(4))>>2)];HEAP32[((($1879)+(8))>>2)]=HEAP32[((($1880)+(8))>>2)];
      label = 172; break;
    case 165: 
      $pp=0;
      $len=0;
      var $1882=$m1;
      var $1883=$stack;
      var $1884=(($1883+((($1882)*(12))&-1))|0);
      var $1885=(($1884+8)|0);
      var $1886=HEAP32[(($1885)>>2)];
      var $1887=(($1886)|(0))==14;
      if ($1887) { label = 166; break; } else { label = 167; break; }
    case 166: 
      var $1889=$m1;
      var $1890=$stack;
      var $1891=(($1890+((($1889)*(12))&-1))|0);
      var $1892=(($1891)|0);
      var $1893=$1892;
      var $1894=HEAP32[(($1893)>>2)];
      var $1895=$1894;
      $ary=$1895;
      var $1896=$ary;
      var $1897=(($1896+20)|0);
      var $1898=HEAP32[(($1897)>>2)];
      $pp=$1898;
      var $1899=$ary;
      var $1900=(($1899+12)|0);
      var $1901=HEAP32[(($1900)>>2)];
      $len=$1901;
      label = 167; break;
    case 167: 
      var $1903=$a21;
      var $1904=$regs;
      var $1905=(($1904+((($1903)*(12))&-1))|0);
      var $1906=$1;
      var $1907=$m1;
      var $1908=$len;
      var $1909=((($1907)+($1908))|0);
      var $1910=$m2;
      var $1911=((($1909)+($1910))|0);
      _mrb_ary_new_capa($19, $1906, $1911);
      var $1912=$1905;
      var $1913=$19;
      assert(12 % 1 === 0);HEAP32[(($1912)>>2)]=HEAP32[(($1913)>>2)];HEAP32[((($1912)+(4))>>2)]=HEAP32[((($1913)+(4))>>2)];HEAP32[((($1912)+(8))>>2)]=HEAP32[((($1913)+(8))>>2)];
      var $1914=$a21;
      var $1915=$regs;
      var $1916=(($1915+((($1914)*(12))&-1))|0);
      var $1917=(($1916)|0);
      var $1918=$1917;
      var $1919=HEAP32[(($1918)>>2)];
      var $1920=$1919;
      $rest=$1920;
      var $1921=$rest;
      var $1922=(($1921+20)|0);
      var $1923=HEAP32[(($1922)>>2)];
      var $1924=$stack;
      var $1925=$m1;
      _stack_copy($1923, $1924, $1925);
      var $1926=$len;
      var $1927=(($1926)|(0)) > 0;
      if ($1927) { label = 168; break; } else { label = 169; break; }
    case 168: 
      var $1929=$rest;
      var $1930=(($1929+20)|0);
      var $1931=HEAP32[(($1930)>>2)];
      var $1932=$m1;
      var $1933=(($1931+((($1932)*(12))&-1))|0);
      var $1934=$pp;
      var $1935=$len;
      _stack_copy($1933, $1934, $1935);
      label = 169; break;
    case 169: 
      var $1937=$m2;
      var $1938=(($1937)|(0)) > 0;
      if ($1938) { label = 170; break; } else { label = 171; break; }
    case 170: 
      var $1940=$rest;
      var $1941=(($1940+20)|0);
      var $1942=HEAP32[(($1941)>>2)];
      var $1943=$m1;
      var $1944=(($1942+((($1943)*(12))&-1))|0);
      var $1945=$len;
      var $1946=(($1944+((($1945)*(12))&-1))|0);
      var $1947=$stack;
      var $1948=$m1;
      var $1949=(($1947+((($1948)*(12))&-1))|0);
      var $1950=(($1949+12)|0);
      var $1951=$m2;
      _stack_copy($1946, $1950, $1951);
      label = 171; break;
    case 171: 
      var $1953=$m1;
      var $1954=$len;
      var $1955=((($1953)+($1954))|0);
      var $1956=$m2;
      var $1957=((($1955)+($1956))|0);
      var $1958=$rest;
      var $1959=(($1958+12)|0);
      HEAP32[(($1959)>>2)]=$1957;
      label = 172; break;
    case 172: 
      var $1961=$a21;
      var $1962=((($1961)+(1))|0);
      var $1963=$regs;
      var $1964=(($1963+((($1962)*(12))&-1))|0);
      var $1965=$m1;
      var $1966=$r;
      var $1967=((($1965)+($1966))|0);
      var $1968=$m2;
      var $1969=((($1967)+($1968))|0);
      var $1970=$stack;
      var $1971=(($1970+((($1969)*(12))&-1))|0);
      var $1972=$1964;
      var $1973=$1971;
      assert(12 % 1 === 0);HEAP32[(($1972)>>2)]=HEAP32[(($1973)>>2)];HEAP32[((($1972)+(4))>>2)]=HEAP32[((($1973)+(4))>>2)];HEAP32[((($1972)+(8))>>2)]=HEAP32[((($1973)+(8))>>2)];
      var $1974=$1;
      var $1975=$ai;
      _mrb_gc_arena_restore($1974, $1975);
      var $1976=$pc;
      var $1977=(($1976+4)|0);
      $pc=$1977;
      var $1978=HEAP32[(($1977)>>2)];
      $i=$1978;
      var $1979=$i;
      var $1980=$1979 & 127;
      var $1981=((77372+($1980<<2))|0);
      var $1982=HEAP32[(($1981)>>2)];
      var $5859 = $1982;label = 708; break;
    case 173: 
      var $1984=$i;
      var $1985=$1984 >>> 7;
      var $1986=$1985 & 33554431;
      $ax=$1986;
      var $1987=$ax;
      var $1988=$1987 >>> 18;
      var $1989=$1988 & 31;
      $m123=$1989;
      var $1990=$ax;
      var $1991=$1990 >>> 13;
      var $1992=$1991 & 31;
      $o=$1992;
      var $1993=$ax;
      var $1994=$1993 >>> 12;
      var $1995=$1994 & 1;
      $r24=$1995;
      var $1996=$ax;
      var $1997=$1996 >>> 7;
      var $1998=$1997 & 31;
      $m225=$1998;
      var $1999=$1;
      var $2000=(($1999+8)|0);
      var $2001=HEAP32[(($2000)>>2)];
      var $2002=(($2001+16)|0);
      var $2003=HEAP32[(($2002)>>2)];
      var $2004=(($2003+16)|0);
      var $2005=HEAP32[(($2004)>>2)];
      $argc=$2005;
      var $2006=$regs;
      var $2007=(($2006+12)|0);
      $argv=$2007;
      var $2008=$argv;
      $argv0=$2008;
      var $2009=$m123;
      var $2010=$o;
      var $2011=((($2009)+($2010))|0);
      var $2012=$r24;
      var $2013=((($2011)+($2012))|0);
      var $2014=$m225;
      var $2015=((($2013)+($2014))|0);
      $len26=$2015;
      var $2016=$argc;
      var $2017=(($2016)|(0)) < 0;
      if ($2017) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $2022 = 1;label = 176; break;
    case 175: 
      var $2020=$argc;
      var $2022 = $2020;label = 176; break;
    case 176: 
      var $2022;
      var $2023=$argv;
      var $2024=(($2023+((($2022)*(12))&-1))|0);
      $blk=$2024;
      var $2025=$argc;
      var $2026=(($2025)|(0)) < 0;
      if ($2026) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $2028=$regs;
      var $2029=(($2028+12)|0);
      var $2030=(($2029)|0);
      var $2031=$2030;
      var $2032=HEAP32[(($2031)>>2)];
      var $2033=$2032;
      $ary27=$2033;
      var $2034=$ary27;
      var $2035=(($2034+20)|0);
      var $2036=HEAP32[(($2035)>>2)];
      $argv=$2036;
      var $2037=$ary27;
      var $2038=(($2037+12)|0);
      var $2039=HEAP32[(($2038)>>2)];
      $argc=$2039;
      var $2040=$1;
      var $2041=$regs;
      var $2042=(($2041+12)|0);
      _mrb_gc_protect($2040, $2042);
      label = 178; break;
    case 178: 
      var $2044=$1;
      var $2045=(($2044+8)|0);
      var $2046=HEAP32[(($2045)>>2)];
      var $2047=(($2046+16)|0);
      var $2048=HEAP32[(($2047)>>2)];
      var $2049=(($2048+4)|0);
      var $2050=HEAP32[(($2049)>>2)];
      var $2051=(($2050)|(0))!=0;
      if ($2051) { label = 179; break; } else { label = 187; break; }
    case 179: 
      var $2053=$1;
      var $2054=(($2053+8)|0);
      var $2055=HEAP32[(($2054)>>2)];
      var $2056=(($2055+16)|0);
      var $2057=HEAP32[(($2056)>>2)];
      var $2058=(($2057+4)|0);
      var $2059=HEAP32[(($2058)>>2)];
      var $2060=$2059;
      var $2061=HEAP32[(($2060)>>2)];
      var $2062=$2061 >>> 11;
      var $2063=$2062 & 2097151;
      var $2064=$2063 & 256;
      var $2065=(($2064)|(0))!=0;
      if ($2065) { label = 180; break; } else { label = 187; break; }
    case 180: 
      var $2067=$argc;
      var $2068=(($2067)|(0)) >= 0;
      if ($2068) { label = 181; break; } else { label = 186; break; }
    case 181: 
      var $2070=$argc;
      var $2071=$m123;
      var $2072=$m225;
      var $2073=((($2071)+($2072))|0);
      var $2074=(($2070)|(0)) < (($2073)|(0));
      if ($2074) { label = 184; break; } else { label = 182; break; }
    case 182: 
      var $2076=$r24;
      var $2077=(($2076)|(0))==0;
      if ($2077) { label = 183; break; } else { label = 185; break; }
    case 183: 
      var $2079=$argc;
      var $2080=$len26;
      var $2081=(($2079)|(0)) > (($2080)|(0));
      if ($2081) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $2083=$1;
      var $2084=$m123;
      var $2085=$m225;
      var $2086=((($2084)+($2085))|0);
      _argnum_error($2083, $2086);
      label = 222; break;
    case 185: 
      label = 186; break;
    case 186: 
      label = 192; break;
    case 187: 
      var $2090=$len26;
      var $2091=(($2090)|(0)) > 1;
      if ($2091) { label = 188; break; } else { label = 191; break; }
    case 188: 
      var $2093=$argc;
      var $2094=(($2093)|(0))==1;
      if ($2094) { label = 189; break; } else { label = 191; break; }
    case 189: 
      var $2096=$argv;
      var $2097=(($2096)|0);
      var $2098=(($2097+8)|0);
      var $2099=HEAP32[(($2098)>>2)];
      var $2100=(($2099)|(0))==14;
      if ($2100) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $2102=$argv;
      var $2103=(($2102)|0);
      var $2104=(($2103)|0);
      var $2105=$2104;
      var $2106=HEAP32[(($2105)>>2)];
      var $2107=$2106;
      var $2108=(($2107+12)|0);
      var $2109=HEAP32[(($2108)>>2)];
      $argc=$2109;
      var $2110=$argv;
      var $2111=(($2110)|0);
      var $2112=(($2111)|0);
      var $2113=$2112;
      var $2114=HEAP32[(($2113)>>2)];
      var $2115=$2114;
      var $2116=(($2115+20)|0);
      var $2117=HEAP32[(($2116)>>2)];
      $argv=$2117;
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      var $2120=$len26;
      var $2121=$1;
      var $2122=(($2121+8)|0);
      var $2123=HEAP32[(($2122)>>2)];
      var $2124=(($2123+16)|0);
      var $2125=HEAP32[(($2124)>>2)];
      var $2126=(($2125+16)|0);
      HEAP32[(($2126)>>2)]=$2120;
      var $2127=$argc;
      var $2128=$len26;
      var $2129=(($2127)|(0)) < (($2128)|(0));
      if ($2129) { label = 193; break; } else { label = 205; break; }
    case 193: 
      var $2131=$len26;
      var $2132=((($2131)+(1))|0);
      var $2133=$regs;
      var $2134=(($2133+((($2132)*(12))&-1))|0);
      var $2135=$blk;
      var $2136=$2134;
      var $2137=$2135;
      assert(12 % 1 === 0);HEAP32[(($2136)>>2)]=HEAP32[(($2137)>>2)];HEAP32[((($2136)+(4))>>2)]=HEAP32[((($2137)+(4))>>2)];HEAP32[((($2136)+(8))>>2)]=HEAP32[((($2137)+(8))>>2)];
      var $2138=$argv0;
      var $2139=$argv;
      var $2140=(($2138)|(0))!=(($2139)|(0));
      if ($2140) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $2142=$regs;
      var $2143=(($2142+12)|0);
      var $2144=$argv;
      var $2145=$argc;
      var $2146=$m225;
      var $2147=((($2145)-($2146))|0);
      _value_move($2143, $2144, $2147);
      label = 195; break;
    case 195: 
      var $2149=$m225;
      var $2150=(($2149)|(0))!=0;
      if ($2150) { label = 196; break; } else { label = 199; break; }
    case 196: 
      var $2152=$m225;
      $mlen=$2152;
      var $2153=$argc;
      var $2154=$m225;
      var $2155=((($2153)-($2154))|0);
      var $2156=$m123;
      var $2157=(($2155)|(0)) <= (($2156)|(0));
      if ($2157) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $2159=$argc;
      var $2160=$m123;
      var $2161=((($2159)-($2160))|0);
      $mlen=$2161;
      label = 198; break;
    case 198: 
      var $2163=$len26;
      var $2164=$m225;
      var $2165=((($2163)-($2164))|0);
      var $2166=((($2165)+(1))|0);
      var $2167=$regs;
      var $2168=(($2167+((($2166)*(12))&-1))|0);
      var $2169=$argc;
      var $2170=$mlen;
      var $2171=((($2169)-($2170))|0);
      var $2172=$argv;
      var $2173=(($2172+((($2171)*(12))&-1))|0);
      var $2174=$mlen;
      _value_move($2168, $2173, $2174);
      label = 199; break;
    case 199: 
      var $2176=$r24;
      var $2177=(($2176)|(0))!=0;
      if ($2177) { label = 200; break; } else { label = 201; break; }
    case 200: 
      var $2179=$m123;
      var $2180=$o;
      var $2181=((($2179)+($2180))|0);
      var $2182=((($2181)+(1))|0);
      var $2183=$regs;
      var $2184=(($2183+((($2182)*(12))&-1))|0);
      var $2185=$1;
      _mrb_ary_new_capa($20, $2185, 0);
      var $2186=$2184;
      var $2187=$20;
      assert(12 % 1 === 0);HEAP32[(($2186)>>2)]=HEAP32[(($2187)>>2)];HEAP32[((($2186)+(4))>>2)]=HEAP32[((($2187)+(4))>>2)];HEAP32[((($2186)+(8))>>2)]=HEAP32[((($2187)+(8))>>2)];
      label = 201; break;
    case 201: 
      var $2189=$o;
      var $2190=(($2189)|(0))==0;
      if ($2190) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $2192=$pc;
      var $2193=(($2192+4)|0);
      $pc=$2193;
      label = 204; break;
    case 203: 
      var $2195=$argc;
      var $2196=$m123;
      var $2197=((($2195)-($2196))|0);
      var $2198=$m225;
      var $2199=((($2197)-($2198))|0);
      var $2200=((($2199)+(1))|0);
      var $2201=$pc;
      var $2202=(($2201+($2200<<2))|0);
      $pc=$2202;
      label = 204; break;
    case 204: 
      label = 216; break;
    case 205: 
      var $2205=$argv0;
      var $2206=$argv;
      var $2207=(($2205)|(0))!=(($2206)|(0));
      if ($2207) { label = 206; break; } else { label = 207; break; }
    case 206: 
      var $2209=$len26;
      var $2210=((($2209)+(1))|0);
      var $2211=$regs;
      var $2212=(($2211+((($2210)*(12))&-1))|0);
      var $2213=$blk;
      var $2214=$2212;
      var $2215=$2213;
      assert(12 % 1 === 0);HEAP32[(($2214)>>2)]=HEAP32[(($2215)>>2)];HEAP32[((($2214)+(4))>>2)]=HEAP32[((($2215)+(4))>>2)];HEAP32[((($2214)+(8))>>2)]=HEAP32[((($2215)+(8))>>2)];
      var $2216=$regs;
      var $2217=(($2216+12)|0);
      var $2218=$argv;
      var $2219=$m123;
      var $2220=$o;
      var $2221=((($2219)+($2220))|0);
      _value_move($2217, $2218, $2221);
      label = 207; break;
    case 207: 
      var $2223=$r24;
      var $2224=(($2223)|(0))!=0;
      if ($2224) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $2226=$m123;
      var $2227=$o;
      var $2228=((($2226)+($2227))|0);
      var $2229=((($2228)+(1))|0);
      var $2230=$regs;
      var $2231=(($2230+((($2229)*(12))&-1))|0);
      var $2232=$1;
      var $2233=$argc;
      var $2234=$m123;
      var $2235=((($2233)-($2234))|0);
      var $2236=$o;
      var $2237=((($2235)-($2236))|0);
      var $2238=$m225;
      var $2239=((($2237)-($2238))|0);
      var $2240=$argv;
      var $2241=$m123;
      var $2242=(($2240+((($2241)*(12))&-1))|0);
      var $2243=$o;
      var $2244=(($2242+((($2243)*(12))&-1))|0);
      _mrb_ary_new_from_values($21, $2232, $2239, $2244);
      var $2245=$2231;
      var $2246=$21;
      assert(12 % 1 === 0);HEAP32[(($2245)>>2)]=HEAP32[(($2246)>>2)];HEAP32[((($2245)+(4))>>2)]=HEAP32[((($2246)+(4))>>2)];HEAP32[((($2245)+(8))>>2)]=HEAP32[((($2246)+(8))>>2)];
      label = 209; break;
    case 209: 
      var $2248=$m225;
      var $2249=(($2248)|(0))!=0;
      if ($2249) { label = 210; break; } else { label = 213; break; }
    case 210: 
      var $2251=$argc;
      var $2252=$m225;
      var $2253=((($2251)-($2252))|0);
      var $2254=$m123;
      var $2255=(($2253)|(0)) > (($2254)|(0));
      if ($2255) { label = 211; break; } else { label = 212; break; }
    case 211: 
      var $2257=$m123;
      var $2258=$o;
      var $2259=((($2257)+($2258))|0);
      var $2260=$r24;
      var $2261=((($2259)+($2260))|0);
      var $2262=((($2261)+(1))|0);
      var $2263=$regs;
      var $2264=(($2263+((($2262)*(12))&-1))|0);
      var $2265=$argc;
      var $2266=$m225;
      var $2267=((($2265)-($2266))|0);
      var $2268=$argv;
      var $2269=(($2268+((($2267)*(12))&-1))|0);
      var $2270=$m225;
      _value_move($2264, $2269, $2270);
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      var $2273=$argv0;
      var $2274=$argv;
      var $2275=(($2273)|(0))==(($2274)|(0));
      if ($2275) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $2277=$len26;
      var $2278=((($2277)+(1))|0);
      var $2279=$regs;
      var $2280=(($2279+((($2278)*(12))&-1))|0);
      var $2281=$blk;
      var $2282=$2280;
      var $2283=$2281;
      assert(12 % 1 === 0);HEAP32[(($2282)>>2)]=HEAP32[(($2283)>>2)];HEAP32[((($2282)+(4))>>2)]=HEAP32[((($2283)+(4))>>2)];HEAP32[((($2282)+(8))>>2)]=HEAP32[((($2283)+(8))>>2)];
      label = 215; break;
    case 215: 
      var $2285=$o;
      var $2286=((($2285)+(1))|0);
      var $2287=$pc;
      var $2288=(($2287+($2286<<2))|0);
      $pc=$2288;
      label = 216; break;
    case 216: 
      var $2290=$pc;
      var $2291=HEAP32[(($2290)>>2)];
      $i=$2291;
      var $2292=$i;
      var $2293=$2292 & 127;
      var $2294=((77372+($2293<<2))|0);
      var $2295=HEAP32[(($2294)>>2)];
      var $5859 = $2295;label = 708; break;
    case 217: 
      var $2297=$pc;
      var $2298=(($2297+4)|0);
      $pc=$2298;
      var $2299=HEAP32[(($2298)>>2)];
      $i=$2299;
      var $2300=$i;
      var $2301=$2300 & 127;
      var $2302=((77372+($2301<<2))|0);
      var $2303=HEAP32[(($2302)>>2)];
      var $5859 = $2303;label = 708; break;
    case 218: 
      var $2305=$pc;
      var $2306=(($2305+4)|0);
      $pc=$2306;
      var $2307=HEAP32[(($2306)>>2)];
      $i=$2307;
      var $2308=$i;
      var $2309=$2308 & 127;
      var $2310=((77372+($2309<<2))|0);
      var $2311=HEAP32[(($2310)>>2)];
      var $5859 = $2311;label = 708; break;
    case 219: 
      var $2313=$i;
      var $2314=$2313 >>> 23;
      var $2315=$2314 & 511;
      var $2316=$2315 & 511;
      var $2317=$2316 << 23;
      var $2318=41 | $2317;
      $i=$2318;
      label = 220; break;
    case 220: 
      var $2320=$1;
      var $2321=(($2320+16)|0);
      var $2322=HEAP32[(($2321)>>2)];
      var $2323=(($2322)|(0))!=0;
      if ($2323) { label = 221; break; } else { label = 244; break; }
    case 221: 
      label = 222; break;
    case 222: 
      var $2326=$1;
      var $2327=(($2326+8)|0);
      var $2328=HEAP32[(($2327)>>2)];
      var $2329=(($2328+16)|0);
      var $2330=HEAP32[(($2329)>>2)];
      $ci28=$2330;
      var $2331=$1;
      var $2332=$1;
      var $2333=(($2332+16)|0);
      var $2334=HEAP32[(($2333)>>2)];
      var $2335=$1;
      var $2336=_mrb_intern2($2335, ((96976)|0), 6);
      var $2337=$pc;
      var $2338=$2337;
      _mrb_voidp_value($22, $2338);
      _mrb_obj_iv_ifnone($2331, $2334, $2336, $22);
      var $2339=$1;
      var $2340=$1;
      var $2341=(($2340+16)|0);
      var $2342=HEAP32[(($2341)>>2)];
      var $2343=$1;
      var $2344=_mrb_intern2($2343, ((95784)|0), 5);
      var $2345=$ci28;
      var $2346=$1;
      var $2347=(($2346+8)|0);
      var $2348=HEAP32[(($2347)>>2)];
      var $2349=(($2348+20)|0);
      var $2350=HEAP32[(($2349)>>2)];
      var $2351=$2345;
      var $2352=$2350;
      var $2353=((($2351)-($2352))|0);
      var $2354=((((($2353)|(0)))/(44))&-1);
      _mrb_fixnum_value144($23, $2354);
      _mrb_obj_iv_ifnone($2339, $2342, $2344, $23);
      var $2355=$ci28;
      var $2356=(($2355+36)|0);
      var $2357=HEAP32[(($2356)>>2)];
      $eidx=$2357;
      var $2358=$ci28;
      var $2359=$1;
      var $2360=(($2359+8)|0);
      var $2361=HEAP32[(($2360)>>2)];
      var $2362=(($2361+20)|0);
      var $2363=HEAP32[(($2362)>>2)];
      var $2364=(($2358)|(0))==(($2363)|(0));
      if ($2364) { label = 223; break; } else { label = 226; break; }
    case 223: 
      var $2366=$ci28;
      var $2367=(($2366+32)|0);
      var $2368=HEAP32[(($2367)>>2)];
      var $2369=(($2368)|(0))==0;
      if ($2369) { label = 224; break; } else { label = 225; break; }
    case 224: 
      label = 697; break;
    case 225: 
      label = 243; break;
    case 226: 
      label = 227; break;
    case 227: 
      var $2374=$eidx;
      var $2375=$ci28;
      var $2376=((($2375)-(44))|0);
      var $2377=(($2376+36)|0);
      var $2378=HEAP32[(($2377)>>2)];
      var $2379=(($2374)|(0)) > (($2378)|(0));
      if ($2379) { label = 228; break; } else { label = 229; break; }
    case 228: 
      var $2381=$1;
      var $2382=$eidx;
      var $2383=((($2382)-(1))|0);
      $eidx=$2383;
      _ecall($2381, $2383);
      label = 227; break;
    case 229: 
      label = 230; break;
    case 230: 
      var $2386=$ci28;
      var $2387=(($2386)|0);
      var $2388=(($2387+32)|0);
      var $2389=HEAP32[(($2388)>>2)];
      var $2390=$ci28;
      var $2391=((($2390)-(44))|0);
      var $2392=(($2391+32)|0);
      var $2393=HEAP32[(($2392)>>2)];
      var $2394=(($2389)|(0))==(($2393)|(0));
      if ($2394) { label = 231; break; } else { label = 242; break; }
    case 231: 
      var $2396=$1;
      _cipop($2396);
      var $2397=$1;
      var $2398=(($2397+8)|0);
      var $2399=HEAP32[(($2398)>>2)];
      var $2400=(($2399+16)|0);
      var $2401=HEAP32[(($2400)>>2)];
      $ci28=$2401;
      var $2402=$1;
      var $2403=(($2402+8)|0);
      var $2404=HEAP32[(($2403)>>2)];
      var $2405=(($2404+8)|0);
      var $2406=HEAP32[(($2405)>>2)];
      var $2407=$ci28;
      var $2408=(($2407+44)|0);
      var $2409=(($2408+8)|0);
      var $2410=HEAP32[(($2409)>>2)];
      var $2411=(($2406+((($2410)*(12))&-1))|0);
      var $2412=$1;
      var $2413=(($2412+8)|0);
      var $2414=HEAP32[(($2413)>>2)];
      var $2415=(($2414+4)|0);
      HEAP32[(($2415)>>2)]=$2411;
      var $2416=$ci28;
      var $2417=(($2416+44)|0);
      var $2418=(($2417+24)|0);
      var $2419=HEAP32[(($2418)>>2)];
      var $2420=(($2419)|(0)) < 0;
      if ($2420) { label = 232; break; } else { label = 234; break; }
    case 232: 
      var $2422=$prev_jmp;
      var $2423=(($2422)|(0))!=0;
      if ($2423) { label = 233; break; } else { label = 234; break; }
    case 233: 
      var $2425=$prev_jmp;
      var $2426=$2425;
      var $2427=$1;
      var $2428=(($2427)|0);
      HEAP32[(($2428)>>2)]=$2426;
      var $2429=$1;
      var $2430=(($2429)|0);
      var $2431=HEAP32[(($2430)>>2)];
      var $2432=$2431;
      var $2433=(($2432)|0);
      _longjmp($2433, 1);
      throw "Reached an unreachable!";
    case 234: 
      label = 235; break;
    case 235: 
      var $2436=$eidx;
      var $2437=$ci28;
      var $2438=(($2437+36)|0);
      var $2439=HEAP32[(($2438)>>2)];
      var $2440=(($2436)|(0)) > (($2439)|(0));
      if ($2440) { label = 236; break; } else { label = 237; break; }
    case 236: 
      var $2442=$1;
      var $2443=$eidx;
      var $2444=((($2443)-(1))|0);
      $eidx=$2444;
      _ecall($2442, $2444);
      label = 235; break;
    case 237: 
      var $2446=$ci28;
      var $2447=$1;
      var $2448=(($2447+8)|0);
      var $2449=HEAP32[(($2448)>>2)];
      var $2450=(($2449+20)|0);
      var $2451=HEAP32[(($2450)>>2)];
      var $2452=(($2446)|(0))==(($2451)|(0));
      if ($2452) { label = 238; break; } else { label = 241; break; }
    case 238: 
      var $2454=$ci28;
      var $2455=(($2454+32)|0);
      var $2456=HEAP32[(($2455)>>2)];
      var $2457=(($2456)|(0))==0;
      if ($2457) { label = 239; break; } else { label = 240; break; }
    case 239: 
      var $2459=$1;
      var $2460=(($2459+8)|0);
      var $2461=HEAP32[(($2460)>>2)];
      var $2462=(($2461+8)|0);
      var $2463=HEAP32[(($2462)>>2)];
      var $2464=$1;
      var $2465=(($2464+8)|0);
      var $2466=HEAP32[(($2465)>>2)];
      var $2467=(($2466+4)|0);
      HEAP32[(($2467)>>2)]=$2463;
      $regs=$2463;
      label = 697; break;
    case 240: 
      label = 242; break;
    case 241: 
      label = 230; break;
    case 242: 
      label = 243; break;
    case 243: 
      var $2472=$ci28;
      var $2473=(($2472+4)|0);
      var $2474=HEAP32[(($2473)>>2)];
      var $2475=(($2474+12)|0);
      var $2476=$2475;
      var $2477=HEAP32[(($2476)>>2)];
      $irep=$2477;
      var $2478=$irep;
      var $2479=(($2478+16)|0);
      var $2480=HEAP32[(($2479)>>2)];
      $pool=$2480;
      var $2481=$irep;
      var $2482=(($2481+20)|0);
      var $2483=HEAP32[(($2482)>>2)];
      $syms=$2483;
      var $2484=$1;
      var $2485=(($2484+8)|0);
      var $2486=HEAP32[(($2485)>>2)];
      var $2487=(($2486+8)|0);
      var $2488=HEAP32[(($2487)>>2)];
      var $2489=$ci28;
      var $2490=(($2489+44)|0);
      var $2491=(($2490+8)|0);
      var $2492=HEAP32[(($2491)>>2)];
      var $2493=(($2488+((($2492)*(12))&-1))|0);
      var $2494=$1;
      var $2495=(($2494+8)|0);
      var $2496=HEAP32[(($2495)>>2)];
      var $2497=(($2496+4)|0);
      HEAP32[(($2497)>>2)]=$2493;
      $regs=$2493;
      var $2498=$ci28;
      var $2499=(($2498+32)|0);
      var $2500=HEAP32[(($2499)>>2)];
      var $2501=((($2500)-(1))|0);
      HEAP32[(($2499)>>2)]=$2501;
      var $2502=$1;
      var $2503=(($2502+8)|0);
      var $2504=HEAP32[(($2503)>>2)];
      var $2505=(($2504+28)|0);
      var $2506=HEAP32[(($2505)>>2)];
      var $2507=(($2506+($2501<<2))|0);
      var $2508=HEAP32[(($2507)>>2)];
      $pc=$2508;
      label = 270; break;
    case 244: 
      var $2510=$1;
      var $2511=(($2510+8)|0);
      var $2512=HEAP32[(($2511)>>2)];
      var $2513=(($2512+16)|0);
      var $2514=HEAP32[(($2513)>>2)];
      $ci29=$2514;
      var $2515=$1;
      var $2516=(($2515+8)|0);
      var $2517=HEAP32[(($2516)>>2)];
      var $2518=(($2517+16)|0);
      var $2519=HEAP32[(($2518)>>2)];
      var $2520=(($2519+36)|0);
      var $2521=HEAP32[(($2520)>>2)];
      $eidx30=$2521;
      var $2522=$i;
      var $2523=$2522 >>> 23;
      var $2524=$2523 & 511;
      var $2525=$regs;
      var $2526=(($2525+((($2524)*(12))&-1))|0);
      var $2527=$v;
      var $2528=$2526;
      assert(12 % 1 === 0);HEAP32[(($2527)>>2)]=HEAP32[(($2528)>>2)];HEAP32[((($2527)+(4))>>2)]=HEAP32[((($2528)+(4))>>2)];HEAP32[((($2527)+(8))>>2)]=HEAP32[((($2528)+(8))>>2)];
      var $2529=$i;
      var $2530=$2529 >>> 14;
      var $2531=$2530 & 511;
      if ((($2531)|(0))==2) {
        label = 245; break;
      }
      else if ((($2531)|(0))==0) {
        label = 253; break;
      }
      else if ((($2531)|(0))==1) {
        label = 260; break;
      }
      else {
      label = 263; break;
      }
    case 245: 
      var $2533=$2;
      var $2534=(($2533+20)|0);
      var $2535=HEAP32[(($2534)>>2)];
      var $2536=(($2535)|(0))!=0;
      if ($2536) { label = 246; break; } else { label = 252; break; }
    case 246: 
      var $2538=$2;
      var $2539=$2538;
      var $2540=HEAP32[(($2539)>>2)];
      var $2541=$2540 >>> 11;
      var $2542=$2541 & 2097151;
      var $2543=$2542 & 256;
      var $2544=(($2543)|(0))!=0;
      if ($2544) { label = 252; break; } else { label = 247; break; }
    case 247: 
      var $2546=$1;
      var $2547=$2;
      var $2548=_top_env($2546, $2547);
      $e31=$2548;
      var $2549=$e31;
      var $2550=(($2549+20)|0);
      var $2551=HEAP32[(($2550)>>2)];
      var $2552=(($2551)|(0)) < 0;
      if ($2552) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $2554=$1;
      _localjump_error($2554, 0);
      label = 222; break;
    case 249: 
      var $2556=$1;
      var $2557=(($2556+8)|0);
      var $2558=HEAP32[(($2557)>>2)];
      var $2559=(($2558+20)|0);
      var $2560=HEAP32[(($2559)>>2)];
      var $2561=$e31;
      var $2562=(($2561+20)|0);
      var $2563=HEAP32[(($2562)>>2)];
      var $2564=(($2560+((($2563)*(44))&-1))|0);
      $ci29=$2564;
      var $2565=$ci29;
      var $2566=$1;
      var $2567=(($2566+8)|0);
      var $2568=HEAP32[(($2567)>>2)];
      var $2569=(($2568+20)|0);
      var $2570=HEAP32[(($2569)>>2)];
      var $2571=(($2565)|(0))==(($2570)|(0));
      if ($2571) { label = 250; break; } else { label = 251; break; }
    case 250: 
      var $2573=$1;
      _localjump_error($2573, 0);
      label = 222; break;
    case 251: 
      var $2575=$ci29;
      var $2576=$1;
      var $2577=(($2576+8)|0);
      var $2578=HEAP32[(($2577)>>2)];
      var $2579=(($2578+16)|0);
      HEAP32[(($2579)>>2)]=$2575;
      label = 264; break;
    case 252: 
      label = 253; break;
    case 253: 
      var $2582=$ci29;
      var $2583=$1;
      var $2584=(($2583+8)|0);
      var $2585=HEAP32[(($2584)>>2)];
      var $2586=(($2585+20)|0);
      var $2587=HEAP32[(($2586)>>2)];
      var $2588=(($2582)|(0))==(($2587)|(0));
      if ($2588) { label = 254; break; } else { label = 259; break; }
    case 254: 
      var $2590=$1;
      var $2591=(($2590+8)|0);
      var $2592=HEAP32[(($2591)>>2)];
      var $2593=(($2592)|0);
      var $2594=HEAP32[(($2593)>>2)];
      var $2595=(($2594)|(0))!=0;
      if ($2595) { label = 256; break; } else { label = 255; break; }
    case 255: 
      var $2597=$1;
      _localjump_error($2597, 0);
      label = 222; break;
    case 256: 
      var $2599=$1;
      var $2600=(($2599+8)|0);
      var $2601=HEAP32[(($2600)>>2)];
      var $2602=(($2601)|0);
      var $2603=HEAP32[(($2602)>>2)];
      var $2604=(($2603+16)|0);
      var $2605=HEAP32[(($2604)>>2)];
      var $2606=$1;
      var $2607=(($2606+8)|0);
      var $2608=HEAP32[(($2607)>>2)];
      var $2609=(($2608)|0);
      var $2610=HEAP32[(($2609)>>2)];
      var $2611=(($2610+20)|0);
      var $2612=HEAP32[(($2611)>>2)];
      var $2613=(($2605)|(0))==(($2612)|(0));
      if ($2613) { label = 257; break; } else { label = 258; break; }
    case 257: 
      var $2615=$1;
      var $2616=$1;
      var $2617=_mrb_class_get($2616, ((94760)|0));
      var $2618=$1;
      _mrb_str_new($24, $2618, ((93952)|0), 13);
      _mrb_exc_new3($exc32, $2615, $2617, $24);
      var $2619=(($exc32)|0);
      var $2620=$2619;
      var $2621=HEAP32[(($2620)>>2)];
      var $2622=$2621;
      var $2623=$1;
      var $2624=(($2623+16)|0);
      HEAP32[(($2624)>>2)]=$2622;
      label = 222; break;
    case 258: 
      var $2626=$1;
      var $2627=(($2626+8)|0);
      var $2628=HEAP32[(($2627)>>2)];
      var $2629=(($2628+44)|0);
      HEAP8[($2629)]=3;
      var $2630=$1;
      var $2631=(($2630+8)|0);
      var $2632=HEAP32[(($2631)>>2)];
      var $2633=(($2632)|0);
      var $2634=HEAP32[(($2633)>>2)];
      var $2635=$1;
      var $2636=(($2635+8)|0);
      HEAP32[(($2636)>>2)]=$2634;
      label = 259; break;
    case 259: 
      var $2638=$1;
      var $2639=(($2638+8)|0);
      var $2640=HEAP32[(($2639)>>2)];
      var $2641=(($2640+16)|0);
      var $2642=HEAP32[(($2641)>>2)];
      $ci29=$2642;
      label = 264; break;
    case 260: 
      var $2644=$2;
      var $2645=(($2644+20)|0);
      var $2646=HEAP32[(($2645)>>2)];
      var $2647=(($2646+20)|0);
      var $2648=HEAP32[(($2647)>>2)];
      var $2649=(($2648)|(0)) < 0;
      if ($2649) { label = 261; break; } else { label = 262; break; }
    case 261: 
      var $2651=$1;
      _localjump_error($2651, 1);
      label = 222; break;
    case 262: 
      var $2653=$1;
      var $2654=(($2653+8)|0);
      var $2655=HEAP32[(($2654)>>2)];
      var $2656=(($2655+20)|0);
      var $2657=HEAP32[(($2656)>>2)];
      var $2658=$2;
      var $2659=(($2658+20)|0);
      var $2660=HEAP32[(($2659)>>2)];
      var $2661=(($2660+20)|0);
      var $2662=HEAP32[(($2661)>>2)];
      var $2663=(($2657+((($2662)*(44))&-1))|0);
      var $2664=(($2663+44)|0);
      var $2665=$1;
      var $2666=(($2665+8)|0);
      var $2667=HEAP32[(($2666)>>2)];
      var $2668=(($2667+16)|0);
      HEAP32[(($2668)>>2)]=$2664;
      $ci29=$2664;
      label = 264; break;
    case 263: 
      label = 264; break;
    case 264: 
      label = 265; break;
    case 265: 
      var $2672=$eidx30;
      var $2673=$1;
      var $2674=(($2673+8)|0);
      var $2675=HEAP32[(($2674)>>2)];
      var $2676=(($2675+16)|0);
      var $2677=HEAP32[(($2676)>>2)];
      var $2678=((($2677)-(44))|0);
      var $2679=(($2678+36)|0);
      var $2680=HEAP32[(($2679)>>2)];
      var $2681=(($2672)|(0)) > (($2680)|(0));
      if ($2681) { label = 266; break; } else { label = 267; break; }
    case 266: 
      var $2683=$1;
      var $2684=$eidx30;
      var $2685=((($2684)-(1))|0);
      $eidx30=$2685;
      _ecall($2683, $2685);
      label = 265; break;
    case 267: 
      var $2687=$1;
      _cipop($2687);
      var $2688=$ci29;
      var $2689=(($2688+24)|0);
      var $2690=HEAP32[(($2689)>>2)];
      $acc=$2690;
      var $2691=$ci29;
      var $2692=(($2691+20)|0);
      var $2693=HEAP32[(($2692)>>2)];
      $pc=$2693;
      var $2694=$1;
      var $2695=(($2694+8)|0);
      var $2696=HEAP32[(($2695)>>2)];
      var $2697=(($2696+8)|0);
      var $2698=HEAP32[(($2697)>>2)];
      var $2699=$ci29;
      var $2700=(($2699+8)|0);
      var $2701=HEAP32[(($2700)>>2)];
      var $2702=(($2698+((($2701)*(12))&-1))|0);
      var $2703=$1;
      var $2704=(($2703+8)|0);
      var $2705=HEAP32[(($2704)>>2)];
      var $2706=(($2705+4)|0);
      HEAP32[(($2706)>>2)]=$2702;
      $regs=$2702;
      var $2707=$acc;
      var $2708=(($2707)|(0)) < 0;
      if ($2708) { label = 268; break; } else { label = 269; break; }
    case 268: 
      var $2710=$prev_jmp;
      var $2711=$2710;
      var $2712=$1;
      var $2713=(($2712)|0);
      HEAP32[(($2713)>>2)]=$2711;
      var $2714=$agg_result;
      var $2715=$v;
      assert(12 % 1 === 0);HEAP32[(($2714)>>2)]=HEAP32[(($2715)>>2)];HEAP32[((($2714)+(4))>>2)]=HEAP32[((($2715)+(4))>>2)];HEAP32[((($2714)+(8))>>2)]=HEAP32[((($2715)+(8))>>2)];
      label = 707; break;
    case 269: 
      var $2717=$1;
      var $2718=(($2717+8)|0);
      var $2719=HEAP32[(($2718)>>2)];
      var $2720=(($2719+16)|0);
      var $2721=HEAP32[(($2720)>>2)];
      var $2722=(($2721+4)|0);
      var $2723=HEAP32[(($2722)>>2)];
      $2=$2723;
      var $2724=$2;
      var $2725=(($2724+12)|0);
      var $2726=$2725;
      var $2727=HEAP32[(($2726)>>2)];
      $irep=$2727;
      var $2728=$irep;
      var $2729=(($2728+16)|0);
      var $2730=HEAP32[(($2729)>>2)];
      $pool=$2730;
      var $2731=$irep;
      var $2732=(($2731+20)|0);
      var $2733=HEAP32[(($2732)>>2)];
      $syms=$2733;
      var $2734=$acc;
      var $2735=$regs;
      var $2736=(($2735+((($2734)*(12))&-1))|0);
      var $2737=$2736;
      var $2738=$v;
      assert(12 % 1 === 0);HEAP32[(($2737)>>2)]=HEAP32[(($2738)>>2)];HEAP32[((($2737)+(4))>>2)]=HEAP32[((($2738)+(4))>>2)];HEAP32[((($2737)+(8))>>2)]=HEAP32[((($2738)+(8))>>2)];
      label = 270; break;
    case 270: 
      var $2740=$pc;
      var $2741=HEAP32[(($2740)>>2)];
      $i=$2741;
      var $2742=$i;
      var $2743=$2742 & 127;
      var $2744=((77372+($2743<<2))|0);
      var $2745=HEAP32[(($2744)>>2)];
      var $5859 = $2745;label = 708; break;
    case 271: 
      var $2747=$i;
      var $2748=$2747 >>> 23;
      var $2749=$2748 & 511;
      $a33=$2749;
      var $2750=$i;
      var $2751=$2750 >>> 7;
      var $2752=$2751 & 127;
      $n34=$2752;
      var $2753=$i;
      var $2754=$2753 >>> 14;
      var $2755=$2754 & 511;
      var $2756=$syms;
      var $2757=(($2756+($2755<<1))|0);
      var $2758=HEAP16[(($2757)>>1)];
      $mid39=$2758;
      var $2759=$a33;
      var $2760=$regs;
      var $2761=(($2760+((($2759)*(12))&-1))|0);
      var $2762=$recv38;
      var $2763=$2761;
      assert(12 % 1 === 0);HEAP32[(($2762)>>2)]=HEAP32[(($2763)>>2)];HEAP32[((($2762)+(4))>>2)]=HEAP32[((($2763)+(4))>>2)];HEAP32[((($2762)+(8))>>2)]=HEAP32[((($2763)+(8))>>2)];
      var $2764=$1;
      var $2765=_mrb_class($2764, $recv38);
      HEAP32[(($c36)>>2)]=$2765;
      var $2766=$1;
      var $2767=$mid39;
      var $2768=_mrb_method_search_vm($2766, $c36, $2767);
      $m35=$2768;
      var $2769=$m35;
      var $2770=(($2769)|(0))!=0;
      if ($2770) { label = 276; break; } else { label = 272; break; }
    case 272: 
      var $2772=$mid39;
      _mrb_symbol_value145($sym40, $2772);
      var $2773=$1;
      var $2774=_mrb_intern2($2773, ((104520)|0), 14);
      $mid39=$2774;
      var $2775=$1;
      var $2776=$mid39;
      var $2777=_mrb_method_search_vm($2775, $c36, $2776);
      $m35=$2777;
      var $2778=$n34;
      var $2779=(($2778)|(0))==127;
      if ($2779) { label = 273; break; } else { label = 274; break; }
    case 273: 
      var $2781=$1;
      var $2782=$a33;
      var $2783=((($2782)+(1))|0);
      var $2784=$regs;
      var $2785=(($2784+((($2783)*(12))&-1))|0);
      _mrb_ary_unshift($25, $2781, $2785, $sym40);
      label = 275; break;
    case 274: 
      var $2787=$regs;
      var $2788=$a33;
      var $2789=(($2787+((($2788)*(12))&-1))|0);
      var $2790=(($2789+24)|0);
      var $2791=$regs;
      var $2792=$a33;
      var $2793=(($2791+((($2792)*(12))&-1))|0);
      var $2794=(($2793+12)|0);
      var $2795=$n34;
      var $2796=((($2795)+(1))|0);
      $n34=$2796;
      _value_move($2790, $2794, $2796);
      var $2797=$a33;
      var $2798=((($2797)+(1))|0);
      var $2799=$regs;
      var $2800=(($2799+((($2798)*(12))&-1))|0);
      var $2801=$2800;
      var $2802=$sym40;
      assert(12 % 1 === 0);HEAP32[(($2801)>>2)]=HEAP32[(($2802)>>2)];HEAP32[((($2801)+(4))>>2)]=HEAP32[((($2802)+(4))>>2)];HEAP32[((($2801)+(8))>>2)]=HEAP32[((($2802)+(8))>>2)];
      label = 275; break;
    case 275: 
      label = 276; break;
    case 276: 
      var $2805=$1;
      var $2806=(($2805+8)|0);
      var $2807=HEAP32[(($2806)>>2)];
      var $2808=(($2807+16)|0);
      var $2809=HEAP32[(($2808)>>2)];
      $ci37=$2809;
      var $2810=$mid39;
      var $2811=$ci37;
      var $2812=(($2811)|0);
      HEAP16[(($2812)>>1)]=$2810;
      var $2813=$m35;
      var $2814=(($2813+16)|0);
      var $2815=HEAP32[(($2814)>>2)];
      var $2816=$ci37;
      var $2817=(($2816+28)|0);
      HEAP32[(($2817)>>2)]=$2815;
      var $2818=$n34;
      var $2819=(($2818)|(0))==127;
      if ($2819) { label = 277; break; } else { label = 278; break; }
    case 277: 
      var $2821=$ci37;
      var $2822=(($2821+16)|0);
      HEAP32[(($2822)>>2)]=-1;
      label = 279; break;
    case 278: 
      var $2824=$n34;
      var $2825=$ci37;
      var $2826=(($2825+16)|0);
      HEAP32[(($2826)>>2)]=$2824;
      label = 279; break;
    case 279: 
      var $2828=$1;
      var $2829=(($2828+8)|0);
      var $2830=HEAP32[(($2829)>>2)];
      var $2831=(($2830+4)|0);
      var $2832=HEAP32[(($2831)>>2)];
      var $2833=$a33;
      var $2834=$regs;
      var $2835=(($2834+((($2833)*(12))&-1))|0);
      var $2836=$ci37;
      var $2837=(($2836+16)|0);
      var $2838=HEAP32[(($2837)>>2)];
      var $2839=((($2838)+(1))|0);
      _value_move($2832, $2835, $2839);
      var $2840=$m35;
      var $2841=$2840;
      var $2842=HEAP32[(($2841)>>2)];
      var $2843=$2842 >>> 11;
      var $2844=$2843 & 2097151;
      var $2845=$2844 & 128;
      var $2846=(($2845)|(0))!=0;
      if ($2846) { label = 280; break; } else { label = 281; break; }
    case 280: 
      var $2848=$1;
      var $2849=(($2848+8)|0);
      var $2850=HEAP32[(($2849)>>2)];
      var $2851=(($2850+4)|0);
      var $2852=HEAP32[(($2851)>>2)];
      var $2853=(($2852)|0);
      var $2854=$m35;
      var $2855=(($2854+12)|0);
      var $2856=$2855;
      var $2857=HEAP32[(($2856)>>2)];
      var $2858=$1;
      FUNCTION_TABLE[$2857]($26, $2858, $recv38);
      var $2859=$2853;
      var $2860=$26;
      assert(12 % 1 === 0);HEAP32[(($2859)>>2)]=HEAP32[(($2860)>>2)];HEAP32[((($2859)+(4))>>2)]=HEAP32[((($2860)+(4))>>2)];HEAP32[((($2859)+(8))>>2)]=HEAP32[((($2860)+(8))>>2)];
      var $2861=$1;
      var $2862=$ai;
      _mrb_gc_arena_restore($2861, $2862);
      label = 219; break;
    case 281: 
      var $2864=$m35;
      var $2865=(($2864+12)|0);
      var $2866=$2865;
      var $2867=HEAP32[(($2866)>>2)];
      $irep=$2867;
      var $2868=$irep;
      var $2869=(($2868+16)|0);
      var $2870=HEAP32[(($2869)>>2)];
      $pool=$2870;
      var $2871=$irep;
      var $2872=(($2871+20)|0);
      var $2873=HEAP32[(($2872)>>2)];
      $syms=$2873;
      var $2874=$ci37;
      var $2875=(($2874+16)|0);
      var $2876=HEAP32[(($2875)>>2)];
      var $2877=(($2876)|(0)) < 0;
      if ($2877) { label = 282; break; } else { label = 286; break; }
    case 282: 
      var $2879=$1;
      var $2880=$irep;
      var $2881=(($2880+6)|0);
      var $2882=HEAP16[(($2881)>>1)];
      var $2883=(($2882)&(65535));
      var $2884=(($2883)|(0)) < 3;
      if ($2884) { label = 283; break; } else { label = 284; break; }
    case 283: 
      var $2892 = 3;label = 285; break;
    case 284: 
      var $2887=$irep;
      var $2888=(($2887+6)|0);
      var $2889=HEAP16[(($2888)>>1)];
      var $2890=(($2889)&(65535));
      var $2892 = $2890;label = 285; break;
    case 285: 
      var $2892;
      _stack_extend($2879, $2892, 3);
      label = 287; break;
    case 286: 
      var $2894=$1;
      var $2895=$irep;
      var $2896=(($2895+6)|0);
      var $2897=HEAP16[(($2896)>>1)];
      var $2898=(($2897)&(65535));
      var $2899=$ci37;
      var $2900=(($2899+16)|0);
      var $2901=HEAP32[(($2900)>>2)];
      var $2902=((($2901)+(2))|0);
      _stack_extend($2894, $2898, $2902);
      label = 287; break;
    case 287: 
      var $2904=$1;
      var $2905=(($2904+8)|0);
      var $2906=HEAP32[(($2905)>>2)];
      var $2907=(($2906+4)|0);
      var $2908=HEAP32[(($2907)>>2)];
      $regs=$2908;
      var $2909=$irep;
      var $2910=(($2909+12)|0);
      var $2911=HEAP32[(($2910)>>2)];
      $pc=$2911;
      label = 288; break;
    case 288: 
      var $2913=$pc;
      var $2914=HEAP32[(($2913)>>2)];
      $i=$2914;
      var $2915=$i;
      var $2916=$2915 & 127;
      var $2917=((77372+($2916<<2))|0);
      var $2918=HEAP32[(($2917)>>2)];
      var $5859 = $2918;label = 708; break;
    case 289: 
      var $2920=$i;
      var $2921=$2920 >>> 23;
      var $2922=$2921 & 511;
      $a41=$2922;
      var $2923=$i;
      var $2924=$2923 >>> 7;
      var $2925=$2924 & 65535;
      $bx42=$2925;
      var $2926=$bx42;
      var $2927=$2926 >> 10;
      var $2928=$2927 & 63;
      $m143=$2928;
      var $2929=$bx42;
      var $2930=$2929 >> 9;
      var $2931=$2930 & 1;
      $r44=$2931;
      var $2932=$bx42;
      var $2933=$2932 >> 4;
      var $2934=$2933 & 31;
      $m245=$2934;
      var $2935=$bx42;
      var $2936=$2935 >> 0;
      var $2937=$2936 & 15;
      $lv46=$2937;
      var $2938=$lv46;
      var $2939=(($2938)|(0))==0;
      if ($2939) { label = 290; break; } else { label = 291; break; }
    case 290: 
      var $2941=$regs;
      var $2942=(($2941+12)|0);
      $stack47=$2942;
      label = 294; break;
    case 291: 
      var $2944=$1;
      var $2945=$lv46;
      var $2946=((($2945)-(1))|0);
      var $2947=_uvenv($2944, $2946);
      $e48=$2947;
      var $2948=$e48;
      var $2949=(($2948)|(0))!=0;
      if ($2949) { label = 293; break; } else { label = 292; break; }
    case 292: 
      var $2951=$1;
      _localjump_error($2951, 2);
      label = 222; break;
    case 293: 
      var $2953=$e48;
      var $2954=(($2953+12)|0);
      var $2955=HEAP32[(($2954)>>2)];
      var $2956=(($2955+12)|0);
      $stack47=$2956;
      label = 294; break;
    case 294: 
      var $2958=$a41;
      var $2959=$regs;
      var $2960=(($2959+((($2958)*(12))&-1))|0);
      var $2961=$m143;
      var $2962=$r44;
      var $2963=((($2961)+($2962))|0);
      var $2964=$m245;
      var $2965=((($2963)+($2964))|0);
      var $2966=$stack47;
      var $2967=(($2966+((($2965)*(12))&-1))|0);
      var $2968=$2960;
      var $2969=$2967;
      assert(12 % 1 === 0);HEAP32[(($2968)>>2)]=HEAP32[(($2969)>>2)];HEAP32[((($2968)+(4))>>2)]=HEAP32[((($2969)+(4))>>2)];HEAP32[((($2968)+(8))>>2)]=HEAP32[((($2969)+(8))>>2)];
      var $2970=$pc;
      var $2971=(($2970+4)|0);
      $pc=$2971;
      var $2972=HEAP32[(($2971)>>2)];
      $i=$2972;
      var $2973=$i;
      var $2974=$2973 & 127;
      var $2975=((77372+($2974<<2))|0);
      var $2976=HEAP32[(($2975)>>2)];
      var $5859 = $2976;label = 708; break;
    case 295: 
      var $2978=$i;
      var $2979=$2978 >>> 23;
      var $2980=$2979 & 511;
      $a49=$2980;
      var $2981=$a49;
      var $2982=$regs;
      var $2983=(($2982+((($2981)*(12))&-1))|0);
      var $2984=(($2983+8)|0);
      var $2985=HEAP32[(($2984)>>2)];
      var $2986=(($2985) & 65535);
      var $2987=(($2986)&(65535));
      var $2988=$2987 << 8;
      var $2989=$a49;
      var $2990=((($2989)+(1))|0);
      var $2991=$regs;
      var $2992=(($2991+((($2990)*(12))&-1))|0);
      var $2993=(($2992+8)|0);
      var $2994=HEAP32[(($2993)>>2)];
      var $2995=(($2994) & 65535);
      var $2996=(($2995)&(65535));
      var $2997=$2996 & 255;
      var $2998=$2988 | $2997;
      if ((($2998)|(0))==771) {
        label = 296; break;
      }
      else if ((($2998)|(0))==774) {
        label = 303; break;
      }
      else if ((($2998)|(0))==1539) {
        label = 306; break;
      }
      else if ((($2998)|(0))==1542) {
        label = 309; break;
      }
      else if ((($2998)|(0))==4112) {
        label = 312; break;
      }
      else {
      label = 313; break;
      }
    case 296: 
      var $3000=$regs;
      var $3001=$a49;
      var $3002=(($3000+((($3001)*(12))&-1))|0);
      $regs_a50=$3002;
      var $3003=$regs_a50;
      var $3004=(($3003)|0);
      var $3005=(($3004)|0);
      var $3006=$3005;
      var $3007=HEAP32[(($3006)>>2)];
      $x=$3007;
      var $3008=$regs_a50;
      var $3009=(($3008+12)|0);
      var $3010=(($3009)|0);
      var $3011=$3010;
      var $3012=HEAP32[(($3011)>>2)];
      $y=$3012;
      var $3013=$x;
      var $3014=$y;
      var $3015=((($3013)+($3014))|0);
      $z=$3015;
      var $3016=$x;
      var $3017=(($3016)|(0)) < 0;
      var $3018=(($3017)&(1));
      var $3019=$z;
      var $3020=(($3019)|(0)) < 0;
      var $3021=(($3020)&(1));
      var $3022=(($3018)|(0))!=(($3021)|(0));
      if ($3022) { label = 297; break; } else { label = 301; break; }
    case 297: 
      var $3024=$x;
      var $3025=(($3024)|(0)) < 0;
      var $3026=(($3025)&(1));
      var $3027=$y;
      var $3028=(($3027)|(0)) < 0;
      var $3029=(($3028)&(1));
      var $3030=$3026 ^ $3029;
      var $3031=(($3030)|(0))==0;
      if ($3031) { label = 298; break; } else { label = 301; break; }
    case 298: 
      label = 299; break;
    case 299: 
      var $3034=$regs_a50;
      var $3035=(($3034)|0);
      var $3036=(($3035+8)|0);
      HEAP32[(($3036)>>2)]=6;
      var $3037=$x;
      var $3038=(($3037)|(0));
      var $3039=$y;
      var $3040=(($3039)|(0));
      var $3041=($3038)+($3040);
      var $3042=$regs_a50;
      var $3043=(($3042)|0);
      var $3044=(($3043)|0);
      var $3045=$3044;
      (HEAPF64[(tempDoublePtr)>>3]=$3041,HEAP32[(($3045)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3045)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 300; break;
    case 300: 
      label = 302; break;
    case 301: 
      var $3048=$z;
      var $3049=$regs_a50;
      var $3050=(($3049)|0);
      var $3051=(($3050)|0);
      var $3052=$3051;
      HEAP32[(($3052)>>2)]=$3048;
      label = 302; break;
    case 302: 
      label = 314; break;
    case 303: 
      var $3055=$a49;
      var $3056=$regs;
      var $3057=(($3056+((($3055)*(12))&-1))|0);
      var $3058=(($3057)|0);
      var $3059=$3058;
      var $3060=HEAP32[(($3059)>>2)];
      $x51=$3060;
      var $3061=$a49;
      var $3062=((($3061)+(1))|0);
      var $3063=$regs;
      var $3064=(($3063+((($3062)*(12))&-1))|0);
      var $3065=(($3064)|0);
      var $3066=$3065;
      var $3067=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3066)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3066)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y52=$3067;
      label = 304; break;
    case 304: 
      var $3069=$a49;
      var $3070=$regs;
      var $3071=(($3070+((($3069)*(12))&-1))|0);
      var $3072=(($3071+8)|0);
      HEAP32[(($3072)>>2)]=6;
      var $3073=$x51;
      var $3074=(($3073)|(0));
      var $3075=$y52;
      var $3076=($3074)+($3075);
      var $3077=$a49;
      var $3078=$regs;
      var $3079=(($3078+((($3077)*(12))&-1))|0);
      var $3080=(($3079)|0);
      var $3081=$3080;
      (HEAPF64[(tempDoublePtr)>>3]=$3076,HEAP32[(($3081)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3081)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 305; break;
    case 305: 
      label = 314; break;
    case 306: 
      label = 307; break;
    case 307: 
      var $3085=$a49;
      var $3086=$regs;
      var $3087=(($3086+((($3085)*(12))&-1))|0);
      var $3088=(($3087)|0);
      var $3089=$3088;
      var $3090=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3089)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3089)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3091=$a49;
      var $3092=((($3091)+(1))|0);
      var $3093=$regs;
      var $3094=(($3093+((($3092)*(12))&-1))|0);
      var $3095=(($3094)|0);
      var $3096=$3095;
      var $3097=HEAP32[(($3096)>>2)];
      var $3098=(($3097)|(0));
      var $3099=($3090)+($3098);
      var $3100=$a49;
      var $3101=$regs;
      var $3102=(($3101+((($3100)*(12))&-1))|0);
      var $3103=(($3102)|0);
      var $3104=$3103;
      (HEAPF64[(tempDoublePtr)>>3]=$3099,HEAP32[(($3104)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3104)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 308; break;
    case 308: 
      label = 314; break;
    case 309: 
      label = 310; break;
    case 310: 
      var $3108=$a49;
      var $3109=$regs;
      var $3110=(($3109+((($3108)*(12))&-1))|0);
      var $3111=(($3110)|0);
      var $3112=$3111;
      var $3113=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3112)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3112)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3114=$a49;
      var $3115=((($3114)+(1))|0);
      var $3116=$regs;
      var $3117=(($3116+((($3115)*(12))&-1))|0);
      var $3118=(($3117)|0);
      var $3119=$3118;
      var $3120=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3119)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3119)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3121=($3113)+($3120);
      var $3122=$a49;
      var $3123=$regs;
      var $3124=(($3123+((($3122)*(12))&-1))|0);
      var $3125=(($3124)|0);
      var $3126=$3125;
      (HEAPF64[(tempDoublePtr)>>3]=$3121,HEAP32[(($3126)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3126)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 311; break;
    case 311: 
      label = 314; break;
    case 312: 
      var $3129=$a49;
      var $3130=$regs;
      var $3131=(($3130+((($3129)*(12))&-1))|0);
      var $3132=$1;
      var $3133=$a49;
      var $3134=$regs;
      var $3135=(($3134+((($3133)*(12))&-1))|0);
      var $3136=$a49;
      var $3137=((($3136)+(1))|0);
      var $3138=$regs;
      var $3139=(($3138+((($3137)*(12))&-1))|0);
      _mrb_str_plus($27, $3132, $3135, $3139);
      var $3140=$3131;
      var $3141=$27;
      assert(12 % 1 === 0);HEAP32[(($3140)>>2)]=HEAP32[(($3141)>>2)];HEAP32[((($3140)+(4))>>2)]=HEAP32[((($3141)+(4))>>2)];HEAP32[((($3140)+(8))>>2)]=HEAP32[((($3141)+(8))>>2)];
      label = 314; break;
    case 313: 
      label = 78; break;
    case 314: 
      var $3144=$1;
      var $3145=$ai;
      _mrb_gc_arena_restore($3144, $3145);
      var $3146=$pc;
      var $3147=(($3146+4)|0);
      $pc=$3147;
      var $3148=HEAP32[(($3147)>>2)];
      $i=$3148;
      var $3149=$i;
      var $3150=$3149 & 127;
      var $3151=((77372+($3150<<2))|0);
      var $3152=HEAP32[(($3151)>>2)];
      var $5859 = $3152;label = 708; break;
    case 315: 
      var $3154=$i;
      var $3155=$3154 >>> 23;
      var $3156=$3155 & 511;
      $a53=$3156;
      var $3157=$a53;
      var $3158=$regs;
      var $3159=(($3158+((($3157)*(12))&-1))|0);
      var $3160=(($3159+8)|0);
      var $3161=HEAP32[(($3160)>>2)];
      var $3162=(($3161) & 65535);
      var $3163=(($3162)&(65535));
      var $3164=$3163 << 8;
      var $3165=$a53;
      var $3166=((($3165)+(1))|0);
      var $3167=$regs;
      var $3168=(($3167+((($3166)*(12))&-1))|0);
      var $3169=(($3168+8)|0);
      var $3170=HEAP32[(($3169)>>2)];
      var $3171=(($3170) & 65535);
      var $3172=(($3171)&(65535));
      var $3173=$3172 & 255;
      var $3174=$3164 | $3173;
      if ((($3174)|(0))==771) {
        label = 316; break;
      }
      else if ((($3174)|(0))==774) {
        label = 324; break;
      }
      else if ((($3174)|(0))==1539) {
        label = 327; break;
      }
      else if ((($3174)|(0))==1542) {
        label = 330; break;
      }
      else {
      label = 333; break;
      }
    case 316: 
      var $3176=$a53;
      var $3177=$regs;
      var $3178=(($3177+((($3176)*(12))&-1))|0);
      var $3179=(($3178)|0);
      var $3180=$3179;
      var $3181=HEAP32[(($3180)>>2)];
      $x54=$3181;
      var $3182=$a53;
      var $3183=((($3182)+(1))|0);
      var $3184=$regs;
      var $3185=(($3184+((($3183)*(12))&-1))|0);
      var $3186=(($3185)|0);
      var $3187=$3186;
      var $3188=HEAP32[(($3187)>>2)];
      $y55=$3188;
      var $3189=$x54;
      var $3190=$y55;
      var $3191=((($3189)-($3190))|0);
      $z56=$3191;
      var $3192=$x54;
      var $3193=(($3192)|(0)) < 0;
      var $3194=(($3193)&(1));
      var $3195=$y55;
      var $3196=(($3195)|(0)) < 0;
      var $3197=(($3196)&(1));
      var $3198=$3194 ^ $3197;
      var $3199=(($3198)|(0))!=0;
      if ($3199) { label = 317; break; } else { label = 321; break; }
    case 317: 
      var $3201=$x54;
      var $3202=(($3201)|(0)) < 0;
      var $3203=(($3202)&(1));
      var $3204=$z56;
      var $3205=(($3204)|(0)) < 0;
      var $3206=(($3205)&(1));
      var $3207=(($3203)|(0))!=(($3206)|(0));
      if ($3207) { label = 318; break; } else { label = 321; break; }
    case 318: 
      label = 319; break;
    case 319: 
      var $3210=$a53;
      var $3211=$regs;
      var $3212=(($3211+((($3210)*(12))&-1))|0);
      var $3213=(($3212+8)|0);
      HEAP32[(($3213)>>2)]=6;
      var $3214=$x54;
      var $3215=(($3214)|(0));
      var $3216=$y55;
      var $3217=(($3216)|(0));
      var $3218=($3215)-($3217);
      var $3219=$a53;
      var $3220=$regs;
      var $3221=(($3220+((($3219)*(12))&-1))|0);
      var $3222=(($3221)|0);
      var $3223=$3222;
      (HEAPF64[(tempDoublePtr)>>3]=$3218,HEAP32[(($3223)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3223)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 320; break;
    case 320: 
      label = 334; break;
    case 321: 
      label = 322; break;
    case 322: 
      var $3227=$a53;
      var $3228=$regs;
      var $3229=(($3228+((($3227)*(12))&-1))|0);
      var $3230=(($3229+8)|0);
      HEAP32[(($3230)>>2)]=3;
      var $3231=$z56;
      var $3232=$a53;
      var $3233=$regs;
      var $3234=(($3233+((($3232)*(12))&-1))|0);
      var $3235=(($3234)|0);
      var $3236=$3235;
      HEAP32[(($3236)>>2)]=$3231;
      label = 323; break;
    case 323: 
      label = 334; break;
    case 324: 
      var $3239=$a53;
      var $3240=$regs;
      var $3241=(($3240+((($3239)*(12))&-1))|0);
      var $3242=(($3241)|0);
      var $3243=$3242;
      var $3244=HEAP32[(($3243)>>2)];
      $x57=$3244;
      var $3245=$a53;
      var $3246=((($3245)+(1))|0);
      var $3247=$regs;
      var $3248=(($3247+((($3246)*(12))&-1))|0);
      var $3249=(($3248)|0);
      var $3250=$3249;
      var $3251=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3250)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3250)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y58=$3251;
      label = 325; break;
    case 325: 
      var $3253=$a53;
      var $3254=$regs;
      var $3255=(($3254+((($3253)*(12))&-1))|0);
      var $3256=(($3255+8)|0);
      HEAP32[(($3256)>>2)]=6;
      var $3257=$x57;
      var $3258=(($3257)|(0));
      var $3259=$y58;
      var $3260=($3258)-($3259);
      var $3261=$a53;
      var $3262=$regs;
      var $3263=(($3262+((($3261)*(12))&-1))|0);
      var $3264=(($3263)|0);
      var $3265=$3264;
      (HEAPF64[(tempDoublePtr)>>3]=$3260,HEAP32[(($3265)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3265)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 326; break;
    case 326: 
      label = 334; break;
    case 327: 
      label = 328; break;
    case 328: 
      var $3269=$a53;
      var $3270=$regs;
      var $3271=(($3270+((($3269)*(12))&-1))|0);
      var $3272=(($3271)|0);
      var $3273=$3272;
      var $3274=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3273)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3273)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3275=$a53;
      var $3276=((($3275)+(1))|0);
      var $3277=$regs;
      var $3278=(($3277+((($3276)*(12))&-1))|0);
      var $3279=(($3278)|0);
      var $3280=$3279;
      var $3281=HEAP32[(($3280)>>2)];
      var $3282=(($3281)|(0));
      var $3283=($3274)-($3282);
      var $3284=$a53;
      var $3285=$regs;
      var $3286=(($3285+((($3284)*(12))&-1))|0);
      var $3287=(($3286)|0);
      var $3288=$3287;
      (HEAPF64[(tempDoublePtr)>>3]=$3283,HEAP32[(($3288)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3288)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 329; break;
    case 329: 
      label = 334; break;
    case 330: 
      label = 331; break;
    case 331: 
      var $3292=$a53;
      var $3293=$regs;
      var $3294=(($3293+((($3292)*(12))&-1))|0);
      var $3295=(($3294)|0);
      var $3296=$3295;
      var $3297=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3296)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3296)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3298=$a53;
      var $3299=((($3298)+(1))|0);
      var $3300=$regs;
      var $3301=(($3300+((($3299)*(12))&-1))|0);
      var $3302=(($3301)|0);
      var $3303=$3302;
      var $3304=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3303)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3303)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3305=($3297)-($3304);
      var $3306=$a53;
      var $3307=$regs;
      var $3308=(($3307+((($3306)*(12))&-1))|0);
      var $3309=(($3308)|0);
      var $3310=$3309;
      (HEAPF64[(tempDoublePtr)>>3]=$3305,HEAP32[(($3310)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3310)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 332; break;
    case 332: 
      label = 334; break;
    case 333: 
      label = 78; break;
    case 334: 
      var $3314=$pc;
      var $3315=(($3314+4)|0);
      $pc=$3315;
      var $3316=HEAP32[(($3315)>>2)];
      $i=$3316;
      var $3317=$i;
      var $3318=$3317 & 127;
      var $3319=((77372+($3318<<2))|0);
      var $3320=HEAP32[(($3319)>>2)];
      var $5859 = $3320;label = 708; break;
    case 335: 
      var $3322=$i;
      var $3323=$3322 >>> 23;
      var $3324=$3323 & 511;
      $a59=$3324;
      var $3325=$a59;
      var $3326=$regs;
      var $3327=(($3326+((($3325)*(12))&-1))|0);
      var $3328=(($3327+8)|0);
      var $3329=HEAP32[(($3328)>>2)];
      var $3330=(($3329) & 65535);
      var $3331=(($3330)&(65535));
      var $3332=$3331 << 8;
      var $3333=$a59;
      var $3334=((($3333)+(1))|0);
      var $3335=$regs;
      var $3336=(($3335+((($3334)*(12))&-1))|0);
      var $3337=(($3336+8)|0);
      var $3338=HEAP32[(($3337)>>2)];
      var $3339=(($3338) & 65535);
      var $3340=(($3339)&(65535));
      var $3341=$3340 & 255;
      var $3342=$3332 | $3341;
      if ((($3342)|(0))==771) {
        label = 336; break;
      }
      else if ((($3342)|(0))==774) {
        label = 345; break;
      }
      else if ((($3342)|(0))==1539) {
        label = 348; break;
      }
      else if ((($3342)|(0))==1542) {
        label = 351; break;
      }
      else {
      label = 354; break;
      }
    case 336: 
      var $3344=$a59;
      var $3345=$regs;
      var $3346=(($3345+((($3344)*(12))&-1))|0);
      var $3347=(($3346)|0);
      var $3348=$3347;
      var $3349=HEAP32[(($3348)>>2)];
      $x60=$3349;
      var $3350=$a59;
      var $3351=((($3350)+(1))|0);
      var $3352=$regs;
      var $3353=(($3352+((($3351)*(12))&-1))|0);
      var $3354=(($3353)|0);
      var $3355=$3354;
      var $3356=HEAP32[(($3355)>>2)];
      $y61=$3356;
      var $3357=$x60;
      var $3358=$y61;
      var $3359=Math.imul($3357,$3358);
      $z62=$3359;
      var $3360=$x60;
      var $3361=(($3360)|(0))!=0;
      if ($3361) { label = 337; break; } else { label = 341; break; }
    case 337: 
      var $3363=$z62;
      var $3364=$x60;
      var $3365=((((($3363)|(0)))/((($3364)|(0))))&-1);
      var $3366=$y61;
      var $3367=(($3365)|(0))!=(($3366)|(0));
      if ($3367) { label = 338; break; } else { label = 341; break; }
    case 338: 
      label = 339; break;
    case 339: 
      var $3370=$a59;
      var $3371=$regs;
      var $3372=(($3371+((($3370)*(12))&-1))|0);
      var $3373=(($3372+8)|0);
      HEAP32[(($3373)>>2)]=6;
      var $3374=$x60;
      var $3375=(($3374)|(0));
      var $3376=$y61;
      var $3377=(($3376)|(0));
      var $3378=($3375)*($3377);
      var $3379=$a59;
      var $3380=$regs;
      var $3381=(($3380+((($3379)*(12))&-1))|0);
      var $3382=(($3381)|0);
      var $3383=$3382;
      (HEAPF64[(tempDoublePtr)>>3]=$3378,HEAP32[(($3383)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3383)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 340; break;
    case 340: 
      label = 344; break;
    case 341: 
      label = 342; break;
    case 342: 
      var $3387=$a59;
      var $3388=$regs;
      var $3389=(($3388+((($3387)*(12))&-1))|0);
      var $3390=(($3389+8)|0);
      HEAP32[(($3390)>>2)]=3;
      var $3391=$z62;
      var $3392=$a59;
      var $3393=$regs;
      var $3394=(($3393+((($3392)*(12))&-1))|0);
      var $3395=(($3394)|0);
      var $3396=$3395;
      HEAP32[(($3396)>>2)]=$3391;
      label = 343; break;
    case 343: 
      label = 344; break;
    case 344: 
      label = 355; break;
    case 345: 
      var $3400=$a59;
      var $3401=$regs;
      var $3402=(($3401+((($3400)*(12))&-1))|0);
      var $3403=(($3402)|0);
      var $3404=$3403;
      var $3405=HEAP32[(($3404)>>2)];
      $x63=$3405;
      var $3406=$a59;
      var $3407=((($3406)+(1))|0);
      var $3408=$regs;
      var $3409=(($3408+((($3407)*(12))&-1))|0);
      var $3410=(($3409)|0);
      var $3411=$3410;
      var $3412=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3411)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3411)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y64=$3412;
      label = 346; break;
    case 346: 
      var $3414=$a59;
      var $3415=$regs;
      var $3416=(($3415+((($3414)*(12))&-1))|0);
      var $3417=(($3416+8)|0);
      HEAP32[(($3417)>>2)]=6;
      var $3418=$x63;
      var $3419=(($3418)|(0));
      var $3420=$y64;
      var $3421=($3419)*($3420);
      var $3422=$a59;
      var $3423=$regs;
      var $3424=(($3423+((($3422)*(12))&-1))|0);
      var $3425=(($3424)|0);
      var $3426=$3425;
      (HEAPF64[(tempDoublePtr)>>3]=$3421,HEAP32[(($3426)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3426)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 347; break;
    case 347: 
      label = 355; break;
    case 348: 
      label = 349; break;
    case 349: 
      var $3430=$a59;
      var $3431=$regs;
      var $3432=(($3431+((($3430)*(12))&-1))|0);
      var $3433=(($3432)|0);
      var $3434=$3433;
      var $3435=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3434)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3434)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3436=$a59;
      var $3437=((($3436)+(1))|0);
      var $3438=$regs;
      var $3439=(($3438+((($3437)*(12))&-1))|0);
      var $3440=(($3439)|0);
      var $3441=$3440;
      var $3442=HEAP32[(($3441)>>2)];
      var $3443=(($3442)|(0));
      var $3444=($3435)*($3443);
      var $3445=$a59;
      var $3446=$regs;
      var $3447=(($3446+((($3445)*(12))&-1))|0);
      var $3448=(($3447)|0);
      var $3449=$3448;
      (HEAPF64[(tempDoublePtr)>>3]=$3444,HEAP32[(($3449)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3449)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 350; break;
    case 350: 
      label = 355; break;
    case 351: 
      label = 352; break;
    case 352: 
      var $3453=$a59;
      var $3454=$regs;
      var $3455=(($3454+((($3453)*(12))&-1))|0);
      var $3456=(($3455)|0);
      var $3457=$3456;
      var $3458=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3457)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3457)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3459=$a59;
      var $3460=((($3459)+(1))|0);
      var $3461=$regs;
      var $3462=(($3461+((($3460)*(12))&-1))|0);
      var $3463=(($3462)|0);
      var $3464=$3463;
      var $3465=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3464)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3464)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3466=($3458)*($3465);
      var $3467=$a59;
      var $3468=$regs;
      var $3469=(($3468+((($3467)*(12))&-1))|0);
      var $3470=(($3469)|0);
      var $3471=$3470;
      (HEAPF64[(tempDoublePtr)>>3]=$3466,HEAP32[(($3471)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3471)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 353; break;
    case 353: 
      label = 355; break;
    case 354: 
      label = 78; break;
    case 355: 
      var $3475=$pc;
      var $3476=(($3475+4)|0);
      $pc=$3476;
      var $3477=HEAP32[(($3476)>>2)];
      $i=$3477;
      var $3478=$i;
      var $3479=$3478 & 127;
      var $3480=((77372+($3479<<2))|0);
      var $3481=HEAP32[(($3480)>>2)];
      var $5859 = $3481;label = 708; break;
    case 356: 
      var $3483=$i;
      var $3484=$3483 >>> 23;
      var $3485=$3484 & 511;
      $a65=$3485;
      var $3486=$a65;
      var $3487=$regs;
      var $3488=(($3487+((($3486)*(12))&-1))|0);
      var $3489=(($3488+8)|0);
      var $3490=HEAP32[(($3489)>>2)];
      var $3491=(($3490) & 65535);
      var $3492=(($3491)&(65535));
      var $3493=$3492 << 8;
      var $3494=$a65;
      var $3495=((($3494)+(1))|0);
      var $3496=$regs;
      var $3497=(($3496+((($3495)*(12))&-1))|0);
      var $3498=(($3497+8)|0);
      var $3499=HEAP32[(($3498)>>2)];
      var $3500=(($3499) & 65535);
      var $3501=(($3500)&(65535));
      var $3502=$3501 & 255;
      var $3503=$3493 | $3502;
      if ((($3503)|(0))==771) {
        label = 357; break;
      }
      else if ((($3503)|(0))==774) {
        label = 360; break;
      }
      else if ((($3503)|(0))==1539) {
        label = 363; break;
      }
      else if ((($3503)|(0))==1542) {
        label = 366; break;
      }
      else {
      label = 369; break;
      }
    case 357: 
      var $3505=$a65;
      var $3506=$regs;
      var $3507=(($3506+((($3505)*(12))&-1))|0);
      var $3508=(($3507)|0);
      var $3509=$3508;
      var $3510=HEAP32[(($3509)>>2)];
      $x66=$3510;
      var $3511=$a65;
      var $3512=((($3511)+(1))|0);
      var $3513=$regs;
      var $3514=(($3513+((($3512)*(12))&-1))|0);
      var $3515=(($3514)|0);
      var $3516=$3515;
      var $3517=HEAP32[(($3516)>>2)];
      $y67=$3517;
      label = 358; break;
    case 358: 
      var $3519=$a65;
      var $3520=$regs;
      var $3521=(($3520+((($3519)*(12))&-1))|0);
      var $3522=(($3521+8)|0);
      HEAP32[(($3522)>>2)]=6;
      var $3523=$x66;
      var $3524=(($3523)|(0));
      var $3525=$y67;
      var $3526=(($3525)|(0));
      var $3527=($3524)/($3526);
      var $3528=$a65;
      var $3529=$regs;
      var $3530=(($3529+((($3528)*(12))&-1))|0);
      var $3531=(($3530)|0);
      var $3532=$3531;
      (HEAPF64[(tempDoublePtr)>>3]=$3527,HEAP32[(($3532)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3532)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 359; break;
    case 359: 
      label = 370; break;
    case 360: 
      var $3535=$a65;
      var $3536=$regs;
      var $3537=(($3536+((($3535)*(12))&-1))|0);
      var $3538=(($3537)|0);
      var $3539=$3538;
      var $3540=HEAP32[(($3539)>>2)];
      $x68=$3540;
      var $3541=$a65;
      var $3542=((($3541)+(1))|0);
      var $3543=$regs;
      var $3544=(($3543+((($3542)*(12))&-1))|0);
      var $3545=(($3544)|0);
      var $3546=$3545;
      var $3547=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3546)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3546)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y69=$3547;
      label = 361; break;
    case 361: 
      var $3549=$a65;
      var $3550=$regs;
      var $3551=(($3550+((($3549)*(12))&-1))|0);
      var $3552=(($3551+8)|0);
      HEAP32[(($3552)>>2)]=6;
      var $3553=$x68;
      var $3554=(($3553)|(0));
      var $3555=$y69;
      var $3556=($3554)/($3555);
      var $3557=$a65;
      var $3558=$regs;
      var $3559=(($3558+((($3557)*(12))&-1))|0);
      var $3560=(($3559)|0);
      var $3561=$3560;
      (HEAPF64[(tempDoublePtr)>>3]=$3556,HEAP32[(($3561)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3561)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 362; break;
    case 362: 
      label = 370; break;
    case 363: 
      label = 364; break;
    case 364: 
      var $3565=$a65;
      var $3566=$regs;
      var $3567=(($3566+((($3565)*(12))&-1))|0);
      var $3568=(($3567)|0);
      var $3569=$3568;
      var $3570=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3569)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3569)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3571=$a65;
      var $3572=((($3571)+(1))|0);
      var $3573=$regs;
      var $3574=(($3573+((($3572)*(12))&-1))|0);
      var $3575=(($3574)|0);
      var $3576=$3575;
      var $3577=HEAP32[(($3576)>>2)];
      var $3578=(($3577)|(0));
      var $3579=($3570)/($3578);
      var $3580=$a65;
      var $3581=$regs;
      var $3582=(($3581+((($3580)*(12))&-1))|0);
      var $3583=(($3582)|0);
      var $3584=$3583;
      (HEAPF64[(tempDoublePtr)>>3]=$3579,HEAP32[(($3584)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3584)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 365; break;
    case 365: 
      label = 370; break;
    case 366: 
      label = 367; break;
    case 367: 
      var $3588=$a65;
      var $3589=$regs;
      var $3590=(($3589+((($3588)*(12))&-1))|0);
      var $3591=(($3590)|0);
      var $3592=$3591;
      var $3593=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3592)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3592)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3594=$a65;
      var $3595=((($3594)+(1))|0);
      var $3596=$regs;
      var $3597=(($3596+((($3595)*(12))&-1))|0);
      var $3598=(($3597)|0);
      var $3599=$3598;
      var $3600=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3599)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3599)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3601=($3593)/($3600);
      var $3602=$a65;
      var $3603=$regs;
      var $3604=(($3603+((($3602)*(12))&-1))|0);
      var $3605=(($3604)|0);
      var $3606=$3605;
      (HEAPF64[(tempDoublePtr)>>3]=$3601,HEAP32[(($3606)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3606)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 368; break;
    case 368: 
      label = 370; break;
    case 369: 
      label = 78; break;
    case 370: 
      var $3610=$pc;
      var $3611=(($3610+4)|0);
      $pc=$3611;
      var $3612=HEAP32[(($3611)>>2)];
      $i=$3612;
      var $3613=$i;
      var $3614=$3613 & 127;
      var $3615=((77372+($3614<<2))|0);
      var $3616=HEAP32[(($3615)>>2)];
      var $5859 = $3616;label = 708; break;
    case 371: 
      var $3618=$i;
      var $3619=$3618 >>> 23;
      var $3620=$3619 & 511;
      $a70=$3620;
      var $3621=$a70;
      var $3622=$regs;
      var $3623=(($3622+((($3621)*(12))&-1))|0);
      var $3624=(($3623+8)|0);
      var $3625=HEAP32[(($3624)>>2)];
      if ((($3625)|(0))==3) {
        label = 372; break;
      }
      else if ((($3625)|(0))==6) {
        label = 378; break;
      }
      else {
      label = 379; break;
      }
    case 372: 
      var $3627=$a70;
      var $3628=$regs;
      var $3629=(($3628+((($3627)*(12))&-1))|0);
      var $3630=(($3629)|0);
      var $3631=$3630;
      var $3632=HEAP32[(($3631)>>2)];
      $x71=$3632;
      var $3633=$i;
      var $3634=$3633 >>> 7;
      var $3635=$3634 & 127;
      $y72=$3635;
      var $3636=$x71;
      var $3637=$y72;
      var $3638=((($3636)+($3637))|0);
      $z73=$3638;
      var $3639=$x71;
      var $3640=(($3639)|(0)) < 0;
      var $3641=(($3640)&(1));
      var $3642=$y72;
      var $3643=(($3642)|(0)) < 0;
      var $3644=(($3643)&(1));
      var $3645=$3641 ^ $3644;
      var $3646=(($3645)|(0))==0;
      if ($3646) { label = 373; break; } else { label = 377; break; }
    case 373: 
      var $3648=$x71;
      var $3649=(($3648)|(0)) < 0;
      var $3650=(($3649)&(1));
      var $3651=$z73;
      var $3652=(($3651)|(0)) < 0;
      var $3653=(($3652)&(1));
      var $3654=(($3650)|(0))!=(($3653)|(0));
      if ($3654) { label = 374; break; } else { label = 377; break; }
    case 374: 
      label = 375; break;
    case 375: 
      var $3657=$a70;
      var $3658=$regs;
      var $3659=(($3658+((($3657)*(12))&-1))|0);
      var $3660=(($3659+8)|0);
      HEAP32[(($3660)>>2)]=6;
      var $3661=$x71;
      var $3662=(($3661)|(0));
      var $3663=$y72;
      var $3664=(($3663)|(0));
      var $3665=($3662)+($3664);
      var $3666=$a70;
      var $3667=$regs;
      var $3668=(($3667+((($3666)*(12))&-1))|0);
      var $3669=(($3668)|0);
      var $3670=$3669;
      (HEAPF64[(tempDoublePtr)>>3]=$3665,HEAP32[(($3670)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3670)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 376; break;
    case 376: 
      label = 382; break;
    case 377: 
      var $3673=$z73;
      var $3674=$a70;
      var $3675=$regs;
      var $3676=(($3675+((($3674)*(12))&-1))|0);
      var $3677=(($3676)|0);
      var $3678=$3677;
      HEAP32[(($3678)>>2)]=$3673;
      label = 382; break;
    case 378: 
      var $3680=$i;
      var $3681=$3680 >>> 7;
      var $3682=$3681 & 127;
      var $3683=(($3682)|(0));
      var $3684=$a70;
      var $3685=$regs;
      var $3686=(($3685+((($3684)*(12))&-1))|0);
      var $3687=(($3686)|0);
      var $3688=$3687;
      var $3689=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3688)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3688)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3690=($3689)+($3683);
      (HEAPF64[(tempDoublePtr)>>3]=$3690,HEAP32[(($3688)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3688)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 382; break;
    case 379: 
      label = 380; break;
    case 380: 
      var $3693=$a70;
      var $3694=((($3693)+(1))|0);
      var $3695=$regs;
      var $3696=(($3695+((($3694)*(12))&-1))|0);
      var $3697=(($3696+8)|0);
      HEAP32[(($3697)>>2)]=3;
      var $3698=$i;
      var $3699=$3698 >>> 7;
      var $3700=$3699 & 127;
      var $3701=$a70;
      var $3702=((($3701)+(1))|0);
      var $3703=$regs;
      var $3704=(($3703+((($3702)*(12))&-1))|0);
      var $3705=(($3704)|0);
      var $3706=$3705;
      HEAP32[(($3706)>>2)]=$3700;
      label = 381; break;
    case 381: 
      var $3708=$a70;
      var $3709=$3708 & 511;
      var $3710=$3709 << 23;
      var $3711=32 | $3710;
      var $3712=$i;
      var $3713=$3712 >>> 14;
      var $3714=$3713 & 511;
      var $3715=$3714 & 511;
      var $3716=$3715 << 14;
      var $3717=$3711 | $3716;
      var $3718=$3717 | 128;
      $i=$3718;
      label = 78; break;
    case 382: 
      var $3720=$pc;
      var $3721=(($3720+4)|0);
      $pc=$3721;
      var $3722=HEAP32[(($3721)>>2)];
      $i=$3722;
      var $3723=$i;
      var $3724=$3723 & 127;
      var $3725=((77372+($3724<<2))|0);
      var $3726=HEAP32[(($3725)>>2)];
      var $5859 = $3726;label = 708; break;
    case 383: 
      var $3728=$i;
      var $3729=$3728 >>> 23;
      var $3730=$3729 & 511;
      $a74=$3730;
      var $3731=$regs;
      var $3732=$a74;
      var $3733=(($3731+((($3732)*(12))&-1))|0);
      $regs_a75=$3733;
      var $3734=$regs_a75;
      var $3735=(($3734)|0);
      var $3736=(($3735+8)|0);
      var $3737=HEAP32[(($3736)>>2)];
      if ((($3737)|(0))==3) {
        label = 384; break;
      }
      else if ((($3737)|(0))==6) {
        label = 391; break;
      }
      else {
      label = 392; break;
      }
    case 384: 
      var $3739=$regs_a75;
      var $3740=(($3739)|0);
      var $3741=(($3740)|0);
      var $3742=$3741;
      var $3743=HEAP32[(($3742)>>2)];
      $x76=$3743;
      var $3744=$i;
      var $3745=$3744 >>> 7;
      var $3746=$3745 & 127;
      $y77=$3746;
      var $3747=$x76;
      var $3748=$y77;
      var $3749=((($3747)-($3748))|0);
      $z78=$3749;
      var $3750=$x76;
      var $3751=(($3750)|(0)) < 0;
      var $3752=(($3751)&(1));
      var $3753=$z78;
      var $3754=(($3753)|(0)) < 0;
      var $3755=(($3754)&(1));
      var $3756=(($3752)|(0))!=(($3755)|(0));
      if ($3756) { label = 385; break; } else { label = 389; break; }
    case 385: 
      var $3758=$x76;
      var $3759=(($3758)|(0)) < 0;
      var $3760=(($3759)&(1));
      var $3761=$y77;
      var $3762=(($3761)|(0)) < 0;
      var $3763=(($3762)&(1));
      var $3764=$3760 ^ $3763;
      var $3765=(($3764)|(0))!=0;
      if ($3765) { label = 386; break; } else { label = 389; break; }
    case 386: 
      label = 387; break;
    case 387: 
      var $3768=$regs_a75;
      var $3769=(($3768)|0);
      var $3770=(($3769+8)|0);
      HEAP32[(($3770)>>2)]=6;
      var $3771=$x76;
      var $3772=(($3771)|(0));
      var $3773=$y77;
      var $3774=(($3773)|(0));
      var $3775=($3772)-($3774);
      var $3776=$regs_a75;
      var $3777=(($3776)|0);
      var $3778=(($3777)|0);
      var $3779=$3778;
      (HEAPF64[(tempDoublePtr)>>3]=$3775,HEAP32[(($3779)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3779)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 388; break;
    case 388: 
      label = 390; break;
    case 389: 
      var $3782=$z78;
      var $3783=$regs_a75;
      var $3784=(($3783)|0);
      var $3785=(($3784)|0);
      var $3786=$3785;
      HEAP32[(($3786)>>2)]=$3782;
      label = 390; break;
    case 390: 
      label = 395; break;
    case 391: 
      var $3789=$i;
      var $3790=$3789 >>> 7;
      var $3791=$3790 & 127;
      var $3792=(($3791)|(0));
      var $3793=$regs_a75;
      var $3794=(($3793)|0);
      var $3795=(($3794)|0);
      var $3796=$3795;
      var $3797=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3796)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3796)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3798=($3797)-($3792);
      (HEAPF64[(tempDoublePtr)>>3]=$3798,HEAP32[(($3796)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3796)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 395; break;
    case 392: 
      label = 393; break;
    case 393: 
      var $3801=$regs_a75;
      var $3802=(($3801+12)|0);
      var $3803=(($3802+8)|0);
      HEAP32[(($3803)>>2)]=3;
      var $3804=$i;
      var $3805=$3804 >>> 7;
      var $3806=$3805 & 127;
      var $3807=$regs_a75;
      var $3808=(($3807+12)|0);
      var $3809=(($3808)|0);
      var $3810=$3809;
      HEAP32[(($3810)>>2)]=$3806;
      label = 394; break;
    case 394: 
      var $3812=$a74;
      var $3813=$3812 & 511;
      var $3814=$3813 << 23;
      var $3815=32 | $3814;
      var $3816=$i;
      var $3817=$3816 >>> 14;
      var $3818=$3817 & 511;
      var $3819=$3818 & 511;
      var $3820=$3819 << 14;
      var $3821=$3815 | $3820;
      var $3822=$3821 | 128;
      $i=$3822;
      label = 78; break;
    case 395: 
      var $3824=$pc;
      var $3825=(($3824+4)|0);
      $pc=$3825;
      var $3826=HEAP32[(($3825)>>2)];
      $i=$3826;
      var $3827=$i;
      var $3828=$3827 & 127;
      var $3829=((77372+($3828<<2))|0);
      var $3830=HEAP32[(($3829)>>2)];
      var $5859 = $3830;label = 708; break;
    case 396: 
      var $3832=$i;
      var $3833=$3832 >>> 23;
      var $3834=$3833 & 511;
      $a79=$3834;
      var $3835=$1;
      var $3836=$a79;
      var $3837=$regs;
      var $3838=(($3837+((($3836)*(12))&-1))|0);
      var $3839=$a79;
      var $3840=((($3839)+(1))|0);
      var $3841=$regs;
      var $3842=(($3841+((($3840)*(12))&-1))|0);
      var $3843=_mrb_obj_eq($3835, $3838, $3842);
      var $3844=(($3843)|(0))!=0;
      if ($3844) { label = 397; break; } else { label = 400; break; }
    case 397: 
      label = 398; break;
    case 398: 
      var $3847=$a79;
      var $3848=$regs;
      var $3849=(($3848+((($3847)*(12))&-1))|0);
      var $3850=(($3849+8)|0);
      HEAP32[(($3850)>>2)]=2;
      var $3851=$a79;
      var $3852=$regs;
      var $3853=(($3852+((($3851)*(12))&-1))|0);
      var $3854=(($3853)|0);
      var $3855=$3854;
      HEAP32[(($3855)>>2)]=1;
      label = 399; break;
    case 399: 
      label = 445; break;
    case 400: 
      label = 401; break;
    case 401: 
      var $3859=$i;
      var $3860=$3859 >>> 23;
      var $3861=$3860 & 511;
      $a80=$3861;
      var $3862=$a80;
      var $3863=$regs;
      var $3864=(($3863+((($3862)*(12))&-1))|0);
      var $3865=(($3864+8)|0);
      var $3866=HEAP32[(($3865)>>2)];
      var $3867=(($3866) & 65535);
      var $3868=(($3867)&(65535));
      var $3869=$3868 << 8;
      var $3870=$a80;
      var $3871=((($3870)+(1))|0);
      var $3872=$regs;
      var $3873=(($3872+((($3871)*(12))&-1))|0);
      var $3874=(($3873+8)|0);
      var $3875=HEAP32[(($3874)>>2)];
      var $3876=(($3875) & 65535);
      var $3877=(($3876)&(65535));
      var $3878=$3877 & 255;
      var $3879=$3869 | $3878;
      if ((($3879)|(0))==771) {
        label = 402; break;
      }
      else if ((($3879)|(0))==774) {
        label = 412; break;
      }
      else if ((($3879)|(0))==1539) {
        label = 422; break;
      }
      else if ((($3879)|(0))==1542) {
        label = 432; break;
      }
      else {
      label = 442; break;
      }
    case 402: 
      label = 403; break;
    case 403: 
      var $3882=$a80;
      var $3883=$regs;
      var $3884=(($3883+((($3882)*(12))&-1))|0);
      var $3885=(($3884)|0);
      var $3886=$3885;
      var $3887=HEAP32[(($3886)>>2)];
      var $3888=$a80;
      var $3889=((($3888)+(1))|0);
      var $3890=$regs;
      var $3891=(($3890+((($3889)*(12))&-1))|0);
      var $3892=(($3891)|0);
      var $3893=$3892;
      var $3894=HEAP32[(($3893)>>2)];
      var $3895=(($3887)|(0))==(($3894)|(0));
      if ($3895) { label = 404; break; } else { label = 407; break; }
    case 404: 
      label = 405; break;
    case 405: 
      var $3898=$a80;
      var $3899=$regs;
      var $3900=(($3899+((($3898)*(12))&-1))|0);
      var $3901=(($3900+8)|0);
      HEAP32[(($3901)>>2)]=2;
      var $3902=$a80;
      var $3903=$regs;
      var $3904=(($3903+((($3902)*(12))&-1))|0);
      var $3905=(($3904)|0);
      var $3906=$3905;
      HEAP32[(($3906)>>2)]=1;
      label = 406; break;
    case 406: 
      label = 410; break;
    case 407: 
      label = 408; break;
    case 408: 
      var $3910=$a80;
      var $3911=$regs;
      var $3912=(($3911+((($3910)*(12))&-1))|0);
      var $3913=(($3912+8)|0);
      HEAP32[(($3913)>>2)]=0;
      var $3914=$a80;
      var $3915=$regs;
      var $3916=(($3915+((($3914)*(12))&-1))|0);
      var $3917=(($3916)|0);
      var $3918=$3917;
      HEAP32[(($3918)>>2)]=1;
      label = 409; break;
    case 409: 
      label = 410; break;
    case 410: 
      label = 411; break;
    case 411: 
      label = 443; break;
    case 412: 
      label = 413; break;
    case 413: 
      var $3924=$a80;
      var $3925=$regs;
      var $3926=(($3925+((($3924)*(12))&-1))|0);
      var $3927=(($3926)|0);
      var $3928=$3927;
      var $3929=HEAP32[(($3928)>>2)];
      var $3930=(($3929)|(0));
      var $3931=$a80;
      var $3932=((($3931)+(1))|0);
      var $3933=$regs;
      var $3934=(($3933+((($3932)*(12))&-1))|0);
      var $3935=(($3934)|0);
      var $3936=$3935;
      var $3937=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3936)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3936)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3938=$3930 == $3937;
      if ($3938) { label = 414; break; } else { label = 417; break; }
    case 414: 
      label = 415; break;
    case 415: 
      var $3941=$a80;
      var $3942=$regs;
      var $3943=(($3942+((($3941)*(12))&-1))|0);
      var $3944=(($3943+8)|0);
      HEAP32[(($3944)>>2)]=2;
      var $3945=$a80;
      var $3946=$regs;
      var $3947=(($3946+((($3945)*(12))&-1))|0);
      var $3948=(($3947)|0);
      var $3949=$3948;
      HEAP32[(($3949)>>2)]=1;
      label = 416; break;
    case 416: 
      label = 420; break;
    case 417: 
      label = 418; break;
    case 418: 
      var $3953=$a80;
      var $3954=$regs;
      var $3955=(($3954+((($3953)*(12))&-1))|0);
      var $3956=(($3955+8)|0);
      HEAP32[(($3956)>>2)]=0;
      var $3957=$a80;
      var $3958=$regs;
      var $3959=(($3958+((($3957)*(12))&-1))|0);
      var $3960=(($3959)|0);
      var $3961=$3960;
      HEAP32[(($3961)>>2)]=1;
      label = 419; break;
    case 419: 
      label = 420; break;
    case 420: 
      label = 421; break;
    case 421: 
      label = 443; break;
    case 422: 
      label = 423; break;
    case 423: 
      var $3967=$a80;
      var $3968=$regs;
      var $3969=(($3968+((($3967)*(12))&-1))|0);
      var $3970=(($3969)|0);
      var $3971=$3970;
      var $3972=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3971)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3971)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $3973=$a80;
      var $3974=((($3973)+(1))|0);
      var $3975=$regs;
      var $3976=(($3975+((($3974)*(12))&-1))|0);
      var $3977=(($3976)|0);
      var $3978=$3977;
      var $3979=HEAP32[(($3978)>>2)];
      var $3980=(($3979)|(0));
      var $3981=$3972 == $3980;
      if ($3981) { label = 424; break; } else { label = 427; break; }
    case 424: 
      label = 425; break;
    case 425: 
      var $3984=$a80;
      var $3985=$regs;
      var $3986=(($3985+((($3984)*(12))&-1))|0);
      var $3987=(($3986+8)|0);
      HEAP32[(($3987)>>2)]=2;
      var $3988=$a80;
      var $3989=$regs;
      var $3990=(($3989+((($3988)*(12))&-1))|0);
      var $3991=(($3990)|0);
      var $3992=$3991;
      HEAP32[(($3992)>>2)]=1;
      label = 426; break;
    case 426: 
      label = 430; break;
    case 427: 
      label = 428; break;
    case 428: 
      var $3996=$a80;
      var $3997=$regs;
      var $3998=(($3997+((($3996)*(12))&-1))|0);
      var $3999=(($3998+8)|0);
      HEAP32[(($3999)>>2)]=0;
      var $4000=$a80;
      var $4001=$regs;
      var $4002=(($4001+((($4000)*(12))&-1))|0);
      var $4003=(($4002)|0);
      var $4004=$4003;
      HEAP32[(($4004)>>2)]=1;
      label = 429; break;
    case 429: 
      label = 430; break;
    case 430: 
      label = 431; break;
    case 431: 
      label = 443; break;
    case 432: 
      label = 433; break;
    case 433: 
      var $4010=$a80;
      var $4011=$regs;
      var $4012=(($4011+((($4010)*(12))&-1))|0);
      var $4013=(($4012)|0);
      var $4014=$4013;
      var $4015=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4014)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4014)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4016=$a80;
      var $4017=((($4016)+(1))|0);
      var $4018=$regs;
      var $4019=(($4018+((($4017)*(12))&-1))|0);
      var $4020=(($4019)|0);
      var $4021=$4020;
      var $4022=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4021)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4021)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4023=$4015 == $4022;
      if ($4023) { label = 434; break; } else { label = 437; break; }
    case 434: 
      label = 435; break;
    case 435: 
      var $4026=$a80;
      var $4027=$regs;
      var $4028=(($4027+((($4026)*(12))&-1))|0);
      var $4029=(($4028+8)|0);
      HEAP32[(($4029)>>2)]=2;
      var $4030=$a80;
      var $4031=$regs;
      var $4032=(($4031+((($4030)*(12))&-1))|0);
      var $4033=(($4032)|0);
      var $4034=$4033;
      HEAP32[(($4034)>>2)]=1;
      label = 436; break;
    case 436: 
      label = 440; break;
    case 437: 
      label = 438; break;
    case 438: 
      var $4038=$a80;
      var $4039=$regs;
      var $4040=(($4039+((($4038)*(12))&-1))|0);
      var $4041=(($4040+8)|0);
      HEAP32[(($4041)>>2)]=0;
      var $4042=$a80;
      var $4043=$regs;
      var $4044=(($4043+((($4042)*(12))&-1))|0);
      var $4045=(($4044)|0);
      var $4046=$4045;
      HEAP32[(($4046)>>2)]=1;
      label = 439; break;
    case 439: 
      label = 440; break;
    case 440: 
      label = 441; break;
    case 441: 
      label = 443; break;
    case 442: 
      label = 78; break;
    case 443: 
      label = 444; break;
    case 444: 
      label = 445; break;
    case 445: 
      var $4054=$pc;
      var $4055=(($4054+4)|0);
      $pc=$4055;
      var $4056=HEAP32[(($4055)>>2)];
      $i=$4056;
      var $4057=$i;
      var $4058=$4057 & 127;
      var $4059=((77372+($4058<<2))|0);
      var $4060=HEAP32[(($4059)>>2)];
      var $5859 = $4060;label = 708; break;
    case 446: 
      label = 447; break;
    case 447: 
      var $4063=$i;
      var $4064=$4063 >>> 23;
      var $4065=$4064 & 511;
      $a81=$4065;
      var $4066=$a81;
      var $4067=$regs;
      var $4068=(($4067+((($4066)*(12))&-1))|0);
      var $4069=(($4068+8)|0);
      var $4070=HEAP32[(($4069)>>2)];
      var $4071=(($4070) & 65535);
      var $4072=(($4071)&(65535));
      var $4073=$4072 << 8;
      var $4074=$a81;
      var $4075=((($4074)+(1))|0);
      var $4076=$regs;
      var $4077=(($4076+((($4075)*(12))&-1))|0);
      var $4078=(($4077+8)|0);
      var $4079=HEAP32[(($4078)>>2)];
      var $4080=(($4079) & 65535);
      var $4081=(($4080)&(65535));
      var $4082=$4081 & 255;
      var $4083=$4073 | $4082;
      if ((($4083)|(0))==771) {
        label = 448; break;
      }
      else if ((($4083)|(0))==774) {
        label = 458; break;
      }
      else if ((($4083)|(0))==1539) {
        label = 468; break;
      }
      else if ((($4083)|(0))==1542) {
        label = 478; break;
      }
      else {
      label = 488; break;
      }
    case 448: 
      label = 449; break;
    case 449: 
      var $4086=$a81;
      var $4087=$regs;
      var $4088=(($4087+((($4086)*(12))&-1))|0);
      var $4089=(($4088)|0);
      var $4090=$4089;
      var $4091=HEAP32[(($4090)>>2)];
      var $4092=$a81;
      var $4093=((($4092)+(1))|0);
      var $4094=$regs;
      var $4095=(($4094+((($4093)*(12))&-1))|0);
      var $4096=(($4095)|0);
      var $4097=$4096;
      var $4098=HEAP32[(($4097)>>2)];
      var $4099=(($4091)|(0)) < (($4098)|(0));
      if ($4099) { label = 450; break; } else { label = 453; break; }
    case 450: 
      label = 451; break;
    case 451: 
      var $4102=$a81;
      var $4103=$regs;
      var $4104=(($4103+((($4102)*(12))&-1))|0);
      var $4105=(($4104+8)|0);
      HEAP32[(($4105)>>2)]=2;
      var $4106=$a81;
      var $4107=$regs;
      var $4108=(($4107+((($4106)*(12))&-1))|0);
      var $4109=(($4108)|0);
      var $4110=$4109;
      HEAP32[(($4110)>>2)]=1;
      label = 452; break;
    case 452: 
      label = 456; break;
    case 453: 
      label = 454; break;
    case 454: 
      var $4114=$a81;
      var $4115=$regs;
      var $4116=(($4115+((($4114)*(12))&-1))|0);
      var $4117=(($4116+8)|0);
      HEAP32[(($4117)>>2)]=0;
      var $4118=$a81;
      var $4119=$regs;
      var $4120=(($4119+((($4118)*(12))&-1))|0);
      var $4121=(($4120)|0);
      var $4122=$4121;
      HEAP32[(($4122)>>2)]=1;
      label = 455; break;
    case 455: 
      label = 456; break;
    case 456: 
      label = 457; break;
    case 457: 
      label = 489; break;
    case 458: 
      label = 459; break;
    case 459: 
      var $4128=$a81;
      var $4129=$regs;
      var $4130=(($4129+((($4128)*(12))&-1))|0);
      var $4131=(($4130)|0);
      var $4132=$4131;
      var $4133=HEAP32[(($4132)>>2)];
      var $4134=(($4133)|(0));
      var $4135=$a81;
      var $4136=((($4135)+(1))|0);
      var $4137=$regs;
      var $4138=(($4137+((($4136)*(12))&-1))|0);
      var $4139=(($4138)|0);
      var $4140=$4139;
      var $4141=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4140)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4140)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4142=$4134 < $4141;
      if ($4142) { label = 460; break; } else { label = 463; break; }
    case 460: 
      label = 461; break;
    case 461: 
      var $4145=$a81;
      var $4146=$regs;
      var $4147=(($4146+((($4145)*(12))&-1))|0);
      var $4148=(($4147+8)|0);
      HEAP32[(($4148)>>2)]=2;
      var $4149=$a81;
      var $4150=$regs;
      var $4151=(($4150+((($4149)*(12))&-1))|0);
      var $4152=(($4151)|0);
      var $4153=$4152;
      HEAP32[(($4153)>>2)]=1;
      label = 462; break;
    case 462: 
      label = 466; break;
    case 463: 
      label = 464; break;
    case 464: 
      var $4157=$a81;
      var $4158=$regs;
      var $4159=(($4158+((($4157)*(12))&-1))|0);
      var $4160=(($4159+8)|0);
      HEAP32[(($4160)>>2)]=0;
      var $4161=$a81;
      var $4162=$regs;
      var $4163=(($4162+((($4161)*(12))&-1))|0);
      var $4164=(($4163)|0);
      var $4165=$4164;
      HEAP32[(($4165)>>2)]=1;
      label = 465; break;
    case 465: 
      label = 466; break;
    case 466: 
      label = 467; break;
    case 467: 
      label = 489; break;
    case 468: 
      label = 469; break;
    case 469: 
      var $4171=$a81;
      var $4172=$regs;
      var $4173=(($4172+((($4171)*(12))&-1))|0);
      var $4174=(($4173)|0);
      var $4175=$4174;
      var $4176=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4175)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4175)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4177=$a81;
      var $4178=((($4177)+(1))|0);
      var $4179=$regs;
      var $4180=(($4179+((($4178)*(12))&-1))|0);
      var $4181=(($4180)|0);
      var $4182=$4181;
      var $4183=HEAP32[(($4182)>>2)];
      var $4184=(($4183)|(0));
      var $4185=$4176 < $4184;
      if ($4185) { label = 470; break; } else { label = 473; break; }
    case 470: 
      label = 471; break;
    case 471: 
      var $4188=$a81;
      var $4189=$regs;
      var $4190=(($4189+((($4188)*(12))&-1))|0);
      var $4191=(($4190+8)|0);
      HEAP32[(($4191)>>2)]=2;
      var $4192=$a81;
      var $4193=$regs;
      var $4194=(($4193+((($4192)*(12))&-1))|0);
      var $4195=(($4194)|0);
      var $4196=$4195;
      HEAP32[(($4196)>>2)]=1;
      label = 472; break;
    case 472: 
      label = 476; break;
    case 473: 
      label = 474; break;
    case 474: 
      var $4200=$a81;
      var $4201=$regs;
      var $4202=(($4201+((($4200)*(12))&-1))|0);
      var $4203=(($4202+8)|0);
      HEAP32[(($4203)>>2)]=0;
      var $4204=$a81;
      var $4205=$regs;
      var $4206=(($4205+((($4204)*(12))&-1))|0);
      var $4207=(($4206)|0);
      var $4208=$4207;
      HEAP32[(($4208)>>2)]=1;
      label = 475; break;
    case 475: 
      label = 476; break;
    case 476: 
      label = 477; break;
    case 477: 
      label = 489; break;
    case 478: 
      label = 479; break;
    case 479: 
      var $4214=$a81;
      var $4215=$regs;
      var $4216=(($4215+((($4214)*(12))&-1))|0);
      var $4217=(($4216)|0);
      var $4218=$4217;
      var $4219=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4218)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4218)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4220=$a81;
      var $4221=((($4220)+(1))|0);
      var $4222=$regs;
      var $4223=(($4222+((($4221)*(12))&-1))|0);
      var $4224=(($4223)|0);
      var $4225=$4224;
      var $4226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4225)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4225)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4227=$4219 < $4226;
      if ($4227) { label = 480; break; } else { label = 483; break; }
    case 480: 
      label = 481; break;
    case 481: 
      var $4230=$a81;
      var $4231=$regs;
      var $4232=(($4231+((($4230)*(12))&-1))|0);
      var $4233=(($4232+8)|0);
      HEAP32[(($4233)>>2)]=2;
      var $4234=$a81;
      var $4235=$regs;
      var $4236=(($4235+((($4234)*(12))&-1))|0);
      var $4237=(($4236)|0);
      var $4238=$4237;
      HEAP32[(($4238)>>2)]=1;
      label = 482; break;
    case 482: 
      label = 486; break;
    case 483: 
      label = 484; break;
    case 484: 
      var $4242=$a81;
      var $4243=$regs;
      var $4244=(($4243+((($4242)*(12))&-1))|0);
      var $4245=(($4244+8)|0);
      HEAP32[(($4245)>>2)]=0;
      var $4246=$a81;
      var $4247=$regs;
      var $4248=(($4247+((($4246)*(12))&-1))|0);
      var $4249=(($4248)|0);
      var $4250=$4249;
      HEAP32[(($4250)>>2)]=1;
      label = 485; break;
    case 485: 
      label = 486; break;
    case 486: 
      label = 487; break;
    case 487: 
      label = 489; break;
    case 488: 
      label = 78; break;
    case 489: 
      label = 490; break;
    case 490: 
      var $4257=$pc;
      var $4258=(($4257+4)|0);
      $pc=$4258;
      var $4259=HEAP32[(($4258)>>2)];
      $i=$4259;
      var $4260=$i;
      var $4261=$4260 & 127;
      var $4262=((77372+($4261<<2))|0);
      var $4263=HEAP32[(($4262)>>2)];
      var $5859 = $4263;label = 708; break;
    case 491: 
      label = 492; break;
    case 492: 
      var $4266=$i;
      var $4267=$4266 >>> 23;
      var $4268=$4267 & 511;
      $a82=$4268;
      var $4269=$a82;
      var $4270=$regs;
      var $4271=(($4270+((($4269)*(12))&-1))|0);
      var $4272=(($4271+8)|0);
      var $4273=HEAP32[(($4272)>>2)];
      var $4274=(($4273) & 65535);
      var $4275=(($4274)&(65535));
      var $4276=$4275 << 8;
      var $4277=$a82;
      var $4278=((($4277)+(1))|0);
      var $4279=$regs;
      var $4280=(($4279+((($4278)*(12))&-1))|0);
      var $4281=(($4280+8)|0);
      var $4282=HEAP32[(($4281)>>2)];
      var $4283=(($4282) & 65535);
      var $4284=(($4283)&(65535));
      var $4285=$4284 & 255;
      var $4286=$4276 | $4285;
      if ((($4286)|(0))==771) {
        label = 493; break;
      }
      else if ((($4286)|(0))==774) {
        label = 503; break;
      }
      else if ((($4286)|(0))==1539) {
        label = 513; break;
      }
      else if ((($4286)|(0))==1542) {
        label = 523; break;
      }
      else {
      label = 533; break;
      }
    case 493: 
      label = 494; break;
    case 494: 
      var $4289=$a82;
      var $4290=$regs;
      var $4291=(($4290+((($4289)*(12))&-1))|0);
      var $4292=(($4291)|0);
      var $4293=$4292;
      var $4294=HEAP32[(($4293)>>2)];
      var $4295=$a82;
      var $4296=((($4295)+(1))|0);
      var $4297=$regs;
      var $4298=(($4297+((($4296)*(12))&-1))|0);
      var $4299=(($4298)|0);
      var $4300=$4299;
      var $4301=HEAP32[(($4300)>>2)];
      var $4302=(($4294)|(0)) <= (($4301)|(0));
      if ($4302) { label = 495; break; } else { label = 498; break; }
    case 495: 
      label = 496; break;
    case 496: 
      var $4305=$a82;
      var $4306=$regs;
      var $4307=(($4306+((($4305)*(12))&-1))|0);
      var $4308=(($4307+8)|0);
      HEAP32[(($4308)>>2)]=2;
      var $4309=$a82;
      var $4310=$regs;
      var $4311=(($4310+((($4309)*(12))&-1))|0);
      var $4312=(($4311)|0);
      var $4313=$4312;
      HEAP32[(($4313)>>2)]=1;
      label = 497; break;
    case 497: 
      label = 501; break;
    case 498: 
      label = 499; break;
    case 499: 
      var $4317=$a82;
      var $4318=$regs;
      var $4319=(($4318+((($4317)*(12))&-1))|0);
      var $4320=(($4319+8)|0);
      HEAP32[(($4320)>>2)]=0;
      var $4321=$a82;
      var $4322=$regs;
      var $4323=(($4322+((($4321)*(12))&-1))|0);
      var $4324=(($4323)|0);
      var $4325=$4324;
      HEAP32[(($4325)>>2)]=1;
      label = 500; break;
    case 500: 
      label = 501; break;
    case 501: 
      label = 502; break;
    case 502: 
      label = 534; break;
    case 503: 
      label = 504; break;
    case 504: 
      var $4331=$a82;
      var $4332=$regs;
      var $4333=(($4332+((($4331)*(12))&-1))|0);
      var $4334=(($4333)|0);
      var $4335=$4334;
      var $4336=HEAP32[(($4335)>>2)];
      var $4337=(($4336)|(0));
      var $4338=$a82;
      var $4339=((($4338)+(1))|0);
      var $4340=$regs;
      var $4341=(($4340+((($4339)*(12))&-1))|0);
      var $4342=(($4341)|0);
      var $4343=$4342;
      var $4344=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4343)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4343)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4345=$4337 <= $4344;
      if ($4345) { label = 505; break; } else { label = 508; break; }
    case 505: 
      label = 506; break;
    case 506: 
      var $4348=$a82;
      var $4349=$regs;
      var $4350=(($4349+((($4348)*(12))&-1))|0);
      var $4351=(($4350+8)|0);
      HEAP32[(($4351)>>2)]=2;
      var $4352=$a82;
      var $4353=$regs;
      var $4354=(($4353+((($4352)*(12))&-1))|0);
      var $4355=(($4354)|0);
      var $4356=$4355;
      HEAP32[(($4356)>>2)]=1;
      label = 507; break;
    case 507: 
      label = 511; break;
    case 508: 
      label = 509; break;
    case 509: 
      var $4360=$a82;
      var $4361=$regs;
      var $4362=(($4361+((($4360)*(12))&-1))|0);
      var $4363=(($4362+8)|0);
      HEAP32[(($4363)>>2)]=0;
      var $4364=$a82;
      var $4365=$regs;
      var $4366=(($4365+((($4364)*(12))&-1))|0);
      var $4367=(($4366)|0);
      var $4368=$4367;
      HEAP32[(($4368)>>2)]=1;
      label = 510; break;
    case 510: 
      label = 511; break;
    case 511: 
      label = 512; break;
    case 512: 
      label = 534; break;
    case 513: 
      label = 514; break;
    case 514: 
      var $4374=$a82;
      var $4375=$regs;
      var $4376=(($4375+((($4374)*(12))&-1))|0);
      var $4377=(($4376)|0);
      var $4378=$4377;
      var $4379=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4378)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4378)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4380=$a82;
      var $4381=((($4380)+(1))|0);
      var $4382=$regs;
      var $4383=(($4382+((($4381)*(12))&-1))|0);
      var $4384=(($4383)|0);
      var $4385=$4384;
      var $4386=HEAP32[(($4385)>>2)];
      var $4387=(($4386)|(0));
      var $4388=$4379 <= $4387;
      if ($4388) { label = 515; break; } else { label = 518; break; }
    case 515: 
      label = 516; break;
    case 516: 
      var $4391=$a82;
      var $4392=$regs;
      var $4393=(($4392+((($4391)*(12))&-1))|0);
      var $4394=(($4393+8)|0);
      HEAP32[(($4394)>>2)]=2;
      var $4395=$a82;
      var $4396=$regs;
      var $4397=(($4396+((($4395)*(12))&-1))|0);
      var $4398=(($4397)|0);
      var $4399=$4398;
      HEAP32[(($4399)>>2)]=1;
      label = 517; break;
    case 517: 
      label = 521; break;
    case 518: 
      label = 519; break;
    case 519: 
      var $4403=$a82;
      var $4404=$regs;
      var $4405=(($4404+((($4403)*(12))&-1))|0);
      var $4406=(($4405+8)|0);
      HEAP32[(($4406)>>2)]=0;
      var $4407=$a82;
      var $4408=$regs;
      var $4409=(($4408+((($4407)*(12))&-1))|0);
      var $4410=(($4409)|0);
      var $4411=$4410;
      HEAP32[(($4411)>>2)]=1;
      label = 520; break;
    case 520: 
      label = 521; break;
    case 521: 
      label = 522; break;
    case 522: 
      label = 534; break;
    case 523: 
      label = 524; break;
    case 524: 
      var $4417=$a82;
      var $4418=$regs;
      var $4419=(($4418+((($4417)*(12))&-1))|0);
      var $4420=(($4419)|0);
      var $4421=$4420;
      var $4422=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4421)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4421)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4423=$a82;
      var $4424=((($4423)+(1))|0);
      var $4425=$regs;
      var $4426=(($4425+((($4424)*(12))&-1))|0);
      var $4427=(($4426)|0);
      var $4428=$4427;
      var $4429=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4428)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4428)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4430=$4422 <= $4429;
      if ($4430) { label = 525; break; } else { label = 528; break; }
    case 525: 
      label = 526; break;
    case 526: 
      var $4433=$a82;
      var $4434=$regs;
      var $4435=(($4434+((($4433)*(12))&-1))|0);
      var $4436=(($4435+8)|0);
      HEAP32[(($4436)>>2)]=2;
      var $4437=$a82;
      var $4438=$regs;
      var $4439=(($4438+((($4437)*(12))&-1))|0);
      var $4440=(($4439)|0);
      var $4441=$4440;
      HEAP32[(($4441)>>2)]=1;
      label = 527; break;
    case 527: 
      label = 531; break;
    case 528: 
      label = 529; break;
    case 529: 
      var $4445=$a82;
      var $4446=$regs;
      var $4447=(($4446+((($4445)*(12))&-1))|0);
      var $4448=(($4447+8)|0);
      HEAP32[(($4448)>>2)]=0;
      var $4449=$a82;
      var $4450=$regs;
      var $4451=(($4450+((($4449)*(12))&-1))|0);
      var $4452=(($4451)|0);
      var $4453=$4452;
      HEAP32[(($4453)>>2)]=1;
      label = 530; break;
    case 530: 
      label = 531; break;
    case 531: 
      label = 532; break;
    case 532: 
      label = 534; break;
    case 533: 
      label = 78; break;
    case 534: 
      label = 535; break;
    case 535: 
      var $4460=$pc;
      var $4461=(($4460+4)|0);
      $pc=$4461;
      var $4462=HEAP32[(($4461)>>2)];
      $i=$4462;
      var $4463=$i;
      var $4464=$4463 & 127;
      var $4465=((77372+($4464<<2))|0);
      var $4466=HEAP32[(($4465)>>2)];
      var $5859 = $4466;label = 708; break;
    case 536: 
      label = 537; break;
    case 537: 
      var $4469=$i;
      var $4470=$4469 >>> 23;
      var $4471=$4470 & 511;
      $a83=$4471;
      var $4472=$a83;
      var $4473=$regs;
      var $4474=(($4473+((($4472)*(12))&-1))|0);
      var $4475=(($4474+8)|0);
      var $4476=HEAP32[(($4475)>>2)];
      var $4477=(($4476) & 65535);
      var $4478=(($4477)&(65535));
      var $4479=$4478 << 8;
      var $4480=$a83;
      var $4481=((($4480)+(1))|0);
      var $4482=$regs;
      var $4483=(($4482+((($4481)*(12))&-1))|0);
      var $4484=(($4483+8)|0);
      var $4485=HEAP32[(($4484)>>2)];
      var $4486=(($4485) & 65535);
      var $4487=(($4486)&(65535));
      var $4488=$4487 & 255;
      var $4489=$4479 | $4488;
      if ((($4489)|(0))==771) {
        label = 538; break;
      }
      else if ((($4489)|(0))==774) {
        label = 548; break;
      }
      else if ((($4489)|(0))==1539) {
        label = 558; break;
      }
      else if ((($4489)|(0))==1542) {
        label = 568; break;
      }
      else {
      label = 578; break;
      }
    case 538: 
      label = 539; break;
    case 539: 
      var $4492=$a83;
      var $4493=$regs;
      var $4494=(($4493+((($4492)*(12))&-1))|0);
      var $4495=(($4494)|0);
      var $4496=$4495;
      var $4497=HEAP32[(($4496)>>2)];
      var $4498=$a83;
      var $4499=((($4498)+(1))|0);
      var $4500=$regs;
      var $4501=(($4500+((($4499)*(12))&-1))|0);
      var $4502=(($4501)|0);
      var $4503=$4502;
      var $4504=HEAP32[(($4503)>>2)];
      var $4505=(($4497)|(0)) > (($4504)|(0));
      if ($4505) { label = 540; break; } else { label = 543; break; }
    case 540: 
      label = 541; break;
    case 541: 
      var $4508=$a83;
      var $4509=$regs;
      var $4510=(($4509+((($4508)*(12))&-1))|0);
      var $4511=(($4510+8)|0);
      HEAP32[(($4511)>>2)]=2;
      var $4512=$a83;
      var $4513=$regs;
      var $4514=(($4513+((($4512)*(12))&-1))|0);
      var $4515=(($4514)|0);
      var $4516=$4515;
      HEAP32[(($4516)>>2)]=1;
      label = 542; break;
    case 542: 
      label = 546; break;
    case 543: 
      label = 544; break;
    case 544: 
      var $4520=$a83;
      var $4521=$regs;
      var $4522=(($4521+((($4520)*(12))&-1))|0);
      var $4523=(($4522+8)|0);
      HEAP32[(($4523)>>2)]=0;
      var $4524=$a83;
      var $4525=$regs;
      var $4526=(($4525+((($4524)*(12))&-1))|0);
      var $4527=(($4526)|0);
      var $4528=$4527;
      HEAP32[(($4528)>>2)]=1;
      label = 545; break;
    case 545: 
      label = 546; break;
    case 546: 
      label = 547; break;
    case 547: 
      label = 579; break;
    case 548: 
      label = 549; break;
    case 549: 
      var $4534=$a83;
      var $4535=$regs;
      var $4536=(($4535+((($4534)*(12))&-1))|0);
      var $4537=(($4536)|0);
      var $4538=$4537;
      var $4539=HEAP32[(($4538)>>2)];
      var $4540=(($4539)|(0));
      var $4541=$a83;
      var $4542=((($4541)+(1))|0);
      var $4543=$regs;
      var $4544=(($4543+((($4542)*(12))&-1))|0);
      var $4545=(($4544)|0);
      var $4546=$4545;
      var $4547=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4546)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4546)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4548=$4540 > $4547;
      if ($4548) { label = 550; break; } else { label = 553; break; }
    case 550: 
      label = 551; break;
    case 551: 
      var $4551=$a83;
      var $4552=$regs;
      var $4553=(($4552+((($4551)*(12))&-1))|0);
      var $4554=(($4553+8)|0);
      HEAP32[(($4554)>>2)]=2;
      var $4555=$a83;
      var $4556=$regs;
      var $4557=(($4556+((($4555)*(12))&-1))|0);
      var $4558=(($4557)|0);
      var $4559=$4558;
      HEAP32[(($4559)>>2)]=1;
      label = 552; break;
    case 552: 
      label = 556; break;
    case 553: 
      label = 554; break;
    case 554: 
      var $4563=$a83;
      var $4564=$regs;
      var $4565=(($4564+((($4563)*(12))&-1))|0);
      var $4566=(($4565+8)|0);
      HEAP32[(($4566)>>2)]=0;
      var $4567=$a83;
      var $4568=$regs;
      var $4569=(($4568+((($4567)*(12))&-1))|0);
      var $4570=(($4569)|0);
      var $4571=$4570;
      HEAP32[(($4571)>>2)]=1;
      label = 555; break;
    case 555: 
      label = 556; break;
    case 556: 
      label = 557; break;
    case 557: 
      label = 579; break;
    case 558: 
      label = 559; break;
    case 559: 
      var $4577=$a83;
      var $4578=$regs;
      var $4579=(($4578+((($4577)*(12))&-1))|0);
      var $4580=(($4579)|0);
      var $4581=$4580;
      var $4582=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4581)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4581)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4583=$a83;
      var $4584=((($4583)+(1))|0);
      var $4585=$regs;
      var $4586=(($4585+((($4584)*(12))&-1))|0);
      var $4587=(($4586)|0);
      var $4588=$4587;
      var $4589=HEAP32[(($4588)>>2)];
      var $4590=(($4589)|(0));
      var $4591=$4582 > $4590;
      if ($4591) { label = 560; break; } else { label = 563; break; }
    case 560: 
      label = 561; break;
    case 561: 
      var $4594=$a83;
      var $4595=$regs;
      var $4596=(($4595+((($4594)*(12))&-1))|0);
      var $4597=(($4596+8)|0);
      HEAP32[(($4597)>>2)]=2;
      var $4598=$a83;
      var $4599=$regs;
      var $4600=(($4599+((($4598)*(12))&-1))|0);
      var $4601=(($4600)|0);
      var $4602=$4601;
      HEAP32[(($4602)>>2)]=1;
      label = 562; break;
    case 562: 
      label = 566; break;
    case 563: 
      label = 564; break;
    case 564: 
      var $4606=$a83;
      var $4607=$regs;
      var $4608=(($4607+((($4606)*(12))&-1))|0);
      var $4609=(($4608+8)|0);
      HEAP32[(($4609)>>2)]=0;
      var $4610=$a83;
      var $4611=$regs;
      var $4612=(($4611+((($4610)*(12))&-1))|0);
      var $4613=(($4612)|0);
      var $4614=$4613;
      HEAP32[(($4614)>>2)]=1;
      label = 565; break;
    case 565: 
      label = 566; break;
    case 566: 
      label = 567; break;
    case 567: 
      label = 579; break;
    case 568: 
      label = 569; break;
    case 569: 
      var $4620=$a83;
      var $4621=$regs;
      var $4622=(($4621+((($4620)*(12))&-1))|0);
      var $4623=(($4622)|0);
      var $4624=$4623;
      var $4625=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4624)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4624)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4626=$a83;
      var $4627=((($4626)+(1))|0);
      var $4628=$regs;
      var $4629=(($4628+((($4627)*(12))&-1))|0);
      var $4630=(($4629)|0);
      var $4631=$4630;
      var $4632=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4631)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4631)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4633=$4625 > $4632;
      if ($4633) { label = 570; break; } else { label = 573; break; }
    case 570: 
      label = 571; break;
    case 571: 
      var $4636=$a83;
      var $4637=$regs;
      var $4638=(($4637+((($4636)*(12))&-1))|0);
      var $4639=(($4638+8)|0);
      HEAP32[(($4639)>>2)]=2;
      var $4640=$a83;
      var $4641=$regs;
      var $4642=(($4641+((($4640)*(12))&-1))|0);
      var $4643=(($4642)|0);
      var $4644=$4643;
      HEAP32[(($4644)>>2)]=1;
      label = 572; break;
    case 572: 
      label = 576; break;
    case 573: 
      label = 574; break;
    case 574: 
      var $4648=$a83;
      var $4649=$regs;
      var $4650=(($4649+((($4648)*(12))&-1))|0);
      var $4651=(($4650+8)|0);
      HEAP32[(($4651)>>2)]=0;
      var $4652=$a83;
      var $4653=$regs;
      var $4654=(($4653+((($4652)*(12))&-1))|0);
      var $4655=(($4654)|0);
      var $4656=$4655;
      HEAP32[(($4656)>>2)]=1;
      label = 575; break;
    case 575: 
      label = 576; break;
    case 576: 
      label = 577; break;
    case 577: 
      label = 579; break;
    case 578: 
      label = 78; break;
    case 579: 
      label = 580; break;
    case 580: 
      var $4663=$pc;
      var $4664=(($4663+4)|0);
      $pc=$4664;
      var $4665=HEAP32[(($4664)>>2)];
      $i=$4665;
      var $4666=$i;
      var $4667=$4666 & 127;
      var $4668=((77372+($4667<<2))|0);
      var $4669=HEAP32[(($4668)>>2)];
      var $5859 = $4669;label = 708; break;
    case 581: 
      label = 582; break;
    case 582: 
      var $4672=$i;
      var $4673=$4672 >>> 23;
      var $4674=$4673 & 511;
      $a84=$4674;
      var $4675=$a84;
      var $4676=$regs;
      var $4677=(($4676+((($4675)*(12))&-1))|0);
      var $4678=(($4677+8)|0);
      var $4679=HEAP32[(($4678)>>2)];
      var $4680=(($4679) & 65535);
      var $4681=(($4680)&(65535));
      var $4682=$4681 << 8;
      var $4683=$a84;
      var $4684=((($4683)+(1))|0);
      var $4685=$regs;
      var $4686=(($4685+((($4684)*(12))&-1))|0);
      var $4687=(($4686+8)|0);
      var $4688=HEAP32[(($4687)>>2)];
      var $4689=(($4688) & 65535);
      var $4690=(($4689)&(65535));
      var $4691=$4690 & 255;
      var $4692=$4682 | $4691;
      if ((($4692)|(0))==771) {
        label = 583; break;
      }
      else if ((($4692)|(0))==774) {
        label = 593; break;
      }
      else if ((($4692)|(0))==1539) {
        label = 603; break;
      }
      else if ((($4692)|(0))==1542) {
        label = 613; break;
      }
      else {
      label = 623; break;
      }
    case 583: 
      label = 584; break;
    case 584: 
      var $4695=$a84;
      var $4696=$regs;
      var $4697=(($4696+((($4695)*(12))&-1))|0);
      var $4698=(($4697)|0);
      var $4699=$4698;
      var $4700=HEAP32[(($4699)>>2)];
      var $4701=$a84;
      var $4702=((($4701)+(1))|0);
      var $4703=$regs;
      var $4704=(($4703+((($4702)*(12))&-1))|0);
      var $4705=(($4704)|0);
      var $4706=$4705;
      var $4707=HEAP32[(($4706)>>2)];
      var $4708=(($4700)|(0)) >= (($4707)|(0));
      if ($4708) { label = 585; break; } else { label = 588; break; }
    case 585: 
      label = 586; break;
    case 586: 
      var $4711=$a84;
      var $4712=$regs;
      var $4713=(($4712+((($4711)*(12))&-1))|0);
      var $4714=(($4713+8)|0);
      HEAP32[(($4714)>>2)]=2;
      var $4715=$a84;
      var $4716=$regs;
      var $4717=(($4716+((($4715)*(12))&-1))|0);
      var $4718=(($4717)|0);
      var $4719=$4718;
      HEAP32[(($4719)>>2)]=1;
      label = 587; break;
    case 587: 
      label = 591; break;
    case 588: 
      label = 589; break;
    case 589: 
      var $4723=$a84;
      var $4724=$regs;
      var $4725=(($4724+((($4723)*(12))&-1))|0);
      var $4726=(($4725+8)|0);
      HEAP32[(($4726)>>2)]=0;
      var $4727=$a84;
      var $4728=$regs;
      var $4729=(($4728+((($4727)*(12))&-1))|0);
      var $4730=(($4729)|0);
      var $4731=$4730;
      HEAP32[(($4731)>>2)]=1;
      label = 590; break;
    case 590: 
      label = 591; break;
    case 591: 
      label = 592; break;
    case 592: 
      label = 624; break;
    case 593: 
      label = 594; break;
    case 594: 
      var $4737=$a84;
      var $4738=$regs;
      var $4739=(($4738+((($4737)*(12))&-1))|0);
      var $4740=(($4739)|0);
      var $4741=$4740;
      var $4742=HEAP32[(($4741)>>2)];
      var $4743=(($4742)|(0));
      var $4744=$a84;
      var $4745=((($4744)+(1))|0);
      var $4746=$regs;
      var $4747=(($4746+((($4745)*(12))&-1))|0);
      var $4748=(($4747)|0);
      var $4749=$4748;
      var $4750=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4749)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4749)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4751=$4743 >= $4750;
      if ($4751) { label = 595; break; } else { label = 598; break; }
    case 595: 
      label = 596; break;
    case 596: 
      var $4754=$a84;
      var $4755=$regs;
      var $4756=(($4755+((($4754)*(12))&-1))|0);
      var $4757=(($4756+8)|0);
      HEAP32[(($4757)>>2)]=2;
      var $4758=$a84;
      var $4759=$regs;
      var $4760=(($4759+((($4758)*(12))&-1))|0);
      var $4761=(($4760)|0);
      var $4762=$4761;
      HEAP32[(($4762)>>2)]=1;
      label = 597; break;
    case 597: 
      label = 601; break;
    case 598: 
      label = 599; break;
    case 599: 
      var $4766=$a84;
      var $4767=$regs;
      var $4768=(($4767+((($4766)*(12))&-1))|0);
      var $4769=(($4768+8)|0);
      HEAP32[(($4769)>>2)]=0;
      var $4770=$a84;
      var $4771=$regs;
      var $4772=(($4771+((($4770)*(12))&-1))|0);
      var $4773=(($4772)|0);
      var $4774=$4773;
      HEAP32[(($4774)>>2)]=1;
      label = 600; break;
    case 600: 
      label = 601; break;
    case 601: 
      label = 602; break;
    case 602: 
      label = 624; break;
    case 603: 
      label = 604; break;
    case 604: 
      var $4780=$a84;
      var $4781=$regs;
      var $4782=(($4781+((($4780)*(12))&-1))|0);
      var $4783=(($4782)|0);
      var $4784=$4783;
      var $4785=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4784)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4784)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4786=$a84;
      var $4787=((($4786)+(1))|0);
      var $4788=$regs;
      var $4789=(($4788+((($4787)*(12))&-1))|0);
      var $4790=(($4789)|0);
      var $4791=$4790;
      var $4792=HEAP32[(($4791)>>2)];
      var $4793=(($4792)|(0));
      var $4794=$4785 >= $4793;
      if ($4794) { label = 605; break; } else { label = 608; break; }
    case 605: 
      label = 606; break;
    case 606: 
      var $4797=$a84;
      var $4798=$regs;
      var $4799=(($4798+((($4797)*(12))&-1))|0);
      var $4800=(($4799+8)|0);
      HEAP32[(($4800)>>2)]=2;
      var $4801=$a84;
      var $4802=$regs;
      var $4803=(($4802+((($4801)*(12))&-1))|0);
      var $4804=(($4803)|0);
      var $4805=$4804;
      HEAP32[(($4805)>>2)]=1;
      label = 607; break;
    case 607: 
      label = 611; break;
    case 608: 
      label = 609; break;
    case 609: 
      var $4809=$a84;
      var $4810=$regs;
      var $4811=(($4810+((($4809)*(12))&-1))|0);
      var $4812=(($4811+8)|0);
      HEAP32[(($4812)>>2)]=0;
      var $4813=$a84;
      var $4814=$regs;
      var $4815=(($4814+((($4813)*(12))&-1))|0);
      var $4816=(($4815)|0);
      var $4817=$4816;
      HEAP32[(($4817)>>2)]=1;
      label = 610; break;
    case 610: 
      label = 611; break;
    case 611: 
      label = 612; break;
    case 612: 
      label = 624; break;
    case 613: 
      label = 614; break;
    case 614: 
      var $4823=$a84;
      var $4824=$regs;
      var $4825=(($4824+((($4823)*(12))&-1))|0);
      var $4826=(($4825)|0);
      var $4827=$4826;
      var $4828=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4827)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4827)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4829=$a84;
      var $4830=((($4829)+(1))|0);
      var $4831=$regs;
      var $4832=(($4831+((($4830)*(12))&-1))|0);
      var $4833=(($4832)|0);
      var $4834=$4833;
      var $4835=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($4834)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($4834)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $4836=$4828 >= $4835;
      if ($4836) { label = 615; break; } else { label = 618; break; }
    case 615: 
      label = 616; break;
    case 616: 
      var $4839=$a84;
      var $4840=$regs;
      var $4841=(($4840+((($4839)*(12))&-1))|0);
      var $4842=(($4841+8)|0);
      HEAP32[(($4842)>>2)]=2;
      var $4843=$a84;
      var $4844=$regs;
      var $4845=(($4844+((($4843)*(12))&-1))|0);
      var $4846=(($4845)|0);
      var $4847=$4846;
      HEAP32[(($4847)>>2)]=1;
      label = 617; break;
    case 617: 
      label = 621; break;
    case 618: 
      label = 619; break;
    case 619: 
      var $4851=$a84;
      var $4852=$regs;
      var $4853=(($4852+((($4851)*(12))&-1))|0);
      var $4854=(($4853+8)|0);
      HEAP32[(($4854)>>2)]=0;
      var $4855=$a84;
      var $4856=$regs;
      var $4857=(($4856+((($4855)*(12))&-1))|0);
      var $4858=(($4857)|0);
      var $4859=$4858;
      HEAP32[(($4859)>>2)]=1;
      label = 620; break;
    case 620: 
      label = 621; break;
    case 621: 
      label = 622; break;
    case 622: 
      label = 624; break;
    case 623: 
      label = 78; break;
    case 624: 
      label = 625; break;
    case 625: 
      var $4866=$pc;
      var $4867=(($4866+4)|0);
      $pc=$4867;
      var $4868=HEAP32[(($4867)>>2)];
      $i=$4868;
      var $4869=$i;
      var $4870=$4869 & 127;
      var $4871=((77372+($4870<<2))|0);
      var $4872=HEAP32[(($4871)>>2)];
      var $5859 = $4872;label = 708; break;
    case 626: 
      var $4874=$i;
      var $4875=$4874 >>> 23;
      var $4876=$4875 & 511;
      var $4877=$regs;
      var $4878=(($4877+((($4876)*(12))&-1))|0);
      var $4879=$1;
      var $4880=$i;
      var $4881=$4880 >>> 7;
      var $4882=$4881 & 127;
      var $4883=$i;
      var $4884=$4883 >>> 14;
      var $4885=$4884 & 511;
      var $4886=$regs;
      var $4887=(($4886+((($4885)*(12))&-1))|0);
      _mrb_ary_new_from_values($28, $4879, $4882, $4887);
      var $4888=$4878;
      var $4889=$28;
      assert(12 % 1 === 0);HEAP32[(($4888)>>2)]=HEAP32[(($4889)>>2)];HEAP32[((($4888)+(4))>>2)]=HEAP32[((($4889)+(4))>>2)];HEAP32[((($4888)+(8))>>2)]=HEAP32[((($4889)+(8))>>2)];
      var $4890=$1;
      var $4891=$ai;
      _mrb_gc_arena_restore($4890, $4891);
      var $4892=$pc;
      var $4893=(($4892+4)|0);
      $pc=$4893;
      var $4894=HEAP32[(($4893)>>2)];
      $i=$4894;
      var $4895=$i;
      var $4896=$4895 & 127;
      var $4897=((77372+($4896<<2))|0);
      var $4898=HEAP32[(($4897)>>2)];
      var $5859 = $4898;label = 708; break;
    case 627: 
      var $4900=$1;
      var $4901=$i;
      var $4902=$4901 >>> 23;
      var $4903=$4902 & 511;
      var $4904=$regs;
      var $4905=(($4904+((($4903)*(12))&-1))|0);
      var $4906=$1;
      var $4907=$i;
      var $4908=$4907 >>> 14;
      var $4909=$4908 & 511;
      var $4910=$regs;
      var $4911=(($4910+((($4909)*(12))&-1))|0);
      _mrb_ary_splat($29, $4906, $4911);
      _mrb_ary_concat($4900, $4905, $29);
      var $4912=$1;
      var $4913=$ai;
      _mrb_gc_arena_restore($4912, $4913);
      var $4914=$pc;
      var $4915=(($4914+4)|0);
      $pc=$4915;
      var $4916=HEAP32[(($4915)>>2)];
      $i=$4916;
      var $4917=$i;
      var $4918=$4917 & 127;
      var $4919=((77372+($4918<<2))|0);
      var $4920=HEAP32[(($4919)>>2)];
      var $5859 = $4920;label = 708; break;
    case 628: 
      var $4922=$1;
      var $4923=$i;
      var $4924=$4923 >>> 23;
      var $4925=$4924 & 511;
      var $4926=$regs;
      var $4927=(($4926+((($4925)*(12))&-1))|0);
      var $4928=$i;
      var $4929=$4928 >>> 14;
      var $4930=$4929 & 511;
      var $4931=$regs;
      var $4932=(($4931+((($4930)*(12))&-1))|0);
      _mrb_ary_push($4922, $4927, $4932);
      var $4933=$pc;
      var $4934=(($4933+4)|0);
      $pc=$4934;
      var $4935=HEAP32[(($4934)>>2)];
      $i=$4935;
      var $4936=$i;
      var $4937=$4936 & 127;
      var $4938=((77372+($4937<<2))|0);
      var $4939=HEAP32[(($4938)>>2)];
      var $5859 = $4939;label = 708; break;
    case 629: 
      var $4941=$i;
      var $4942=$4941 >>> 23;
      var $4943=$4942 & 511;
      $a85=$4943;
      var $4944=$i;
      var $4945=$4944 >>> 7;
      var $4946=$4945 & 127;
      $c86=$4946;
      var $4947=$i;
      var $4948=$4947 >>> 14;
      var $4949=$4948 & 511;
      var $4950=$regs;
      var $4951=(($4950+((($4949)*(12))&-1))|0);
      var $4952=$v87;
      var $4953=$4951;
      assert(12 % 1 === 0);HEAP32[(($4952)>>2)]=HEAP32[(($4953)>>2)];HEAP32[((($4952)+(4))>>2)]=HEAP32[((($4953)+(4))>>2)];HEAP32[((($4952)+(8))>>2)]=HEAP32[((($4953)+(8))>>2)];
      var $4954=(($v87+8)|0);
      var $4955=HEAP32[(($4954)>>2)];
      var $4956=(($4955)|(0))==14;
      if ($4956) { label = 636; break; } else { label = 630; break; }
    case 630: 
      var $4958=$c86;
      var $4959=(($4958)|(0))==0;
      if ($4959) { label = 631; break; } else { label = 632; break; }
    case 631: 
      var $4961=$i;
      var $4962=$4961 >>> 23;
      var $4963=$4962 & 511;
      var $4964=$regs;
      var $4965=(($4964+((($4963)*(12))&-1))|0);
      var $4966=$4965;
      var $4967=$v87;
      assert(12 % 1 === 0);HEAP32[(($4966)>>2)]=HEAP32[(($4967)>>2)];HEAP32[((($4966)+(4))>>2)]=HEAP32[((($4967)+(4))>>2)];HEAP32[((($4966)+(8))>>2)]=HEAP32[((($4967)+(8))>>2)];
      label = 635; break;
    case 632: 
      label = 633; break;
    case 633: 
      var $4970=$a85;
      var $4971=$regs;
      var $4972=(($4971+((($4970)*(12))&-1))|0);
      var $4973=(($4972+8)|0);
      HEAP32[(($4973)>>2)]=0;
      var $4974=$a85;
      var $4975=$regs;
      var $4976=(($4975+((($4974)*(12))&-1))|0);
      var $4977=(($4976)|0);
      var $4978=$4977;
      HEAP32[(($4978)>>2)]=0;
      label = 634; break;
    case 634: 
      label = 635; break;
    case 635: 
      label = 637; break;
    case 636: 
      var $4982=$i;
      var $4983=$4982 >>> 23;
      var $4984=$4983 & 511;
      var $4985=$regs;
      var $4986=(($4985+((($4984)*(12))&-1))|0);
      var $4987=$1;
      var $4988=$c86;
      _mrb_ary_ref($30, $4987, $v87, $4988);
      var $4989=$4986;
      var $4990=$30;
      assert(12 % 1 === 0);HEAP32[(($4989)>>2)]=HEAP32[(($4990)>>2)];HEAP32[((($4989)+(4))>>2)]=HEAP32[((($4990)+(4))>>2)];HEAP32[((($4989)+(8))>>2)]=HEAP32[((($4990)+(8))>>2)];
      label = 637; break;
    case 637: 
      var $4992=$pc;
      var $4993=(($4992+4)|0);
      $pc=$4993;
      var $4994=HEAP32[(($4993)>>2)];
      $i=$4994;
      var $4995=$i;
      var $4996=$4995 & 127;
      var $4997=((77372+($4996<<2))|0);
      var $4998=HEAP32[(($4997)>>2)];
      var $5859 = $4998;label = 708; break;
    case 638: 
      var $5000=$1;
      var $5001=$i;
      var $5002=$5001 >>> 14;
      var $5003=$5002 & 511;
      var $5004=$regs;
      var $5005=(($5004+((($5003)*(12))&-1))|0);
      var $5006=$i;
      var $5007=$5006 >>> 7;
      var $5008=$5007 & 127;
      var $5009=$i;
      var $5010=$5009 >>> 23;
      var $5011=$5010 & 511;
      var $5012=$regs;
      var $5013=(($5012+((($5011)*(12))&-1))|0);
      _mrb_ary_set($5000, $5005, $5008, $5013);
      var $5014=$pc;
      var $5015=(($5014+4)|0);
      $pc=$5015;
      var $5016=HEAP32[(($5015)>>2)];
      $i=$5016;
      var $5017=$i;
      var $5018=$5017 & 127;
      var $5019=((77372+($5018<<2))|0);
      var $5020=HEAP32[(($5019)>>2)];
      var $5859 = $5020;label = 708; break;
    case 639: 
      var $5022=$i;
      var $5023=$5022 >>> 23;
      var $5024=$5023 & 511;
      $a88=$5024;
      var $5025=$a88;
      var $5026=$regs;
      var $5027=(($5026+((($5025)*(12))&-1))|0);
      var $5028=$v89;
      var $5029=$5027;
      assert(12 % 1 === 0);HEAP32[(($5028)>>2)]=HEAP32[(($5029)>>2)];HEAP32[((($5028)+(4))>>2)]=HEAP32[((($5029)+(4))>>2)];HEAP32[((($5028)+(8))>>2)]=HEAP32[((($5029)+(8))>>2)];
      var $5030=$i;
      var $5031=$5030 >>> 14;
      var $5032=$5031 & 511;
      $pre=$5032;
      var $5033=$i;
      var $5034=$5033 >>> 7;
      var $5035=$5034 & 127;
      $post=$5035;
      var $5036=(($v89+8)|0);
      var $5037=HEAP32[(($5036)>>2)];
      var $5038=(($5037)|(0))==14;
      if ($5038) { label = 646; break; } else { label = 640; break; }
    case 640: 
      var $5040=$a88;
      var $5041=((($5040)+(1))|0);
      $a88=$5041;
      var $5042=$regs;
      var $5043=(($5042+((($5040)*(12))&-1))|0);
      var $5044=$1;
      _mrb_ary_new_capa($31, $5044, 0);
      var $5045=$5043;
      var $5046=$31;
      assert(12 % 1 === 0);HEAP32[(($5045)>>2)]=HEAP32[(($5046)>>2)];HEAP32[((($5045)+(4))>>2)]=HEAP32[((($5046)+(4))>>2)];HEAP32[((($5045)+(8))>>2)]=HEAP32[((($5046)+(8))>>2)];
      label = 641; break;
    case 641: 
      var $5048=$post;
      var $5049=((($5048)-(1))|0);
      $post=$5049;
      var $5050=(($5048)|(0))!=0;
      if ($5050) { label = 642; break; } else { label = 645; break; }
    case 642: 
      label = 643; break;
    case 643: 
      var $5053=$a88;
      var $5054=$regs;
      var $5055=(($5054+((($5053)*(12))&-1))|0);
      var $5056=(($5055+8)|0);
      HEAP32[(($5056)>>2)]=0;
      var $5057=$a88;
      var $5058=$regs;
      var $5059=(($5058+((($5057)*(12))&-1))|0);
      var $5060=(($5059)|0);
      var $5061=$5060;
      HEAP32[(($5061)>>2)]=0;
      label = 644; break;
    case 644: 
      var $5063=$a88;
      var $5064=((($5063)+(1))|0);
      $a88=$5064;
      label = 641; break;
    case 645: 
      label = 662; break;
    case 646: 
      var $5067=(($v89)|0);
      var $5068=$5067;
      var $5069=HEAP32[(($5068)>>2)];
      var $5070=$5069;
      $ary90=$5070;
      var $5071=$ary90;
      var $5072=(($5071+12)|0);
      var $5073=HEAP32[(($5072)>>2)];
      $len91=$5073;
      var $5074=$len91;
      var $5075=$pre;
      var $5076=$post;
      var $5077=((($5075)+($5076))|0);
      var $5078=(($5074)|(0)) > (($5077)|(0));
      if ($5078) { label = 647; break; } else { label = 651; break; }
    case 647: 
      var $5080=$a88;
      var $5081=((($5080)+(1))|0);
      $a88=$5081;
      var $5082=$regs;
      var $5083=(($5082+((($5080)*(12))&-1))|0);
      var $5084=$1;
      var $5085=$len91;
      var $5086=$pre;
      var $5087=((($5085)-($5086))|0);
      var $5088=$post;
      var $5089=((($5087)-($5088))|0);
      var $5090=$ary90;
      var $5091=(($5090+20)|0);
      var $5092=HEAP32[(($5091)>>2)];
      var $5093=$pre;
      var $5094=(($5092+((($5093)*(12))&-1))|0);
      _mrb_ary_new_from_values($32, $5084, $5089, $5094);
      var $5095=$5083;
      var $5096=$32;
      assert(12 % 1 === 0);HEAP32[(($5095)>>2)]=HEAP32[(($5096)>>2)];HEAP32[((($5095)+(4))>>2)]=HEAP32[((($5096)+(4))>>2)];HEAP32[((($5095)+(8))>>2)]=HEAP32[((($5096)+(8))>>2)];
      label = 648; break;
    case 648: 
      var $5098=$post;
      var $5099=((($5098)-(1))|0);
      $post=$5099;
      var $5100=(($5098)|(0))!=0;
      if ($5100) { label = 649; break; } else { label = 650; break; }
    case 649: 
      var $5102=$a88;
      var $5103=((($5102)+(1))|0);
      $a88=$5103;
      var $5104=$regs;
      var $5105=(($5104+((($5102)*(12))&-1))|0);
      var $5106=$len91;
      var $5107=$post;
      var $5108=((($5106)-($5107))|0);
      var $5109=((($5108)-(1))|0);
      var $5110=$ary90;
      var $5111=(($5110+20)|0);
      var $5112=HEAP32[(($5111)>>2)];
      var $5113=(($5112+((($5109)*(12))&-1))|0);
      var $5114=$5105;
      var $5115=$5113;
      assert(12 % 1 === 0);HEAP32[(($5114)>>2)]=HEAP32[(($5115)>>2)];HEAP32[((($5114)+(4))>>2)]=HEAP32[((($5115)+(4))>>2)];HEAP32[((($5114)+(8))>>2)]=HEAP32[((($5115)+(8))>>2)];
      label = 648; break;
    case 650: 
      label = 661; break;
    case 651: 
      var $5118=$a88;
      var $5119=((($5118)+(1))|0);
      $a88=$5119;
      var $5120=$regs;
      var $5121=(($5120+((($5118)*(12))&-1))|0);
      var $5122=$1;
      _mrb_ary_new_capa($33, $5122, 0);
      var $5123=$5121;
      var $5124=$33;
      assert(12 % 1 === 0);HEAP32[(($5123)>>2)]=HEAP32[(($5124)>>2)];HEAP32[((($5123)+(4))>>2)]=HEAP32[((($5124)+(4))>>2)];HEAP32[((($5123)+(8))>>2)]=HEAP32[((($5124)+(8))>>2)];
      $i92=0;
      label = 652; break;
    case 652: 
      var $5126=$i92;
      var $5127=$pre;
      var $5128=((($5126)+($5127))|0);
      var $5129=$len91;
      var $5130=(($5128)|(0)) < (($5129)|(0));
      if ($5130) { label = 653; break; } else { label = 655; break; }
    case 653: 
      var $5132=$a88;
      var $5133=$i92;
      var $5134=((($5132)+($5133))|0);
      var $5135=$regs;
      var $5136=(($5135+((($5134)*(12))&-1))|0);
      var $5137=$pre;
      var $5138=$i92;
      var $5139=((($5137)+($5138))|0);
      var $5140=$ary90;
      var $5141=(($5140+20)|0);
      var $5142=HEAP32[(($5141)>>2)];
      var $5143=(($5142+((($5139)*(12))&-1))|0);
      var $5144=$5136;
      var $5145=$5143;
      assert(12 % 1 === 0);HEAP32[(($5144)>>2)]=HEAP32[(($5145)>>2)];HEAP32[((($5144)+(4))>>2)]=HEAP32[((($5145)+(4))>>2)];HEAP32[((($5144)+(8))>>2)]=HEAP32[((($5145)+(8))>>2)];
      label = 654; break;
    case 654: 
      var $5147=$i92;
      var $5148=((($5147)+(1))|0);
      $i92=$5148;
      label = 652; break;
    case 655: 
      label = 656; break;
    case 656: 
      var $5151=$i92;
      var $5152=$post;
      var $5153=(($5151)|(0)) < (($5152)|(0));
      if ($5153) { label = 657; break; } else { label = 660; break; }
    case 657: 
      label = 658; break;
    case 658: 
      var $5156=$a88;
      var $5157=$i92;
      var $5158=((($5156)+($5157))|0);
      var $5159=$regs;
      var $5160=(($5159+((($5158)*(12))&-1))|0);
      var $5161=(($5160+8)|0);
      HEAP32[(($5161)>>2)]=0;
      var $5162=$a88;
      var $5163=$i92;
      var $5164=((($5162)+($5163))|0);
      var $5165=$regs;
      var $5166=(($5165+((($5164)*(12))&-1))|0);
      var $5167=(($5166)|0);
      var $5168=$5167;
      HEAP32[(($5168)>>2)]=0;
      label = 659; break;
    case 659: 
      var $5170=$i92;
      var $5171=((($5170)+(1))|0);
      $i92=$5171;
      label = 656; break;
    case 660: 
      label = 661; break;
    case 661: 
      label = 662; break;
    case 662: 
      var $5175=$1;
      var $5176=$ai;
      _mrb_gc_arena_restore($5175, $5176);
      var $5177=$pc;
      var $5178=(($5177+4)|0);
      $pc=$5178;
      var $5179=HEAP32[(($5178)>>2)];
      $i=$5179;
      var $5180=$i;
      var $5181=$5180 & 127;
      var $5182=((77372+($5181<<2))|0);
      var $5183=HEAP32[(($5182)>>2)];
      var $5859 = $5183;label = 708; break;
    case 663: 
      var $5185=$i;
      var $5186=$5185 >>> 23;
      var $5187=$5186 & 511;
      var $5188=$regs;
      var $5189=(($5188+((($5187)*(12))&-1))|0);
      var $5190=$1;
      var $5191=$i;
      var $5192=$5191 >>> 7;
      var $5193=$5192 & 65535;
      var $5194=$pool;
      var $5195=(($5194+((($5193)*(12))&-1))|0);
      _mrb_str_literal($34, $5190, $5195);
      var $5196=$5189;
      var $5197=$34;
      assert(12 % 1 === 0);HEAP32[(($5196)>>2)]=HEAP32[(($5197)>>2)];HEAP32[((($5196)+(4))>>2)]=HEAP32[((($5197)+(4))>>2)];HEAP32[((($5196)+(8))>>2)]=HEAP32[((($5197)+(8))>>2)];
      var $5198=$1;
      var $5199=$ai;
      _mrb_gc_arena_restore($5198, $5199);
      var $5200=$pc;
      var $5201=(($5200+4)|0);
      $pc=$5201;
      var $5202=HEAP32[(($5201)>>2)];
      $i=$5202;
      var $5203=$i;
      var $5204=$5203 & 127;
      var $5205=((77372+($5204<<2))|0);
      var $5206=HEAP32[(($5205)>>2)];
      var $5859 = $5206;label = 708; break;
    case 664: 
      var $5208=$1;
      var $5209=$i;
      var $5210=$5209 >>> 23;
      var $5211=$5210 & 511;
      var $5212=$regs;
      var $5213=(($5212+((($5211)*(12))&-1))|0);
      var $5214=$i;
      var $5215=$5214 >>> 14;
      var $5216=$5215 & 511;
      var $5217=$regs;
      var $5218=(($5217+((($5216)*(12))&-1))|0);
      _mrb_str_concat($5208, $5213, $5218);
      var $5219=$pc;
      var $5220=(($5219+4)|0);
      $pc=$5220;
      var $5221=HEAP32[(($5220)>>2)];
      $i=$5221;
      var $5222=$i;
      var $5223=$5222 & 127;
      var $5224=((77372+($5223<<2))|0);
      var $5225=HEAP32[(($5224)>>2)];
      var $5859 = $5225;label = 708; break;
    case 665: 
      var $5227=$i;
      var $5228=$5227 >>> 14;
      var $5229=$5228 & 511;
      $b=$5229;
      var $5230=$i;
      var $5231=$5230 >>> 7;
      var $5232=$5231 & 127;
      $c93=$5232;
      var $5233=$b;
      var $5234=$c93;
      var $5235=($5234<<1);
      var $5236=((($5233)+($5235))|0);
      $lim=$5236;
      var $5237=$1;
      var $5238=$c93;
      _mrb_hash_new_capa($hash, $5237, $5238);
      label = 666; break;
    case 666: 
      var $5240=$b;
      var $5241=$lim;
      var $5242=(($5240)|(0)) < (($5241)|(0));
      if ($5242) { label = 667; break; } else { label = 668; break; }
    case 667: 
      var $5244=$1;
      var $5245=$b;
      var $5246=$regs;
      var $5247=(($5246+((($5245)*(12))&-1))|0);
      var $5248=$b;
      var $5249=((($5248)+(1))|0);
      var $5250=$regs;
      var $5251=(($5250+((($5249)*(12))&-1))|0);
      _mrb_hash_set($5244, $hash, $5247, $5251);
      var $5252=$b;
      var $5253=((($5252)+(2))|0);
      $b=$5253;
      label = 666; break;
    case 668: 
      var $5255=$i;
      var $5256=$5255 >>> 23;
      var $5257=$5256 & 511;
      var $5258=$regs;
      var $5259=(($5258+((($5257)*(12))&-1))|0);
      var $5260=$5259;
      var $5261=$hash;
      assert(12 % 1 === 0);HEAP32[(($5260)>>2)]=HEAP32[(($5261)>>2)];HEAP32[((($5260)+(4))>>2)]=HEAP32[((($5261)+(4))>>2)];HEAP32[((($5260)+(8))>>2)]=HEAP32[((($5261)+(8))>>2)];
      var $5262=$1;
      var $5263=$ai;
      _mrb_gc_arena_restore($5262, $5263);
      var $5264=$pc;
      var $5265=(($5264+4)|0);
      $pc=$5265;
      var $5266=HEAP32[(($5265)>>2)];
      $i=$5266;
      var $5267=$i;
      var $5268=$5267 & 127;
      var $5269=((77372+($5268<<2))|0);
      var $5270=HEAP32[(($5269)>>2)];
      var $5859 = $5270;label = 708; break;
    case 669: 
      var $5272=$i;
      var $5273=$5272 >>> 7;
      var $5274=$5273 & 3;
      $c95=$5274;
      var $5275=$c95;
      var $5276=$5275 & 2;
      var $5277=(($5276)|(0))!=0;
      if ($5277) { label = 670; break; } else { label = 671; break; }
    case 670: 
      var $5279=$1;
      var $5280=$irep;
      var $5281=(($5280)|0);
      var $5282=HEAP32[(($5281)>>2)];
      var $5283=$i;
      var $5284=$5283 >>> 9;
      var $5285=$5284 & 16383;
      var $5286=((($5282)+($5285))|0);
      var $5287=$1;
      var $5288=(($5287+24)|0);
      var $5289=HEAP32[(($5288)>>2)];
      var $5290=(($5289+($5286<<2))|0);
      var $5291=HEAP32[(($5290)>>2)];
      var $5292=_mrb_closure_new($5279, $5291);
      $p94=$5292;
      label = 672; break;
    case 671: 
      var $5294=$1;
      var $5295=$irep;
      var $5296=(($5295)|0);
      var $5297=HEAP32[(($5296)>>2)];
      var $5298=$i;
      var $5299=$5298 >>> 9;
      var $5300=$5299 & 16383;
      var $5301=((($5297)+($5300))|0);
      var $5302=$1;
      var $5303=(($5302+24)|0);
      var $5304=HEAP32[(($5303)>>2)];
      var $5305=(($5304+($5301<<2))|0);
      var $5306=HEAP32[(($5305)>>2)];
      var $5307=_mrb_proc_new($5294, $5306);
      $p94=$5307;
      label = 672; break;
    case 672: 
      var $5309=$c95;
      var $5310=$5309 & 1;
      var $5311=(($5310)|(0))!=0;
      if ($5311) { label = 673; break; } else { label = 674; break; }
    case 673: 
      var $5313=$p94;
      var $5314=$5313;
      var $5315=HEAP32[(($5314)>>2)];
      var $5316=$5315 >>> 11;
      var $5317=$5316 & 2097151;
      var $5318=$5317 | 256;
      var $5319=$5318 & 2097151;
      var $5320=$5313;
      var $5321=$5319 & 2097151;
      var $5322=$5321 << 11;
      var $5323=HEAP32[(($5320)>>2)];
      var $5324=$5323 & 2047;
      var $5325=$5324 | $5322;
      HEAP32[(($5320)>>2)]=$5325;
      label = 674; break;
    case 674: 
      var $5327=$i;
      var $5328=$5327 >>> 23;
      var $5329=$5328 & 511;
      var $5330=$regs;
      var $5331=(($5330+((($5329)*(12))&-1))|0);
      var $5332=$p94;
      var $5333=$5332;
      _mrb_obj_value143($35, $5333);
      var $5334=$5331;
      var $5335=$35;
      assert(12 % 1 === 0);HEAP32[(($5334)>>2)]=HEAP32[(($5335)>>2)];HEAP32[((($5334)+(4))>>2)]=HEAP32[((($5335)+(4))>>2)];HEAP32[((($5334)+(8))>>2)]=HEAP32[((($5335)+(8))>>2)];
      var $5336=$1;
      var $5337=$ai;
      _mrb_gc_arena_restore($5336, $5337);
      var $5338=$pc;
      var $5339=(($5338+4)|0);
      $pc=$5339;
      var $5340=HEAP32[(($5339)>>2)];
      $i=$5340;
      var $5341=$i;
      var $5342=$5341 & 127;
      var $5343=((77372+($5342<<2))|0);
      var $5344=HEAP32[(($5343)>>2)];
      var $5859 = $5344;label = 708; break;
    case 675: 
      var $5346=$i;
      var $5347=$5346 >>> 23;
      var $5348=$5347 & 511;
      var $5349=$regs;
      var $5350=(($5349+((($5348)*(12))&-1))|0);
      var $5351=$1;
      var $5352=(($5351+44)|0);
      var $5353=HEAP32[(($5352)>>2)];
      var $5354=$5353;
      _mrb_obj_value143($36, $5354);
      var $5355=$5350;
      var $5356=$36;
      assert(12 % 1 === 0);HEAP32[(($5355)>>2)]=HEAP32[(($5356)>>2)];HEAP32[((($5355)+(4))>>2)]=HEAP32[((($5356)+(4))>>2)];HEAP32[((($5355)+(8))>>2)]=HEAP32[((($5356)+(8))>>2)];
      var $5357=$pc;
      var $5358=(($5357+4)|0);
      $pc=$5358;
      var $5359=HEAP32[(($5358)>>2)];
      $i=$5359;
      var $5360=$i;
      var $5361=$5360 & 127;
      var $5362=((77372+($5361<<2))|0);
      var $5363=HEAP32[(($5362)>>2)];
      var $5859 = $5363;label = 708; break;
    case 676: 
      $c96=0;
      var $5365=$i;
      var $5366=$5365 >>> 23;
      var $5367=$5366 & 511;
      $a97=$5367;
      var $5368=$i;
      var $5369=$5368 >>> 14;
      var $5370=$5369 & 511;
      var $5371=$syms;
      var $5372=(($5371+($5370<<1))|0);
      var $5373=HEAP16[(($5372)>>1)];
      $id=$5373;
      var $5374=$a97;
      var $5375=$regs;
      var $5376=(($5375+((($5374)*(12))&-1))|0);
      var $5377=$base;
      var $5378=$5376;
      assert(12 % 1 === 0);HEAP32[(($5377)>>2)]=HEAP32[(($5378)>>2)];HEAP32[((($5377)+(4))>>2)]=HEAP32[((($5378)+(4))>>2)];HEAP32[((($5377)+(8))>>2)]=HEAP32[((($5378)+(8))>>2)];
      var $5379=$a97;
      var $5380=((($5379)+(1))|0);
      var $5381=$regs;
      var $5382=(($5381+((($5380)*(12))&-1))|0);
      var $5383=$super;
      var $5384=$5382;
      assert(12 % 1 === 0);HEAP32[(($5383)>>2)]=HEAP32[(($5384)>>2)];HEAP32[((($5383)+(4))>>2)]=HEAP32[((($5384)+(4))>>2)];HEAP32[((($5383)+(8))>>2)]=HEAP32[((($5384)+(8))>>2)];
      var $5385=(($base+8)|0);
      var $5386=HEAP32[(($5385)>>2)];
      var $5387=(($5386)|(0))==0;
      if ($5387) { label = 677; break; } else { label = 679; break; }
    case 677: 
      var $5389=(($base)|0);
      var $5390=$5389;
      var $5391=HEAP32[(($5390)>>2)];
      var $5392=(($5391)|(0))!=0;
      if ($5392) { label = 679; break; } else { label = 678; break; }
    case 678: 
      var $5394=$1;
      var $5395=(($5394+8)|0);
      var $5396=HEAP32[(($5395)>>2)];
      var $5397=(($5396+16)|0);
      var $5398=HEAP32[(($5397)>>2)];
      var $5399=(($5398+28)|0);
      var $5400=HEAP32[(($5399)>>2)];
      var $5401=$5400;
      _mrb_obj_value143($37, $5401);
      var $5402=$base;
      var $5403=$37;
      assert(12 % 1 === 0);HEAP32[(($5402)>>2)]=HEAP32[(($5403)>>2)];HEAP32[((($5402)+(4))>>2)]=HEAP32[((($5403)+(4))>>2)];HEAP32[((($5402)+(8))>>2)]=HEAP32[((($5403)+(8))>>2)];
      label = 679; break;
    case 679: 
      var $5405=$1;
      var $5406=$id;
      var $5407=_mrb_vm_define_class($5405, $base, $super, $5406);
      $c96=$5407;
      var $5408=$a97;
      var $5409=$regs;
      var $5410=(($5409+((($5408)*(12))&-1))|0);
      var $5411=$c96;
      var $5412=$5411;
      _mrb_obj_value143($38, $5412);
      var $5413=$5410;
      var $5414=$38;
      assert(12 % 1 === 0);HEAP32[(($5413)>>2)]=HEAP32[(($5414)>>2)];HEAP32[((($5413)+(4))>>2)]=HEAP32[((($5414)+(4))>>2)];HEAP32[((($5413)+(8))>>2)]=HEAP32[((($5414)+(8))>>2)];
      var $5415=$1;
      var $5416=$ai;
      _mrb_gc_arena_restore($5415, $5416);
      var $5417=$pc;
      var $5418=(($5417+4)|0);
      $pc=$5418;
      var $5419=HEAP32[(($5418)>>2)];
      $i=$5419;
      var $5420=$i;
      var $5421=$5420 & 127;
      var $5422=((77372+($5421<<2))|0);
      var $5423=HEAP32[(($5422)>>2)];
      var $5859 = $5423;label = 708; break;
    case 680: 
      $c98=0;
      var $5425=$i;
      var $5426=$5425 >>> 23;
      var $5427=$5426 & 511;
      $a99=$5427;
      var $5428=$i;
      var $5429=$5428 >>> 14;
      var $5430=$5429 & 511;
      var $5431=$syms;
      var $5432=(($5431+($5430<<1))|0);
      var $5433=HEAP16[(($5432)>>1)];
      $id101=$5433;
      var $5434=$a99;
      var $5435=$regs;
      var $5436=(($5435+((($5434)*(12))&-1))|0);
      var $5437=$base100;
      var $5438=$5436;
      assert(12 % 1 === 0);HEAP32[(($5437)>>2)]=HEAP32[(($5438)>>2)];HEAP32[((($5437)+(4))>>2)]=HEAP32[((($5438)+(4))>>2)];HEAP32[((($5437)+(8))>>2)]=HEAP32[((($5438)+(8))>>2)];
      var $5439=(($base100+8)|0);
      var $5440=HEAP32[(($5439)>>2)];
      var $5441=(($5440)|(0))==0;
      if ($5441) { label = 681; break; } else { label = 683; break; }
    case 681: 
      var $5443=(($base100)|0);
      var $5444=$5443;
      var $5445=HEAP32[(($5444)>>2)];
      var $5446=(($5445)|(0))!=0;
      if ($5446) { label = 683; break; } else { label = 682; break; }
    case 682: 
      var $5448=$1;
      var $5449=(($5448+8)|0);
      var $5450=HEAP32[(($5449)>>2)];
      var $5451=(($5450+16)|0);
      var $5452=HEAP32[(($5451)>>2)];
      var $5453=(($5452+28)|0);
      var $5454=HEAP32[(($5453)>>2)];
      var $5455=$5454;
      _mrb_obj_value143($39, $5455);
      var $5456=$base100;
      var $5457=$39;
      assert(12 % 1 === 0);HEAP32[(($5456)>>2)]=HEAP32[(($5457)>>2)];HEAP32[((($5456)+(4))>>2)]=HEAP32[((($5457)+(4))>>2)];HEAP32[((($5456)+(8))>>2)]=HEAP32[((($5457)+(8))>>2)];
      label = 683; break;
    case 683: 
      var $5459=$1;
      var $5460=$id101;
      var $5461=_mrb_vm_define_module($5459, $base100, $5460);
      $c98=$5461;
      var $5462=$a99;
      var $5463=$regs;
      var $5464=(($5463+((($5462)*(12))&-1))|0);
      var $5465=$c98;
      var $5466=$5465;
      _mrb_obj_value143($40, $5466);
      var $5467=$5464;
      var $5468=$40;
      assert(12 % 1 === 0);HEAP32[(($5467)>>2)]=HEAP32[(($5468)>>2)];HEAP32[((($5467)+(4))>>2)]=HEAP32[((($5468)+(4))>>2)];HEAP32[((($5467)+(8))>>2)]=HEAP32[((($5468)+(8))>>2)];
      var $5469=$1;
      var $5470=$ai;
      _mrb_gc_arena_restore($5469, $5470);
      var $5471=$pc;
      var $5472=(($5471+4)|0);
      $pc=$5472;
      var $5473=HEAP32[(($5472)>>2)];
      $i=$5473;
      var $5474=$i;
      var $5475=$5474 & 127;
      var $5476=((77372+($5475<<2))|0);
      var $5477=HEAP32[(($5476)>>2)];
      var $5859 = $5477;label = 708; break;
    case 684: 
      var $5479=$i;
      var $5480=$5479 >>> 23;
      var $5481=$5480 & 511;
      $a102=$5481;
      var $5482=$a102;
      var $5483=$regs;
      var $5484=(($5483+((($5482)*(12))&-1))|0);
      var $5485=$recv104;
      var $5486=$5484;
      assert(12 % 1 === 0);HEAP32[(($5485)>>2)]=HEAP32[(($5486)>>2)];HEAP32[((($5485)+(4))>>2)]=HEAP32[((($5486)+(4))>>2)];HEAP32[((($5485)+(8))>>2)]=HEAP32[((($5486)+(8))>>2)];
      var $5487=$1;
      var $5488=_cipush($5487);
      $ci103=$5488;
      var $5489=$pc;
      var $5490=(($5489+4)|0);
      var $5491=$ci103;
      var $5492=(($5491+20)|0);
      HEAP32[(($5492)>>2)]=$5490;
      var $5493=$a102;
      var $5494=$ci103;
      var $5495=(($5494+24)|0);
      HEAP32[(($5495)>>2)]=$5493;
      var $5496=$ci103;
      var $5497=(($5496)|0);
      HEAP16[(($5497)>>1)]=0;
      var $5498=$1;
      var $5499=(($5498+8)|0);
      var $5500=HEAP32[(($5499)>>2)];
      var $5501=(($5500+4)|0);
      var $5502=HEAP32[(($5501)>>2)];
      var $5503=$1;
      var $5504=(($5503+8)|0);
      var $5505=HEAP32[(($5504)>>2)];
      var $5506=(($5505+8)|0);
      var $5507=HEAP32[(($5506)>>2)];
      var $5508=$5502;
      var $5509=$5507;
      var $5510=((($5508)-($5509))|0);
      var $5511=((((($5510)|(0)))/(12))&-1);
      var $5512=$ci103;
      var $5513=(($5512+8)|0);
      HEAP32[(($5513)>>2)]=$5511;
      var $5514=$ci103;
      var $5515=(($5514+16)|0);
      HEAP32[(($5515)>>2)]=0;
      var $5516=(($recv104)|0);
      var $5517=$5516;
      var $5518=HEAP32[(($5517)>>2)];
      var $5519=$5518;
      var $5520=$ci103;
      var $5521=(($5520+28)|0);
      HEAP32[(($5521)>>2)]=$5519;
      var $5522=$a102;
      var $5523=$1;
      var $5524=(($5523+8)|0);
      var $5525=HEAP32[(($5524)>>2)];
      var $5526=(($5525+4)|0);
      var $5527=HEAP32[(($5526)>>2)];
      var $5528=(($5527+((($5522)*(12))&-1))|0);
      HEAP32[(($5526)>>2)]=$5528;
      var $5529=$1;
      var $5530=$irep;
      var $5531=(($5530)|0);
      var $5532=HEAP32[(($5531)>>2)];
      var $5533=$i;
      var $5534=$5533 >>> 7;
      var $5535=$5534 & 65535;
      var $5536=((($5532)+($5535))|0);
      var $5537=$1;
      var $5538=(($5537+24)|0);
      var $5539=HEAP32[(($5538)>>2)];
      var $5540=(($5539+($5536<<2))|0);
      var $5541=HEAP32[(($5540)>>2)];
      var $5542=_mrb_proc_new($5529, $5541);
      $p105=$5542;
      var $5543=$ci103;
      var $5544=(($5543+28)|0);
      var $5545=HEAP32[(($5544)>>2)];
      var $5546=$p105;
      var $5547=(($5546+16)|0);
      HEAP32[(($5547)>>2)]=$5545;
      var $5548=$p105;
      var $5549=$ci103;
      var $5550=(($5549+4)|0);
      HEAP32[(($5550)>>2)]=$5548;
      var $5551=$p105;
      var $5552=$5551;
      var $5553=HEAP32[(($5552)>>2)];
      var $5554=$5553 >>> 11;
      var $5555=$5554 & 2097151;
      var $5556=$5555 & 128;
      var $5557=(($5556)|(0))!=0;
      if ($5557) { label = 685; break; } else { label = 688; break; }
    case 685: 
      var $5559=$1;
      var $5560=(($5559+8)|0);
      var $5561=HEAP32[(($5560)>>2)];
      var $5562=(($5561+4)|0);
      var $5563=HEAP32[(($5562)>>2)];
      var $5564=(($5563)|0);
      var $5565=$p105;
      var $5566=(($5565+12)|0);
      var $5567=$5566;
      var $5568=HEAP32[(($5567)>>2)];
      var $5569=$1;
      FUNCTION_TABLE[$5568]($41, $5569, $recv104);
      var $5570=$5564;
      var $5571=$41;
      assert(12 % 1 === 0);HEAP32[(($5570)>>2)]=HEAP32[(($5571)>>2)];HEAP32[((($5570)+(4))>>2)]=HEAP32[((($5571)+(4))>>2)];HEAP32[((($5570)+(8))>>2)]=HEAP32[((($5571)+(8))>>2)];
      var $5572=$1;
      var $5573=$ai;
      _mrb_gc_arena_restore($5572, $5573);
      var $5574=$1;
      var $5575=(($5574+16)|0);
      var $5576=HEAP32[(($5575)>>2)];
      var $5577=(($5576)|(0))!=0;
      if ($5577) { label = 686; break; } else { label = 687; break; }
    case 686: 
      label = 222; break;
    case 687: 
      var $5580=$1;
      var $5581=(($5580+8)|0);
      var $5582=HEAP32[(($5581)>>2)];
      var $5583=(($5582+8)|0);
      var $5584=HEAP32[(($5583)>>2)];
      var $5585=$1;
      var $5586=(($5585+8)|0);
      var $5587=HEAP32[(($5586)>>2)];
      var $5588=(($5587+16)|0);
      var $5589=HEAP32[(($5588)>>2)];
      var $5590=(($5589+8)|0);
      var $5591=HEAP32[(($5590)>>2)];
      var $5592=(($5584+((($5591)*(12))&-1))|0);
      var $5593=$1;
      var $5594=(($5593+8)|0);
      var $5595=HEAP32[(($5594)>>2)];
      var $5596=(($5595+4)|0);
      HEAP32[(($5596)>>2)]=$5592;
      $regs=$5592;
      var $5597=$1;
      _cipop($5597);
      var $5598=$pc;
      var $5599=(($5598+4)|0);
      $pc=$5599;
      var $5600=HEAP32[(($5599)>>2)];
      $i=$5600;
      var $5601=$i;
      var $5602=$5601 & 127;
      var $5603=((77372+($5602<<2))|0);
      var $5604=HEAP32[(($5603)>>2)];
      var $5859 = $5604;label = 708; break;
    case 688: 
      var $5606=$p105;
      var $5607=(($5606+12)|0);
      var $5608=$5607;
      var $5609=HEAP32[(($5608)>>2)];
      $irep=$5609;
      var $5610=$irep;
      var $5611=(($5610+16)|0);
      var $5612=HEAP32[(($5611)>>2)];
      $pool=$5612;
      var $5613=$irep;
      var $5614=(($5613+20)|0);
      var $5615=HEAP32[(($5614)>>2)];
      $syms=$5615;
      var $5616=$1;
      var $5617=$irep;
      var $5618=(($5617+6)|0);
      var $5619=HEAP16[(($5618)>>1)];
      var $5620=(($5619)&(65535));
      _stack_extend($5616, $5620, 1);
      var $5621=$irep;
      var $5622=(($5621+6)|0);
      var $5623=HEAP16[(($5622)>>1)];
      var $5624=(($5623)&(65535));
      var $5625=$ci103;
      var $5626=(($5625+12)|0);
      HEAP32[(($5626)>>2)]=$5624;
      var $5627=$1;
      var $5628=(($5627+8)|0);
      var $5629=HEAP32[(($5628)>>2)];
      var $5630=(($5629+4)|0);
      var $5631=HEAP32[(($5630)>>2)];
      $regs=$5631;
      var $5632=$irep;
      var $5633=(($5632+12)|0);
      var $5634=HEAP32[(($5633)>>2)];
      $pc=$5634;
      var $5635=$pc;
      var $5636=HEAP32[(($5635)>>2)];
      $i=$5636;
      var $5637=$i;
      var $5638=$5637 & 127;
      var $5639=((77372+($5638<<2))|0);
      var $5640=HEAP32[(($5639)>>2)];
      var $5859 = $5640;label = 708; break;
    case 689: 
      var $5642=$i;
      var $5643=$5642 >>> 23;
      var $5644=$5643 & 511;
      $a106=$5644;
      var $5645=$a106;
      var $5646=$regs;
      var $5647=(($5646+((($5645)*(12))&-1))|0);
      var $5648=(($5647)|0);
      var $5649=$5648;
      var $5650=HEAP32[(($5649)>>2)];
      var $5651=$5650;
      $c107=$5651;
      var $5652=$1;
      var $5653=$c107;
      var $5654=$i;
      var $5655=$5654 >>> 14;
      var $5656=$5655 & 511;
      var $5657=$syms;
      var $5658=(($5657+($5656<<1))|0);
      var $5659=HEAP16[(($5658)>>1)];
      var $5660=$a106;
      var $5661=((($5660)+(1))|0);
      var $5662=$regs;
      var $5663=(($5662+((($5661)*(12))&-1))|0);
      _mrb_define_method_vm($5652, $5653, $5659, $5663);
      var $5664=$1;
      var $5665=$ai;
      _mrb_gc_arena_restore($5664, $5665);
      var $5666=$pc;
      var $5667=(($5666+4)|0);
      $pc=$5667;
      var $5668=HEAP32[(($5667)>>2)];
      $i=$5668;
      var $5669=$i;
      var $5670=$5669 & 127;
      var $5671=((77372+($5670<<2))|0);
      var $5672=HEAP32[(($5671)>>2)];
      var $5859 = $5672;label = 708; break;
    case 690: 
      var $5674=$i;
      var $5675=$5674 >>> 23;
      var $5676=$5675 & 511;
      var $5677=$regs;
      var $5678=(($5677+((($5676)*(12))&-1))|0);
      var $5679=$1;
      var $5680=$i;
      var $5681=$5680 >>> 14;
      var $5682=$5681 & 511;
      var $5683=$regs;
      var $5684=(($5683+((($5682)*(12))&-1))|0);
      _mrb_singleton_class($42, $5679, $5684);
      var $5685=$5678;
      var $5686=$42;
      assert(12 % 1 === 0);HEAP32[(($5685)>>2)]=HEAP32[(($5686)>>2)];HEAP32[((($5685)+(4))>>2)]=HEAP32[((($5686)+(4))>>2)];HEAP32[((($5685)+(8))>>2)]=HEAP32[((($5686)+(8))>>2)];
      var $5687=$1;
      var $5688=$ai;
      _mrb_gc_arena_restore($5687, $5688);
      var $5689=$pc;
      var $5690=(($5689+4)|0);
      $pc=$5690;
      var $5691=HEAP32[(($5690)>>2)];
      $i=$5691;
      var $5692=$i;
      var $5693=$5692 & 127;
      var $5694=((77372+($5693<<2))|0);
      var $5695=HEAP32[(($5694)>>2)];
      var $5859 = $5695;label = 708; break;
    case 691: 
      var $5697=$1;
      var $5698=(($5697+8)|0);
      var $5699=HEAP32[(($5698)>>2)];
      var $5700=(($5699+16)|0);
      var $5701=HEAP32[(($5700)>>2)];
      var $5702=(($5701+28)|0);
      var $5703=HEAP32[(($5702)>>2)];
      var $5704=(($5703)|(0))!=0;
      if ($5704) { label = 693; break; } else { label = 692; break; }
    case 692: 
      var $5706=$1;
      var $5707=$1;
      var $5708=_mrb_class_get($5707, ((113920)|0));
      _mrb_exc_new($exc108, $5706, $5708, ((77676)|0), 25);
      var $5709=(($exc108)|0);
      var $5710=$5709;
      var $5711=HEAP32[(($5710)>>2)];
      var $5712=$5711;
      var $5713=$1;
      var $5714=(($5713+16)|0);
      HEAP32[(($5714)>>2)]=$5712;
      label = 222; break;
    case 693: 
      var $5716=$i;
      var $5717=$5716 >>> 23;
      var $5718=$5717 & 511;
      var $5719=$regs;
      var $5720=(($5719+((($5718)*(12))&-1))|0);
      var $5721=$1;
      var $5722=(($5721+8)|0);
      var $5723=HEAP32[(($5722)>>2)];
      var $5724=(($5723+16)|0);
      var $5725=HEAP32[(($5724)>>2)];
      var $5726=(($5725+28)|0);
      var $5727=HEAP32[(($5726)>>2)];
      var $5728=$5727;
      _mrb_obj_value143($43, $5728);
      var $5729=$5720;
      var $5730=$43;
      assert(12 % 1 === 0);HEAP32[(($5729)>>2)]=HEAP32[(($5730)>>2)];HEAP32[((($5729)+(4))>>2)]=HEAP32[((($5730)+(4))>>2)];HEAP32[((($5729)+(8))>>2)]=HEAP32[((($5730)+(8))>>2)];
      var $5731=$pc;
      var $5732=(($5731+4)|0);
      $pc=$5732;
      var $5733=HEAP32[(($5732)>>2)];
      $i=$5733;
      var $5734=$i;
      var $5735=$5734 & 127;
      var $5736=((77372+($5735<<2))|0);
      var $5737=HEAP32[(($5736)>>2)];
      var $5859 = $5737;label = 708; break;
    case 694: 
      var $5739=$i;
      var $5740=$5739 >>> 14;
      var $5741=$5740 & 511;
      $b109=$5741;
      var $5742=$i;
      var $5743=$5742 >>> 23;
      var $5744=$5743 & 511;
      var $5745=$regs;
      var $5746=(($5745+((($5744)*(12))&-1))|0);
      var $5747=$1;
      var $5748=$b109;
      var $5749=$regs;
      var $5750=(($5749+((($5748)*(12))&-1))|0);
      var $5751=$b109;
      var $5752=((($5751)+(1))|0);
      var $5753=$regs;
      var $5754=(($5753+((($5752)*(12))&-1))|0);
      var $5755=$i;
      var $5756=$5755 >>> 7;
      var $5757=$5756 & 127;
      _mrb_range_new($44, $5747, $5750, $5754, $5757);
      var $5758=$5746;
      var $5759=$44;
      assert(12 % 1 === 0);HEAP32[(($5758)>>2)]=HEAP32[(($5759)>>2)];HEAP32[((($5758)+(4))>>2)]=HEAP32[((($5759)+(4))>>2)];HEAP32[((($5758)+(8))>>2)]=HEAP32[((($5759)+(8))>>2)];
      var $5760=$1;
      var $5761=$ai;
      _mrb_gc_arena_restore($5760, $5761);
      var $5762=$pc;
      var $5763=(($5762+4)|0);
      $pc=$5763;
      var $5764=HEAP32[(($5763)>>2)];
      $i=$5764;
      var $5765=$i;
      var $5766=$5765 & 127;
      var $5767=((77372+($5766<<2))|0);
      var $5768=HEAP32[(($5767)>>2)];
      var $5859 = $5768;label = 708; break;
    case 695: 
      var $5770=$i;
      var $5771=$5770 >>> 23;
      var $5772=$5771 & 511;
      var $5773=$i;
      var $5774=$5773 >>> 14;
      var $5775=$5774 & 511;
      var $5776=$i;
      var $5777=$5776 >>> 7;
      var $5778=$5777 & 127;
      var $5779=_printf(((113300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$5772,HEAP32[(((tempInt)+(4))>>2)]=$5775,HEAP32[(((tempInt)+(8))>>2)]=$5778,tempInt));
      var $5780=$pc;
      var $5781=(($5780+4)|0);
      $pc=$5781;
      var $5782=HEAP32[(($5781)>>2)];
      $i=$5782;
      var $5783=$i;
      var $5784=$5783 & 127;
      var $5785=((77372+($5784<<2))|0);
      var $5786=HEAP32[(($5785)>>2)];
      var $5859 = $5786;label = 708; break;
    case 696: 
      label = 697; break;
    case 697: 
      var $5789=$1;
      var $5790=(($5789+8)|0);
      var $5791=HEAP32[(($5790)>>2)];
      var $5792=(($5791+16)|0);
      var $5793=HEAP32[(($5792)>>2)];
      var $5794=(($5793+36)|0);
      var $5795=HEAP32[(($5794)>>2)];
      $n110=$5795;
      label = 698; break;
    case 698: 
      var $5797=$n110;
      var $5798=((($5797)-(1))|0);
      $n110=$5798;
      var $5799=(($5797)|(0))!=0;
      if ($5799) { label = 699; break; } else { label = 700; break; }
    case 699: 
      var $5801=$1;
      var $5802=$n110;
      _ecall($5801, $5802);
      label = 698; break;
    case 700: 
      var $5804=$prev_jmp;
      var $5805=$5804;
      var $5806=$1;
      var $5807=(($5806)|0);
      HEAP32[(($5807)>>2)]=$5805;
      var $5808=$1;
      var $5809=(($5808+16)|0);
      var $5810=HEAP32[(($5809)>>2)];
      var $5811=(($5810)|(0))!=0;
      if ($5811) { label = 701; break; } else { label = 702; break; }
    case 701: 
      var $5813=$1;
      var $5814=(($5813+16)|0);
      var $5815=HEAP32[(($5814)>>2)];
      var $5816=$5815;
      _mrb_obj_value143($agg_result, $5816);
      label = 707; break;
    case 702: 
      var $5818=$irep;
      var $5819=(($5818+4)|0);
      var $5820=HEAP16[(($5819)>>1)];
      var $5821=(($5820)&(65535));
      var $5822=$regs;
      var $5823=(($5822+((($5821)*(12))&-1))|0);
      var $5824=$agg_result;
      var $5825=$5823;
      assert(12 % 1 === 0);HEAP32[(($5824)>>2)]=HEAP32[(($5825)>>2)];HEAP32[((($5824)+(4))>>2)]=HEAP32[((($5825)+(4))>>2)];HEAP32[((($5824)+(8))>>2)]=HEAP32[((($5825)+(8))>>2)];
      label = 707; break;
    case 703: 
      var $5827=$i;
      var $5828=$5827 >>> 7;
      var $5829=$5828 & 65535;
      var $5830=$pool;
      var $5831=(($5830+((($5829)*(12))&-1))|0);
      var $5832=$msg;
      var $5833=$5831;
      assert(12 % 1 === 0);HEAP32[(($5832)>>2)]=HEAP32[(($5833)>>2)];HEAP32[((($5832)+(4))>>2)]=HEAP32[((($5833)+(4))>>2)];HEAP32[((($5832)+(8))>>2)]=HEAP32[((($5833)+(8))>>2)];
      var $5834=$i;
      var $5835=$5834 >>> 23;
      var $5836=$5835 & 511;
      var $5837=(($5836)|(0))==0;
      if ($5837) { label = 704; break; } else { label = 705; break; }
    case 704: 
      var $5839=$1;
      var $5840=$1;
      var $5841=_mrb_class_get($5840, ((94760)|0));
      _mrb_exc_new3($45, $5839, $5841, $msg);
      var $5842=$exc111;
      var $5843=$45;
      assert(12 % 1 === 0);HEAP32[(($5842)>>2)]=HEAP32[(($5843)>>2)];HEAP32[((($5842)+(4))>>2)]=HEAP32[((($5843)+(4))>>2)];HEAP32[((($5842)+(8))>>2)]=HEAP32[((($5843)+(8))>>2)];
      label = 706; break;
    case 705: 
      var $5845=$1;
      var $5846=$1;
      var $5847=_mrb_class_get($5846, ((112424)|0));
      _mrb_exc_new3($46, $5845, $5847, $msg);
      var $5848=$exc111;
      var $5849=$46;
      assert(12 % 1 === 0);HEAP32[(($5848)>>2)]=HEAP32[(($5849)>>2)];HEAP32[((($5848)+(4))>>2)]=HEAP32[((($5849)+(4))>>2)];HEAP32[((($5848)+(8))>>2)]=HEAP32[((($5849)+(8))>>2)];
      label = 706; break;
    case 706: 
      var $5851=(($exc111)|0);
      var $5852=$5851;
      var $5853=HEAP32[(($5852)>>2)];
      var $5854=$5853;
      var $5855=$1;
      var $5856=(($5855+16)|0);
      HEAP32[(($5856)>>2)]=$5854;
      label = 222; break;
    case 707: 
      STACKTOP = __stackBase__;
      return;
    case 708: 
      var $5859;
      var ibr = $5859;
      label = ibr; break;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _uvenv($mrb, $up) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $e;
      $2=$mrb;
      $3=$up;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      $e=$12;
      label = 2; break;
    case 2: 
      var $14=$3;
      var $15=((($14)-(1))|0);
      $3=$15;
      var $16=(($14)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $18=$e;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 7; break;
    case 5: 
      var $22=$e;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      $e=$25;
      label = 2; break;
    case 6: 
      var $27=$e;
      $1=$27;
      label = 7; break;
    case 7: 
      var $29=$1;
      return $29;
    default: assert(0, "bad label: " + label);
  }
}
function _is_strict($mrb, $e) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cioff;
      $2=$mrb;
      $3=$e;
      var $4=$3;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $cioff=$6;
      var $7=$cioff;
      var $8=(($7)|(0)) >= 0;
      if ($8) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $10=$cioff;
      var $11=$2;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+((($10)*(44))&-1))|0);
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $21=$cioff;
      var $22=$2;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+((($21)*(44))&-1))|0);
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 >>> 11;
      var $33=$32 & 2097151;
      var $34=$33 & 256;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _envadjust($mrb, $oldbase, $newbase) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ci;
      var $e;
      var $off;
      $1=$mrb;
      $2=$oldbase;
      $3=$newbase;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      $ci=$8;
      label = 2; break;
    case 2: 
      var $10=$ci;
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($10)>>>(0)) <= (($15)>>>(0));
      if ($16) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $18=$ci;
      var $19=(($18+40)|0);
      var $20=HEAP32[(($19)>>2)];
      $e=$20;
      var $21=$e;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $24=$e;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0)) >= 0;
      if ($27) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $29=$e;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=$31;
      var $34=$32;
      var $35=((($33)-($34))|0);
      var $36=((((($35)|(0)))/(12))&-1);
      $off=$36;
      var $37=$3;
      var $38=$off;
      var $39=(($37+((($38)*(12))&-1))|0);
      var $40=$e;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=$39;
      label = 6; break;
    case 6: 
      var $43=$ci;
      var $44=(($43+44)|0);
      $ci=$44;
      label = 2; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parsing_heredoc_inf($p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nd;
      $2=$p;
      var $3=$2;
      var $4=(($3+1116)|0);
      var $5=HEAP32[(($4)>>2)];
      $nd=$5;
      var $6=$nd;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$nd;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value148($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_yield_internal($agg_result, $mrb, $b, $argc, $argv, $self, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $mid;
      var $ci;
      var $n;
      var $val=__stackBase__;
      var $5=(__stackBase__)+(12);
      var $6=(__stackBase__)+(24);
      var $7=(__stackBase__)+(36);
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      $4=$c;
      var $8=$1;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0);
      var $14=HEAP16[(($13)>>1)];
      $mid=$14;
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      $n=$21;
      var $22=(($b+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==0;
      if ($24) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $26=(($b)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $31=$1;
      var $32=$1;
      var $33=_mrb_class_get($32, ((112184)|0));
      _mrb_raise($31, $33, ((101744)|0));
      label = 4; break;
    case 4: 
      var $35=(($b)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      $p=$38;
      var $39=$1;
      var $40=_cipush($39);
      $ci=$40;
      var $41=$mid;
      var $42=$ci;
      var $43=(($42)|0);
      HEAP16[(($43)>>1)]=$41;
      var $44=$p;
      var $45=$ci;
      var $46=(($45+4)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$1;
      var $48=(($47+8)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$51;
      var $58=$56;
      var $59=((($57)-($58))|0);
      var $60=((((($59)|(0)))/(12))&-1);
      var $61=$ci;
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=$2;
      var $64=$ci;
      var $65=(($64+16)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$4;
      var $67=$ci;
      var $68=(($67+28)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$p;
      var $70=$69;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71 >>> 11;
      var $73=$72 & 2097151;
      var $74=$73 & 128;
      var $75=(($74)|(0))!=0;
      if ($75) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $77=$2;
      var $78=((($77)+(2))|0);
      var $79=$ci;
      var $80=(($79+12)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 7; break;
    case 6: 
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+6)|0);
      var $87=HEAP16[(($86)>>1)];
      var $88=(($87)&(65535));
      var $89=((($88)+(1))|0);
      var $90=$ci;
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$89;
      label = 7; break;
    case 7: 
      var $93=$ci;
      var $94=(($93+24)|0);
      HEAP32[(($94)>>2)]=-1;
      var $95=$1;
      var $96=(($95+8)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+4)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$n;
      var $101=(($99+((($100)*(12))&-1))|0);
      var $102=$1;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+4)|0);
      HEAP32[(($105)>>2)]=$101;
      var $106=$1;
      var $107=$ci;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      _stack_extend($106, $109, 0);
      var $110=$1;
      var $111=(($110+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114)|0);
      var $116=$115;
      var $117=$self;
      assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
      var $118=$2;
      var $119=(($118)|(0)) > 0;
      if ($119) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $121=$1;
      var $122=(($121+8)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+4)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=(($125+12)|0);
      var $127=$3;
      var $128=$2;
      _stack_copy($126, $127, $128);
      label = 9; break;
    case 9: 
      var $130=$2;
      var $131=((($130)+(1))|0);
      var $132=$1;
      var $133=(($132+8)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+4)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+((($131)*(12))&-1))|0);
      _mrb_nil_value148($5);
      var $138=$137;
      var $139=$5;
      assert(12 % 1 === 0);HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];HEAP32[((($138)+(8))>>2)]=HEAP32[((($139)+(8))>>2)];
      var $140=$p;
      var $141=$140;
      var $142=HEAP32[(($141)>>2)];
      var $143=$142 >>> 11;
      var $144=$143 & 2097151;
      var $145=$144 & 128;
      var $146=(($145)|(0))!=0;
      if ($146) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $148=$p;
      var $149=(($148+12)|0);
      var $150=$149;
      var $151=HEAP32[(($150)>>2)];
      var $152=$1;
      FUNCTION_TABLE[$151]($6, $152, $self);
      var $153=$val;
      var $154=$6;
      assert(12 % 1 === 0);HEAP32[(($153)>>2)]=HEAP32[(($154)>>2)];HEAP32[((($153)+(4))>>2)]=HEAP32[((($154)+(4))>>2)];HEAP32[((($153)+(8))>>2)]=HEAP32[((($154)+(8))>>2)];
      var $155=$1;
      var $156=(($155+8)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=(($157+8)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$1;
      var $161=(($160+8)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162+16)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164+8)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=(($159+((($166)*(12))&-1))|0);
      var $168=$1;
      var $169=(($168+8)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=(($170+4)|0);
      HEAP32[(($171)>>2)]=$167;
      var $172=$1;
      _cipop($172);
      label = 12; break;
    case 11: 
      var $174=$1;
      var $175=$p;
      _mrb_run($7, $174, $175, $self);
      var $176=$val;
      var $177=$7;
      assert(12 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];HEAP32[((($176)+(8))>>2)]=HEAP32[((($177)+(8))>>2)];
      label = 12; break;
    case 12: 
      var $179=$agg_result;
      var $180=$val;
      assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($180)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_yield_argv($agg_result, $mrb, $b, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $p;
  $1=$mrb;
  $2=$argc;
  $3=$argv;
  var $4=(($b)|0);
  var $5=$4;
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  $p=$7;
  var $8=$1;
  var $9=$2;
  var $10=$3;
  var $11=$1;
  var $12=(($11+8)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+4)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=(($15)|0);
  var $17=$p;
  var $18=(($17+16)|0);
  var $19=HEAP32[(($18)>>2)];
  _mrb_yield_internal($agg_result, $8, $b, $9, $10, $16, $19);
  STACKTOP = __stackBase__;
  return;
}
function _ecall($mrb, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $p;
      var $ci;
      var $self;
      var $exc;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$i;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $self=$8;
      var $9=$2;
      var $10=$1;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+36)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+($9<<2))|0);
      var $16=HEAP32[(($15)>>2)];
      $p=$16;
      var $17=$p;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 5; break;
    case 3: 
      var $21=$1;
      var $22=_cipush($21);
      $ci=$22;
      var $23=$1;
      var $24=(($23+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=(($28+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$27;
      var $34=$32;
      var $35=((($33)-($34))|0);
      var $36=((((($35)|(0)))/(12))&-1);
      var $37=$ci;
      var $38=(($37+8)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$ci;
      var $40=((($39)-(44))|0);
      var $41=(($40)|0);
      var $42=HEAP16[(($41)>>1)];
      var $43=$ci;
      var $44=(($43)|0);
      HEAP16[(($44)>>1)]=$42;
      var $45=$ci;
      var $46=(($45+24)|0);
      HEAP32[(($46)>>2)]=-1;
      var $47=$ci;
      var $48=(($47+16)|0);
      HEAP32[(($48)>>2)]=0;
      var $49=$p;
      var $50=$ci;
      var $51=(($50+4)|0);
      HEAP32[(($51)>>2)]=$49;
      var $52=$p;
      var $53=(($52+12)|0);
      var $54=$53;
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+6)|0);
      var $57=HEAP16[(($56)>>1)];
      var $58=(($57)&(65535));
      var $59=$ci;
      var $60=(($59+12)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$p;
      var $62=(($61+16)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$ci;
      var $65=(($64+28)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$1;
      var $67=(($66+8)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$ci;
      var $72=((($71)-(44))|0);
      var $73=(($72+12)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($70+((($74)*(12))&-1))|0);
      var $76=$1;
      var $77=(($76+8)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$75;
      var $80=$1;
      var $81=(($80+16)|0);
      var $82=HEAP32[(($81)>>2)];
      $exc=$82;
      var $83=$1;
      var $84=(($83+16)|0);
      HEAP32[(($84)>>2)]=0;
      var $85=$1;
      var $86=$p;
      var $87=$self;
      _mrb_run($3, $85, $86, $87);
      var $88=$2;
      var $89=$1;
      var $90=(($89+8)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+36)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($88<<2))|0);
      HEAP32[(($94)>>2)]=0;
      var $95=$1;
      var $96=(($95+16)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97)|(0))!=0;
      if ($98) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $100=$exc;
      var $101=$1;
      var $102=(($101+16)|0);
      HEAP32[(($102)>>2)]=$100;
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _value_move($s1, $s2, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$s1;
      $2=$s2;
      $3=$n;
      var $4=$1;
      var $5=$2;
      var $6=(($4)>>>(0)) > (($5)>>>(0));
      if ($6) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      var $10=$3;
      var $11=(($9+((($10)*(12))&-1))|0);
      var $12=(($8)>>>(0)) < (($11)>>>(0));
      if ($12) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $14=$3;
      var $15=$1;
      var $16=(($15+((($14)*(12))&-1))|0);
      $1=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+((($17)*(12))&-1))|0);
      $2=$19;
      label = 4; break;
    case 4: 
      var $21=$3;
      var $22=((($21)-(1))|0);
      $3=$22;
      var $23=(($21)>>>(0)) > 0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$1;
      var $26=((($25)-(12))|0);
      $1=$26;
      var $27=$2;
      var $28=((($27)-(12))|0);
      $2=$28;
      var $29=$26;
      var $30=$28;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 4; break;
    case 6: 
      label = 14; break;
    case 7: 
      var $33=$1;
      var $34=$2;
      var $35=(($33)|(0))!=(($34)|(0));
      if ($35) { label = 8; break; } else { label = 12; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $38=$3;
      var $39=((($38)-(1))|0);
      $3=$39;
      var $40=(($38)>>>(0)) > 0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=$1;
      var $43=(($42+12)|0);
      $1=$43;
      var $44=$2;
      var $45=(($44+12)|0);
      $2=$45;
      var $46=$42;
      var $47=$44;
      assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
      label = 9; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _argnum_error($mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $exc=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(60);
      var $7=(__stackBase__)+(72);
      var $8=(__stackBase__)+(84);
      var $9=(__stackBase__)+(96);
      var $10=(__stackBase__)+(108);
      $1=$mrb;
      $2=$num;
      var $11=$1;
      var $12=(($11+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP16[(($16)>>1)];
      var $18=(($17 << 16) >> 16)!=0;
      if ($18) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20=$1;
      var $21=$1;
      var $22=$1;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0);
      var $28=HEAP16[(($27)>>1)];
      _mrb_sym2str($3, $21, $28);
      var $29=$1;
      var $30=(($29+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      _mrb_fixnum_value144($4, $35);
      var $36=$2;
      _mrb_fixnum_value144($5, $36);
      _mrb_format($6, $20, ((111820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      var $37=$str;
      var $38=$6;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $40=$1;
      var $41=$1;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+16)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+16)|0);
      var $47=HEAP32[(($46)>>2)];
      _mrb_fixnum_value144($7, $47);
      var $48=$2;
      _mrb_fixnum_value144($8, $48);
      _mrb_format($9, $40, ((111300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($8)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($8)+(8))>>2)],tempInt));
      var $49=$str;
      var $50=$9;
      assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $52=$1;
      var $53=$1;
      var $54=_mrb_class_get($53, ((112184)|0));
      _mrb_exc_new3($10, $52, $54, $str);
      var $55=$exc;
      var $56=$10;
      assert(12 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($56)+(8))>>2)];
      var $57=(($exc)|0);
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=$1;
      var $62=(($61+16)|0);
      HEAP32[(($62)>>2)]=$60;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_voidp_value($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$p;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=7;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _top_env($mrb, $proc) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $e;
      $2=$mrb;
      $3=$proc;
      var $4=$3;
      var $5=(($4+20)|0);
      var $6=HEAP32[(($5)>>2)];
      $e=$6;
      var $7=$2;
      var $8=$e;
      var $9=_is_strict($7, $8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$e;
      $1=$12;
      label = 9; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $15=$e;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $20=$e;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      $e=$23;
      var $24=$2;
      var $25=$e;
      var $26=_is_strict($24, $25);
      var $27=(($26)|(0))!=0;
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$e;
      $1=$29;
      label = 9; break;
    case 7: 
      label = 4; break;
    case 8: 
      var $32=$e;
      $1=$32;
      label = 9; break;
    case 9: 
      var $34=$1;
      return $34;
    default: assert(0, "bad label: " + label);
  }
}
function _localjump_error($mrb, $kind) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $kind_str=__stackBase__;
  var $kind_str_len=(__stackBase__)+(24);
  var $msg=(__stackBase__)+(28);
  var $exc=(__stackBase__)+(40);
  var $3=(__stackBase__)+(52);
  var $4=(__stackBase__)+(64);
  var $5=(__stackBase__)+(76);
  var $6=(__stackBase__)+(88);
  $1=$mrb;
  $2=$kind;
  var $7=$kind_str;
  assert(21 % 1 === 0);_memcpy($7, ((80052)|0), 21);
  var $8=$kind_str_len;
  assert(3 % 1 === 0);HEAP8[($8)]=HEAP8[((((80048)|0))|0)];HEAP8[((($8)+(1))|0)]=HEAP8[(((((80048)|0))+(1))|0)];HEAP8[((($8)+(2))|0)]=HEAP8[(((((80048)|0))+(2))|0)];
  var $9=$1;
  _mrb_str_buf_new($3, $9, 19);
  var $10=$msg;
  var $11=$3;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$1;
  _mrb_str_buf_cat($4, $12, $msg, ((80036)|0), 11);
  var $13=$1;
  var $14=$2;
  var $15=(($kind_str+((($14)*(7))&-1))|0);
  var $16=(($15)|0);
  var $17=$2;
  var $18=(($kind_str_len+$17)|0);
  var $19=HEAP8[($18)];
  var $20=(($19 << 24) >> 24);
  _mrb_str_buf_cat($5, $13, $msg, $16, $20);
  var $21=$1;
  var $22=$1;
  var $23=_mrb_class_get($22, ((112424)|0));
  _mrb_exc_new3($6, $21, $23, $msg);
  var $24=$exc;
  var $25=$6;
  assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
  var $26=(($exc)|0);
  var $27=$26;
  var $28=HEAP32[(($27)>>2)];
  var $29=$28;
  var $30=$1;
  var $31=(($30+16)|0);
  HEAP32[(($31)>>2)]=$29;
  STACKTOP = __stackBase__;
  return;
}
function _stack_clear($from, $count) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$from;
      $2=$count;
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=((($4)-(1))|0);
      $2=$5;
      var $6=(($4)>>>(0)) > 0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      $1=$9;
      var $10=$8;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[((58876)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((58880)>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((58884)>>2)];
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
// WARNING: content after a branch in a label, line: 7053
// WARNING: content after a branch in a label, line: 7054
// WARNING: content after a branch in a label, line: 7055
// WARNING: content after a branch in a label, line: 7056
// WARNING: content after a branch in a label, line: 7057
// WARNING: content after a branch in a label, line: 7058
// WARNING: content after a branch in a label, line: 7059
// WARNING: content after a branch in a label, line: 7060
// WARNING: content after a branch in a label, line: 7061
// WARNING: content after a branch in a label, line: 7062
// WARNING: content after a branch in a label, line: 7063
// WARNING: content after a branch in a label, line: 7064
function _yyparse($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1352)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $yychar;
      var $yylval=__stackBase__;
      var $yynerrs;
      var $yystate;
      var $yyerrstatus;
      var $yyssa=(__stackBase__)+(4);
      var $yyss;
      var $yyssp;
      var $yyvsa=(__stackBase__)+(404);
      var $yyvs;
      var $yyvsp;
      var $yystacksize;
      var $yyn;
      var $yyresult;
      var $yytoken;
      var $yyval=(__stackBase__)+(1204);
      var $yymsgbuf=(__stackBase__)+(1208);
      var $yymsg;
      var $yymsg_alloc;
      var $yylen;
      var $yysize;
      var $yyss1;
      var $yyptr;
      var $yynewbytes;
      var $yynewbytes1;
      var $buf=(__stackBase__)+(1336);
      var $yysize2;
      var $yyalloc;
      $1=$p;
      var $2=(($yymsgbuf)|0);
      $yymsg=$2;
      $yymsg_alloc=128;
      $yylen=0;
      $yytoken=0;
      var $3=(($yyssa)|0);
      $yyss=$3;
      var $4=(($yyvsa)|0);
      $yyvs=$4;
      $yystacksize=200;
      label = 2; break;
    case 2: 
      var $6=HEAP32[((37036)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=HEAP32[((_stderr)>>2)];
      var $10=_fprintf($9, ((110980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      $yystate=0;
      $yyerrstatus=0;
      $yynerrs=0;
      $yychar=-2;
      var $13=$yyss;
      $yyssp=$13;
      var $14=$yyvs;
      $yyvsp=$14;
      label = 7; break;
    case 6: 
      var $16=$yyssp;
      var $17=(($16+2)|0);
      $yyssp=$17;
      label = 7; break;
    case 7: 
      var $19=$yystate;
      var $20=(($19) & 65535);
      var $21=$yyssp;
      HEAP16[(($21)>>1)]=$20;
      var $22=$yyss;
      var $23=$yystacksize;
      var $24=(($22+($23<<1))|0);
      var $25=((($24)-(2))|0);
      var $26=$yyssp;
      var $27=(($25)>>>(0)) <= (($26)>>>(0));
      if ($27) { label = 8; break; } else { label = 27; break; }
    case 8: 
      var $29=$yyssp;
      var $30=$yyss;
      var $31=$29;
      var $32=$30;
      var $33=((($31)-($32))|0);
      var $34=((((($33)|(0)))/(2))&-1);
      var $35=((($34)+(1))|0);
      $yysize=$35;
      var $36=$yystacksize;
      var $37=10000 <= (($36)>>>(0));
      if ($37) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 611; break;
    case 10: 
      var $40=$yystacksize;
      var $41=($40<<1);
      $yystacksize=$41;
      var $42=$yystacksize;
      var $43=10000 < (($42)>>>(0));
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $yystacksize=10000;
      label = 12; break;
    case 12: 
      var $46=$yyss;
      $yyss1=$46;
      var $47=$1;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$yystacksize;
      var $51=((($50)*(6))&-1);
      var $52=((($51)+(3))|0);
      var $53=_mrb_malloc($49, $52);
      var $54=$53;
      $yyptr=$54;
      var $55=$yyptr;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 14; break; } else { label = 13; break; }
    case 13: 
      label = 611; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $60=$yyptr;
      var $61=$60;
      var $62=$61;
      var $63=$yyss;
      var $64=$63;
      var $65=$yysize;
      var $66=($65<<1);
      assert($66 % 1 === 0);_memcpy($62, $64, $66);
      var $67=$yyptr;
      var $68=$67;
      $yyss=$68;
      var $69=$yystacksize;
      var $70=($69<<1);
      var $71=((($70)+(3))|0);
      $yynewbytes=$71;
      var $72=$yynewbytes;
      var $73=Math.floor(((($72)>>>(0)))/(4));
      var $74=$yyptr;
      var $75=(($74+($73<<2))|0);
      $yyptr=$75;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $78=$yyptr;
      var $79=$78;
      var $80=$79;
      var $81=$yyvs;
      var $82=$81;
      var $83=$yysize;
      var $84=($83<<2);
      assert($84 % 1 === 0);_memcpy($80, $82, $84);
      var $85=$yyptr;
      var $86=$85;
      $yyvs=$86;
      var $87=$yystacksize;
      var $88=($87<<2);
      var $89=((($88)+(3))|0);
      $yynewbytes1=$89;
      var $90=$yynewbytes1;
      var $91=Math.floor(((($90)>>>(0)))/(4));
      var $92=$yyptr;
      var $93=(($92+($91<<2))|0);
      $yyptr=$93;
      label = 18; break;
    case 18: 
      var $95=$yyss1;
      var $96=(($yyssa)|0);
      var $97=(($95)|(0))!=(($96)|(0));
      if ($97) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $99=$1;
      var $100=(($99)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$yyss1;
      var $103=$102;
      _mrb_free($101, $103);
      label = 20; break;
    case 20: 
      var $105=$yyss;
      var $106=$yysize;
      var $107=(($105+($106<<1))|0);
      var $108=((($107)-(2))|0);
      $yyssp=$108;
      var $109=$yyvs;
      var $110=$yysize;
      var $111=(($109+($110<<2))|0);
      var $112=((($111)-(4))|0);
      $yyvsp=$112;
      label = 21; break;
    case 21: 
      var $114=HEAP32[((37036)>>2)];
      var $115=(($114)|(0))!=0;
      if ($115) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $117=HEAP32[((_stderr)>>2)];
      var $118=$yystacksize;
      var $119=_fprintf($117, ((112920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$118,tempInt));
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $122=$yyss;
      var $123=$yystacksize;
      var $124=(($122+($123<<1))|0);
      var $125=((($124)-(2))|0);
      var $126=$yyssp;
      var $127=(($125)>>>(0)) <= (($126)>>>(0));
      if ($127) { label = 25; break; } else { label = 26; break; }
    case 25: 
      label = 610; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $132=HEAP32[((37036)>>2)];
      var $133=(($132)|(0))!=0;
      if ($133) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $135=HEAP32[((_stderr)>>2)];
      var $136=$yystate;
      var $137=_fprintf($135, ((107944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$136,tempInt));
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $140=$yystate;
      var $141=(($140)|(0))==3;
      if ($141) { label = 32; break; } else { label = 33; break; }
    case 32: 
      label = 609; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $145=$yystate;
      var $146=((32904+($145<<1))|0);
      var $147=HEAP16[(($146)>>1)];
      var $148=(($147 << 16) >> 16);
      $yyn=$148;
      var $149=$yyn;
      var $150=(($149)|(0))==-745;
      if ($150) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 72; break;
    case 36: 
      var $153=$yychar;
      var $154=(($153)|(0))==-2;
      if ($154) { label = 37; break; } else { label = 42; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $157=HEAP32[((37036)>>2)];
      var $158=(($157)|(0))!=0;
      if ($158) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $160=HEAP32[((_stderr)>>2)];
      var $161=_fprintf($160, ((104372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $164=$yylval;
      var $165=$1;
      var $166=_yylex($164, $165);
      $yychar=$166;
      label = 42; break;
    case 42: 
      var $168=$yychar;
      var $169=(($168)|(0)) <= 0;
      if ($169) { label = 43; break; } else { label = 48; break; }
    case 43: 
      $yytoken=0;
      $yychar=0;
      label = 44; break;
    case 44: 
      var $172=HEAP32[((37036)>>2)];
      var $173=(($172)|(0))!=0;
      if ($173) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $175=HEAP32[((_stderr)>>2)];
      var $176=_fprintf($175, ((101620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 56; break;
    case 48: 
      var $180=$yychar;
      var $181=(($180)>>>(0)) <= 379;
      if ($181) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $183=$yychar;
      var $184=((4+$183)|0);
      var $185=HEAP8[($184)];
      var $186=(($185)&(255));
      var $189 = $186;label = 51; break;
    case 50: 
      var $189 = 2;label = 51; break;
    case 51: 
      var $189;
      $yytoken=$189;
      label = 52; break;
    case 52: 
      var $191=HEAP32[((37036)>>2)];
      var $192=(($191)|(0))!=0;
      if ($192) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $194=HEAP32[((_stderr)>>2)];
      var $195=_fprintf($194, ((98980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((96892)|0),tempInt));
      var $196=HEAP32[((_stderr)>>2)];
      var $197=$yytoken;
      var $198=$1;
      _yy_symbol_print($196, $197, $yylval, $198);
      var $199=HEAP32[((_stderr)>>2)];
      var $200=_fprintf($199, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $204=$yytoken;
      var $205=$yyn;
      var $206=((($205)+($204))|0);
      $yyn=$206;
      var $207=$yyn;
      var $208=(($207)|(0)) < 0;
      if ($208) { label = 59; break; } else { label = 57; break; }
    case 57: 
      var $210=$yyn;
      var $211=10895 < (($210)|(0));
      if ($211) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $213=$yyn;
      var $214=((37040+($213<<1))|0);
      var $215=HEAP16[(($214)>>1)];
      var $216=(($215 << 16) >> 16);
      var $217=$yytoken;
      var $218=(($216)|(0))!=(($217)|(0));
      if ($218) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 72; break;
    case 60: 
      var $221=$yyn;
      var $222=((1608+($221<<1))|0);
      var $223=HEAP16[(($222)>>1)];
      var $224=(($223 << 16) >> 16);
      $yyn=$224;
      var $225=$yyn;
      var $226=(($225)|(0)) <= 0;
      if ($226) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $228=$yyn;
      var $229=(($228)|(0))==0;
      if ($229) { label = 63; break; } else { label = 62; break; }
    case 62: 
      var $231=$yyn;
      var $232=(($231)|(0))==-545;
      if ($232) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 557; break;
    case 64: 
      var $235=$yyn;
      var $236=(((-$235))|0);
      $yyn=$236;
      label = 75; break;
    case 65: 
      var $238=$yyerrstatus;
      var $239=(($238)|(0))!=0;
      if ($239) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $241=$yyerrstatus;
      var $242=((($241)-(1))|0);
      $yyerrstatus=$242;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $245=HEAP32[((37036)>>2)];
      var $246=(($245)|(0))!=0;
      if ($246) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $248=HEAP32[((_stderr)>>2)];
      var $249=_fprintf($248, ((98980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((94696)|0),tempInt));
      var $250=HEAP32[((_stderr)>>2)];
      var $251=$yytoken;
      var $252=$1;
      _yy_symbol_print($250, $251, $yylval, $252);
      var $253=HEAP32[((_stderr)>>2)];
      var $254=_fprintf($253, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      $yychar=-2;
      var $257=$yyn;
      $yystate=$257;
      var $258=$yyvsp;
      var $259=(($258+4)|0);
      $yyvsp=$259;
      var $260=$259;
      var $261=$yylval;
      assert(4 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($261)>>2)];
      label = 6; break;
    case 72: 
      var $263=$yystate;
      var $264=((35124+($263<<1))|0);
      var $265=HEAP16[(($264)>>1)];
      var $266=(($265)&(65535));
      $yyn=$266;
      var $267=$yyn;
      var $268=(($267)|(0))==0;
      if ($268) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 557; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $272=$yyn;
      var $273=((29864+$272)|0);
      var $274=HEAP8[($273)];
      var $275=(($274)&(255));
      $yylen=$275;
      var $276=$yylen;
      var $277=(((1)-($276))|0);
      var $278=$yyvsp;
      var $279=(($278+($277<<2))|0);
      var $280=$yyval;
      var $281=$279;
      assert(4 % 1 === 0);HEAP32[(($280)>>2)]=HEAP32[(($281)>>2)];
      label = 76; break;
    case 76: 
      var $283=HEAP32[((37036)>>2)];
      var $284=(($283)|(0))!=0;
      if ($284) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $286=$yyvsp;
      var $287=$yyn;
      var $288=$1;
      _yy_reduce_print($286, $287, $288);
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $291=$yyn;
      if ((($291)|(0))==2) {
        label = 80; break;
      }
      else if ((($291)|(0))==3) {
        label = 83; break;
      }
      else if ((($291)|(0))==4) {
        label = 84; break;
      }
      else if ((($291)|(0))==5) {
        label = 85; break;
      }
      else if ((($291)|(0))==6) {
        label = 86; break;
      }
      else if ((($291)|(0))==7) {
        label = 87; break;
      }
      else if ((($291)|(0))==8) {
        label = 88; break;
      }
      else if ((($291)|(0))==10) {
        label = 89; break;
      }
      else if ((($291)|(0))==11) {
        label = 90; break;
      }
      else if ((($291)|(0))==12) {
        label = 91; break;
      }
      else if ((($291)|(0))==13) {
        label = 103; break;
      }
      else if ((($291)|(0))==14) {
        label = 104; break;
      }
      else if ((($291)|(0))==15) {
        label = 105; break;
      }
      else if ((($291)|(0))==16) {
        label = 106; break;
      }
      else if ((($291)|(0))==17) {
        label = 107; break;
      }
      else if ((($291)|(0))==18) {
        label = 108; break;
      }
      else if ((($291)|(0))==19) {
        label = 109; break;
      }
      else if ((($291)|(0))==20) {
        label = 110; break;
      }
      else if ((($291)|(0))==21) {
        label = 111; break;
      }
      else if ((($291)|(0))==22) {
        label = 112; break;
      }
      else if ((($291)|(0))==23) {
        label = 113; break;
      }
      else if ((($291)|(0))==24) {
        label = 114; break;
      }
      else if ((($291)|(0))==25) {
        label = 115; break;
      }
      else if ((($291)|(0))==26) {
        label = 116; break;
      }
      else if ((($291)|(0))==28) {
        label = 117; break;
      }
      else if ((($291)|(0))==29) {
        label = 118; break;
      }
      else if ((($291)|(0))==30) {
        label = 119; break;
      }
      else if ((($291)|(0))==31) {
        label = 120; break;
      }
      else if ((($291)|(0))==32) {
        label = 121; break;
      }
      else if ((($291)|(0))==33) {
        label = 122; break;
      }
      else if ((($291)|(0))==34) {
        label = 123; break;
      }
      else if ((($291)|(0))==35) {
        label = 124; break;
      }
      else if ((($291)|(0))==36) {
        label = 125; break;
      }
      else if ((($291)|(0))==37) {
        label = 126; break;
      }
      else if ((($291)|(0))==38) {
        label = 127; break;
      }
      else if ((($291)|(0))==40) {
        label = 128; break;
      }
      else if ((($291)|(0))==41) {
        label = 129; break;
      }
      else if ((($291)|(0))==43) {
        label = 130; break;
      }
      else if ((($291)|(0))==44) {
        label = 131; break;
      }
      else if ((($291)|(0))==45) {
        label = 132; break;
      }
      else if ((($291)|(0))==46) {
        label = 133; break;
      }
      else if ((($291)|(0))==48) {
        label = 134; break;
      }
      else if ((($291)|(0))==53) {
        label = 138; break;
      }
      else if ((($291)|(0))==54) {
        label = 139; break;
      }
      else if ((($291)|(0))==55) {
        label = 140; break;
      }
      else if ((($291)|(0))==56) {
        label = 141; break;
      }
      else if ((($291)|(0))==57) {
        label = 142; break;
      }
      else if ((($291)|(0))==58) {
        label = 143; break;
      }
      else if ((($291)|(0))==59) {
        label = 144; break;
      }
      else if ((($291)|(0))==60) {
        label = 145; break;
      }
      else if ((($291)|(0))==61) {
        label = 146; break;
      }
      else if ((($291)|(0))==62) {
        label = 147; break;
      }
      else if ((($291)|(0))==63) {
        label = 148; break;
      }
      else if ((($291)|(0))==64) {
        label = 149; break;
      }
      else if ((($291)|(0))==65) {
        label = 150; break;
      }
      else if ((($291)|(0))==66) {
        label = 151; break;
      }
      else if ((($291)|(0))==67) {
        label = 152; break;
      }
      else if ((($291)|(0))==69) {
        label = 153; break;
      }
      else if ((($291)|(0))==70) {
        label = 154; break;
      }
      else if ((($291)|(0))==71) {
        label = 155; break;
      }
      else if ((($291)|(0))==72) {
        label = 156; break;
      }
      else if ((($291)|(0))==73) {
        label = 157; break;
      }
      else if ((($291)|(0))==74) {
        label = 158; break;
      }
      else if ((($291)|(0))==75) {
        label = 159; break;
      }
      else if ((($291)|(0))==76) {
        label = 160; break;
      }
      else if ((($291)|(0))==77) {
        label = 161; break;
      }
      else if ((($291)|(0))==78) {
        label = 162; break;
      }
      else if ((($291)|(0))==79) {
        label = 163; break;
      }
      else if ((($291)|(0))==81) {
        label = 164; break;
      }
      else if ((($291)|(0))==82) {
        label = 165; break;
      }
      else if ((($291)|(0))==83) {
        label = 166; break;
      }
      else if ((($291)|(0))==84) {
        label = 167; break;
      }
      else if ((($291)|(0))==85) {
        label = 168; break;
      }
      else if ((($291)|(0))==86) {
        label = 169; break;
      }
      else if ((($291)|(0))==87) {
        label = 170; break;
      }
      else if ((($291)|(0))==88) {
        label = 171; break;
      }
      else if ((($291)|(0))==89) {
        label = 172; break;
      }
      else if ((($291)|(0))==90) {
        label = 173; break;
      }
      else if ((($291)|(0))==91) {
        label = 174; break;
      }
      else if ((($291)|(0))==92) {
        label = 178; break;
      }
      else if ((($291)|(0))==93) {
        label = 182; break;
      }
      else if ((($291)|(0))==94) {
        label = 183; break;
      }
      else if ((($291)|(0))==95) {
        label = 184; break;
      }
      else if ((($291)|(0))==96) {
        label = 185; break;
      }
      else if ((($291)|(0))==97) {
        label = 186; break;
      }
      else if ((($291)|(0))==98) {
        label = 187; break;
      }
      else if ((($291)|(0))==99) {
        label = 188; break;
      }
      else if ((($291)|(0))==100) {
        label = 192; break;
      }
      else if ((($291)|(0))==101) {
        label = 196; break;
      }
      else if ((($291)|(0))==102) {
        label = 197; break;
      }
      else if ((($291)|(0))==104) {
        label = 198; break;
      }
      else if ((($291)|(0))==105) {
        label = 199; break;
      }
      else if ((($291)|(0))==106) {
        label = 200; break;
      }
      else if ((($291)|(0))==110) {
        label = 201; break;
      }
      else if ((($291)|(0))==111) {
        label = 202; break;
      }
      else if ((($291)|(0))==114) {
        label = 203; break;
      }
      else if ((($291)|(0))==115) {
        label = 204; break;
      }
      else if ((($291)|(0))==116) {
        label = 205; break;
      }
      else if ((($291)|(0))==117) {
        label = 206; break;
      }
      else if ((($291)|(0))==118) {
        label = 207; break;
      }
      else if ((($291)|(0))==119) {
        label = 208; break;
      }
      else if ((($291)|(0))==120) {
        label = 209; break;
      }
      else if ((($291)|(0))==121) {
        label = 210; break;
      }
      else if ((($291)|(0))==122) {
        label = 211; break;
      }
      else if ((($291)|(0))==123) {
        label = 212; break;
      }
      else if ((($291)|(0))==124) {
        label = 213; break;
      }
      else if ((($291)|(0))==125) {
        label = 214; break;
      }
      else if ((($291)|(0))==126) {
        label = 215; break;
      }
      else if ((($291)|(0))==127) {
        label = 216; break;
      }
      else if ((($291)|(0))==128) {
        label = 217; break;
      }
      else if ((($291)|(0))==129) {
        label = 218; break;
      }
      else if ((($291)|(0))==130) {
        label = 219; break;
      }
      else if ((($291)|(0))==131) {
        label = 220; break;
      }
      else if ((($291)|(0))==132) {
        label = 221; break;
      }
      else if ((($291)|(0))==133) {
        label = 222; break;
      }
      else if ((($291)|(0))==134) {
        label = 223; break;
      }
      else if ((($291)|(0))==135) {
        label = 224; break;
      }
      else if ((($291)|(0))==136) {
        label = 225; break;
      }
      else if ((($291)|(0))==137) {
        label = 226; break;
      }
      else if ((($291)|(0))==138) {
        label = 227; break;
      }
      else if ((($291)|(0))==139) {
        label = 228; break;
      }
      else if ((($291)|(0))==140) {
        label = 229; break;
      }
      else if ((($291)|(0))==141) {
        label = 230; break;
      }
      else if ((($291)|(0))==142) {
        label = 231; break;
      }
      else if ((($291)|(0))==143) {
        label = 232; break;
      }
      else if ((($291)|(0))==144) {
        label = 233; break;
      }
      else if ((($291)|(0))==145) {
        label = 234; break;
      }
      else if ((($291)|(0))==186) {
        label = 235; break;
      }
      else if ((($291)|(0))==187) {
        label = 236; break;
      }
      else if ((($291)|(0))==188) {
        label = 237; break;
      }
      else if ((($291)|(0))==189) {
        label = 238; break;
      }
      else if ((($291)|(0))==190) {
        label = 239; break;
      }
      else if ((($291)|(0))==191) {
        label = 240; break;
      }
      else if ((($291)|(0))==192) {
        label = 241; break;
      }
      else if ((($291)|(0))==193) {
        label = 242; break;
      }
      else if ((($291)|(0))==194) {
        label = 243; break;
      }
      else if ((($291)|(0))==195) {
        label = 244; break;
      }
      else if ((($291)|(0))==196) {
        label = 245; break;
      }
      else if ((($291)|(0))==197) {
        label = 246; break;
      }
      else if ((($291)|(0))==198) {
        label = 247; break;
      }
      else if ((($291)|(0))==199) {
        label = 248; break;
      }
      else if ((($291)|(0))==200) {
        label = 249; break;
      }
      else if ((($291)|(0))==201) {
        label = 250; break;
      }
      else if ((($291)|(0))==202) {
        label = 251; break;
      }
      else if ((($291)|(0))==203) {
        label = 252; break;
      }
      else if ((($291)|(0))==204) {
        label = 253; break;
      }
      else if ((($291)|(0))==205) {
        label = 254; break;
      }
      else if ((($291)|(0))==206) {
        label = 255; break;
      }
      else if ((($291)|(0))==207) {
        label = 256; break;
      }
      else if ((($291)|(0))==208) {
        label = 257; break;
      }
      else if ((($291)|(0))==209) {
        label = 258; break;
      }
      else if ((($291)|(0))==210) {
        label = 259; break;
      }
      else if ((($291)|(0))==211) {
        label = 260; break;
      }
      else if ((($291)|(0))==212) {
        label = 261; break;
      }
      else if ((($291)|(0))==213) {
        label = 262; break;
      }
      else if ((($291)|(0))==214) {
        label = 263; break;
      }
      else if ((($291)|(0))==215) {
        label = 264; break;
      }
      else if ((($291)|(0))==216) {
        label = 265; break;
      }
      else if ((($291)|(0))==217) {
        label = 266; break;
      }
      else if ((($291)|(0))==218) {
        label = 267; break;
      }
      else if ((($291)|(0))==219) {
        label = 268; break;
      }
      else if ((($291)|(0))==220) {
        label = 269; break;
      }
      else if ((($291)|(0))==221) {
        label = 270; break;
      }
      else if ((($291)|(0))==222) {
        label = 271; break;
      }
      else if ((($291)|(0))==223) {
        label = 272; break;
      }
      else if ((($291)|(0))==224) {
        label = 273; break;
      }
      else if ((($291)|(0))==225) {
        label = 274; break;
      }
      else if ((($291)|(0))==226) {
        label = 275; break;
      }
      else if ((($291)|(0))==227) {
        label = 276; break;
      }
      else if ((($291)|(0))==228) {
        label = 277; break;
      }
      else if ((($291)|(0))==229) {
        label = 278; break;
      }
      else if ((($291)|(0))==230) {
        label = 279; break;
      }
      else if ((($291)|(0))==232) {
        label = 282; break;
      }
      else if ((($291)|(0))==233) {
        label = 283; break;
      }
      else if ((($291)|(0))==234) {
        label = 284; break;
      }
      else if ((($291)|(0))==235) {
        label = 285; break;
      }
      else if ((($291)|(0))==240) {
        label = 286; break;
      }
      else if ((($291)|(0))==241) {
        label = 287; break;
      }
      else if ((($291)|(0))==242) {
        label = 288; break;
      }
      else if ((($291)|(0))==243) {
        label = 289; break;
      }
      else if ((($291)|(0))==244) {
        label = 290; break;
      }
      else if ((($291)|(0))==245) {
        label = 291; break;
      }
      else if ((($291)|(0))==246) {
        label = 292; break;
      }
      else if ((($291)|(0))==247) {
        label = 293; break;
      }
      else if ((($291)|(0))==248) {
        label = 294; break;
      }
      else if ((($291)|(0))==249) {
        label = 295; break;
      }
      else if ((($291)|(0))==250) {
        label = 296; break;
      }
      else if ((($291)|(0))==251) {
        label = 297; break;
      }
      else if ((($291)|(0))==252) {
        label = 298; break;
      }
      else if ((($291)|(0))==253) {
        label = 299; break;
      }
      else if ((($291)|(0))==254) {
        label = 300; break;
      }
      else if ((($291)|(0))==255) {
        label = 301; break;
      }
      else if ((($291)|(0))==256) {
        label = 302; break;
      }
      else if ((($291)|(0))==257) {
        label = 303; break;
      }
      else if ((($291)|(0))==258) {
        label = 304; break;
      }
      else if ((($291)|(0))==259) {
        label = 305; break;
      }
      else if ((($291)|(0))==267) {
        label = 306; break;
      }
      else if ((($291)|(0))==268) {
        label = 307; break;
      }
      else if ((($291)|(0))==269) {
        label = 308; break;
      }
      else if ((($291)|(0))==270) {
        label = 309; break;
      }
      else if ((($291)|(0))==271) {
        label = 310; break;
      }
      else if ((($291)|(0))==272) {
        label = 311; break;
      }
      else if ((($291)|(0))==273) {
        label = 312; break;
      }
      else if ((($291)|(0))==274) {
        label = 313; break;
      }
      else if ((($291)|(0))==275) {
        label = 314; break;
      }
      else if ((($291)|(0))==276) {
        label = 315; break;
      }
      else if ((($291)|(0))==277) {
        label = 316; break;
      }
      else if ((($291)|(0))==278) {
        label = 317; break;
      }
      else if ((($291)|(0))==279) {
        label = 318; break;
      }
      else if ((($291)|(0))==280) {
        label = 319; break;
      }
      else if ((($291)|(0))==281) {
        label = 320; break;
      }
      else if ((($291)|(0))==282) {
        label = 321; break;
      }
      else if ((($291)|(0))==283) {
        label = 322; break;
      }
      else if ((($291)|(0))==284) {
        label = 323; break;
      }
      else if ((($291)|(0))==285) {
        label = 324; break;
      }
      else if ((($291)|(0))==287) {
        label = 325; break;
      }
      else if ((($291)|(0))==288) {
        label = 326; break;
      }
      else if ((($291)|(0))==289) {
        label = 327; break;
      }
      else if ((($291)|(0))==290) {
        label = 328; break;
      }
      else if ((($291)|(0))==291) {
        label = 329; break;
      }
      else if ((($291)|(0))==292) {
        label = 330; break;
      }
      else if ((($291)|(0))==293) {
        label = 331; break;
      }
      else if ((($291)|(0))==294) {
        label = 332; break;
      }
      else if ((($291)|(0))==295) {
        label = 333; break;
      }
      else if ((($291)|(0))==296) {
        label = 334; break;
      }
      else if ((($291)|(0))==297) {
        label = 335; break;
      }
      else if ((($291)|(0))==298) {
        label = 336; break;
      }
      else if ((($291)|(0))==299) {
        label = 337; break;
      }
      else if ((($291)|(0))==300) {
        label = 338; break;
      }
      else if ((($291)|(0))==301) {
        label = 339; break;
      }
      else if ((($291)|(0))==302) {
        label = 340; break;
      }
      else if ((($291)|(0))==303) {
        label = 341; break;
      }
      else if ((($291)|(0))==304) {
        label = 345; break;
      }
      else if ((($291)|(0))==305) {
        label = 346; break;
      }
      else if ((($291)|(0))==306) {
        label = 347; break;
      }
      else if ((($291)|(0))==307) {
        label = 348; break;
      }
      else if ((($291)|(0))==308) {
        label = 349; break;
      }
      else if ((($291)|(0))==309) {
        label = 353; break;
      }
      else if ((($291)|(0))==310) {
        label = 354; break;
      }
      else if ((($291)|(0))==311) {
        label = 355; break;
      }
      else if ((($291)|(0))==312) {
        label = 356; break;
      }
      else if ((($291)|(0))==313) {
        label = 357; break;
      }
      else if ((($291)|(0))==314) {
        label = 358; break;
      }
      else if ((($291)|(0))==315) {
        label = 359; break;
      }
      else if ((($291)|(0))==316) {
        label = 360; break;
      }
      else if ((($291)|(0))==317) {
        label = 361; break;
      }
      else if ((($291)|(0))==318) {
        label = 362; break;
      }
      else if ((($291)|(0))==319) {
        label = 363; break;
      }
      else if ((($291)|(0))==326) {
        label = 366; break;
      }
      else if ((($291)|(0))==328) {
        label = 367; break;
      }
      else if ((($291)|(0))==329) {
        label = 368; break;
      }
      else if ((($291)|(0))==331) {
        label = 369; break;
      }
      else if ((($291)|(0))==332) {
        label = 370; break;
      }
      else if ((($291)|(0))==333) {
        label = 371; break;
      }
      else if ((($291)|(0))==334) {
        label = 372; break;
      }
      else if ((($291)|(0))==335) {
        label = 373; break;
      }
      else if ((($291)|(0))==336) {
        label = 374; break;
      }
      else if ((($291)|(0))==337) {
        label = 375; break;
      }
      else if ((($291)|(0))==338) {
        label = 376; break;
      }
      else if ((($291)|(0))==339) {
        label = 377; break;
      }
      else if ((($291)|(0))==340) {
        label = 378; break;
      }
      else if ((($291)|(0))==341) {
        label = 379; break;
      }
      else if ((($291)|(0))==342) {
        label = 380; break;
      }
      else if ((($291)|(0))==343) {
        label = 381; break;
      }
      else if ((($291)|(0))==344) {
        label = 382; break;
      }
      else if ((($291)|(0))==345) {
        label = 383; break;
      }
      else if ((($291)|(0))==346) {
        label = 384; break;
      }
      else if ((($291)|(0))==347) {
        label = 385; break;
      }
      else if ((($291)|(0))==348) {
        label = 386; break;
      }
      else if ((($291)|(0))==349) {
        label = 387; break;
      }
      else if ((($291)|(0))==350) {
        label = 388; break;
      }
      else if ((($291)|(0))==351) {
        label = 389; break;
      }
      else if ((($291)|(0))==352) {
        label = 390; break;
      }
      else if ((($291)|(0))==353) {
        label = 391; break;
      }
      else if ((($291)|(0))==354) {
        label = 392; break;
      }
      else if ((($291)|(0))==355) {
        label = 393; break;
      }
      else if ((($291)|(0))==356) {
        label = 394; break;
      }
      else if ((($291)|(0))==357) {
        label = 395; break;
      }
      else if ((($291)|(0))==358) {
        label = 396; break;
      }
      else if ((($291)|(0))==360) {
        label = 397; break;
      }
      else if ((($291)|(0))==361) {
        label = 398; break;
      }
      else if ((($291)|(0))==362) {
        label = 399; break;
      }
      else if ((($291)|(0))==363) {
        label = 400; break;
      }
      else if ((($291)|(0))==364) {
        label = 401; break;
      }
      else if ((($291)|(0))==365) {
        label = 402; break;
      }
      else if ((($291)|(0))==368) {
        label = 403; break;
      }
      else if ((($291)|(0))==370) {
        label = 404; break;
      }
      else if ((($291)|(0))==371) {
        label = 405; break;
      }
      else if ((($291)|(0))==372) {
        label = 406; break;
      }
      else if ((($291)|(0))==373) {
        label = 407; break;
      }
      else if ((($291)|(0))==374) {
        label = 408; break;
      }
      else if ((($291)|(0))==375) {
        label = 409; break;
      }
      else if ((($291)|(0))==376) {
        label = 410; break;
      }
      else if ((($291)|(0))==377) {
        label = 414; break;
      }
      else if ((($291)|(0))==378) {
        label = 415; break;
      }
      else if ((($291)|(0))==379) {
        label = 416; break;
      }
      else if ((($291)|(0))==380) {
        label = 417; break;
      }
      else if ((($291)|(0))==381) {
        label = 418; break;
      }
      else if ((($291)|(0))==382) {
        label = 419; break;
      }
      else if ((($291)|(0))==383) {
        label = 420; break;
      }
      else if ((($291)|(0))==384) {
        label = 421; break;
      }
      else if ((($291)|(0))==385) {
        label = 422; break;
      }
      else if ((($291)|(0))==386) {
        label = 423; break;
      }
      else if ((($291)|(0))==387) {
        label = 424; break;
      }
      else if ((($291)|(0))==388) {
        label = 425; break;
      }
      else if ((($291)|(0))==389) {
        label = 426; break;
      }
      else if ((($291)|(0))==390) {
        label = 427; break;
      }
      else if ((($291)|(0))==391) {
        label = 428; break;
      }
      else if ((($291)|(0))==392) {
        label = 429; break;
      }
      else if ((($291)|(0))==393) {
        label = 430; break;
      }
      else if ((($291)|(0))==394) {
        label = 431; break;
      }
      else if ((($291)|(0))==396) {
        label = 435; break;
      }
      else if ((($291)|(0))==398) {
        label = 438; break;
      }
      else if ((($291)|(0))==401) {
        label = 439; break;
      }
      else if ((($291)|(0))==403) {
        label = 440; break;
      }
      else if ((($291)|(0))==411) {
        label = 441; break;
      }
      else if ((($291)|(0))==412) {
        label = 442; break;
      }
      else if ((($291)|(0))==414) {
        label = 443; break;
      }
      else if ((($291)|(0))==415) {
        label = 444; break;
      }
      else if ((($291)|(0))==416) {
        label = 445; break;
      }
      else if ((($291)|(0))==417) {
        label = 446; break;
      }
      else if ((($291)|(0))==418) {
        label = 447; break;
      }
      else if ((($291)|(0))==419) {
        label = 448; break;
      }
      else if ((($291)|(0))==420) {
        label = 449; break;
      }
      else if ((($291)|(0))==421) {
        label = 450; break;
      }
      else if ((($291)|(0))==422) {
        label = 451; break;
      }
      else if ((($291)|(0))==428) {
        label = 452; break;
      }
      else if ((($291)|(0))==429) {
        label = 453; break;
      }
      else if ((($291)|(0))==430) {
        label = 454; break;
      }
      else if ((($291)|(0))==431) {
        label = 455; break;
      }
      else if ((($291)|(0))==432) {
        label = 456; break;
      }
      else if ((($291)|(0))==433) {
        label = 457; break;
      }
      else if ((($291)|(0))==434) {
        label = 458; break;
      }
      else if ((($291)|(0))==439) {
        label = 459; break;
      }
      else if ((($291)|(0))==440) {
        label = 460; break;
      }
      else if ((($291)|(0))==441) {
        label = 461; break;
      }
      else if ((($291)|(0))==442) {
        label = 462; break;
      }
      else if ((($291)|(0))==445) {
        label = 463; break;
      }
      else if ((($291)|(0))==446) {
        label = 464; break;
      }
      else if ((($291)|(0))==447) {
        label = 465; break;
      }
      else if ((($291)|(0))==448) {
        label = 466; break;
      }
      else if ((($291)|(0))==449) {
        label = 467; break;
      }
      else if ((($291)|(0))==450) {
        label = 468; break;
      }
      else if ((($291)|(0))==451) {
        label = 469; break;
      }
      else if ((($291)|(0))==452) {
        label = 470; break;
      }
      else if ((($291)|(0))==453) {
        label = 471; break;
      }
      else if ((($291)|(0))==454) {
        label = 472; break;
      }
      else if ((($291)|(0))==455) {
        label = 473; break;
      }
      else if ((($291)|(0))==456) {
        label = 474; break;
      }
      else if ((($291)|(0))==457) {
        label = 475; break;
      }
      else if ((($291)|(0))==458) {
        label = 476; break;
      }
      else if ((($291)|(0))==459) {
        label = 479; break;
      }
      else if ((($291)|(0))==462) {
        label = 480; break;
      }
      else if ((($291)|(0))==463) {
        label = 481; break;
      }
      else if ((($291)|(0))==464) {
        label = 482; break;
      }
      else if ((($291)|(0))==465) {
        label = 483; break;
      }
      else if ((($291)|(0))==466) {
        label = 484; break;
      }
      else if ((($291)|(0))==467) {
        label = 485; break;
      }
      else if ((($291)|(0))==468) {
        label = 486; break;
      }
      else if ((($291)|(0))==469) {
        label = 487; break;
      }
      else if ((($291)|(0))==470) {
        label = 488; break;
      }
      else if ((($291)|(0))==471) {
        label = 489; break;
      }
      else if ((($291)|(0))==472) {
        label = 490; break;
      }
      else if ((($291)|(0))==473) {
        label = 491; break;
      }
      else if ((($291)|(0))==474) {
        label = 492; break;
      }
      else if ((($291)|(0))==475) {
        label = 493; break;
      }
      else if ((($291)|(0))==476) {
        label = 494; break;
      }
      else if ((($291)|(0))==477) {
        label = 495; break;
      }
      else if ((($291)|(0))==478) {
        label = 496; break;
      }
      else if ((($291)|(0))==479) {
        label = 497; break;
      }
      else if ((($291)|(0))==480) {
        label = 498; break;
      }
      else if ((($291)|(0))==481) {
        label = 499; break;
      }
      else if ((($291)|(0))==482) {
        label = 500; break;
      }
      else if ((($291)|(0))==483) {
        label = 501; break;
      }
      else if ((($291)|(0))==484) {
        label = 502; break;
      }
      else if ((($291)|(0))==485) {
        label = 503; break;
      }
      else if ((($291)|(0))==486) {
        label = 504; break;
      }
      else if ((($291)|(0))==487) {
        label = 505; break;
      }
      else if ((($291)|(0))==488) {
        label = 506; break;
      }
      else if ((($291)|(0))==489) {
        label = 507; break;
      }
      else if ((($291)|(0))==490) {
        label = 508; break;
      }
      else if ((($291)|(0))==491) {
        label = 509; break;
      }
      else if ((($291)|(0))==492) {
        label = 510; break;
      }
      else if ((($291)|(0))==493) {
        label = 511; break;
      }
      else if ((($291)|(0))==494) {
        label = 512; break;
      }
      else if ((($291)|(0))==495) {
        label = 513; break;
      }
      else if ((($291)|(0))==496) {
        label = 514; break;
      }
      else if ((($291)|(0))==497) {
        label = 515; break;
      }
      else if ((($291)|(0))==498) {
        label = 516; break;
      }
      else if ((($291)|(0))==501) {
        label = 517; break;
      }
      else if ((($291)|(0))==502) {
        label = 518; break;
      }
      else if ((($291)|(0))==505) {
        label = 519; break;
      }
      else if ((($291)|(0))==506) {
        label = 520; break;
      }
      else if ((($291)|(0))==507) {
        label = 521; break;
      }
      else if ((($291)|(0))==508) {
        label = 522; break;
      }
      else if ((($291)|(0))==509) {
        label = 525; break;
      }
      else if ((($291)|(0))==510) {
        label = 526; break;
      }
      else if ((($291)|(0))==512) {
        label = 533; break;
      }
      else if ((($291)|(0))==513) {
        label = 534; break;
      }
      else if ((($291)|(0))==514) {
        label = 535; break;
      }
      else if ((($291)|(0))==515) {
        label = 536; break;
      }
      else if ((($291)|(0))==516) {
        label = 537; break;
      }
      else if ((($291)|(0))==538) {
        label = 538; break;
      }
      else if ((($291)|(0))==540) {
        label = 539; break;
      }
      else if ((($291)|(0))==543) {
        label = 540; break;
      }
      else if ((($291)|(0))==544) {
        label = 541; break;
      }
      else {
      label = 542; break;
      }
    case 80: 
      var $293=$1;
      var $294=(($293+40)|0);
      HEAP32[(($294)>>2)]=0;
      var $295=$1;
      var $296=(($295+76)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=(($297)|(0))!=0;
      if ($298) { label = 82; break; } else { label = 81; break; }
    case 81: 
      var $300=$1;
      var $301=_cons_gen($300, 0, 0);
      var $302=$1;
      var $303=(($302+76)|0);
      HEAP32[(($303)>>2)]=$301;
      label = 82; break;
    case 82: 
      label = 543; break;
    case 83: 
      var $306=$1;
      var $307=$yyvsp;
      var $308=(($307)|0);
      var $309=$308;
      var $310=HEAP32[(($309)>>2)];
      var $311=_new_scope($306, $310);
      var $312=$1;
      var $313=(($312+1136)|0);
      HEAP32[(($313)>>2)]=$311;
      label = 543; break;
    case 84: 
      var $315=$yyvsp;
      var $316=((($315)-(4))|0);
      var $317=$316;
      var $318=HEAP32[(($317)>>2)];
      var $319=$yyval;
      HEAP32[(($319)>>2)]=$318;
      label = 543; break;
    case 85: 
      var $321=$1;
      var $322=_new_begin($321, 0);
      var $323=$yyval;
      HEAP32[(($323)>>2)]=$322;
      label = 543; break;
    case 86: 
      var $325=$1;
      var $326=$yyvsp;
      var $327=(($326)|0);
      var $328=$327;
      var $329=HEAP32[(($328)>>2)];
      var $330=_new_begin($325, $329);
      var $331=$yyval;
      HEAP32[(($331)>>2)]=$330;
      label = 543; break;
    case 87: 
      var $333=$1;
      var $334=$yyvsp;
      var $335=((($334)-(8))|0);
      var $336=$335;
      var $337=HEAP32[(($336)>>2)];
      var $338=$1;
      var $339=$yyvsp;
      var $340=(($339)|0);
      var $341=$340;
      var $342=HEAP32[(($341)>>2)];
      var $343=_list1_gen($338, $342);
      var $344=_append_gen($333, $337, $343);
      var $345=$yyval;
      HEAP32[(($345)>>2)]=$344;
      label = 543; break;
    case 88: 
      var $347=$1;
      var $348=_new_begin($347, 0);
      var $349=$yyval;
      HEAP32[(($349)>>2)]=$348;
      label = 543; break;
    case 89: 
      var $351=$1;
      var $352=_local_switch($351);
      var $353=$yyval;
      HEAP32[(($353)>>2)]=$352;
      label = 543; break;
    case 90: 
      var $355=$1;
      _yyerror($355, ((93848)|0));
      var $356=$1;
      var $357=$yyvsp;
      var $358=((($357)-(12))|0);
      var $359=$358;
      var $360=HEAP32[(($359)>>2)];
      _local_resume($356, $360);
      var $361=$yyval;
      HEAP32[(($361)>>2)]=0;
      label = 543; break;
    case 91: 
      var $363=$yyvsp;
      var $364=((($363)-(8))|0);
      var $365=$364;
      var $366=HEAP32[(($365)>>2)];
      var $367=(($366)|(0))!=0;
      if ($367) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $369=$1;
      var $370=$yyvsp;
      var $371=((($370)-(12))|0);
      var $372=$371;
      var $373=HEAP32[(($372)>>2)];
      var $374=$yyvsp;
      var $375=((($374)-(8))|0);
      var $376=$375;
      var $377=HEAP32[(($376)>>2)];
      var $378=$yyvsp;
      var $379=((($378)-(4))|0);
      var $380=$379;
      var $381=HEAP32[(($380)>>2)];
      var $382=_new_rescue($369, $373, $377, $381);
      var $383=$yyval;
      HEAP32[(($383)>>2)]=$382;
      label = 97; break;
    case 93: 
      var $385=$yyvsp;
      var $386=((($385)-(4))|0);
      var $387=$386;
      var $388=HEAP32[(($387)>>2)];
      var $389=(($388)|(0))!=0;
      if ($389) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $391=$1;
      _yywarn($391, ((113804)|0));
      var $392=$1;
      var $393=$yyvsp;
      var $394=((($393)-(12))|0);
      var $395=$394;
      var $396=HEAP32[(($395)>>2)];
      var $397=$1;
      var $398=$yyvsp;
      var $399=((($398)-(4))|0);
      var $400=$399;
      var $401=HEAP32[(($400)>>2)];
      var $402=_list1_gen($397, $401);
      var $403=_append_gen($392, $396, $402);
      var $404=$yyval;
      HEAP32[(($404)>>2)]=$403;
      label = 96; break;
    case 95: 
      var $406=$yyvsp;
      var $407=((($406)-(12))|0);
      var $408=$407;
      var $409=HEAP32[(($408)>>2)];
      var $410=$yyval;
      HEAP32[(($410)>>2)]=$409;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $413=$yyvsp;
      var $414=(($413)|0);
      var $415=$414;
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|(0))!=0;
      if ($417) { label = 98; break; } else { label = 102; break; }
    case 98: 
      var $419=$yyval;
      var $420=HEAP32[(($419)>>2)];
      var $421=(($420)|(0))!=0;
      if ($421) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $423=$1;
      var $424=$yyval;
      var $425=HEAP32[(($424)>>2)];
      var $426=$yyvsp;
      var $427=(($426)|0);
      var $428=$427;
      var $429=HEAP32[(($428)>>2)];
      var $430=_new_ensure($423, $425, $429);
      var $431=$yyval;
      HEAP32[(($431)>>2)]=$430;
      label = 101; break;
    case 100: 
      var $433=$1;
      var $434=$yyvsp;
      var $435=(($434)|0);
      var $436=$435;
      var $437=HEAP32[(($436)>>2)];
      var $438=$1;
      var $439=$1;
      var $440=_new_nil($439);
      var $441=_list1_gen($438, $440);
      var $442=_append_gen($433, $437, $441);
      var $443=$yyval;
      HEAP32[(($443)>>2)]=$442;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 543; break;
    case 103: 
      var $447=$yyvsp;
      var $448=((($447)-(4))|0);
      var $449=$448;
      var $450=HEAP32[(($449)>>2)];
      var $451=$yyval;
      HEAP32[(($451)>>2)]=$450;
      label = 543; break;
    case 104: 
      var $453=$1;
      var $454=_new_begin($453, 0);
      var $455=$yyval;
      HEAP32[(($455)>>2)]=$454;
      label = 543; break;
    case 105: 
      var $457=$1;
      var $458=$yyvsp;
      var $459=(($458)|0);
      var $460=$459;
      var $461=HEAP32[(($460)>>2)];
      var $462=_new_begin($457, $461);
      var $463=$yyval;
      HEAP32[(($463)>>2)]=$462;
      label = 543; break;
    case 106: 
      var $465=$1;
      var $466=$yyvsp;
      var $467=((($466)-(8))|0);
      var $468=$467;
      var $469=HEAP32[(($468)>>2)];
      var $470=$1;
      var $471=$yyvsp;
      var $472=(($471)|0);
      var $473=$472;
      var $474=HEAP32[(($473)>>2)];
      var $475=_list1_gen($470, $474);
      var $476=_append_gen($465, $469, $475);
      var $477=$yyval;
      HEAP32[(($477)>>2)]=$476;
      label = 543; break;
    case 107: 
      var $479=$1;
      var $480=$yyvsp;
      var $481=(($480)|0);
      var $482=$481;
      var $483=HEAP32[(($482)>>2)];
      var $484=_new_begin($479, $483);
      var $485=$yyval;
      HEAP32[(($485)>>2)]=$484;
      label = 543; break;
    case 108: 
      var $487=$1;
      var $488=(($487+40)|0);
      HEAP32[(($488)>>2)]=7;
      label = 543; break;
    case 109: 
      var $490=$1;
      var $491=$yyvsp;
      var $492=((($491)-(8))|0);
      var $493=$492;
      var $494=HEAP16[(($493)>>1)];
      var $495=$yyvsp;
      var $496=(($495)|0);
      var $497=$496;
      var $498=HEAP16[(($497)>>1)];
      var $499=_new_alias($490, $494, $498);
      var $500=$yyval;
      HEAP32[(($500)>>2)]=$499;
      label = 543; break;
    case 110: 
      var $502=$yyvsp;
      var $503=(($502)|0);
      var $504=$503;
      var $505=HEAP32[(($504)>>2)];
      var $506=$yyval;
      HEAP32[(($506)>>2)]=$505;
      label = 543; break;
    case 111: 
      var $508=$1;
      var $509=$yyvsp;
      var $510=(($509)|0);
      var $511=$510;
      var $512=HEAP32[(($511)>>2)];
      var $513=_cond($512);
      var $514=$yyvsp;
      var $515=((($514)-(8))|0);
      var $516=$515;
      var $517=HEAP32[(($516)>>2)];
      var $518=_new_if($508, $513, $517, 0);
      var $519=$yyval;
      HEAP32[(($519)>>2)]=$518;
      label = 543; break;
    case 112: 
      var $521=$1;
      var $522=$yyvsp;
      var $523=(($522)|0);
      var $524=$523;
      var $525=HEAP32[(($524)>>2)];
      var $526=_cond($525);
      var $527=$yyvsp;
      var $528=((($527)-(8))|0);
      var $529=$528;
      var $530=HEAP32[(($529)>>2)];
      var $531=_new_unless($521, $526, $530, 0);
      var $532=$yyval;
      HEAP32[(($532)>>2)]=$531;
      label = 543; break;
    case 113: 
      var $534=$1;
      var $535=$yyvsp;
      var $536=(($535)|0);
      var $537=$536;
      var $538=HEAP32[(($537)>>2)];
      var $539=_cond($538);
      var $540=$yyvsp;
      var $541=((($540)-(8))|0);
      var $542=$541;
      var $543=HEAP32[(($542)>>2)];
      var $544=_new_while($534, $539, $543);
      var $545=$yyval;
      HEAP32[(($545)>>2)]=$544;
      label = 543; break;
    case 114: 
      var $547=$1;
      var $548=$yyvsp;
      var $549=(($548)|0);
      var $550=$549;
      var $551=HEAP32[(($550)>>2)];
      var $552=_cond($551);
      var $553=$yyvsp;
      var $554=((($553)-(8))|0);
      var $555=$554;
      var $556=HEAP32[(($555)>>2)];
      var $557=_new_until($547, $552, $556);
      var $558=$yyval;
      HEAP32[(($558)>>2)]=$557;
      label = 543; break;
    case 115: 
      var $560=$1;
      var $561=$yyvsp;
      var $562=((($561)-(8))|0);
      var $563=$562;
      var $564=HEAP32[(($563)>>2)];
      var $565=$1;
      var $566=$1;
      var $567=$yyvsp;
      var $568=(($567)|0);
      var $569=$568;
      var $570=HEAP32[(($569)>>2)];
      var $571=_list3_gen($566, 0, 0, $570);
      var $572=_list1_gen($565, $571);
      var $573=_new_rescue($560, $564, $572, 0);
      var $574=$yyval;
      HEAP32[(($574)>>2)]=$573;
      label = 543; break;
    case 116: 
      var $576=$1;
      _yyerror($576, ((113184)|0));
      var $577=$1;
      var $578=$yyvsp;
      var $579=((($578)-(4))|0);
      var $580=$579;
      var $581=HEAP32[(($580)>>2)];
      var $582=_new_postexe($577, $581);
      var $583=$yyval;
      HEAP32[(($583)>>2)]=$582;
      label = 543; break;
    case 117: 
      var $585=$1;
      var $586=$yyvsp;
      var $587=((($586)-(8))|0);
      var $588=$587;
      var $589=HEAP32[(($588)>>2)];
      var $590=$yyvsp;
      var $591=(($590)|0);
      var $592=$591;
      var $593=HEAP32[(($592)>>2)];
      var $594=_new_masgn($585, $589, $593);
      var $595=$yyval;
      HEAP32[(($595)>>2)]=$594;
      label = 543; break;
    case 118: 
      var $597=$1;
      var $598=$yyvsp;
      var $599=((($598)-(8))|0);
      var $600=$599;
      var $601=HEAP32[(($600)>>2)];
      var $602=$yyvsp;
      var $603=((($602)-(4))|0);
      var $604=$603;
      var $605=HEAP16[(($604)>>1)];
      var $606=$yyvsp;
      var $607=(($606)|0);
      var $608=$607;
      var $609=HEAP32[(($608)>>2)];
      var $610=_new_op_asgn($597, $601, $605, $609);
      var $611=$yyval;
      HEAP32[(($611)>>2)]=$610;
      label = 543; break;
    case 119: 
      var $613=$1;
      var $614=$1;
      var $615=$yyvsp;
      var $616=((($615)-(20))|0);
      var $617=$616;
      var $618=HEAP32[(($617)>>2)];
      var $619=$1;
      var $620=_intern_gen2($619, ((112316)|0), 2);
      var $621=$yyvsp;
      var $622=((($621)-(12))|0);
      var $623=$622;
      var $624=HEAP32[(($623)>>2)];
      var $625=_new_call($614, $618, $620, $624);
      var $626=$yyvsp;
      var $627=((($626)-(4))|0);
      var $628=$627;
      var $629=HEAP16[(($628)>>1)];
      var $630=$yyvsp;
      var $631=(($630)|0);
      var $632=$631;
      var $633=HEAP32[(($632)>>2)];
      var $634=_new_op_asgn($613, $625, $629, $633);
      var $635=$yyval;
      HEAP32[(($635)>>2)]=$634;
      label = 543; break;
    case 120: 
      var $637=$1;
      var $638=$1;
      var $639=$yyvsp;
      var $640=((($639)-(16))|0);
      var $641=$640;
      var $642=HEAP32[(($641)>>2)];
      var $643=$yyvsp;
      var $644=((($643)-(8))|0);
      var $645=$644;
      var $646=HEAP16[(($645)>>1)];
      var $647=_new_call($638, $642, $646, 0);
      var $648=$yyvsp;
      var $649=((($648)-(4))|0);
      var $650=$649;
      var $651=HEAP16[(($650)>>1)];
      var $652=$yyvsp;
      var $653=(($652)|0);
      var $654=$653;
      var $655=HEAP32[(($654)>>2)];
      var $656=_new_op_asgn($637, $647, $651, $655);
      var $657=$yyval;
      HEAP32[(($657)>>2)]=$656;
      label = 543; break;
    case 121: 
      var $659=$1;
      var $660=$1;
      var $661=$yyvsp;
      var $662=((($661)-(16))|0);
      var $663=$662;
      var $664=HEAP32[(($663)>>2)];
      var $665=$yyvsp;
      var $666=((($665)-(8))|0);
      var $667=$666;
      var $668=HEAP16[(($667)>>1)];
      var $669=_new_call($660, $664, $668, 0);
      var $670=$yyvsp;
      var $671=((($670)-(4))|0);
      var $672=$671;
      var $673=HEAP16[(($672)>>1)];
      var $674=$yyvsp;
      var $675=(($674)|0);
      var $676=$675;
      var $677=HEAP32[(($676)>>2)];
      var $678=_new_op_asgn($659, $669, $673, $677);
      var $679=$yyval;
      HEAP32[(($679)>>2)]=$678;
      label = 543; break;
    case 122: 
      var $681=$1;
      _yyerror($681, ((111704)|0));
      var $682=$yyval;
      HEAP32[(($682)>>2)]=0;
      label = 543; break;
    case 123: 
      var $684=$1;
      var $685=$1;
      var $686=$yyvsp;
      var $687=((($686)-(16))|0);
      var $688=$687;
      var $689=HEAP32[(($688)>>2)];
      var $690=$yyvsp;
      var $691=((($690)-(8))|0);
      var $692=$691;
      var $693=HEAP16[(($692)>>1)];
      var $694=_new_call($685, $689, $693, 0);
      var $695=$yyvsp;
      var $696=((($695)-(4))|0);
      var $697=$696;
      var $698=HEAP16[(($697)>>1)];
      var $699=$yyvsp;
      var $700=(($699)|0);
      var $701=$700;
      var $702=HEAP32[(($701)>>2)];
      var $703=_new_op_asgn($684, $694, $698, $702);
      var $704=$yyval;
      HEAP32[(($704)>>2)]=$703;
      label = 543; break;
    case 124: 
      var $706=$1;
      var $707=$yyvsp;
      var $708=((($707)-(8))|0);
      var $709=$708;
      var $710=HEAP32[(($709)>>2)];
      _backref_error($706, $710);
      var $711=$1;
      var $712=_new_begin($711, 0);
      var $713=$yyval;
      HEAP32[(($713)>>2)]=$712;
      label = 543; break;
    case 125: 
      var $715=$1;
      var $716=$yyvsp;
      var $717=((($716)-(8))|0);
      var $718=$717;
      var $719=HEAP32[(($718)>>2)];
      var $720=$1;
      var $721=$yyvsp;
      var $722=(($721)|0);
      var $723=$722;
      var $724=HEAP32[(($723)>>2)];
      var $725=_new_array($720, $724);
      var $726=_new_asgn($715, $719, $725);
      var $727=$yyval;
      HEAP32[(($727)>>2)]=$726;
      label = 543; break;
    case 126: 
      var $729=$1;
      var $730=$yyvsp;
      var $731=((($730)-(8))|0);
      var $732=$731;
      var $733=HEAP32[(($732)>>2)];
      var $734=$yyvsp;
      var $735=(($734)|0);
      var $736=$735;
      var $737=HEAP32[(($736)>>2)];
      var $738=_new_masgn($729, $733, $737);
      var $739=$yyval;
      HEAP32[(($739)>>2)]=$738;
      label = 543; break;
    case 127: 
      var $741=$1;
      var $742=$yyvsp;
      var $743=((($742)-(8))|0);
      var $744=$743;
      var $745=HEAP32[(($744)>>2)];
      var $746=$1;
      var $747=$yyvsp;
      var $748=(($747)|0);
      var $749=$748;
      var $750=HEAP32[(($749)>>2)];
      var $751=_new_array($746, $750);
      var $752=_new_masgn($741, $745, $751);
      var $753=$yyval;
      HEAP32[(($753)>>2)]=$752;
      label = 543; break;
    case 128: 
      var $755=$1;
      var $756=$yyvsp;
      var $757=((($756)-(8))|0);
      var $758=$757;
      var $759=HEAP32[(($758)>>2)];
      var $760=$yyvsp;
      var $761=(($760)|0);
      var $762=$761;
      var $763=HEAP32[(($762)>>2)];
      var $764=_new_asgn($755, $759, $763);
      var $765=$yyval;
      HEAP32[(($765)>>2)]=$764;
      label = 543; break;
    case 129: 
      var $767=$1;
      var $768=$yyvsp;
      var $769=((($768)-(8))|0);
      var $770=$769;
      var $771=HEAP32[(($770)>>2)];
      var $772=$yyvsp;
      var $773=(($772)|0);
      var $774=$773;
      var $775=HEAP32[(($774)>>2)];
      var $776=_new_asgn($767, $771, $775);
      var $777=$yyval;
      HEAP32[(($777)>>2)]=$776;
      label = 543; break;
    case 130: 
      var $779=$1;
      var $780=$yyvsp;
      var $781=((($780)-(8))|0);
      var $782=$781;
      var $783=HEAP32[(($782)>>2)];
      var $784=$yyvsp;
      var $785=(($784)|0);
      var $786=$785;
      var $787=HEAP32[(($786)>>2)];
      var $788=_new_and($779, $783, $787);
      var $789=$yyval;
      HEAP32[(($789)>>2)]=$788;
      label = 543; break;
    case 131: 
      var $791=$1;
      var $792=$yyvsp;
      var $793=((($792)-(8))|0);
      var $794=$793;
      var $795=HEAP32[(($794)>>2)];
      var $796=$yyvsp;
      var $797=(($796)|0);
      var $798=$797;
      var $799=HEAP32[(($798)>>2)];
      var $800=_new_or($791, $795, $799);
      var $801=$yyval;
      HEAP32[(($801)>>2)]=$800;
      label = 543; break;
    case 132: 
      var $803=$1;
      var $804=$yyvsp;
      var $805=(($804)|0);
      var $806=$805;
      var $807=HEAP32[(($806)>>2)];
      var $808=_cond($807);
      var $809=_call_uni_op($803, $808, ((111264)|0));
      var $810=$yyval;
      HEAP32[(($810)>>2)]=$809;
      label = 543; break;
    case 133: 
      var $812=$1;
      var $813=$yyvsp;
      var $814=(($813)|0);
      var $815=$814;
      var $816=HEAP32[(($815)>>2)];
      var $817=_cond($816);
      var $818=_call_uni_op($812, $817, ((111264)|0));
      var $819=$yyval;
      HEAP32[(($819)>>2)]=$818;
      label = 543; break;
    case 134: 
      var $821=$yyvsp;
      var $822=(($821)|0);
      var $823=$822;
      var $824=HEAP32[(($823)>>2)];
      var $825=(($824)|(0))!=0;
      if ($825) { label = 136; break; } else { label = 135; break; }
    case 135: 
      var $827=$1;
      var $828=_new_nil($827);
      var $829=$yyval;
      HEAP32[(($829)>>2)]=$828;
      label = 137; break;
    case 136: 
      var $831=$yyvsp;
      var $832=(($831)|0);
      var $833=$832;
      var $834=HEAP32[(($833)>>2)];
      var $835=$yyval;
      HEAP32[(($835)>>2)]=$834;
      label = 137; break;
    case 137: 
      label = 543; break;
    case 138: 
      var $838=$1;
      _local_nest($838);
      label = 543; break;
    case 139: 
      var $840=$1;
      var $841=$yyvsp;
      var $842=((($841)-(8))|0);
      var $843=$842;
      var $844=HEAP32[(($843)>>2)];
      var $845=$yyvsp;
      var $846=((($845)-(4))|0);
      var $847=$846;
      var $848=HEAP32[(($847)>>2)];
      var $849=_new_block($840, $844, $848);
      var $850=$yyval;
      HEAP32[(($850)>>2)]=$849;
      var $851=$1;
      _local_unnest($851);
      label = 543; break;
    case 140: 
      var $853=$1;
      var $854=$yyvsp;
      var $855=((($854)-(4))|0);
      var $856=$855;
      var $857=HEAP16[(($856)>>1)];
      var $858=$yyvsp;
      var $859=(($858)|0);
      var $860=$859;
      var $861=HEAP32[(($860)>>2)];
      var $862=_new_fcall($853, $857, $861);
      var $863=$yyval;
      HEAP32[(($863)>>2)]=$862;
      label = 543; break;
    case 141: 
      var $865=$1;
      var $866=$yyvsp;
      var $867=((($866)-(4))|0);
      var $868=$867;
      var $869=HEAP32[(($868)>>2)];
      var $870=$yyvsp;
      var $871=(($870)|0);
      var $872=$871;
      var $873=HEAP32[(($872)>>2)];
      _args_with_block($865, $869, $873);
      var $874=$1;
      var $875=$yyvsp;
      var $876=((($875)-(8))|0);
      var $877=$876;
      var $878=HEAP16[(($877)>>1)];
      var $879=$yyvsp;
      var $880=((($879)-(4))|0);
      var $881=$880;
      var $882=HEAP32[(($881)>>2)];
      var $883=_new_fcall($874, $878, $882);
      var $884=$yyval;
      HEAP32[(($884)>>2)]=$883;
      label = 543; break;
    case 142: 
      var $886=$1;
      var $887=$yyvsp;
      var $888=((($887)-(12))|0);
      var $889=$888;
      var $890=HEAP32[(($889)>>2)];
      var $891=$yyvsp;
      var $892=((($891)-(4))|0);
      var $893=$892;
      var $894=HEAP16[(($893)>>1)];
      var $895=$yyvsp;
      var $896=(($895)|0);
      var $897=$896;
      var $898=HEAP32[(($897)>>2)];
      var $899=_new_call($886, $890, $894, $898);
      var $900=$yyval;
      HEAP32[(($900)>>2)]=$899;
      label = 543; break;
    case 143: 
      var $902=$1;
      var $903=$yyvsp;
      var $904=((($903)-(4))|0);
      var $905=$904;
      var $906=HEAP32[(($905)>>2)];
      var $907=$yyvsp;
      var $908=(($907)|0);
      var $909=$908;
      var $910=HEAP32[(($909)>>2)];
      _args_with_block($902, $906, $910);
      var $911=$1;
      var $912=$yyvsp;
      var $913=((($912)-(16))|0);
      var $914=$913;
      var $915=HEAP32[(($914)>>2)];
      var $916=$yyvsp;
      var $917=((($916)-(8))|0);
      var $918=$917;
      var $919=HEAP16[(($918)>>1)];
      var $920=$yyvsp;
      var $921=((($920)-(4))|0);
      var $922=$921;
      var $923=HEAP32[(($922)>>2)];
      var $924=_new_call($911, $915, $919, $923);
      var $925=$yyval;
      HEAP32[(($925)>>2)]=$924;
      label = 543; break;
    case 144: 
      var $927=$1;
      var $928=$yyvsp;
      var $929=((($928)-(12))|0);
      var $930=$929;
      var $931=HEAP32[(($930)>>2)];
      var $932=$yyvsp;
      var $933=((($932)-(4))|0);
      var $934=$933;
      var $935=HEAP16[(($934)>>1)];
      var $936=$yyvsp;
      var $937=(($936)|0);
      var $938=$937;
      var $939=HEAP32[(($938)>>2)];
      var $940=_new_call($927, $931, $935, $939);
      var $941=$yyval;
      HEAP32[(($941)>>2)]=$940;
      label = 543; break;
    case 145: 
      var $943=$1;
      var $944=$yyvsp;
      var $945=((($944)-(4))|0);
      var $946=$945;
      var $947=HEAP32[(($946)>>2)];
      var $948=$yyvsp;
      var $949=(($948)|0);
      var $950=$949;
      var $951=HEAP32[(($950)>>2)];
      _args_with_block($943, $947, $951);
      var $952=$1;
      var $953=$yyvsp;
      var $954=((($953)-(16))|0);
      var $955=$954;
      var $956=HEAP32[(($955)>>2)];
      var $957=$yyvsp;
      var $958=((($957)-(8))|0);
      var $959=$958;
      var $960=HEAP16[(($959)>>1)];
      var $961=$yyvsp;
      var $962=((($961)-(4))|0);
      var $963=$962;
      var $964=HEAP32[(($963)>>2)];
      var $965=_new_call($952, $956, $960, $964);
      var $966=$yyval;
      HEAP32[(($966)>>2)]=$965;
      label = 543; break;
    case 146: 
      var $968=$1;
      var $969=$yyvsp;
      var $970=(($969)|0);
      var $971=$970;
      var $972=HEAP32[(($971)>>2)];
      var $973=_new_super($968, $972);
      var $974=$yyval;
      HEAP32[(($974)>>2)]=$973;
      label = 543; break;
    case 147: 
      var $976=$1;
      var $977=$yyvsp;
      var $978=(($977)|0);
      var $979=$978;
      var $980=HEAP32[(($979)>>2)];
      var $981=_new_yield($976, $980);
      var $982=$yyval;
      HEAP32[(($982)>>2)]=$981;
      label = 543; break;
    case 148: 
      var $984=$1;
      var $985=$1;
      var $986=$yyvsp;
      var $987=(($986)|0);
      var $988=$987;
      var $989=HEAP32[(($988)>>2)];
      var $990=_ret_args($985, $989);
      var $991=_new_return($984, $990);
      var $992=$yyval;
      HEAP32[(($992)>>2)]=$991;
      label = 543; break;
    case 149: 
      var $994=$1;
      var $995=$1;
      var $996=$yyvsp;
      var $997=(($996)|0);
      var $998=$997;
      var $999=HEAP32[(($998)>>2)];
      var $1000=_ret_args($995, $999);
      var $1001=_new_break($994, $1000);
      var $1002=$yyval;
      HEAP32[(($1002)>>2)]=$1001;
      label = 543; break;
    case 150: 
      var $1004=$1;
      var $1005=$1;
      var $1006=$yyvsp;
      var $1007=(($1006)|0);
      var $1008=$1007;
      var $1009=HEAP32[(($1008)>>2)];
      var $1010=_ret_args($1005, $1009);
      var $1011=_new_next($1004, $1010);
      var $1012=$yyval;
      HEAP32[(($1012)>>2)]=$1011;
      label = 543; break;
    case 151: 
      var $1014=$yyvsp;
      var $1015=(($1014)|0);
      var $1016=$1015;
      var $1017=HEAP32[(($1016)>>2)];
      var $1018=$yyval;
      HEAP32[(($1018)>>2)]=$1017;
      label = 543; break;
    case 152: 
      var $1020=$yyvsp;
      var $1021=((($1020)-(4))|0);
      var $1022=$1021;
      var $1023=HEAP32[(($1022)>>2)];
      var $1024=$yyval;
      HEAP32[(($1024)>>2)]=$1023;
      label = 543; break;
    case 153: 
      var $1026=$1;
      var $1027=$yyvsp;
      var $1028=((($1027)-(4))|0);
      var $1029=$1028;
      var $1030=HEAP32[(($1029)>>2)];
      var $1031=_list1_gen($1026, $1030);
      var $1032=$yyval;
      HEAP32[(($1032)>>2)]=$1031;
      label = 543; break;
    case 154: 
      var $1034=$1;
      var $1035=$yyvsp;
      var $1036=(($1035)|0);
      var $1037=$1036;
      var $1038=HEAP32[(($1037)>>2)];
      var $1039=_list1_gen($1034, $1038);
      var $1040=$yyval;
      HEAP32[(($1040)>>2)]=$1039;
      label = 543; break;
    case 155: 
      var $1042=$1;
      var $1043=$1;
      var $1044=$yyvsp;
      var $1045=((($1044)-(4))|0);
      var $1046=$1045;
      var $1047=HEAP32[(($1046)>>2)];
      var $1048=$1;
      var $1049=$yyvsp;
      var $1050=(($1049)|0);
      var $1051=$1050;
      var $1052=HEAP32[(($1051)>>2)];
      var $1053=_list1_gen($1048, $1052);
      var $1054=_append_gen($1043, $1047, $1053);
      var $1055=_list1_gen($1042, $1054);
      var $1056=$yyval;
      HEAP32[(($1056)>>2)]=$1055;
      label = 543; break;
    case 156: 
      var $1058=$1;
      var $1059=$yyvsp;
      var $1060=((($1059)-(8))|0);
      var $1061=$1060;
      var $1062=HEAP32[(($1061)>>2)];
      var $1063=$yyvsp;
      var $1064=(($1063)|0);
      var $1065=$1064;
      var $1066=HEAP32[(($1065)>>2)];
      var $1067=_list2_gen($1058, $1062, $1066);
      var $1068=$yyval;
      HEAP32[(($1068)>>2)]=$1067;
      label = 543; break;
    case 157: 
      var $1070=$1;
      var $1071=$yyvsp;
      var $1072=((($1071)-(16))|0);
      var $1073=$1072;
      var $1074=HEAP32[(($1073)>>2)];
      var $1075=$yyvsp;
      var $1076=((($1075)-(8))|0);
      var $1077=$1076;
      var $1078=HEAP32[(($1077)>>2)];
      var $1079=$yyvsp;
      var $1080=(($1079)|0);
      var $1081=$1080;
      var $1082=HEAP32[(($1081)>>2)];
      var $1083=_list3_gen($1070, $1074, $1078, $1082);
      var $1084=$yyval;
      HEAP32[(($1084)>>2)]=$1083;
      label = 543; break;
    case 158: 
      var $1086=$1;
      var $1087=$yyvsp;
      var $1088=((($1087)-(4))|0);
      var $1089=$1088;
      var $1090=HEAP32[(($1089)>>2)];
      var $1091=$1;
      var $1092=_new_nil($1091);
      var $1093=_list2_gen($1086, $1090, $1092);
      var $1094=$yyval;
      HEAP32[(($1094)>>2)]=$1093;
      label = 543; break;
    case 159: 
      var $1096=$1;
      var $1097=$yyvsp;
      var $1098=((($1097)-(12))|0);
      var $1099=$1098;
      var $1100=HEAP32[(($1099)>>2)];
      var $1101=$1;
      var $1102=_new_nil($1101);
      var $1103=$yyvsp;
      var $1104=(($1103)|0);
      var $1105=$1104;
      var $1106=HEAP32[(($1105)>>2)];
      var $1107=_list3_gen($1096, $1100, $1102, $1106);
      var $1108=$yyval;
      HEAP32[(($1108)>>2)]=$1107;
      label = 543; break;
    case 160: 
      var $1110=$1;
      var $1111=$yyvsp;
      var $1112=(($1111)|0);
      var $1113=$1112;
      var $1114=HEAP32[(($1113)>>2)];
      var $1115=_list2_gen($1110, 0, $1114);
      var $1116=$yyval;
      HEAP32[(($1116)>>2)]=$1115;
      label = 543; break;
    case 161: 
      var $1118=$1;
      var $1119=$yyvsp;
      var $1120=((($1119)-(8))|0);
      var $1121=$1120;
      var $1122=HEAP32[(($1121)>>2)];
      var $1123=$yyvsp;
      var $1124=(($1123)|0);
      var $1125=$1124;
      var $1126=HEAP32[(($1125)>>2)];
      var $1127=_list3_gen($1118, 0, $1122, $1126);
      var $1128=$yyval;
      HEAP32[(($1128)>>2)]=$1127;
      label = 543; break;
    case 162: 
      var $1130=$1;
      var $1131=$1;
      var $1132=_new_nil($1131);
      var $1133=_list2_gen($1130, 0, $1132);
      var $1134=$yyval;
      HEAP32[(($1134)>>2)]=$1133;
      label = 543; break;
    case 163: 
      var $1136=$1;
      var $1137=$1;
      var $1138=_new_nil($1137);
      var $1139=$yyvsp;
      var $1140=(($1139)|0);
      var $1141=$1140;
      var $1142=HEAP32[(($1141)>>2)];
      var $1143=_list3_gen($1136, 0, $1138, $1142);
      var $1144=$yyval;
      HEAP32[(($1144)>>2)]=$1143;
      label = 543; break;
    case 164: 
      var $1146=$yyvsp;
      var $1147=((($1146)-(4))|0);
      var $1148=$1147;
      var $1149=HEAP32[(($1148)>>2)];
      var $1150=$yyval;
      HEAP32[(($1150)>>2)]=$1149;
      label = 543; break;
    case 165: 
      var $1152=$1;
      var $1153=$yyvsp;
      var $1154=((($1153)-(4))|0);
      var $1155=$1154;
      var $1156=HEAP32[(($1155)>>2)];
      var $1157=_list1_gen($1152, $1156);
      var $1158=$yyval;
      HEAP32[(($1158)>>2)]=$1157;
      label = 543; break;
    case 166: 
      var $1160=$1;
      var $1161=$yyvsp;
      var $1162=((($1161)-(8))|0);
      var $1163=$1162;
      var $1164=HEAP32[(($1163)>>2)];
      var $1165=$1;
      var $1166=$yyvsp;
      var $1167=((($1166)-(4))|0);
      var $1168=$1167;
      var $1169=HEAP32[(($1168)>>2)];
      var $1170=_list1_gen($1165, $1169);
      var $1171=_append_gen($1160, $1164, $1170);
      var $1172=$yyval;
      HEAP32[(($1172)>>2)]=$1171;
      label = 543; break;
    case 167: 
      var $1174=$1;
      var $1175=$yyvsp;
      var $1176=(($1175)|0);
      var $1177=$1176;
      var $1178=HEAP32[(($1177)>>2)];
      var $1179=_list1_gen($1174, $1178);
      var $1180=$yyval;
      HEAP32[(($1180)>>2)]=$1179;
      label = 543; break;
    case 168: 
      var $1182=$1;
      var $1183=$yyvsp;
      var $1184=((($1183)-(4))|0);
      var $1185=$1184;
      var $1186=HEAP32[(($1185)>>2)];
      var $1187=$1;
      var $1188=$yyvsp;
      var $1189=(($1188)|0);
      var $1190=$1189;
      var $1191=HEAP32[(($1190)>>2)];
      var $1192=_list1_gen($1187, $1191);
      var $1193=_append_gen($1182, $1186, $1192);
      var $1194=$yyval;
      HEAP32[(($1194)>>2)]=$1193;
      label = 543; break;
    case 169: 
      var $1196=$1;
      var $1197=$yyvsp;
      var $1198=(($1197)|0);
      var $1199=$1198;
      var $1200=HEAP32[(($1199)>>2)];
      _assignable($1196, $1200);
      label = 543; break;
    case 170: 
      var $1202=$1;
      var $1203=$yyvsp;
      var $1204=((($1203)-(12))|0);
      var $1205=$1204;
      var $1206=HEAP32[(($1205)>>2)];
      var $1207=$1;
      var $1208=_intern_gen2($1207, ((112316)|0), 2);
      var $1209=$yyvsp;
      var $1210=((($1209)-(4))|0);
      var $1211=$1210;
      var $1212=HEAP32[(($1211)>>2)];
      var $1213=_new_call($1202, $1206, $1208, $1212);
      var $1214=$yyval;
      HEAP32[(($1214)>>2)]=$1213;
      label = 543; break;
    case 171: 
      var $1216=$1;
      var $1217=$yyvsp;
      var $1218=((($1217)-(8))|0);
      var $1219=$1218;
      var $1220=HEAP32[(($1219)>>2)];
      var $1221=$yyvsp;
      var $1222=(($1221)|0);
      var $1223=$1222;
      var $1224=HEAP16[(($1223)>>1)];
      var $1225=_new_call($1216, $1220, $1224, 0);
      var $1226=$yyval;
      HEAP32[(($1226)>>2)]=$1225;
      label = 543; break;
    case 172: 
      var $1228=$1;
      var $1229=$yyvsp;
      var $1230=((($1229)-(8))|0);
      var $1231=$1230;
      var $1232=HEAP32[(($1231)>>2)];
      var $1233=$yyvsp;
      var $1234=(($1233)|0);
      var $1235=$1234;
      var $1236=HEAP16[(($1235)>>1)];
      var $1237=_new_call($1228, $1232, $1236, 0);
      var $1238=$yyval;
      HEAP32[(($1238)>>2)]=$1237;
      label = 543; break;
    case 173: 
      var $1240=$1;
      var $1241=$yyvsp;
      var $1242=((($1241)-(8))|0);
      var $1243=$1242;
      var $1244=HEAP32[(($1243)>>2)];
      var $1245=$yyvsp;
      var $1246=(($1245)|0);
      var $1247=$1246;
      var $1248=HEAP16[(($1247)>>1)];
      var $1249=_new_call($1240, $1244, $1248, 0);
      var $1250=$yyval;
      HEAP32[(($1250)>>2)]=$1249;
      label = 543; break;
    case 174: 
      var $1252=$1;
      var $1253=(($1252+64)|0);
      var $1254=HEAP32[(($1253)>>2)];
      var $1255=(($1254)|(0))!=0;
      if ($1255) { label = 176; break; } else { label = 175; break; }
    case 175: 
      var $1257=$1;
      var $1258=(($1257+68)|0);
      var $1259=HEAP32[(($1258)>>2)];
      var $1260=(($1259)|(0))!=0;
      if ($1260) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $1262=$1;
      _yyerror($1262, ((110708)|0));
      label = 177; break;
    case 177: 
      var $1264=$1;
      var $1265=$yyvsp;
      var $1266=((($1265)-(8))|0);
      var $1267=$1266;
      var $1268=HEAP32[(($1267)>>2)];
      var $1269=$yyvsp;
      var $1270=(($1269)|0);
      var $1271=$1270;
      var $1272=HEAP16[(($1271)>>1)];
      var $1273=_new_colon2($1264, $1268, $1272);
      var $1274=$yyval;
      HEAP32[(($1274)>>2)]=$1273;
      label = 543; break;
    case 178: 
      var $1276=$1;
      var $1277=(($1276+64)|0);
      var $1278=HEAP32[(($1277)>>2)];
      var $1279=(($1278)|(0))!=0;
      if ($1279) { label = 180; break; } else { label = 179; break; }
    case 179: 
      var $1281=$1;
      var $1282=(($1281+68)|0);
      var $1283=HEAP32[(($1282)>>2)];
      var $1284=(($1283)|(0))!=0;
      if ($1284) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $1286=$1;
      _yyerror($1286, ((110708)|0));
      label = 181; break;
    case 181: 
      var $1288=$1;
      var $1289=$yyvsp;
      var $1290=(($1289)|0);
      var $1291=$1290;
      var $1292=HEAP16[(($1291)>>1)];
      var $1293=_new_colon3($1288, $1292);
      var $1294=$yyval;
      HEAP32[(($1294)>>2)]=$1293;
      label = 543; break;
    case 182: 
      var $1296=$1;
      var $1297=$yyvsp;
      var $1298=(($1297)|0);
      var $1299=$1298;
      var $1300=HEAP32[(($1299)>>2)];
      _backref_error($1296, $1300);
      var $1301=$yyval;
      HEAP32[(($1301)>>2)]=0;
      label = 543; break;
    case 183: 
      var $1303=$1;
      var $1304=$yyvsp;
      var $1305=(($1304)|0);
      var $1306=$1305;
      var $1307=HEAP32[(($1306)>>2)];
      _assignable($1303, $1307);
      label = 543; break;
    case 184: 
      var $1309=$1;
      var $1310=$yyvsp;
      var $1311=((($1310)-(12))|0);
      var $1312=$1311;
      var $1313=HEAP32[(($1312)>>2)];
      var $1314=$1;
      var $1315=_intern_gen2($1314, ((112316)|0), 2);
      var $1316=$yyvsp;
      var $1317=((($1316)-(4))|0);
      var $1318=$1317;
      var $1319=HEAP32[(($1318)>>2)];
      var $1320=_new_call($1309, $1313, $1315, $1319);
      var $1321=$yyval;
      HEAP32[(($1321)>>2)]=$1320;
      label = 543; break;
    case 185: 
      var $1323=$1;
      var $1324=$yyvsp;
      var $1325=((($1324)-(8))|0);
      var $1326=$1325;
      var $1327=HEAP32[(($1326)>>2)];
      var $1328=$yyvsp;
      var $1329=(($1328)|0);
      var $1330=$1329;
      var $1331=HEAP16[(($1330)>>1)];
      var $1332=_new_call($1323, $1327, $1331, 0);
      var $1333=$yyval;
      HEAP32[(($1333)>>2)]=$1332;
      label = 543; break;
    case 186: 
      var $1335=$1;
      var $1336=$yyvsp;
      var $1337=((($1336)-(8))|0);
      var $1338=$1337;
      var $1339=HEAP32[(($1338)>>2)];
      var $1340=$yyvsp;
      var $1341=(($1340)|0);
      var $1342=$1341;
      var $1343=HEAP16[(($1342)>>1)];
      var $1344=_new_call($1335, $1339, $1343, 0);
      var $1345=$yyval;
      HEAP32[(($1345)>>2)]=$1344;
      label = 543; break;
    case 187: 
      var $1347=$1;
      var $1348=$yyvsp;
      var $1349=((($1348)-(8))|0);
      var $1350=$1349;
      var $1351=HEAP32[(($1350)>>2)];
      var $1352=$yyvsp;
      var $1353=(($1352)|0);
      var $1354=$1353;
      var $1355=HEAP16[(($1354)>>1)];
      var $1356=_new_call($1347, $1351, $1355, 0);
      var $1357=$yyval;
      HEAP32[(($1357)>>2)]=$1356;
      label = 543; break;
    case 188: 
      var $1359=$1;
      var $1360=(($1359+64)|0);
      var $1361=HEAP32[(($1360)>>2)];
      var $1362=(($1361)|(0))!=0;
      if ($1362) { label = 190; break; } else { label = 189; break; }
    case 189: 
      var $1364=$1;
      var $1365=(($1364+68)|0);
      var $1366=HEAP32[(($1365)>>2)];
      var $1367=(($1366)|(0))!=0;
      if ($1367) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $1369=$1;
      _yyerror($1369, ((110708)|0));
      label = 191; break;
    case 191: 
      var $1371=$1;
      var $1372=$yyvsp;
      var $1373=((($1372)-(8))|0);
      var $1374=$1373;
      var $1375=HEAP32[(($1374)>>2)];
      var $1376=$yyvsp;
      var $1377=(($1376)|0);
      var $1378=$1377;
      var $1379=HEAP16[(($1378)>>1)];
      var $1380=_new_colon2($1371, $1375, $1379);
      var $1381=$yyval;
      HEAP32[(($1381)>>2)]=$1380;
      label = 543; break;
    case 192: 
      var $1383=$1;
      var $1384=(($1383+64)|0);
      var $1385=HEAP32[(($1384)>>2)];
      var $1386=(($1385)|(0))!=0;
      if ($1386) { label = 194; break; } else { label = 193; break; }
    case 193: 
      var $1388=$1;
      var $1389=(($1388+68)|0);
      var $1390=HEAP32[(($1389)>>2)];
      var $1391=(($1390)|(0))!=0;
      if ($1391) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $1393=$1;
      _yyerror($1393, ((110708)|0));
      label = 195; break;
    case 195: 
      var $1395=$1;
      var $1396=$yyvsp;
      var $1397=(($1396)|0);
      var $1398=$1397;
      var $1399=HEAP16[(($1398)>>1)];
      var $1400=_new_colon3($1395, $1399);
      var $1401=$yyval;
      HEAP32[(($1401)>>2)]=$1400;
      label = 543; break;
    case 196: 
      var $1403=$1;
      var $1404=$yyvsp;
      var $1405=(($1404)|0);
      var $1406=$1405;
      var $1407=HEAP32[(($1406)>>2)];
      _backref_error($1403, $1407);
      var $1408=$yyval;
      HEAP32[(($1408)>>2)]=0;
      label = 543; break;
    case 197: 
      var $1410=$1;
      _yyerror($1410, ((110336)|0));
      label = 543; break;
    case 198: 
      var $1412=$1;
      var $1413=$yyvsp;
      var $1414=(($1413)|0);
      var $1415=$1414;
      var $1416=HEAP16[(($1415)>>1)];
      var $1417=(($1416 << 16) >> 16);
      var $1418=$1417;
      var $1419=_cons_gen($1412, 1, $1418);
      var $1420=$yyval;
      HEAP32[(($1420)>>2)]=$1419;
      label = 543; break;
    case 199: 
      var $1422=$1;
      var $1423=$yyvsp;
      var $1424=(($1423)|0);
      var $1425=$1424;
      var $1426=HEAP16[(($1425)>>1)];
      var $1427=(($1426 << 16) >> 16);
      var $1428=$1427;
      var $1429=_cons_gen($1422, 0, $1428);
      var $1430=$yyval;
      HEAP32[(($1430)>>2)]=$1429;
      label = 543; break;
    case 200: 
      var $1432=$1;
      var $1433=$yyvsp;
      var $1434=((($1433)-(8))|0);
      var $1435=$1434;
      var $1436=HEAP32[(($1435)>>2)];
      var $1437=$yyvsp;
      var $1438=(($1437)|0);
      var $1439=$1438;
      var $1440=HEAP16[(($1439)>>1)];
      var $1441=(($1440 << 16) >> 16);
      var $1442=$1441;
      var $1443=_cons_gen($1432, $1436, $1442);
      var $1444=$yyval;
      HEAP32[(($1444)>>2)]=$1443;
      label = 543; break;
    case 201: 
      var $1446=$1;
      var $1447=(($1446+40)|0);
      HEAP32[(($1447)>>2)]=3;
      var $1448=$yyvsp;
      var $1449=(($1448)|0);
      var $1450=$1449;
      var $1451=HEAP16[(($1450)>>1)];
      var $1452=$yyval;
      HEAP16[(($1452)>>1)]=$1451;
      label = 543; break;
    case 202: 
      var $1454=$1;
      var $1455=(($1454+40)|0);
      HEAP32[(($1455)>>2)]=3;
      var $1456=$yyvsp;
      var $1457=(($1456)|0);
      var $1458=$1457;
      var $1459=HEAP16[(($1458)>>1)];
      var $1460=$yyval;
      HEAP16[(($1460)>>1)]=$1459;
      label = 543; break;
    case 203: 
      var $1462=$1;
      var $1463=$yyvsp;
      var $1464=(($1463)|0);
      var $1465=$1464;
      var $1466=HEAP16[(($1465)>>1)];
      var $1467=_new_undef($1462, $1466);
      var $1468=$yyval;
      HEAP32[(($1468)>>2)]=$1467;
      label = 543; break;
    case 204: 
      var $1470=$1;
      var $1471=(($1470+40)|0);
      HEAP32[(($1471)>>2)]=7;
      label = 543; break;
    case 205: 
      var $1473=$1;
      var $1474=$yyvsp;
      var $1475=((($1474)-(12))|0);
      var $1476=$1475;
      var $1477=HEAP32[(($1476)>>2)];
      var $1478=$1;
      var $1479=$yyvsp;
      var $1480=(($1479)|0);
      var $1481=$1480;
      var $1482=HEAP16[(($1481)>>1)];
      var $1483=(($1482 << 16) >> 16);
      var $1484=$1483;
      var $1485=_list1_gen($1478, $1484);
      var $1486=_append_gen($1473, $1477, $1485);
      var $1487=$yyval;
      HEAP32[(($1487)>>2)]=$1486;
      label = 543; break;
    case 206: 
      var $1489=$1;
      var $1490=_intern_gen_c($1489, 124);
      var $1491=$yyval;
      HEAP16[(($1491)>>1)]=$1490;
      label = 543; break;
    case 207: 
      var $1493=$1;
      var $1494=_intern_gen_c($1493, 94);
      var $1495=$yyval;
      HEAP16[(($1495)>>1)]=$1494;
      label = 543; break;
    case 208: 
      var $1497=$1;
      var $1498=_intern_gen_c($1497, 38);
      var $1499=$yyval;
      HEAP16[(($1499)>>1)]=$1498;
      label = 543; break;
    case 209: 
      var $1501=$1;
      var $1502=_intern_gen2($1501, ((109936)|0), 3);
      var $1503=$yyval;
      HEAP16[(($1503)>>1)]=$1502;
      label = 543; break;
    case 210: 
      var $1505=$1;
      var $1506=_intern_gen2($1505, ((109496)|0), 2);
      var $1507=$yyval;
      HEAP16[(($1507)>>1)]=$1506;
      label = 543; break;
    case 211: 
      var $1509=$1;
      var $1510=_intern_gen2($1509, ((109004)|0), 3);
      var $1511=$yyval;
      HEAP16[(($1511)>>1)]=$1510;
      label = 543; break;
    case 212: 
      var $1513=$1;
      var $1514=_intern_gen2($1513, ((108460)|0), 2);
      var $1515=$yyval;
      HEAP16[(($1515)>>1)]=$1514;
      label = 543; break;
    case 213: 
      var $1517=$1;
      var $1518=_intern_gen2($1517, ((108116)|0), 2);
      var $1519=$yyval;
      HEAP16[(($1519)>>1)]=$1518;
      label = 543; break;
    case 214: 
      var $1521=$1;
      var $1522=_intern_gen_c($1521, 62);
      var $1523=$yyval;
      HEAP16[(($1523)>>1)]=$1522;
      label = 543; break;
    case 215: 
      var $1525=$1;
      var $1526=_intern_gen2($1525, ((107576)|0), 2);
      var $1527=$yyval;
      HEAP16[(($1527)>>1)]=$1526;
      label = 543; break;
    case 216: 
      var $1529=$1;
      var $1530=_intern_gen_c($1529, 60);
      var $1531=$yyval;
      HEAP16[(($1531)>>1)]=$1530;
      label = 543; break;
    case 217: 
      var $1533=$1;
      var $1534=_intern_gen2($1533, ((107312)|0), 2);
      var $1535=$yyval;
      HEAP16[(($1535)>>1)]=$1534;
      label = 543; break;
    case 218: 
      var $1537=$1;
      var $1538=_intern_gen2($1537, ((106892)|0), 2);
      var $1539=$yyval;
      HEAP16[(($1539)>>1)]=$1538;
      label = 543; break;
    case 219: 
      var $1541=$1;
      var $1542=_intern_gen2($1541, ((106460)|0), 2);
      var $1543=$yyval;
      HEAP16[(($1543)>>1)]=$1542;
      label = 543; break;
    case 220: 
      var $1545=$1;
      var $1546=_intern_gen2($1545, ((106084)|0), 2);
      var $1547=$yyval;
      HEAP16[(($1547)>>1)]=$1546;
      label = 543; break;
    case 221: 
      var $1549=$1;
      var $1550=_intern_gen_c($1549, 43);
      var $1551=$yyval;
      HEAP16[(($1551)>>1)]=$1550;
      label = 543; break;
    case 222: 
      var $1553=$1;
      var $1554=_intern_gen_c($1553, 45);
      var $1555=$yyval;
      HEAP16[(($1555)>>1)]=$1554;
      label = 543; break;
    case 223: 
      var $1557=$1;
      var $1558=_intern_gen_c($1557, 42);
      var $1559=$yyval;
      HEAP16[(($1559)>>1)]=$1558;
      label = 543; break;
    case 224: 
      var $1561=$1;
      var $1562=_intern_gen_c($1561, 42);
      var $1563=$yyval;
      HEAP16[(($1563)>>1)]=$1562;
      label = 543; break;
    case 225: 
      var $1565=$1;
      var $1566=_intern_gen_c($1565, 47);
      var $1567=$yyval;
      HEAP16[(($1567)>>1)]=$1566;
      label = 543; break;
    case 226: 
      var $1569=$1;
      var $1570=_intern_gen_c($1569, 37);
      var $1571=$yyval;
      HEAP16[(($1571)>>1)]=$1570;
      label = 543; break;
    case 227: 
      var $1573=$1;
      var $1574=_intern_gen2($1573, ((105760)|0), 2);
      var $1575=$yyval;
      HEAP16[(($1575)>>1)]=$1574;
      label = 543; break;
    case 228: 
      var $1577=$1;
      var $1578=_intern_gen_c($1577, 33);
      var $1579=$yyval;
      HEAP16[(($1579)>>1)]=$1578;
      label = 543; break;
    case 229: 
      var $1581=$1;
      var $1582=_intern_gen_c($1581, 126);
      var $1583=$yyval;
      HEAP16[(($1583)>>1)]=$1582;
      label = 543; break;
    case 230: 
      var $1585=$1;
      var $1586=_intern_gen2($1585, ((105440)|0), 2);
      var $1587=$yyval;
      HEAP16[(($1587)>>1)]=$1586;
      label = 543; break;
    case 231: 
      var $1589=$1;
      var $1590=_intern_gen2($1589, ((105156)|0), 2);
      var $1591=$yyval;
      HEAP16[(($1591)>>1)]=$1590;
      label = 543; break;
    case 232: 
      var $1593=$1;
      var $1594=_intern_gen2($1593, ((112316)|0), 2);
      var $1595=$yyval;
      HEAP16[(($1595)>>1)]=$1594;
      label = 543; break;
    case 233: 
      var $1597=$1;
      var $1598=_intern_gen2($1597, ((104844)|0), 3);
      var $1599=$yyval;
      HEAP16[(($1599)>>1)]=$1598;
      label = 543; break;
    case 234: 
      var $1601=$1;
      var $1602=_intern_gen_c($1601, 96);
      var $1603=$yyval;
      HEAP16[(($1603)>>1)]=$1602;
      label = 543; break;
    case 235: 
      var $1605=$1;
      var $1606=$yyvsp;
      var $1607=((($1606)-(8))|0);
      var $1608=$1607;
      var $1609=HEAP32[(($1608)>>2)];
      var $1610=$yyvsp;
      var $1611=(($1610)|0);
      var $1612=$1611;
      var $1613=HEAP32[(($1612)>>2)];
      var $1614=_new_asgn($1605, $1609, $1613);
      var $1615=$yyval;
      HEAP32[(($1615)>>2)]=$1614;
      label = 543; break;
    case 236: 
      var $1617=$1;
      var $1618=$yyvsp;
      var $1619=((($1618)-(16))|0);
      var $1620=$1619;
      var $1621=HEAP32[(($1620)>>2)];
      var $1622=$1;
      var $1623=$yyvsp;
      var $1624=((($1623)-(8))|0);
      var $1625=$1624;
      var $1626=HEAP32[(($1625)>>2)];
      var $1627=$1;
      var $1628=$1;
      var $1629=$yyvsp;
      var $1630=(($1629)|0);
      var $1631=$1630;
      var $1632=HEAP32[(($1631)>>2)];
      var $1633=_list3_gen($1628, 0, 0, $1632);
      var $1634=_list1_gen($1627, $1633);
      var $1635=_new_rescue($1622, $1626, $1634, 0);
      var $1636=_new_asgn($1617, $1621, $1635);
      var $1637=$yyval;
      HEAP32[(($1637)>>2)]=$1636;
      label = 543; break;
    case 237: 
      var $1639=$1;
      var $1640=$yyvsp;
      var $1641=((($1640)-(8))|0);
      var $1642=$1641;
      var $1643=HEAP32[(($1642)>>2)];
      var $1644=$yyvsp;
      var $1645=((($1644)-(4))|0);
      var $1646=$1645;
      var $1647=HEAP16[(($1646)>>1)];
      var $1648=$yyvsp;
      var $1649=(($1648)|0);
      var $1650=$1649;
      var $1651=HEAP32[(($1650)>>2)];
      var $1652=_new_op_asgn($1639, $1643, $1647, $1651);
      var $1653=$yyval;
      HEAP32[(($1653)>>2)]=$1652;
      label = 543; break;
    case 238: 
      var $1655=$1;
      var $1656=$yyvsp;
      var $1657=((($1656)-(16))|0);
      var $1658=$1657;
      var $1659=HEAP32[(($1658)>>2)];
      var $1660=$yyvsp;
      var $1661=((($1660)-(12))|0);
      var $1662=$1661;
      var $1663=HEAP16[(($1662)>>1)];
      var $1664=$1;
      var $1665=$yyvsp;
      var $1666=((($1665)-(8))|0);
      var $1667=$1666;
      var $1668=HEAP32[(($1667)>>2)];
      var $1669=$1;
      var $1670=$1;
      var $1671=$yyvsp;
      var $1672=(($1671)|0);
      var $1673=$1672;
      var $1674=HEAP32[(($1673)>>2)];
      var $1675=_list3_gen($1670, 0, 0, $1674);
      var $1676=_list1_gen($1669, $1675);
      var $1677=_new_rescue($1664, $1668, $1676, 0);
      var $1678=_new_op_asgn($1655, $1659, $1663, $1677);
      var $1679=$yyval;
      HEAP32[(($1679)>>2)]=$1678;
      label = 543; break;
    case 239: 
      var $1681=$1;
      var $1682=$1;
      var $1683=$yyvsp;
      var $1684=((($1683)-(20))|0);
      var $1685=$1684;
      var $1686=HEAP32[(($1685)>>2)];
      var $1687=$1;
      var $1688=_intern_gen2($1687, ((112316)|0), 2);
      var $1689=$yyvsp;
      var $1690=((($1689)-(12))|0);
      var $1691=$1690;
      var $1692=HEAP32[(($1691)>>2)];
      var $1693=_new_call($1682, $1686, $1688, $1692);
      var $1694=$yyvsp;
      var $1695=((($1694)-(4))|0);
      var $1696=$1695;
      var $1697=HEAP16[(($1696)>>1)];
      var $1698=$yyvsp;
      var $1699=(($1698)|0);
      var $1700=$1699;
      var $1701=HEAP32[(($1700)>>2)];
      var $1702=_new_op_asgn($1681, $1693, $1697, $1701);
      var $1703=$yyval;
      HEAP32[(($1703)>>2)]=$1702;
      label = 543; break;
    case 240: 
      var $1705=$1;
      var $1706=$1;
      var $1707=$yyvsp;
      var $1708=((($1707)-(16))|0);
      var $1709=$1708;
      var $1710=HEAP32[(($1709)>>2)];
      var $1711=$yyvsp;
      var $1712=((($1711)-(8))|0);
      var $1713=$1712;
      var $1714=HEAP16[(($1713)>>1)];
      var $1715=_new_call($1706, $1710, $1714, 0);
      var $1716=$yyvsp;
      var $1717=((($1716)-(4))|0);
      var $1718=$1717;
      var $1719=HEAP16[(($1718)>>1)];
      var $1720=$yyvsp;
      var $1721=(($1720)|0);
      var $1722=$1721;
      var $1723=HEAP32[(($1722)>>2)];
      var $1724=_new_op_asgn($1705, $1715, $1719, $1723);
      var $1725=$yyval;
      HEAP32[(($1725)>>2)]=$1724;
      label = 543; break;
    case 241: 
      var $1727=$1;
      var $1728=$1;
      var $1729=$yyvsp;
      var $1730=((($1729)-(16))|0);
      var $1731=$1730;
      var $1732=HEAP32[(($1731)>>2)];
      var $1733=$yyvsp;
      var $1734=((($1733)-(8))|0);
      var $1735=$1734;
      var $1736=HEAP16[(($1735)>>1)];
      var $1737=_new_call($1728, $1732, $1736, 0);
      var $1738=$yyvsp;
      var $1739=((($1738)-(4))|0);
      var $1740=$1739;
      var $1741=HEAP16[(($1740)>>1)];
      var $1742=$yyvsp;
      var $1743=(($1742)|0);
      var $1744=$1743;
      var $1745=HEAP32[(($1744)>>2)];
      var $1746=_new_op_asgn($1727, $1737, $1741, $1745);
      var $1747=$yyval;
      HEAP32[(($1747)>>2)]=$1746;
      label = 543; break;
    case 242: 
      var $1749=$1;
      var $1750=$1;
      var $1751=$yyvsp;
      var $1752=((($1751)-(16))|0);
      var $1753=$1752;
      var $1754=HEAP32[(($1753)>>2)];
      var $1755=$yyvsp;
      var $1756=((($1755)-(8))|0);
      var $1757=$1756;
      var $1758=HEAP16[(($1757)>>1)];
      var $1759=_new_call($1750, $1754, $1758, 0);
      var $1760=$yyvsp;
      var $1761=((($1760)-(4))|0);
      var $1762=$1761;
      var $1763=HEAP16[(($1762)>>1)];
      var $1764=$yyvsp;
      var $1765=(($1764)|0);
      var $1766=$1765;
      var $1767=HEAP32[(($1766)>>2)];
      var $1768=_new_op_asgn($1749, $1759, $1763, $1767);
      var $1769=$yyval;
      HEAP32[(($1769)>>2)]=$1768;
      label = 543; break;
    case 243: 
      var $1771=$1;
      _yyerror($1771, ((111704)|0));
      var $1772=$1;
      var $1773=_new_begin($1772, 0);
      var $1774=$yyval;
      HEAP32[(($1774)>>2)]=$1773;
      label = 543; break;
    case 244: 
      var $1776=$1;
      _yyerror($1776, ((111704)|0));
      var $1777=$1;
      var $1778=_new_begin($1777, 0);
      var $1779=$yyval;
      HEAP32[(($1779)>>2)]=$1778;
      label = 543; break;
    case 245: 
      var $1781=$1;
      var $1782=$yyvsp;
      var $1783=((($1782)-(8))|0);
      var $1784=$1783;
      var $1785=HEAP32[(($1784)>>2)];
      _backref_error($1781, $1785);
      var $1786=$1;
      var $1787=_new_begin($1786, 0);
      var $1788=$yyval;
      HEAP32[(($1788)>>2)]=$1787;
      label = 543; break;
    case 246: 
      var $1790=$1;
      var $1791=$yyvsp;
      var $1792=((($1791)-(8))|0);
      var $1793=$1792;
      var $1794=HEAP32[(($1793)>>2)];
      var $1795=$yyvsp;
      var $1796=(($1795)|0);
      var $1797=$1796;
      var $1798=HEAP32[(($1797)>>2)];
      var $1799=_new_dot2($1790, $1794, $1798);
      var $1800=$yyval;
      HEAP32[(($1800)>>2)]=$1799;
      label = 543; break;
    case 247: 
      var $1802=$1;
      var $1803=$yyvsp;
      var $1804=((($1803)-(8))|0);
      var $1805=$1804;
      var $1806=HEAP32[(($1805)>>2)];
      var $1807=$yyvsp;
      var $1808=(($1807)|0);
      var $1809=$1808;
      var $1810=HEAP32[(($1809)>>2)];
      var $1811=_new_dot3($1802, $1806, $1810);
      var $1812=$yyval;
      HEAP32[(($1812)>>2)]=$1811;
      label = 543; break;
    case 248: 
      var $1814=$1;
      var $1815=$yyvsp;
      var $1816=((($1815)-(8))|0);
      var $1817=$1816;
      var $1818=HEAP32[(($1817)>>2)];
      var $1819=$yyvsp;
      var $1820=(($1819)|0);
      var $1821=$1820;
      var $1822=HEAP32[(($1821)>>2)];
      var $1823=_call_bin_op($1814, $1818, ((104556)|0), $1822);
      var $1824=$yyval;
      HEAP32[(($1824)>>2)]=$1823;
      label = 543; break;
    case 249: 
      var $1826=$1;
      var $1827=$yyvsp;
      var $1828=((($1827)-(8))|0);
      var $1829=$1828;
      var $1830=HEAP32[(($1829)>>2)];
      var $1831=$yyvsp;
      var $1832=(($1831)|0);
      var $1833=$1832;
      var $1834=HEAP32[(($1833)>>2)];
      var $1835=_call_bin_op($1826, $1830, ((103960)|0), $1834);
      var $1836=$yyval;
      HEAP32[(($1836)>>2)]=$1835;
      label = 543; break;
    case 250: 
      var $1838=$1;
      var $1839=$yyvsp;
      var $1840=((($1839)-(8))|0);
      var $1841=$1840;
      var $1842=HEAP32[(($1841)>>2)];
      var $1843=$yyvsp;
      var $1844=(($1843)|0);
      var $1845=$1844;
      var $1846=HEAP32[(($1845)>>2)];
      var $1847=_call_bin_op($1838, $1842, ((103768)|0), $1846);
      var $1848=$yyval;
      HEAP32[(($1848)>>2)]=$1847;
      label = 543; break;
    case 251: 
      var $1850=$1;
      var $1851=$yyvsp;
      var $1852=((($1851)-(8))|0);
      var $1853=$1852;
      var $1854=HEAP32[(($1853)>>2)];
      var $1855=$yyvsp;
      var $1856=(($1855)|0);
      var $1857=$1856;
      var $1858=HEAP32[(($1857)>>2)];
      var $1859=_call_bin_op($1850, $1854, ((103548)|0), $1858);
      var $1860=$yyval;
      HEAP32[(($1860)>>2)]=$1859;
      label = 543; break;
    case 252: 
      var $1862=$1;
      var $1863=$yyvsp;
      var $1864=((($1863)-(8))|0);
      var $1865=$1864;
      var $1866=HEAP32[(($1865)>>2)];
      var $1867=$yyvsp;
      var $1868=(($1867)|0);
      var $1869=$1868;
      var $1870=HEAP32[(($1869)>>2)];
      var $1871=_call_bin_op($1862, $1866, ((103332)|0), $1870);
      var $1872=$yyval;
      HEAP32[(($1872)>>2)]=$1871;
      label = 543; break;
    case 253: 
      var $1874=$1;
      var $1875=$yyvsp;
      var $1876=((($1875)-(8))|0);
      var $1877=$1876;
      var $1878=HEAP32[(($1877)>>2)];
      var $1879=$yyvsp;
      var $1880=(($1879)|0);
      var $1881=$1880;
      var $1882=HEAP32[(($1881)>>2)];
      var $1883=_call_bin_op($1874, $1878, ((105760)|0), $1882);
      var $1884=$yyval;
      HEAP32[(($1884)>>2)]=$1883;
      label = 543; break;
    case 254: 
      var $1886=$1;
      var $1887=$1;
      var $1888=$yyvsp;
      var $1889=((($1888)-(8))|0);
      var $1890=$1889;
      var $1891=HEAP32[(($1890)>>2)];
      var $1892=$yyvsp;
      var $1893=(($1892)|0);
      var $1894=$1893;
      var $1895=HEAP32[(($1894)>>2)];
      var $1896=_call_bin_op($1887, $1891, ((105760)|0), $1895);
      var $1897=_call_uni_op($1886, $1896, ((105156)|0));
      var $1898=$yyval;
      HEAP32[(($1898)>>2)]=$1897;
      label = 543; break;
    case 255: 
      var $1900=$1;
      var $1901=$1;
      var $1902=$yyvsp;
      var $1903=((($1902)-(8))|0);
      var $1904=$1903;
      var $1905=HEAP32[(($1904)>>2)];
      var $1906=$yyvsp;
      var $1907=(($1906)|0);
      var $1908=$1907;
      var $1909=HEAP32[(($1908)>>2)];
      var $1910=_call_bin_op($1901, $1905, ((105760)|0), $1909);
      var $1911=_call_uni_op($1900, $1910, ((105156)|0));
      var $1912=$yyval;
      HEAP32[(($1912)>>2)]=$1911;
      label = 543; break;
    case 256: 
      var $1914=$1;
      var $1915=$yyvsp;
      var $1916=(($1915)|0);
      var $1917=$1916;
      var $1918=HEAP32[(($1917)>>2)];
      var $1919=_call_uni_op($1914, $1918, ((105440)|0));
      var $1920=$yyval;
      HEAP32[(($1920)>>2)]=$1919;
      label = 543; break;
    case 257: 
      var $1922=$1;
      var $1923=$yyvsp;
      var $1924=(($1923)|0);
      var $1925=$1924;
      var $1926=HEAP32[(($1925)>>2)];
      var $1927=_call_uni_op($1922, $1926, ((105156)|0));
      var $1928=$yyval;
      HEAP32[(($1928)>>2)]=$1927;
      label = 543; break;
    case 258: 
      var $1930=$1;
      var $1931=$yyvsp;
      var $1932=((($1931)-(8))|0);
      var $1933=$1932;
      var $1934=HEAP32[(($1933)>>2)];
      var $1935=$yyvsp;
      var $1936=(($1935)|0);
      var $1937=$1936;
      var $1938=HEAP32[(($1937)>>2)];
      var $1939=_call_bin_op($1930, $1934, ((103096)|0), $1938);
      var $1940=$yyval;
      HEAP32[(($1940)>>2)]=$1939;
      label = 543; break;
    case 259: 
      var $1942=$1;
      var $1943=$yyvsp;
      var $1944=((($1943)-(8))|0);
      var $1945=$1944;
      var $1946=HEAP32[(($1945)>>2)];
      var $1947=$yyvsp;
      var $1948=(($1947)|0);
      var $1949=$1948;
      var $1950=HEAP32[(($1949)>>2)];
      var $1951=_call_bin_op($1942, $1946, ((102832)|0), $1950);
      var $1952=$yyval;
      HEAP32[(($1952)>>2)]=$1951;
      label = 543; break;
    case 260: 
      var $1954=$1;
      var $1955=$yyvsp;
      var $1956=((($1955)-(8))|0);
      var $1957=$1956;
      var $1958=HEAP32[(($1957)>>2)];
      var $1959=$yyvsp;
      var $1960=(($1959)|0);
      var $1961=$1960;
      var $1962=HEAP32[(($1961)>>2)];
      var $1963=_call_bin_op($1954, $1958, ((102620)|0), $1962);
      var $1964=$yyval;
      HEAP32[(($1964)>>2)]=$1963;
      label = 543; break;
    case 261: 
      var $1966=$1;
      var $1967=$yyvsp;
      var $1968=((($1967)-(8))|0);
      var $1969=$1968;
      var $1970=HEAP32[(($1969)>>2)];
      var $1971=$yyvsp;
      var $1972=(($1971)|0);
      var $1973=$1972;
      var $1974=HEAP32[(($1973)>>2)];
      var $1975=_call_bin_op($1966, $1970, ((109936)|0), $1974);
      var $1976=$yyval;
      HEAP32[(($1976)>>2)]=$1975;
      label = 543; break;
    case 262: 
      var $1978=$1;
      var $1979=$yyvsp;
      var $1980=((($1979)-(8))|0);
      var $1981=$1980;
      var $1982=HEAP32[(($1981)>>2)];
      var $1983=$yyvsp;
      var $1984=(($1983)|0);
      var $1985=$1984;
      var $1986=HEAP32[(($1985)>>2)];
      var $1987=_call_bin_op($1978, $1982, ((102308)|0), $1986);
      var $1988=$yyval;
      HEAP32[(($1988)>>2)]=$1987;
      label = 543; break;
    case 263: 
      var $1990=$1;
      var $1991=$yyvsp;
      var $1992=((($1991)-(8))|0);
      var $1993=$1992;
      var $1994=HEAP32[(($1993)>>2)];
      var $1995=$yyvsp;
      var $1996=(($1995)|0);
      var $1997=$1996;
      var $1998=HEAP32[(($1997)>>2)];
      var $1999=_call_bin_op($1990, $1994, ((107576)|0), $1998);
      var $2000=$yyval;
      HEAP32[(($2000)>>2)]=$1999;
      label = 543; break;
    case 264: 
      var $2002=$1;
      var $2003=$yyvsp;
      var $2004=((($2003)-(8))|0);
      var $2005=$2004;
      var $2006=HEAP32[(($2005)>>2)];
      var $2007=$yyvsp;
      var $2008=(($2007)|0);
      var $2009=$2008;
      var $2010=HEAP32[(($2009)>>2)];
      var $2011=_call_bin_op($2002, $2006, ((102000)|0), $2010);
      var $2012=$yyval;
      HEAP32[(($2012)>>2)]=$2011;
      label = 543; break;
    case 265: 
      var $2014=$1;
      var $2015=$yyvsp;
      var $2016=((($2015)-(8))|0);
      var $2017=$2016;
      var $2018=HEAP32[(($2017)>>2)];
      var $2019=$yyvsp;
      var $2020=(($2019)|0);
      var $2021=$2020;
      var $2022=HEAP32[(($2021)>>2)];
      var $2023=_call_bin_op($2014, $2018, ((107312)|0), $2022);
      var $2024=$yyval;
      HEAP32[(($2024)>>2)]=$2023;
      label = 543; break;
    case 266: 
      var $2026=$1;
      var $2027=$yyvsp;
      var $2028=((($2027)-(8))|0);
      var $2029=$2028;
      var $2030=HEAP32[(($2029)>>2)];
      var $2031=$yyvsp;
      var $2032=(($2031)|0);
      var $2033=$2032;
      var $2034=HEAP32[(($2033)>>2)];
      var $2035=_call_bin_op($2026, $2030, ((109496)|0), $2034);
      var $2036=$yyval;
      HEAP32[(($2036)>>2)]=$2035;
      label = 543; break;
    case 267: 
      var $2038=$1;
      var $2039=$yyvsp;
      var $2040=((($2039)-(8))|0);
      var $2041=$2040;
      var $2042=HEAP32[(($2041)>>2)];
      var $2043=$yyvsp;
      var $2044=(($2043)|0);
      var $2045=$2044;
      var $2046=HEAP32[(($2045)>>2)];
      var $2047=_call_bin_op($2038, $2042, ((109004)|0), $2046);
      var $2048=$yyval;
      HEAP32[(($2048)>>2)]=$2047;
      label = 543; break;
    case 268: 
      var $2050=$1;
      var $2051=$yyvsp;
      var $2052=((($2051)-(8))|0);
      var $2053=$2052;
      var $2054=HEAP32[(($2053)>>2)];
      var $2055=$yyvsp;
      var $2056=(($2055)|0);
      var $2057=$2056;
      var $2058=HEAP32[(($2057)>>2)];
      var $2059=_call_bin_op($2050, $2054, ((106892)|0), $2058);
      var $2060=$yyval;
      HEAP32[(($2060)>>2)]=$2059;
      label = 543; break;
    case 269: 
      var $2062=$1;
      var $2063=$yyvsp;
      var $2064=((($2063)-(8))|0);
      var $2065=$2064;
      var $2066=HEAP32[(($2065)>>2)];
      var $2067=$yyvsp;
      var $2068=(($2067)|0);
      var $2069=$2068;
      var $2070=HEAP32[(($2069)>>2)];
      var $2071=_call_bin_op($2062, $2066, ((108460)|0), $2070);
      var $2072=$yyval;
      HEAP32[(($2072)>>2)]=$2071;
      label = 543; break;
    case 270: 
      var $2074=$1;
      var $2075=$yyvsp;
      var $2076=((($2075)-(8))|0);
      var $2077=$2076;
      var $2078=HEAP32[(($2077)>>2)];
      var $2079=$yyvsp;
      var $2080=(($2079)|0);
      var $2081=$2080;
      var $2082=HEAP32[(($2081)>>2)];
      var $2083=_call_bin_op($2074, $2078, ((108116)|0), $2082);
      var $2084=$yyval;
      HEAP32[(($2084)>>2)]=$2083;
      label = 543; break;
    case 271: 
      var $2086=$1;
      var $2087=$yyvsp;
      var $2088=(($2087)|0);
      var $2089=$2088;
      var $2090=HEAP32[(($2089)>>2)];
      var $2091=_cond($2090);
      var $2092=_call_uni_op($2086, $2091, ((111264)|0));
      var $2093=$yyval;
      HEAP32[(($2093)>>2)]=$2092;
      label = 543; break;
    case 272: 
      var $2095=$1;
      var $2096=$yyvsp;
      var $2097=(($2096)|0);
      var $2098=$2097;
      var $2099=HEAP32[(($2098)>>2)];
      var $2100=_cond($2099);
      var $2101=_call_uni_op($2095, $2100, ((101776)|0));
      var $2102=$yyval;
      HEAP32[(($2102)>>2)]=$2101;
      label = 543; break;
    case 273: 
      var $2104=$1;
      var $2105=$yyvsp;
      var $2106=((($2105)-(8))|0);
      var $2107=$2106;
      var $2108=HEAP32[(($2107)>>2)];
      var $2109=$yyvsp;
      var $2110=(($2109)|0);
      var $2111=$2110;
      var $2112=HEAP32[(($2111)>>2)];
      var $2113=_call_bin_op($2104, $2108, ((106460)|0), $2112);
      var $2114=$yyval;
      HEAP32[(($2114)>>2)]=$2113;
      label = 543; break;
    case 274: 
      var $2116=$1;
      var $2117=$yyvsp;
      var $2118=((($2117)-(8))|0);
      var $2119=$2118;
      var $2120=HEAP32[(($2119)>>2)];
      var $2121=$yyvsp;
      var $2122=(($2121)|0);
      var $2123=$2122;
      var $2124=HEAP32[(($2123)>>2)];
      var $2125=_call_bin_op($2116, $2120, ((106084)|0), $2124);
      var $2126=$yyval;
      HEAP32[(($2126)>>2)]=$2125;
      label = 543; break;
    case 275: 
      var $2128=$1;
      var $2129=$yyvsp;
      var $2130=((($2129)-(8))|0);
      var $2131=$2130;
      var $2132=HEAP32[(($2131)>>2)];
      var $2133=$yyvsp;
      var $2134=(($2133)|0);
      var $2135=$2134;
      var $2136=HEAP32[(($2135)>>2)];
      var $2137=_new_and($2128, $2132, $2136);
      var $2138=$yyval;
      HEAP32[(($2138)>>2)]=$2137;
      label = 543; break;
    case 276: 
      var $2140=$1;
      var $2141=$yyvsp;
      var $2142=((($2141)-(8))|0);
      var $2143=$2142;
      var $2144=HEAP32[(($2143)>>2)];
      var $2145=$yyvsp;
      var $2146=(($2145)|0);
      var $2147=$2146;
      var $2148=HEAP32[(($2147)>>2)];
      var $2149=_new_or($2140, $2144, $2148);
      var $2150=$yyval;
      HEAP32[(($2150)>>2)]=$2149;
      label = 543; break;
    case 277: 
      var $2152=$1;
      var $2153=$yyvsp;
      var $2154=((($2153)-(20))|0);
      var $2155=$2154;
      var $2156=HEAP32[(($2155)>>2)];
      var $2157=_cond($2156);
      var $2158=$yyvsp;
      var $2159=((($2158)-(12))|0);
      var $2160=$2159;
      var $2161=HEAP32[(($2160)>>2)];
      var $2162=$yyvsp;
      var $2163=(($2162)|0);
      var $2164=$2163;
      var $2165=HEAP32[(($2164)>>2)];
      var $2166=_new_if($2152, $2157, $2161, $2165);
      var $2167=$yyval;
      HEAP32[(($2167)>>2)]=$2166;
      label = 543; break;
    case 278: 
      var $2169=$yyvsp;
      var $2170=(($2169)|0);
      var $2171=$2170;
      var $2172=HEAP32[(($2171)>>2)];
      var $2173=$yyval;
      HEAP32[(($2173)>>2)]=$2172;
      label = 543; break;
    case 279: 
      var $2175=$yyvsp;
      var $2176=(($2175)|0);
      var $2177=$2176;
      var $2178=HEAP32[(($2177)>>2)];
      var $2179=$yyval;
      HEAP32[(($2179)>>2)]=$2178;
      var $2180=$yyval;
      var $2181=HEAP32[(($2180)>>2)];
      var $2182=(($2181)|(0))!=0;
      if ($2182) { label = 281; break; } else { label = 280; break; }
    case 280: 
      var $2184=$1;
      var $2185=_new_nil($2184);
      var $2186=$yyval;
      HEAP32[(($2186)>>2)]=$2185;
      label = 281; break;
    case 281: 
      label = 543; break;
    case 282: 
      var $2189=$yyvsp;
      var $2190=((($2189)-(4))|0);
      var $2191=$2190;
      var $2192=HEAP32[(($2191)>>2)];
      var $2193=$yyval;
      HEAP32[(($2193)>>2)]=$2192;
      label = 543; break;
    case 283: 
      var $2195=$1;
      var $2196=$yyvsp;
      var $2197=((($2196)-(12))|0);
      var $2198=$2197;
      var $2199=HEAP32[(($2198)>>2)];
      var $2200=$1;
      var $2201=$1;
      var $2202=$yyvsp;
      var $2203=((($2202)-(4))|0);
      var $2204=$2203;
      var $2205=HEAP32[(($2204)>>2)];
      var $2206=_new_hash($2201, $2205);
      var $2207=_list1_gen($2200, $2206);
      var $2208=_append_gen($2195, $2199, $2207);
      var $2209=$yyval;
      HEAP32[(($2209)>>2)]=$2208;
      label = 543; break;
    case 284: 
      var $2211=$1;
      var $2212=$1;
      var $2213=$yyvsp;
      var $2214=((($2213)-(4))|0);
      var $2215=$2214;
      var $2216=HEAP32[(($2215)>>2)];
      var $2217=_new_hash($2212, $2216);
      var $2218=_cons_gen($2211, $2217, 0);
      var $2219=$yyval;
      HEAP32[(($2219)>>2)]=$2218;
      label = 543; break;
    case 285: 
      var $2221=$yyvsp;
      var $2222=((($2221)-(4))|0);
      var $2223=$2222;
      var $2224=HEAP32[(($2223)>>2)];
      var $2225=$yyval;
      HEAP32[(($2225)>>2)]=$2224;
      label = 543; break;
    case 286: 
      var $2227=$1;
      var $2228=$yyvsp;
      var $2229=((($2228)-(4))|0);
      var $2230=$2229;
      var $2231=HEAP32[(($2230)>>2)];
      var $2232=_cons_gen($2227, $2231, 0);
      var $2233=$yyval;
      HEAP32[(($2233)>>2)]=$2232;
      label = 543; break;
    case 287: 
      var $2235=$1;
      var $2236=$1;
      var $2237=$yyvsp;
      var $2238=((($2237)-(12))|0);
      var $2239=$2238;
      var $2240=HEAP32[(($2239)>>2)];
      var $2241=$1;
      var $2242=$1;
      var $2243=$yyvsp;
      var $2244=((($2243)-(4))|0);
      var $2245=$2244;
      var $2246=HEAP32[(($2245)>>2)];
      var $2247=_new_hash($2242, $2246);
      var $2248=_list1_gen($2241, $2247);
      var $2249=_append_gen($2236, $2240, $2248);
      var $2250=_cons_gen($2235, $2249, 0);
      var $2251=$yyval;
      HEAP32[(($2251)>>2)]=$2250;
      label = 543; break;
    case 288: 
      var $2253=$1;
      var $2254=$1;
      var $2255=$1;
      var $2256=$yyvsp;
      var $2257=((($2256)-(4))|0);
      var $2258=$2257;
      var $2259=HEAP32[(($2258)>>2)];
      var $2260=_new_hash($2255, $2259);
      var $2261=_list1_gen($2254, $2260);
      var $2262=_cons_gen($2253, $2261, 0);
      var $2263=$yyval;
      HEAP32[(($2263)>>2)]=$2262;
      label = 543; break;
    case 289: 
      var $2265=$1;
      var $2266=$1;
      var $2267=$yyvsp;
      var $2268=(($2267)|0);
      var $2269=$2268;
      var $2270=HEAP32[(($2269)>>2)];
      var $2271=_list1_gen($2266, $2270);
      var $2272=_cons_gen($2265, $2271, 0);
      var $2273=$yyval;
      HEAP32[(($2273)>>2)]=$2272;
      label = 543; break;
    case 290: 
      var $2275=$1;
      var $2276=$yyvsp;
      var $2277=((($2276)-(4))|0);
      var $2278=$2277;
      var $2279=HEAP32[(($2278)>>2)];
      var $2280=$yyvsp;
      var $2281=(($2280)|0);
      var $2282=$2281;
      var $2283=HEAP32[(($2282)>>2)];
      var $2284=_cons_gen($2275, $2279, $2283);
      var $2285=$yyval;
      HEAP32[(($2285)>>2)]=$2284;
      label = 543; break;
    case 291: 
      var $2287=$1;
      var $2288=$1;
      var $2289=$1;
      var $2290=$yyvsp;
      var $2291=((($2290)-(4))|0);
      var $2292=$2291;
      var $2293=HEAP32[(($2292)>>2)];
      var $2294=_new_hash($2289, $2293);
      var $2295=_list1_gen($2288, $2294);
      var $2296=$yyvsp;
      var $2297=(($2296)|0);
      var $2298=$2297;
      var $2299=HEAP32[(($2298)>>2)];
      var $2300=_cons_gen($2287, $2295, $2299);
      var $2301=$yyval;
      HEAP32[(($2301)>>2)]=$2300;
      label = 543; break;
    case 292: 
      var $2303=$1;
      var $2304=$1;
      var $2305=$yyvsp;
      var $2306=((($2305)-(12))|0);
      var $2307=$2306;
      var $2308=HEAP32[(($2307)>>2)];
      var $2309=$1;
      var $2310=$1;
      var $2311=$yyvsp;
      var $2312=((($2311)-(4))|0);
      var $2313=$2312;
      var $2314=HEAP32[(($2313)>>2)];
      var $2315=_new_hash($2310, $2314);
      var $2316=_list1_gen($2309, $2315);
      var $2317=_append_gen($2304, $2308, $2316);
      var $2318=$yyvsp;
      var $2319=(($2318)|0);
      var $2320=$2319;
      var $2321=HEAP32[(($2320)>>2)];
      var $2322=_cons_gen($2303, $2317, $2321);
      var $2323=$yyval;
      HEAP32[(($2323)>>2)]=$2322;
      label = 543; break;
    case 293: 
      var $2325=$1;
      var $2326=$yyvsp;
      var $2327=(($2326)|0);
      var $2328=$2327;
      var $2329=HEAP32[(($2328)>>2)];
      var $2330=_cons_gen($2325, 0, $2329);
      var $2331=$yyval;
      HEAP32[(($2331)>>2)]=$2330;
      label = 543; break;
    case 294: 
      var $2333=$1;
      var $2334=(($2333+52)|0);
      var $2335=HEAP32[(($2334)>>2)];
      var $2336=$yyval;
      HEAP32[(($2336)>>2)]=$2335;
      var $2337=$1;
      var $2338=(($2337+52)|0);
      var $2339=HEAP32[(($2338)>>2)];
      var $2340=$2339 << 1;
      var $2341=$2340 | 1;
      var $2342=$1;
      var $2343=(($2342+52)|0);
      HEAP32[(($2343)>>2)]=$2341;
      label = 543; break;
    case 295: 
      var $2345=$yyvsp;
      var $2346=((($2345)-(4))|0);
      var $2347=$2346;
      var $2348=HEAP32[(($2347)>>2)];
      var $2349=$1;
      var $2350=(($2349+52)|0);
      HEAP32[(($2350)>>2)]=$2348;
      var $2351=$yyvsp;
      var $2352=(($2351)|0);
      var $2353=$2352;
      var $2354=HEAP32[(($2353)>>2)];
      var $2355=$yyval;
      HEAP32[(($2355)>>2)]=$2354;
      label = 543; break;
    case 296: 
      var $2357=$1;
      var $2358=$yyvsp;
      var $2359=(($2358)|0);
      var $2360=$2359;
      var $2361=HEAP32[(($2360)>>2)];
      var $2362=_new_block_arg($2357, $2361);
      var $2363=$yyval;
      HEAP32[(($2363)>>2)]=$2362;
      label = 543; break;
    case 297: 
      var $2365=$yyvsp;
      var $2366=(($2365)|0);
      var $2367=$2366;
      var $2368=HEAP32[(($2367)>>2)];
      var $2369=$yyval;
      HEAP32[(($2369)>>2)]=$2368;
      label = 543; break;
    case 298: 
      var $2371=$yyval;
      HEAP32[(($2371)>>2)]=0;
      label = 543; break;
    case 299: 
      var $2373=$1;
      var $2374=$yyvsp;
      var $2375=(($2374)|0);
      var $2376=$2375;
      var $2377=HEAP32[(($2376)>>2)];
      var $2378=_cons_gen($2373, $2377, 0);
      var $2379=$yyval;
      HEAP32[(($2379)>>2)]=$2378;
      label = 543; break;
    case 300: 
      var $2381=$1;
      var $2382=$1;
      var $2383=$yyvsp;
      var $2384=(($2383)|0);
      var $2385=$2384;
      var $2386=HEAP32[(($2385)>>2)];
      var $2387=_new_splat($2382, $2386);
      var $2388=_cons_gen($2381, $2387, 0);
      var $2389=$yyval;
      HEAP32[(($2389)>>2)]=$2388;
      label = 543; break;
    case 301: 
      var $2391=$1;
      var $2392=$yyvsp;
      var $2393=((($2392)-(8))|0);
      var $2394=$2393;
      var $2395=HEAP32[(($2394)>>2)];
      var $2396=$1;
      var $2397=$yyvsp;
      var $2398=(($2397)|0);
      var $2399=$2398;
      var $2400=HEAP32[(($2399)>>2)];
      var $2401=_list1_gen($2396, $2400);
      var $2402=_append_gen($2391, $2395, $2401);
      var $2403=$yyval;
      HEAP32[(($2403)>>2)]=$2402;
      label = 543; break;
    case 302: 
      var $2405=$1;
      var $2406=$yyvsp;
      var $2407=((($2406)-(12))|0);
      var $2408=$2407;
      var $2409=HEAP32[(($2408)>>2)];
      var $2410=$1;
      var $2411=$1;
      var $2412=$yyvsp;
      var $2413=(($2412)|0);
      var $2414=$2413;
      var $2415=HEAP32[(($2414)>>2)];
      var $2416=_new_splat($2411, $2415);
      var $2417=_list1_gen($2410, $2416);
      var $2418=_append_gen($2405, $2409, $2417);
      var $2419=$yyval;
      HEAP32[(($2419)>>2)]=$2418;
      label = 543; break;
    case 303: 
      var $2421=$1;
      var $2422=$yyvsp;
      var $2423=((($2422)-(8))|0);
      var $2424=$2423;
      var $2425=HEAP32[(($2424)>>2)];
      var $2426=$1;
      var $2427=$yyvsp;
      var $2428=(($2427)|0);
      var $2429=$2428;
      var $2430=HEAP32[(($2429)>>2)];
      var $2431=_list1_gen($2426, $2430);
      var $2432=_append_gen($2421, $2425, $2431);
      var $2433=$yyval;
      HEAP32[(($2433)>>2)]=$2432;
      label = 543; break;
    case 304: 
      var $2435=$1;
      var $2436=$yyvsp;
      var $2437=((($2436)-(12))|0);
      var $2438=$2437;
      var $2439=HEAP32[(($2438)>>2)];
      var $2440=$1;
      var $2441=$1;
      var $2442=$yyvsp;
      var $2443=(($2442)|0);
      var $2444=$2443;
      var $2445=HEAP32[(($2444)>>2)];
      var $2446=_new_splat($2441, $2445);
      var $2447=_list1_gen($2440, $2446);
      var $2448=_append_gen($2435, $2439, $2447);
      var $2449=$yyval;
      HEAP32[(($2449)>>2)]=$2448;
      label = 543; break;
    case 305: 
      var $2451=$1;
      var $2452=$1;
      var $2453=$yyvsp;
      var $2454=(($2453)|0);
      var $2455=$2454;
      var $2456=HEAP32[(($2455)>>2)];
      var $2457=_new_splat($2452, $2456);
      var $2458=_list1_gen($2451, $2457);
      var $2459=$yyval;
      HEAP32[(($2459)>>2)]=$2458;
      label = 543; break;
    case 306: 
      var $2461=$1;
      var $2462=$yyvsp;
      var $2463=(($2462)|0);
      var $2464=$2463;
      var $2465=HEAP16[(($2464)>>1)];
      var $2466=_new_fcall($2461, $2465, 0);
      var $2467=$yyval;
      HEAP32[(($2467)>>2)]=$2466;
      label = 543; break;
    case 307: 
      var $2469=$1;
      var $2470=(($2469+52)|0);
      var $2471=HEAP32[(($2470)>>2)];
      var $2472=$yyvsp;
      var $2473=(($2472)|0);
      var $2474=$2473;
      HEAP32[(($2474)>>2)]=$2471;
      var $2475=$1;
      var $2476=(($2475+52)|0);
      HEAP32[(($2476)>>2)]=0;
      label = 543; break;
    case 308: 
      var $2478=$yyvsp;
      var $2479=((($2478)-(12))|0);
      var $2480=$2479;
      var $2481=HEAP32[(($2480)>>2)];
      var $2482=$1;
      var $2483=(($2482+52)|0);
      HEAP32[(($2483)>>2)]=$2481;
      var $2484=$yyvsp;
      var $2485=((($2484)-(4))|0);
      var $2486=$2485;
      var $2487=HEAP32[(($2486)>>2)];
      var $2488=$yyval;
      HEAP32[(($2488)>>2)]=$2487;
      label = 543; break;
    case 309: 
      var $2490=$1;
      var $2491=(($2490+40)|0);
      HEAP32[(($2491)>>2)]=2;
      label = 543; break;
    case 310: 
      var $2493=$yyvsp;
      var $2494=((($2493)-(8))|0);
      var $2495=$2494;
      var $2496=HEAP32[(($2495)>>2)];
      var $2497=$yyval;
      HEAP32[(($2497)>>2)]=$2496;
      label = 543; break;
    case 311: 
      var $2499=$1;
      var $2500=(($2499+40)|0);
      HEAP32[(($2500)>>2)]=2;
      label = 543; break;
    case 312: 
      var $2502=$yyval;
      HEAP32[(($2502)>>2)]=0;
      label = 543; break;
    case 313: 
      var $2504=$yyvsp;
      var $2505=((($2504)-(4))|0);
      var $2506=$2505;
      var $2507=HEAP32[(($2506)>>2)];
      var $2508=$yyval;
      HEAP32[(($2508)>>2)]=$2507;
      label = 543; break;
    case 314: 
      var $2510=$1;
      var $2511=$yyvsp;
      var $2512=((($2511)-(8))|0);
      var $2513=$2512;
      var $2514=HEAP32[(($2513)>>2)];
      var $2515=$yyvsp;
      var $2516=(($2515)|0);
      var $2517=$2516;
      var $2518=HEAP16[(($2517)>>1)];
      var $2519=_new_colon2($2510, $2514, $2518);
      var $2520=$yyval;
      HEAP32[(($2520)>>2)]=$2519;
      label = 543; break;
    case 315: 
      var $2522=$1;
      var $2523=$yyvsp;
      var $2524=(($2523)|0);
      var $2525=$2524;
      var $2526=HEAP16[(($2525)>>1)];
      var $2527=_new_colon3($2522, $2526);
      var $2528=$yyval;
      HEAP32[(($2528)>>2)]=$2527;
      label = 543; break;
    case 316: 
      var $2530=$1;
      var $2531=$yyvsp;
      var $2532=((($2531)-(4))|0);
      var $2533=$2532;
      var $2534=HEAP32[(($2533)>>2)];
      var $2535=_new_array($2530, $2534);
      var $2536=$yyval;
      HEAP32[(($2536)>>2)]=$2535;
      label = 543; break;
    case 317: 
      var $2538=$1;
      var $2539=$yyvsp;
      var $2540=((($2539)-(4))|0);
      var $2541=$2540;
      var $2542=HEAP32[(($2541)>>2)];
      var $2543=_new_hash($2538, $2542);
      var $2544=$yyval;
      HEAP32[(($2544)>>2)]=$2543;
      label = 543; break;
    case 318: 
      var $2546=$1;
      var $2547=_new_return($2546, 0);
      var $2548=$yyval;
      HEAP32[(($2548)>>2)]=$2547;
      label = 543; break;
    case 319: 
      var $2550=$1;
      var $2551=$yyvsp;
      var $2552=((($2551)-(4))|0);
      var $2553=$2552;
      var $2554=HEAP32[(($2553)>>2)];
      var $2555=_new_yield($2550, $2554);
      var $2556=$yyval;
      HEAP32[(($2556)>>2)]=$2555;
      label = 543; break;
    case 320: 
      var $2558=$1;
      var $2559=_new_yield($2558, 0);
      var $2560=$yyval;
      HEAP32[(($2560)>>2)]=$2559;
      label = 543; break;
    case 321: 
      var $2562=$1;
      var $2563=_new_yield($2562, 0);
      var $2564=$yyval;
      HEAP32[(($2564)>>2)]=$2563;
      label = 543; break;
    case 322: 
      var $2566=$1;
      var $2567=$yyvsp;
      var $2568=((($2567)-(4))|0);
      var $2569=$2568;
      var $2570=HEAP32[(($2569)>>2)];
      var $2571=_cond($2570);
      var $2572=_call_uni_op($2566, $2571, ((111264)|0));
      var $2573=$yyval;
      HEAP32[(($2573)>>2)]=$2572;
      label = 543; break;
    case 323: 
      var $2575=$1;
      var $2576=$1;
      var $2577=_new_nil($2576);
      var $2578=_call_uni_op($2575, $2577, ((111264)|0));
      var $2579=$yyval;
      HEAP32[(($2579)>>2)]=$2578;
      label = 543; break;
    case 324: 
      var $2581=$1;
      var $2582=$yyvsp;
      var $2583=((($2582)-(4))|0);
      var $2584=$2583;
      var $2585=HEAP16[(($2584)>>1)];
      var $2586=$1;
      var $2587=$yyvsp;
      var $2588=(($2587)|0);
      var $2589=$2588;
      var $2590=HEAP32[(($2589)>>2)];
      var $2591=_cons_gen($2586, 0, $2590);
      var $2592=_new_fcall($2581, $2585, $2591);
      var $2593=$yyval;
      HEAP32[(($2593)>>2)]=$2592;
      label = 543; break;
    case 325: 
      var $2595=$1;
      var $2596=$yyvsp;
      var $2597=((($2596)-(4))|0);
      var $2598=$2597;
      var $2599=HEAP32[(($2598)>>2)];
      var $2600=$yyvsp;
      var $2601=(($2600)|0);
      var $2602=$2601;
      var $2603=HEAP32[(($2602)>>2)];
      _call_with_block($2595, $2599, $2603);
      var $2604=$yyvsp;
      var $2605=((($2604)-(4))|0);
      var $2606=$2605;
      var $2607=HEAP32[(($2606)>>2)];
      var $2608=$yyval;
      HEAP32[(($2608)>>2)]=$2607;
      label = 543; break;
    case 326: 
      var $2610=$1;
      _local_nest($2610);
      var $2611=$1;
      var $2612=(($2611+60)|0);
      var $2613=HEAP32[(($2612)>>2)];
      var $2614=$yyval;
      HEAP32[(($2614)>>2)]=$2613;
      var $2615=$1;
      var $2616=(($2615+56)|0);
      var $2617=HEAP32[(($2616)>>2)];
      var $2618=((($2617)+(1))|0);
      HEAP32[(($2616)>>2)]=$2618;
      var $2619=$1;
      var $2620=(($2619+60)|0);
      HEAP32[(($2620)>>2)]=$2618;
      label = 543; break;
    case 327: 
      var $2622=$yyvsp;
      var $2623=((($2622)-(8))|0);
      var $2624=$2623;
      var $2625=HEAP32[(($2624)>>2)];
      var $2626=$1;
      var $2627=(($2626+60)|0);
      HEAP32[(($2627)>>2)]=$2625;
      var $2628=$1;
      var $2629=$yyvsp;
      var $2630=((($2629)-(4))|0);
      var $2631=$2630;
      var $2632=HEAP32[(($2631)>>2)];
      var $2633=$yyvsp;
      var $2634=(($2633)|0);
      var $2635=$2634;
      var $2636=HEAP32[(($2635)>>2)];
      var $2637=_new_lambda($2628, $2632, $2636);
      var $2638=$yyval;
      HEAP32[(($2638)>>2)]=$2637;
      var $2639=$1;
      _local_unnest($2639);
      label = 543; break;
    case 328: 
      var $2641=$1;
      var $2642=$yyvsp;
      var $2643=((($2642)-(16))|0);
      var $2644=$2643;
      var $2645=HEAP32[(($2644)>>2)];
      var $2646=_cond($2645);
      var $2647=$yyvsp;
      var $2648=((($2647)-(8))|0);
      var $2649=$2648;
      var $2650=HEAP32[(($2649)>>2)];
      var $2651=$yyvsp;
      var $2652=((($2651)-(4))|0);
      var $2653=$2652;
      var $2654=HEAP32[(($2653)>>2)];
      var $2655=_new_if($2641, $2646, $2650, $2654);
      var $2656=$yyval;
      HEAP32[(($2656)>>2)]=$2655;
      label = 543; break;
    case 329: 
      var $2658=$1;
      var $2659=$yyvsp;
      var $2660=((($2659)-(16))|0);
      var $2661=$2660;
      var $2662=HEAP32[(($2661)>>2)];
      var $2663=_cond($2662);
      var $2664=$yyvsp;
      var $2665=((($2664)-(8))|0);
      var $2666=$2665;
      var $2667=HEAP32[(($2666)>>2)];
      var $2668=$yyvsp;
      var $2669=((($2668)-(4))|0);
      var $2670=$2669;
      var $2671=HEAP32[(($2670)>>2)];
      var $2672=_new_unless($2658, $2663, $2667, $2671);
      var $2673=$yyval;
      HEAP32[(($2673)>>2)]=$2672;
      label = 543; break;
    case 330: 
      var $2675=$1;
      var $2676=(($2675+48)|0);
      var $2677=HEAP32[(($2676)>>2)];
      var $2678=$2677 << 1;
      var $2679=$2678 | 1;
      var $2680=$1;
      var $2681=(($2680+48)|0);
      HEAP32[(($2681)>>2)]=$2679;
      label = 543; break;
    case 331: 
      var $2683=$1;
      var $2684=(($2683+48)|0);
      var $2685=HEAP32[(($2684)>>2)];
      var $2686=$2685 >>> 1;
      var $2687=$1;
      var $2688=(($2687+48)|0);
      HEAP32[(($2688)>>2)]=$2686;
      label = 543; break;
    case 332: 
      var $2690=$1;
      var $2691=$yyvsp;
      var $2692=((($2691)-(16))|0);
      var $2693=$2692;
      var $2694=HEAP32[(($2693)>>2)];
      var $2695=_cond($2694);
      var $2696=$yyvsp;
      var $2697=((($2696)-(4))|0);
      var $2698=$2697;
      var $2699=HEAP32[(($2698)>>2)];
      var $2700=_new_while($2690, $2695, $2699);
      var $2701=$yyval;
      HEAP32[(($2701)>>2)]=$2700;
      label = 543; break;
    case 333: 
      var $2703=$1;
      var $2704=(($2703+48)|0);
      var $2705=HEAP32[(($2704)>>2)];
      var $2706=$2705 << 1;
      var $2707=$2706 | 1;
      var $2708=$1;
      var $2709=(($2708+48)|0);
      HEAP32[(($2709)>>2)]=$2707;
      label = 543; break;
    case 334: 
      var $2711=$1;
      var $2712=(($2711+48)|0);
      var $2713=HEAP32[(($2712)>>2)];
      var $2714=$2713 >>> 1;
      var $2715=$1;
      var $2716=(($2715+48)|0);
      HEAP32[(($2716)>>2)]=$2714;
      label = 543; break;
    case 335: 
      var $2718=$1;
      var $2719=$yyvsp;
      var $2720=((($2719)-(16))|0);
      var $2721=$2720;
      var $2722=HEAP32[(($2721)>>2)];
      var $2723=_cond($2722);
      var $2724=$yyvsp;
      var $2725=((($2724)-(4))|0);
      var $2726=$2725;
      var $2727=HEAP32[(($2726)>>2)];
      var $2728=_new_until($2718, $2723, $2727);
      var $2729=$yyval;
      HEAP32[(($2729)>>2)]=$2728;
      label = 543; break;
    case 336: 
      var $2731=$1;
      var $2732=$yyvsp;
      var $2733=((($2732)-(12))|0);
      var $2734=$2733;
      var $2735=HEAP32[(($2734)>>2)];
      var $2736=$yyvsp;
      var $2737=((($2736)-(4))|0);
      var $2738=$2737;
      var $2739=HEAP32[(($2738)>>2)];
      var $2740=_new_case($2731, $2735, $2739);
      var $2741=$yyval;
      HEAP32[(($2741)>>2)]=$2740;
      label = 543; break;
    case 337: 
      var $2743=$1;
      var $2744=$yyvsp;
      var $2745=((($2744)-(4))|0);
      var $2746=$2745;
      var $2747=HEAP32[(($2746)>>2)];
      var $2748=_new_case($2743, 0, $2747);
      var $2749=$yyval;
      HEAP32[(($2749)>>2)]=$2748;
      label = 543; break;
    case 338: 
      var $2751=$1;
      var $2752=(($2751+48)|0);
      var $2753=HEAP32[(($2752)>>2)];
      var $2754=$2753 << 1;
      var $2755=$2754 | 1;
      var $2756=$1;
      var $2757=(($2756+48)|0);
      HEAP32[(($2757)>>2)]=$2755;
      label = 543; break;
    case 339: 
      var $2759=$1;
      var $2760=(($2759+48)|0);
      var $2761=HEAP32[(($2760)>>2)];
      var $2762=$2761 >>> 1;
      var $2763=$1;
      var $2764=(($2763+48)|0);
      HEAP32[(($2764)>>2)]=$2762;
      label = 543; break;
    case 340: 
      var $2766=$1;
      var $2767=$yyvsp;
      var $2768=((($2767)-(28))|0);
      var $2769=$2768;
      var $2770=HEAP32[(($2769)>>2)];
      var $2771=$yyvsp;
      var $2772=((($2771)-(16))|0);
      var $2773=$2772;
      var $2774=HEAP32[(($2773)>>2)];
      var $2775=$yyvsp;
      var $2776=((($2775)-(4))|0);
      var $2777=$2776;
      var $2778=HEAP32[(($2777)>>2)];
      var $2779=_new_for($2766, $2770, $2774, $2778);
      var $2780=$yyval;
      HEAP32[(($2780)>>2)]=$2779;
      label = 543; break;
    case 341: 
      var $2782=$1;
      var $2783=(($2782+64)|0);
      var $2784=HEAP32[(($2783)>>2)];
      var $2785=(($2784)|(0))!=0;
      if ($2785) { label = 343; break; } else { label = 342; break; }
    case 342: 
      var $2787=$1;
      var $2788=(($2787+68)|0);
      var $2789=HEAP32[(($2788)>>2)];
      var $2790=(($2789)|(0))!=0;
      if ($2790) { label = 343; break; } else { label = 344; break; }
    case 343: 
      var $2792=$1;
      _yyerror($2792, ((101216)|0));
      label = 344; break;
    case 344: 
      var $2794=$1;
      var $2795=_local_switch($2794);
      var $2796=$yyval;
      HEAP32[(($2796)>>2)]=$2795;
      label = 543; break;
    case 345: 
      var $2798=$1;
      var $2799=$yyvsp;
      var $2800=((($2799)-(16))|0);
      var $2801=$2800;
      var $2802=HEAP32[(($2801)>>2)];
      var $2803=$yyvsp;
      var $2804=((($2803)-(12))|0);
      var $2805=$2804;
      var $2806=HEAP32[(($2805)>>2)];
      var $2807=$yyvsp;
      var $2808=((($2807)-(4))|0);
      var $2809=$2808;
      var $2810=HEAP32[(($2809)>>2)];
      var $2811=_new_class($2798, $2802, $2806, $2810);
      var $2812=$yyval;
      HEAP32[(($2812)>>2)]=$2811;
      var $2813=$1;
      var $2814=$yyvsp;
      var $2815=((($2814)-(8))|0);
      var $2816=$2815;
      var $2817=HEAP32[(($2816)>>2)];
      _local_resume($2813, $2817);
      label = 543; break;
    case 346: 
      var $2819=$1;
      var $2820=(($2819+64)|0);
      var $2821=HEAP32[(($2820)>>2)];
      var $2822=$yyval;
      HEAP32[(($2822)>>2)]=$2821;
      var $2823=$1;
      var $2824=(($2823+64)|0);
      HEAP32[(($2824)>>2)]=0;
      label = 543; break;
    case 347: 
      var $2826=$1;
      var $2827=$1;
      var $2828=_local_switch($2827);
      var $2829=$1;
      var $2830=(($2829+68)|0);
      var $2831=HEAP32[(($2830)>>2)];
      var $2832=$2831;
      var $2833=_cons_gen($2826, $2828, $2832);
      var $2834=$yyval;
      HEAP32[(($2834)>>2)]=$2833;
      var $2835=$1;
      var $2836=(($2835+68)|0);
      HEAP32[(($2836)>>2)]=0;
      label = 543; break;
    case 348: 
      var $2838=$1;
      var $2839=$yyvsp;
      var $2840=((($2839)-(20))|0);
      var $2841=$2840;
      var $2842=HEAP32[(($2841)>>2)];
      var $2843=$yyvsp;
      var $2844=((($2843)-(4))|0);
      var $2845=$2844;
      var $2846=HEAP32[(($2845)>>2)];
      var $2847=_new_sclass($2838, $2842, $2846);
      var $2848=$yyval;
      HEAP32[(($2848)>>2)]=$2847;
      var $2849=$1;
      var $2850=$yyvsp;
      var $2851=((($2850)-(8))|0);
      var $2852=$2851;
      var $2853=HEAP32[(($2852)>>2)];
      var $2854=(($2853)|0);
      var $2855=HEAP32[(($2854)>>2)];
      _local_resume($2849, $2855);
      var $2856=$yyvsp;
      var $2857=((($2856)-(16))|0);
      var $2858=$2857;
      var $2859=HEAP32[(($2858)>>2)];
      var $2860=$1;
      var $2861=(($2860+64)|0);
      HEAP32[(($2861)>>2)]=$2859;
      var $2862=$yyvsp;
      var $2863=((($2862)-(8))|0);
      var $2864=$2863;
      var $2865=HEAP32[(($2864)>>2)];
      var $2866=(($2865+4)|0);
      var $2867=HEAP32[(($2866)>>2)];
      var $2868=$2867;
      var $2869=$1;
      var $2870=(($2869+68)|0);
      HEAP32[(($2870)>>2)]=$2868;
      label = 543; break;
    case 349: 
      var $2872=$1;
      var $2873=(($2872+64)|0);
      var $2874=HEAP32[(($2873)>>2)];
      var $2875=(($2874)|(0))!=0;
      if ($2875) { label = 351; break; } else { label = 350; break; }
    case 350: 
      var $2877=$1;
      var $2878=(($2877+68)|0);
      var $2879=HEAP32[(($2878)>>2)];
      var $2880=(($2879)|(0))!=0;
      if ($2880) { label = 351; break; } else { label = 352; break; }
    case 351: 
      var $2882=$1;
      _yyerror($2882, ((100936)|0));
      label = 352; break;
    case 352: 
      var $2884=$1;
      var $2885=_local_switch($2884);
      var $2886=$yyval;
      HEAP32[(($2886)>>2)]=$2885;
      label = 543; break;
    case 353: 
      var $2888=$1;
      var $2889=$yyvsp;
      var $2890=((($2889)-(12))|0);
      var $2891=$2890;
      var $2892=HEAP32[(($2891)>>2)];
      var $2893=$yyvsp;
      var $2894=((($2893)-(4))|0);
      var $2895=$2894;
      var $2896=HEAP32[(($2895)>>2)];
      var $2897=_new_module($2888, $2892, $2896);
      var $2898=$yyval;
      HEAP32[(($2898)>>2)]=$2897;
      var $2899=$1;
      var $2900=$yyvsp;
      var $2901=((($2900)-(8))|0);
      var $2902=$2901;
      var $2903=HEAP32[(($2902)>>2)];
      _local_resume($2899, $2903);
      label = 543; break;
    case 354: 
      var $2905=$1;
      var $2906=(($2905+64)|0);
      var $2907=HEAP32[(($2906)>>2)];
      var $2908=((($2907)+(1))|0);
      HEAP32[(($2906)>>2)]=$2908;
      var $2909=$1;
      var $2910=_local_switch($2909);
      var $2911=$yyval;
      HEAP32[(($2911)>>2)]=$2910;
      label = 543; break;
    case 355: 
      var $2913=$1;
      var $2914=$yyvsp;
      var $2915=((($2914)-(16))|0);
      var $2916=$2915;
      var $2917=HEAP16[(($2916)>>1)];
      var $2918=$yyvsp;
      var $2919=((($2918)-(8))|0);
      var $2920=$2919;
      var $2921=HEAP32[(($2920)>>2)];
      var $2922=$yyvsp;
      var $2923=((($2922)-(4))|0);
      var $2924=$2923;
      var $2925=HEAP32[(($2924)>>2)];
      var $2926=_new_def($2913, $2917, $2921, $2925);
      var $2927=$yyval;
      HEAP32[(($2927)>>2)]=$2926;
      var $2928=$1;
      var $2929=$yyvsp;
      var $2930=((($2929)-(12))|0);
      var $2931=$2930;
      var $2932=HEAP32[(($2931)>>2)];
      _local_resume($2928, $2932);
      var $2933=$1;
      var $2934=(($2933+64)|0);
      var $2935=HEAP32[(($2934)>>2)];
      var $2936=((($2935)-(1))|0);
      HEAP32[(($2934)>>2)]=$2936;
      label = 543; break;
    case 356: 
      var $2938=$1;
      var $2939=(($2938+40)|0);
      HEAP32[(($2939)>>2)]=7;
      label = 543; break;
    case 357: 
      var $2941=$1;
      var $2942=(($2941+68)|0);
      var $2943=HEAP32[(($2942)>>2)];
      var $2944=((($2943)+(1))|0);
      HEAP32[(($2942)>>2)]=$2944;
      var $2945=$1;
      var $2946=(($2945+40)|0);
      HEAP32[(($2946)>>2)]=3;
      var $2947=$1;
      var $2948=_local_switch($2947);
      var $2949=$yyval;
      HEAP32[(($2949)>>2)]=$2948;
      label = 543; break;
    case 358: 
      var $2951=$1;
      var $2952=$yyvsp;
      var $2953=((($2952)-(28))|0);
      var $2954=$2953;
      var $2955=HEAP32[(($2954)>>2)];
      var $2956=$yyvsp;
      var $2957=((($2956)-(16))|0);
      var $2958=$2957;
      var $2959=HEAP16[(($2958)>>1)];
      var $2960=$yyvsp;
      var $2961=((($2960)-(8))|0);
      var $2962=$2961;
      var $2963=HEAP32[(($2962)>>2)];
      var $2964=$yyvsp;
      var $2965=((($2964)-(4))|0);
      var $2966=$2965;
      var $2967=HEAP32[(($2966)>>2)];
      var $2968=_new_sdef($2951, $2955, $2959, $2963, $2967);
      var $2969=$yyval;
      HEAP32[(($2969)>>2)]=$2968;
      var $2970=$1;
      var $2971=$yyvsp;
      var $2972=((($2971)-(12))|0);
      var $2973=$2972;
      var $2974=HEAP32[(($2973)>>2)];
      _local_resume($2970, $2974);
      var $2975=$1;
      var $2976=(($2975+68)|0);
      var $2977=HEAP32[(($2976)>>2)];
      var $2978=((($2977)-(1))|0);
      HEAP32[(($2976)>>2)]=$2978;
      label = 543; break;
    case 359: 
      var $2980=$1;
      var $2981=_new_break($2980, 0);
      var $2982=$yyval;
      HEAP32[(($2982)>>2)]=$2981;
      label = 543; break;
    case 360: 
      var $2984=$1;
      var $2985=_new_next($2984, 0);
      var $2986=$yyval;
      HEAP32[(($2986)>>2)]=$2985;
      label = 543; break;
    case 361: 
      var $2988=$1;
      var $2989=_new_redo($2988);
      var $2990=$yyval;
      HEAP32[(($2990)>>2)]=$2989;
      label = 543; break;
    case 362: 
      var $2992=$1;
      var $2993=_new_retry($2992);
      var $2994=$yyval;
      HEAP32[(($2994)>>2)]=$2993;
      label = 543; break;
    case 363: 
      var $2996=$yyvsp;
      var $2997=(($2996)|0);
      var $2998=$2997;
      var $2999=HEAP32[(($2998)>>2)];
      var $3000=$yyval;
      HEAP32[(($3000)>>2)]=$2999;
      var $3001=$yyval;
      var $3002=HEAP32[(($3001)>>2)];
      var $3003=(($3002)|(0))!=0;
      if ($3003) { label = 365; break; } else { label = 364; break; }
    case 364: 
      var $3005=$1;
      var $3006=_new_nil($3005);
      var $3007=$yyval;
      HEAP32[(($3007)>>2)]=$3006;
      label = 365; break;
    case 365: 
      label = 543; break;
    case 366: 
      var $3010=$1;
      var $3011=$yyvsp;
      var $3012=((($3011)-(12))|0);
      var $3013=$3012;
      var $3014=HEAP32[(($3013)>>2)];
      var $3015=_cond($3014);
      var $3016=$yyvsp;
      var $3017=((($3016)-(4))|0);
      var $3018=$3017;
      var $3019=HEAP32[(($3018)>>2)];
      var $3020=$yyvsp;
      var $3021=(($3020)|0);
      var $3022=$3021;
      var $3023=HEAP32[(($3022)>>2)];
      var $3024=_new_if($3010, $3015, $3019, $3023);
      var $3025=$yyval;
      HEAP32[(($3025)>>2)]=$3024;
      label = 543; break;
    case 367: 
      var $3027=$yyvsp;
      var $3028=(($3027)|0);
      var $3029=$3028;
      var $3030=HEAP32[(($3029)>>2)];
      var $3031=$yyval;
      HEAP32[(($3031)>>2)]=$3030;
      label = 543; break;
    case 368: 
      var $3033=$1;
      var $3034=$1;
      var $3035=$yyvsp;
      var $3036=(($3035)|0);
      var $3037=$3036;
      var $3038=HEAP32[(($3037)>>2)];
      var $3039=_list1_gen($3034, $3038);
      var $3040=_list1_gen($3033, $3039);
      var $3041=$yyval;
      HEAP32[(($3041)>>2)]=$3040;
      label = 543; break;
    case 369: 
      var $3043=$1;
      var $3044=$yyvsp;
      var $3045=(($3044)|0);
      var $3046=$3045;
      var $3047=HEAP16[(($3046)>>1)];
      var $3048=_new_arg($3043, $3047);
      var $3049=$yyval;
      HEAP32[(($3049)>>2)]=$3048;
      label = 543; break;
    case 370: 
      var $3051=$1;
      var $3052=$yyvsp;
      var $3053=((($3052)-(4))|0);
      var $3054=$3053;
      var $3055=HEAP32[(($3054)>>2)];
      var $3056=_new_masgn($3051, $3055, 0);
      var $3057=$yyval;
      HEAP32[(($3057)>>2)]=$3056;
      label = 543; break;
    case 371: 
      var $3059=$1;
      var $3060=$yyvsp;
      var $3061=(($3060)|0);
      var $3062=$3061;
      var $3063=HEAP32[(($3062)>>2)];
      var $3064=_list1_gen($3059, $3063);
      var $3065=$yyval;
      HEAP32[(($3065)>>2)]=$3064;
      label = 543; break;
    case 372: 
      var $3067=$1;
      var $3068=$yyvsp;
      var $3069=((($3068)-(8))|0);
      var $3070=$3069;
      var $3071=HEAP32[(($3070)>>2)];
      var $3072=$1;
      var $3073=$yyvsp;
      var $3074=(($3073)|0);
      var $3075=$3074;
      var $3076=HEAP32[(($3075)>>2)];
      var $3077=_list1_gen($3072, $3076);
      var $3078=_append_gen($3067, $3071, $3077);
      var $3079=$yyval;
      HEAP32[(($3079)>>2)]=$3078;
      label = 543; break;
    case 373: 
      var $3081=$1;
      var $3082=$yyvsp;
      var $3083=(($3082)|0);
      var $3084=$3083;
      var $3085=HEAP32[(($3084)>>2)];
      var $3086=_list3_gen($3081, $3085, 0, 0);
      var $3087=$yyval;
      HEAP32[(($3087)>>2)]=$3086;
      label = 543; break;
    case 374: 
      var $3089=$1;
      var $3090=$yyvsp;
      var $3091=((($3090)-(12))|0);
      var $3092=$3091;
      var $3093=HEAP32[(($3092)>>2)];
      var $3094=$1;
      var $3095=$yyvsp;
      var $3096=(($3095)|0);
      var $3097=$3096;
      var $3098=HEAP16[(($3097)>>1)];
      var $3099=_new_arg($3094, $3098);
      var $3100=_list3_gen($3089, $3093, $3099, 0);
      var $3101=$yyval;
      HEAP32[(($3101)>>2)]=$3100;
      label = 543; break;
    case 375: 
      var $3103=$1;
      var $3104=$yyvsp;
      var $3105=((($3104)-(20))|0);
      var $3106=$3105;
      var $3107=HEAP32[(($3106)>>2)];
      var $3108=$1;
      var $3109=$yyvsp;
      var $3110=((($3109)-(8))|0);
      var $3111=$3110;
      var $3112=HEAP16[(($3111)>>1)];
      var $3113=_new_arg($3108, $3112);
      var $3114=$yyvsp;
      var $3115=(($3114)|0);
      var $3116=$3115;
      var $3117=HEAP32[(($3116)>>2)];
      var $3118=_list3_gen($3103, $3107, $3113, $3117);
      var $3119=$yyval;
      HEAP32[(($3119)>>2)]=$3118;
      label = 543; break;
    case 376: 
      var $3121=$1;
      var $3122=$yyvsp;
      var $3123=((($3122)-(8))|0);
      var $3124=$3123;
      var $3125=HEAP32[(($3124)>>2)];
      var $3126=_list3_gen($3121, $3125, -1, 0);
      var $3127=$yyval;
      HEAP32[(($3127)>>2)]=$3126;
      label = 543; break;
    case 377: 
      var $3129=$1;
      var $3130=$yyvsp;
      var $3131=((($3130)-(16))|0);
      var $3132=$3131;
      var $3133=HEAP32[(($3132)>>2)];
      var $3134=$yyvsp;
      var $3135=(($3134)|0);
      var $3136=$3135;
      var $3137=HEAP32[(($3136)>>2)];
      var $3138=_list3_gen($3129, $3133, -1, $3137);
      var $3139=$yyval;
      HEAP32[(($3139)>>2)]=$3138;
      label = 543; break;
    case 378: 
      var $3141=$1;
      var $3142=$1;
      var $3143=$yyvsp;
      var $3144=(($3143)|0);
      var $3145=$3144;
      var $3146=HEAP16[(($3145)>>1)];
      var $3147=_new_arg($3142, $3146);
      var $3148=_list3_gen($3141, 0, $3147, 0);
      var $3149=$yyval;
      HEAP32[(($3149)>>2)]=$3148;
      label = 543; break;
    case 379: 
      var $3151=$1;
      var $3152=$1;
      var $3153=$yyvsp;
      var $3154=((($3153)-(8))|0);
      var $3155=$3154;
      var $3156=HEAP16[(($3155)>>1)];
      var $3157=_new_arg($3152, $3156);
      var $3158=$yyvsp;
      var $3159=(($3158)|0);
      var $3160=$3159;
      var $3161=HEAP32[(($3160)>>2)];
      var $3162=_list3_gen($3151, 0, $3157, $3161);
      var $3163=$yyval;
      HEAP32[(($3163)>>2)]=$3162;
      label = 543; break;
    case 380: 
      var $3165=$1;
      var $3166=_list3_gen($3165, 0, -1, 0);
      var $3167=$yyval;
      HEAP32[(($3167)>>2)]=$3166;
      label = 543; break;
    case 381: 
      var $3169=$1;
      var $3170=$yyvsp;
      var $3171=(($3170)|0);
      var $3172=$3171;
      var $3173=HEAP32[(($3172)>>2)];
      var $3174=_list3_gen($3169, 0, -1, $3173);
      var $3175=$yyval;
      HEAP32[(($3175)>>2)]=$3174;
      label = 543; break;
    case 382: 
      var $3177=$1;
      var $3178=$yyvsp;
      var $3179=((($3178)-(20))|0);
      var $3180=$3179;
      var $3181=HEAP32[(($3180)>>2)];
      var $3182=$yyvsp;
      var $3183=((($3182)-(12))|0);
      var $3184=$3183;
      var $3185=HEAP32[(($3184)>>2)];
      var $3186=$yyvsp;
      var $3187=((($3186)-(4))|0);
      var $3188=$3187;
      var $3189=HEAP16[(($3188)>>1)];
      var $3190=$yyvsp;
      var $3191=(($3190)|0);
      var $3192=$3191;
      var $3193=HEAP16[(($3192)>>1)];
      var $3194=_new_args($3177, $3181, $3185, $3189, 0, $3193);
      var $3195=$yyval;
      HEAP32[(($3195)>>2)]=$3194;
      label = 543; break;
    case 383: 
      var $3197=$1;
      var $3198=$yyvsp;
      var $3199=((($3198)-(28))|0);
      var $3200=$3199;
      var $3201=HEAP32[(($3200)>>2)];
      var $3202=$yyvsp;
      var $3203=((($3202)-(20))|0);
      var $3204=$3203;
      var $3205=HEAP32[(($3204)>>2)];
      var $3206=$yyvsp;
      var $3207=((($3206)-(12))|0);
      var $3208=$3207;
      var $3209=HEAP16[(($3208)>>1)];
      var $3210=$yyvsp;
      var $3211=((($3210)-(4))|0);
      var $3212=$3211;
      var $3213=HEAP32[(($3212)>>2)];
      var $3214=$yyvsp;
      var $3215=(($3214)|0);
      var $3216=$3215;
      var $3217=HEAP16[(($3216)>>1)];
      var $3218=_new_args($3197, $3201, $3205, $3209, $3213, $3217);
      var $3219=$yyval;
      HEAP32[(($3219)>>2)]=$3218;
      label = 543; break;
    case 384: 
      var $3221=$1;
      var $3222=$yyvsp;
      var $3223=((($3222)-(12))|0);
      var $3224=$3223;
      var $3225=HEAP32[(($3224)>>2)];
      var $3226=$yyvsp;
      var $3227=((($3226)-(4))|0);
      var $3228=$3227;
      var $3229=HEAP32[(($3228)>>2)];
      var $3230=$yyvsp;
      var $3231=(($3230)|0);
      var $3232=$3231;
      var $3233=HEAP16[(($3232)>>1)];
      var $3234=_new_args($3221, $3225, $3229, 0, 0, $3233);
      var $3235=$yyval;
      HEAP32[(($3235)>>2)]=$3234;
      label = 543; break;
    case 385: 
      var $3237=$1;
      var $3238=$yyvsp;
      var $3239=((($3238)-(20))|0);
      var $3240=$3239;
      var $3241=HEAP32[(($3240)>>2)];
      var $3242=$yyvsp;
      var $3243=((($3242)-(12))|0);
      var $3244=$3243;
      var $3245=HEAP32[(($3244)>>2)];
      var $3246=$yyvsp;
      var $3247=((($3246)-(4))|0);
      var $3248=$3247;
      var $3249=HEAP32[(($3248)>>2)];
      var $3250=$yyvsp;
      var $3251=(($3250)|0);
      var $3252=$3251;
      var $3253=HEAP16[(($3252)>>1)];
      var $3254=_new_args($3237, $3241, $3245, 0, $3249, $3253);
      var $3255=$yyval;
      HEAP32[(($3255)>>2)]=$3254;
      label = 543; break;
    case 386: 
      var $3257=$1;
      var $3258=$yyvsp;
      var $3259=((($3258)-(12))|0);
      var $3260=$3259;
      var $3261=HEAP32[(($3260)>>2)];
      var $3262=$yyvsp;
      var $3263=((($3262)-(4))|0);
      var $3264=$3263;
      var $3265=HEAP16[(($3264)>>1)];
      var $3266=$yyvsp;
      var $3267=(($3266)|0);
      var $3268=$3267;
      var $3269=HEAP16[(($3268)>>1)];
      var $3270=_new_args($3257, $3261, 0, $3265, 0, $3269);
      var $3271=$yyval;
      HEAP32[(($3271)>>2)]=$3270;
      label = 543; break;
    case 387: 
      var $3273=$1;
      var $3274=$yyvsp;
      var $3275=((($3274)-(4))|0);
      var $3276=$3275;
      var $3277=HEAP32[(($3276)>>2)];
      var $3278=_new_args($3273, $3277, 0, 1, 0, 0);
      var $3279=$yyval;
      HEAP32[(($3279)>>2)]=$3278;
      label = 543; break;
    case 388: 
      var $3281=$1;
      var $3282=$yyvsp;
      var $3283=((($3282)-(20))|0);
      var $3284=$3283;
      var $3285=HEAP32[(($3284)>>2)];
      var $3286=$yyvsp;
      var $3287=((($3286)-(12))|0);
      var $3288=$3287;
      var $3289=HEAP16[(($3288)>>1)];
      var $3290=$yyvsp;
      var $3291=((($3290)-(4))|0);
      var $3292=$3291;
      var $3293=HEAP32[(($3292)>>2)];
      var $3294=$yyvsp;
      var $3295=(($3294)|0);
      var $3296=$3295;
      var $3297=HEAP16[(($3296)>>1)];
      var $3298=_new_args($3281, $3285, 0, $3289, $3293, $3297);
      var $3299=$yyval;
      HEAP32[(($3299)>>2)]=$3298;
      label = 543; break;
    case 389: 
      var $3301=$1;
      var $3302=$yyvsp;
      var $3303=((($3302)-(4))|0);
      var $3304=$3303;
      var $3305=HEAP32[(($3304)>>2)];
      var $3306=$yyvsp;
      var $3307=(($3306)|0);
      var $3308=$3307;
      var $3309=HEAP16[(($3308)>>1)];
      var $3310=_new_args($3301, $3305, 0, 0, 0, $3309);
      var $3311=$yyval;
      HEAP32[(($3311)>>2)]=$3310;
      label = 543; break;
    case 390: 
      var $3313=$1;
      var $3314=$yyvsp;
      var $3315=((($3314)-(12))|0);
      var $3316=$3315;
      var $3317=HEAP32[(($3316)>>2)];
      var $3318=$yyvsp;
      var $3319=((($3318)-(4))|0);
      var $3320=$3319;
      var $3321=HEAP16[(($3320)>>1)];
      var $3322=$yyvsp;
      var $3323=(($3322)|0);
      var $3324=$3323;
      var $3325=HEAP16[(($3324)>>1)];
      var $3326=_new_args($3313, 0, $3317, $3321, 0, $3325);
      var $3327=$yyval;
      HEAP32[(($3327)>>2)]=$3326;
      label = 543; break;
    case 391: 
      var $3329=$1;
      var $3330=$yyvsp;
      var $3331=((($3330)-(20))|0);
      var $3332=$3331;
      var $3333=HEAP32[(($3332)>>2)];
      var $3334=$yyvsp;
      var $3335=((($3334)-(12))|0);
      var $3336=$3335;
      var $3337=HEAP16[(($3336)>>1)];
      var $3338=$yyvsp;
      var $3339=((($3338)-(4))|0);
      var $3340=$3339;
      var $3341=HEAP32[(($3340)>>2)];
      var $3342=$yyvsp;
      var $3343=(($3342)|0);
      var $3344=$3343;
      var $3345=HEAP16[(($3344)>>1)];
      var $3346=_new_args($3329, 0, $3333, $3337, $3341, $3345);
      var $3347=$yyval;
      HEAP32[(($3347)>>2)]=$3346;
      label = 543; break;
    case 392: 
      var $3349=$1;
      var $3350=$yyvsp;
      var $3351=((($3350)-(4))|0);
      var $3352=$3351;
      var $3353=HEAP32[(($3352)>>2)];
      var $3354=$yyvsp;
      var $3355=(($3354)|0);
      var $3356=$3355;
      var $3357=HEAP16[(($3356)>>1)];
      var $3358=_new_args($3349, 0, $3353, 0, 0, $3357);
      var $3359=$yyval;
      HEAP32[(($3359)>>2)]=$3358;
      label = 543; break;
    case 393: 
      var $3361=$1;
      var $3362=$yyvsp;
      var $3363=((($3362)-(12))|0);
      var $3364=$3363;
      var $3365=HEAP32[(($3364)>>2)];
      var $3366=$yyvsp;
      var $3367=((($3366)-(4))|0);
      var $3368=$3367;
      var $3369=HEAP32[(($3368)>>2)];
      var $3370=$yyvsp;
      var $3371=(($3370)|0);
      var $3372=$3371;
      var $3373=HEAP16[(($3372)>>1)];
      var $3374=_new_args($3361, 0, $3365, 0, $3369, $3373);
      var $3375=$yyval;
      HEAP32[(($3375)>>2)]=$3374;
      label = 543; break;
    case 394: 
      var $3377=$1;
      var $3378=$yyvsp;
      var $3379=((($3378)-(4))|0);
      var $3380=$3379;
      var $3381=HEAP16[(($3380)>>1)];
      var $3382=$yyvsp;
      var $3383=(($3382)|0);
      var $3384=$3383;
      var $3385=HEAP16[(($3384)>>1)];
      var $3386=_new_args($3377, 0, 0, $3381, 0, $3385);
      var $3387=$yyval;
      HEAP32[(($3387)>>2)]=$3386;
      label = 543; break;
    case 395: 
      var $3389=$1;
      var $3390=$yyvsp;
      var $3391=((($3390)-(12))|0);
      var $3392=$3391;
      var $3393=HEAP16[(($3392)>>1)];
      var $3394=$yyvsp;
      var $3395=((($3394)-(4))|0);
      var $3396=$3395;
      var $3397=HEAP32[(($3396)>>2)];
      var $3398=$yyvsp;
      var $3399=(($3398)|0);
      var $3400=$3399;
      var $3401=HEAP16[(($3400)>>1)];
      var $3402=_new_args($3389, 0, 0, $3393, $3397, $3401);
      var $3403=$yyval;
      HEAP32[(($3403)>>2)]=$3402;
      label = 543; break;
    case 396: 
      var $3405=$1;
      var $3406=$yyvsp;
      var $3407=(($3406)|0);
      var $3408=$3407;
      var $3409=HEAP16[(($3408)>>1)];
      var $3410=_new_args($3405, 0, 0, 0, 0, $3409);
      var $3411=$yyval;
      HEAP32[(($3411)>>2)]=$3410;
      label = 543; break;
    case 397: 
      var $3413=$1;
      var $3414=(($3413+72)|0);
      HEAP32[(($3414)>>2)]=1;
      var $3415=$yyvsp;
      var $3416=(($3415)|0);
      var $3417=$3416;
      var $3418=HEAP32[(($3417)>>2)];
      var $3419=$yyval;
      HEAP32[(($3419)>>2)]=$3418;
      label = 543; break;
    case 398: 
      var $3421=$1;
      _local_add_f($3421, 0);
      var $3422=$yyval;
      HEAP32[(($3422)>>2)]=0;
      label = 543; break;
    case 399: 
      var $3424=$1;
      _local_add_f($3424, 0);
      var $3425=$yyval;
      HEAP32[(($3425)>>2)]=0;
      label = 543; break;
    case 400: 
      var $3427=$yyvsp;
      var $3428=((($3427)-(8))|0);
      var $3429=$3428;
      var $3430=HEAP32[(($3429)>>2)];
      var $3431=$yyval;
      HEAP32[(($3431)>>2)]=$3430;
      label = 543; break;
    case 401: 
      var $3433=$yyval;
      HEAP32[(($3433)>>2)]=0;
      label = 543; break;
    case 402: 
      var $3435=$yyval;
      HEAP32[(($3435)>>2)]=0;
      label = 543; break;
    case 403: 
      var $3437=$1;
      var $3438=$yyvsp;
      var $3439=(($3438)|0);
      var $3440=$3439;
      var $3441=HEAP16[(($3440)>>1)];
      _local_add_f($3437, $3441);
      var $3442=$1;
      var $3443=$yyvsp;
      var $3444=(($3443)|0);
      var $3445=$3444;
      var $3446=HEAP16[(($3445)>>1)];
      _new_bv($3442, $3446);
      label = 543; break;
    case 404: 
      var $3448=$yyvsp;
      var $3449=((($3448)-(8))|0);
      var $3450=$3449;
      var $3451=HEAP32[(($3450)>>2)];
      var $3452=$yyval;
      HEAP32[(($3452)>>2)]=$3451;
      label = 543; break;
    case 405: 
      var $3454=$yyvsp;
      var $3455=(($3454)|0);
      var $3456=$3455;
      var $3457=HEAP32[(($3456)>>2)];
      var $3458=$yyval;
      HEAP32[(($3458)>>2)]=$3457;
      label = 543; break;
    case 406: 
      var $3460=$yyvsp;
      var $3461=((($3460)-(4))|0);
      var $3462=$3461;
      var $3463=HEAP32[(($3462)>>2)];
      var $3464=$yyval;
      HEAP32[(($3464)>>2)]=$3463;
      label = 543; break;
    case 407: 
      var $3466=$yyvsp;
      var $3467=((($3466)-(4))|0);
      var $3468=$3467;
      var $3469=HEAP32[(($3468)>>2)];
      var $3470=$yyval;
      HEAP32[(($3470)>>2)]=$3469;
      label = 543; break;
    case 408: 
      var $3472=$1;
      _local_nest($3472);
      label = 543; break;
    case 409: 
      var $3474=$1;
      var $3475=$yyvsp;
      var $3476=((($3475)-(8))|0);
      var $3477=$3476;
      var $3478=HEAP32[(($3477)>>2)];
      var $3479=$yyvsp;
      var $3480=((($3479)-(4))|0);
      var $3481=$3480;
      var $3482=HEAP32[(($3481)>>2)];
      var $3483=_new_block($3474, $3478, $3482);
      var $3484=$yyval;
      HEAP32[(($3484)>>2)]=$3483;
      var $3485=$1;
      _local_unnest($3485);
      label = 543; break;
    case 410: 
      var $3487=$yyvsp;
      var $3488=((($3487)-(4))|0);
      var $3489=$3488;
      var $3490=HEAP32[(($3489)>>2)];
      var $3491=(($3490)|0);
      var $3492=HEAP32[(($3491)>>2)];
      var $3493=(($3492)|(0))==38;
      if ($3493) { label = 411; break; } else { label = 412; break; }
    case 411: 
      var $3495=$1;
      _yyerror($3495, ((100692)|0));
      label = 413; break;
    case 412: 
      var $3497=$1;
      var $3498=$yyvsp;
      var $3499=((($3498)-(4))|0);
      var $3500=$3499;
      var $3501=HEAP32[(($3500)>>2)];
      var $3502=$yyvsp;
      var $3503=(($3502)|0);
      var $3504=$3503;
      var $3505=HEAP32[(($3504)>>2)];
      _call_with_block($3497, $3501, $3505);
      label = 413; break;
    case 413: 
      var $3507=$yyvsp;
      var $3508=((($3507)-(4))|0);
      var $3509=$3508;
      var $3510=HEAP32[(($3509)>>2)];
      var $3511=$yyval;
      HEAP32[(($3511)>>2)]=$3510;
      label = 543; break;
    case 414: 
      var $3513=$1;
      var $3514=$yyvsp;
      var $3515=((($3514)-(12))|0);
      var $3516=$3515;
      var $3517=HEAP32[(($3516)>>2)];
      var $3518=$yyvsp;
      var $3519=((($3518)-(4))|0);
      var $3520=$3519;
      var $3521=HEAP16[(($3520)>>1)];
      var $3522=$yyvsp;
      var $3523=(($3522)|0);
      var $3524=$3523;
      var $3525=HEAP32[(($3524)>>2)];
      var $3526=_new_call($3513, $3517, $3521, $3525);
      var $3527=$yyval;
      HEAP32[(($3527)>>2)]=$3526;
      label = 543; break;
    case 415: 
      var $3529=$1;
      var $3530=$yyvsp;
      var $3531=((($3530)-(16))|0);
      var $3532=$3531;
      var $3533=HEAP32[(($3532)>>2)];
      var $3534=$yyvsp;
      var $3535=((($3534)-(8))|0);
      var $3536=$3535;
      var $3537=HEAP16[(($3536)>>1)];
      var $3538=$yyvsp;
      var $3539=((($3538)-(4))|0);
      var $3540=$3539;
      var $3541=HEAP32[(($3540)>>2)];
      var $3542=_new_call($3529, $3533, $3537, $3541);
      var $3543=$yyval;
      HEAP32[(($3543)>>2)]=$3542;
      var $3544=$1;
      var $3545=$yyval;
      var $3546=HEAP32[(($3545)>>2)];
      var $3547=$yyvsp;
      var $3548=(($3547)|0);
      var $3549=$3548;
      var $3550=HEAP32[(($3549)>>2)];
      _call_with_block($3544, $3546, $3550);
      label = 543; break;
    case 416: 
      var $3552=$1;
      var $3553=$yyvsp;
      var $3554=((($3553)-(16))|0);
      var $3555=$3554;
      var $3556=HEAP32[(($3555)>>2)];
      var $3557=$yyvsp;
      var $3558=((($3557)-(8))|0);
      var $3559=$3558;
      var $3560=HEAP16[(($3559)>>1)];
      var $3561=$yyvsp;
      var $3562=((($3561)-(4))|0);
      var $3563=$3562;
      var $3564=HEAP32[(($3563)>>2)];
      var $3565=_new_call($3552, $3556, $3560, $3564);
      var $3566=$yyval;
      HEAP32[(($3566)>>2)]=$3565;
      var $3567=$1;
      var $3568=$yyval;
      var $3569=HEAP32[(($3568)>>2)];
      var $3570=$yyvsp;
      var $3571=(($3570)|0);
      var $3572=$3571;
      var $3573=HEAP32[(($3572)>>2)];
      _call_with_block($3567, $3569, $3573);
      label = 543; break;
    case 417: 
      var $3575=$1;
      var $3576=$yyvsp;
      var $3577=((($3576)-(4))|0);
      var $3578=$3577;
      var $3579=HEAP16[(($3578)>>1)];
      var $3580=$yyvsp;
      var $3581=(($3580)|0);
      var $3582=$3581;
      var $3583=HEAP32[(($3582)>>2)];
      var $3584=_new_fcall($3575, $3579, $3583);
      var $3585=$yyval;
      HEAP32[(($3585)>>2)]=$3584;
      label = 543; break;
    case 418: 
      var $3587=$1;
      var $3588=$yyvsp;
      var $3589=((($3588)-(12))|0);
      var $3590=$3589;
      var $3591=HEAP32[(($3590)>>2)];
      var $3592=$yyvsp;
      var $3593=((($3592)-(4))|0);
      var $3594=$3593;
      var $3595=HEAP16[(($3594)>>1)];
      var $3596=$yyvsp;
      var $3597=(($3596)|0);
      var $3598=$3597;
      var $3599=HEAP32[(($3598)>>2)];
      var $3600=_new_call($3587, $3591, $3595, $3599);
      var $3601=$yyval;
      HEAP32[(($3601)>>2)]=$3600;
      label = 543; break;
    case 419: 
      var $3603=$1;
      var $3604=$yyvsp;
      var $3605=((($3604)-(12))|0);
      var $3606=$3605;
      var $3607=HEAP32[(($3606)>>2)];
      var $3608=$yyvsp;
      var $3609=((($3608)-(4))|0);
      var $3610=$3609;
      var $3611=HEAP16[(($3610)>>1)];
      var $3612=$yyvsp;
      var $3613=(($3612)|0);
      var $3614=$3613;
      var $3615=HEAP32[(($3614)>>2)];
      var $3616=_new_call($3603, $3607, $3611, $3615);
      var $3617=$yyval;
      HEAP32[(($3617)>>2)]=$3616;
      label = 543; break;
    case 420: 
      var $3619=$1;
      var $3620=$yyvsp;
      var $3621=((($3620)-(8))|0);
      var $3622=$3621;
      var $3623=HEAP32[(($3622)>>2)];
      var $3624=$yyvsp;
      var $3625=(($3624)|0);
      var $3626=$3625;
      var $3627=HEAP16[(($3626)>>1)];
      var $3628=_new_call($3619, $3623, $3627, 0);
      var $3629=$yyval;
      HEAP32[(($3629)>>2)]=$3628;
      label = 543; break;
    case 421: 
      var $3631=$1;
      var $3632=$yyvsp;
      var $3633=((($3632)-(8))|0);
      var $3634=$3633;
      var $3635=HEAP32[(($3634)>>2)];
      var $3636=$1;
      var $3637=_intern_gen2($3636, ((100444)|0), 4);
      var $3638=$yyvsp;
      var $3639=(($3638)|0);
      var $3640=$3639;
      var $3641=HEAP32[(($3640)>>2)];
      var $3642=_new_call($3631, $3635, $3637, $3641);
      var $3643=$yyval;
      HEAP32[(($3643)>>2)]=$3642;
      label = 543; break;
    case 422: 
      var $3645=$1;
      var $3646=$yyvsp;
      var $3647=((($3646)-(8))|0);
      var $3648=$3647;
      var $3649=HEAP32[(($3648)>>2)];
      var $3650=$1;
      var $3651=_intern_gen2($3650, ((100444)|0), 4);
      var $3652=$yyvsp;
      var $3653=(($3652)|0);
      var $3654=$3653;
      var $3655=HEAP32[(($3654)>>2)];
      var $3656=_new_call($3645, $3649, $3651, $3655);
      var $3657=$yyval;
      HEAP32[(($3657)>>2)]=$3656;
      label = 543; break;
    case 423: 
      var $3659=$1;
      var $3660=$yyvsp;
      var $3661=(($3660)|0);
      var $3662=$3661;
      var $3663=HEAP32[(($3662)>>2)];
      var $3664=_new_super($3659, $3663);
      var $3665=$yyval;
      HEAP32[(($3665)>>2)]=$3664;
      label = 543; break;
    case 424: 
      var $3667=$1;
      var $3668=_new_zsuper($3667);
      var $3669=$yyval;
      HEAP32[(($3669)>>2)]=$3668;
      label = 543; break;
    case 425: 
      var $3671=$1;
      var $3672=$yyvsp;
      var $3673=((($3672)-(12))|0);
      var $3674=$3673;
      var $3675=HEAP32[(($3674)>>2)];
      var $3676=$1;
      var $3677=_intern_gen2($3676, ((112316)|0), 2);
      var $3678=$yyvsp;
      var $3679=((($3678)-(4))|0);
      var $3680=$3679;
      var $3681=HEAP32[(($3680)>>2)];
      var $3682=_new_call($3671, $3675, $3677, $3681);
      var $3683=$yyval;
      HEAP32[(($3683)>>2)]=$3682;
      label = 543; break;
    case 426: 
      var $3685=$1;
      _local_nest($3685);
      label = 543; break;
    case 427: 
      var $3687=$1;
      var $3688=$yyvsp;
      var $3689=((($3688)-(8))|0);
      var $3690=$3689;
      var $3691=HEAP32[(($3690)>>2)];
      var $3692=$yyvsp;
      var $3693=((($3692)-(4))|0);
      var $3694=$3693;
      var $3695=HEAP32[(($3694)>>2)];
      var $3696=_new_block($3687, $3691, $3695);
      var $3697=$yyval;
      HEAP32[(($3697)>>2)]=$3696;
      var $3698=$1;
      _local_unnest($3698);
      label = 543; break;
    case 428: 
      var $3700=$1;
      _local_nest($3700);
      label = 543; break;
    case 429: 
      var $3702=$1;
      var $3703=$yyvsp;
      var $3704=((($3703)-(8))|0);
      var $3705=$3704;
      var $3706=HEAP32[(($3705)>>2)];
      var $3707=$yyvsp;
      var $3708=((($3707)-(4))|0);
      var $3709=$3708;
      var $3710=HEAP32[(($3709)>>2)];
      var $3711=_new_block($3702, $3706, $3710);
      var $3712=$yyval;
      HEAP32[(($3712)>>2)]=$3711;
      var $3713=$1;
      _local_unnest($3713);
      label = 543; break;
    case 430: 
      var $3715=$1;
      var $3716=$1;
      var $3717=$yyvsp;
      var $3718=((($3717)-(12))|0);
      var $3719=$3718;
      var $3720=HEAP32[(($3719)>>2)];
      var $3721=$yyvsp;
      var $3722=((($3721)-(4))|0);
      var $3723=$3722;
      var $3724=HEAP32[(($3723)>>2)];
      var $3725=_cons_gen($3716, $3720, $3724);
      var $3726=$yyvsp;
      var $3727=(($3726)|0);
      var $3728=$3727;
      var $3729=HEAP32[(($3728)>>2)];
      var $3730=_cons_gen($3715, $3725, $3729);
      var $3731=$yyval;
      HEAP32[(($3731)>>2)]=$3730;
      label = 543; break;
    case 431: 
      var $3733=$yyvsp;
      var $3734=(($3733)|0);
      var $3735=$3734;
      var $3736=HEAP32[(($3735)>>2)];
      var $3737=(($3736)|(0))!=0;
      if ($3737) { label = 432; break; } else { label = 433; break; }
    case 432: 
      var $3739=$1;
      var $3740=$1;
      var $3741=$yyvsp;
      var $3742=(($3741)|0);
      var $3743=$3742;
      var $3744=HEAP32[(($3743)>>2)];
      var $3745=_cons_gen($3740, 0, $3744);
      var $3746=_cons_gen($3739, $3745, 0);
      var $3747=$yyval;
      HEAP32[(($3747)>>2)]=$3746;
      label = 434; break;
    case 433: 
      var $3749=$yyval;
      HEAP32[(($3749)>>2)]=0;
      label = 434; break;
    case 434: 
      label = 543; break;
    case 435: 
      var $3752=$1;
      var $3753=$1;
      var $3754=$yyvsp;
      var $3755=((($3754)-(16))|0);
      var $3756=$3755;
      var $3757=HEAP32[(($3756)>>2)];
      var $3758=$yyvsp;
      var $3759=((($3758)-(12))|0);
      var $3760=$3759;
      var $3761=HEAP32[(($3760)>>2)];
      var $3762=$yyvsp;
      var $3763=((($3762)-(4))|0);
      var $3764=$3763;
      var $3765=HEAP32[(($3764)>>2)];
      var $3766=_list3_gen($3753, $3757, $3761, $3765);
      var $3767=_list1_gen($3752, $3766);
      var $3768=$yyval;
      HEAP32[(($3768)>>2)]=$3767;
      var $3769=$yyvsp;
      var $3770=(($3769)|0);
      var $3771=$3770;
      var $3772=HEAP32[(($3771)>>2)];
      var $3773=(($3772)|(0))!=0;
      if ($3773) { label = 436; break; } else { label = 437; break; }
    case 436: 
      var $3775=$1;
      var $3776=$yyval;
      var $3777=HEAP32[(($3776)>>2)];
      var $3778=$yyvsp;
      var $3779=(($3778)|0);
      var $3780=$3779;
      var $3781=HEAP32[(($3780)>>2)];
      var $3782=_append_gen($3775, $3777, $3781);
      var $3783=$yyval;
      HEAP32[(($3783)>>2)]=$3782;
      label = 437; break;
    case 437: 
      label = 543; break;
    case 438: 
      var $3786=$1;
      var $3787=$yyvsp;
      var $3788=(($3787)|0);
      var $3789=$3788;
      var $3790=HEAP32[(($3789)>>2)];
      var $3791=_list1_gen($3786, $3790);
      var $3792=$yyval;
      HEAP32[(($3792)>>2)]=$3791;
      label = 543; break;
    case 439: 
      var $3794=$yyvsp;
      var $3795=(($3794)|0);
      var $3796=$3795;
      var $3797=HEAP32[(($3796)>>2)];
      var $3798=$yyval;
      HEAP32[(($3798)>>2)]=$3797;
      label = 543; break;
    case 440: 
      var $3800=$yyvsp;
      var $3801=(($3800)|0);
      var $3802=$3801;
      var $3803=HEAP32[(($3802)>>2)];
      var $3804=$yyval;
      HEAP32[(($3804)>>2)]=$3803;
      label = 543; break;
    case 441: 
      var $3806=$yyvsp;
      var $3807=(($3806)|0);
      var $3808=$3807;
      var $3809=HEAP32[(($3808)>>2)];
      var $3810=$yyval;
      HEAP32[(($3810)>>2)]=$3809;
      label = 543; break;
    case 442: 
      var $3812=$1;
      var $3813=$1;
      var $3814=$yyvsp;
      var $3815=((($3814)-(4))|0);
      var $3816=$3815;
      var $3817=HEAP32[(($3816)>>2)];
      var $3818=$1;
      var $3819=$yyvsp;
      var $3820=(($3819)|0);
      var $3821=$3820;
      var $3822=HEAP32[(($3821)>>2)];
      var $3823=_list1_gen($3818, $3822);
      var $3824=_append_gen($3813, $3817, $3823);
      var $3825=_new_dstr($3812, $3824);
      var $3826=$yyval;
      HEAP32[(($3826)>>2)]=$3825;
      label = 543; break;
    case 443: 
      var $3828=$1;
      var $3829=$yyvsp;
      var $3830=((($3829)-(4))|0);
      var $3831=$3830;
      var $3832=HEAP32[(($3831)>>2)];
      var $3833=$yyvsp;
      var $3834=(($3833)|0);
      var $3835=$3834;
      var $3836=HEAP32[(($3835)>>2)];
      var $3837=_append_gen($3828, $3832, $3836);
      var $3838=$yyval;
      HEAP32[(($3838)>>2)]=$3837;
      label = 543; break;
    case 444: 
      var $3840=$1;
      var $3841=$yyvsp;
      var $3842=(($3841)|0);
      var $3843=$3842;
      var $3844=HEAP32[(($3843)>>2)];
      var $3845=_list1_gen($3840, $3844);
      var $3846=$yyval;
      HEAP32[(($3846)>>2)]=$3845;
      label = 543; break;
    case 445: 
      var $3848=$1;
      var $3849=(($3848+44)|0);
      var $3850=HEAP32[(($3849)>>2)];
      var $3851=$yyval;
      HEAP32[(($3851)>>2)]=$3850;
      var $3852=$1;
      var $3853=(($3852+44)|0);
      HEAP32[(($3853)>>2)]=0;
      label = 543; break;
    case 446: 
      var $3855=$yyvsp;
      var $3856=((($3855)-(8))|0);
      var $3857=$3856;
      var $3858=HEAP32[(($3857)>>2)];
      var $3859=$1;
      var $3860=(($3859+44)|0);
      HEAP32[(($3860)>>2)]=$3858;
      var $3861=$1;
      var $3862=$yyvsp;
      var $3863=((($3862)-(12))|0);
      var $3864=$3863;
      var $3865=HEAP32[(($3864)>>2)];
      var $3866=$yyvsp;
      var $3867=((($3866)-(4))|0);
      var $3868=$3867;
      var $3869=HEAP32[(($3868)>>2)];
      var $3870=_list2_gen($3861, $3865, $3869);
      var $3871=$yyval;
      HEAP32[(($3871)>>2)]=$3870;
      label = 543; break;
    case 447: 
      var $3873=$1;
      var $3874=$1;
      var $3875=_new_literal_delim($3874);
      var $3876=_list1_gen($3873, $3875);
      var $3877=$yyval;
      HEAP32[(($3877)>>2)]=$3876;
      label = 543; break;
    case 448: 
      var $3879=$yyvsp;
      var $3880=(($3879)|0);
      var $3881=$3880;
      var $3882=HEAP32[(($3881)>>2)];
      var $3883=$yyval;
      HEAP32[(($3883)>>2)]=$3882;
      label = 543; break;
    case 449: 
      var $3885=$1;
      var $3886=$1;
      var $3887=$yyvsp;
      var $3888=((($3887)-(4))|0);
      var $3889=$3888;
      var $3890=HEAP32[(($3889)>>2)];
      var $3891=$1;
      var $3892=$yyvsp;
      var $3893=(($3892)|0);
      var $3894=$3893;
      var $3895=HEAP32[(($3894)>>2)];
      var $3896=_list1_gen($3891, $3895);
      var $3897=_append_gen($3886, $3890, $3896);
      var $3898=_new_dxstr($3885, $3897);
      var $3899=$yyval;
      HEAP32[(($3899)>>2)]=$3898;
      label = 543; break;
    case 450: 
      var $3901=$yyvsp;
      var $3902=(($3901)|0);
      var $3903=$3902;
      var $3904=HEAP32[(($3903)>>2)];
      var $3905=$yyval;
      HEAP32[(($3905)>>2)]=$3904;
      label = 543; break;
    case 451: 
      var $3907=$1;
      var $3908=$yyvsp;
      var $3909=((($3908)-(4))|0);
      var $3910=$3909;
      var $3911=HEAP32[(($3910)>>2)];
      var $3912=$yyvsp;
      var $3913=(($3912)|0);
      var $3914=$3913;
      var $3915=HEAP32[(($3914)>>2)];
      var $3916=_new_dregx($3907, $3911, $3915);
      var $3917=$yyval;
      HEAP32[(($3917)>>2)]=$3916;
      label = 543; break;
    case 452: 
      var $3919=$1;
      var $3920=$1;
      var $3921=_new_str($3920, ((100264)|0), 0);
      var $3922=_list1_gen($3919, $3921);
      var $3923=$1;
      var $3924=_parsing_heredoc_inf($3923);
      var $3925=(($3924+16)|0);
      HEAP32[(($3925)>>2)]=$3922;
      var $3926=$1;
      _heredoc_end($3926);
      label = 543; break;
    case 453: 
      var $3928=$yyvsp;
      var $3929=((($3928)-(4))|0);
      var $3930=$3929;
      var $3931=HEAP32[(($3930)>>2)];
      var $3932=$1;
      var $3933=_parsing_heredoc_inf($3932);
      var $3934=(($3933+16)|0);
      HEAP32[(($3934)>>2)]=$3931;
      var $3935=$1;
      _heredoc_end($3935);
      label = 543; break;
    case 454: 
      var $3937=$1;
      var $3938=$1;
      var $3939=$yyvsp;
      var $3940=(($3939)|0);
      var $3941=$3940;
      var $3942=HEAP32[(($3941)>>2)];
      var $3943=_list1_gen($3938, $3942);
      var $3944=_new_words($3937, $3943);
      var $3945=$yyval;
      HEAP32[(($3945)>>2)]=$3944;
      label = 543; break;
    case 455: 
      var $3947=$1;
      var $3948=$1;
      var $3949=$yyvsp;
      var $3950=((($3949)-(4))|0);
      var $3951=$3950;
      var $3952=HEAP32[(($3951)>>2)];
      var $3953=$1;
      var $3954=$yyvsp;
      var $3955=(($3954)|0);
      var $3956=$3955;
      var $3957=HEAP32[(($3956)>>2)];
      var $3958=_list1_gen($3953, $3957);
      var $3959=_append_gen($3948, $3952, $3958);
      var $3960=_new_words($3947, $3959);
      var $3961=$yyval;
      HEAP32[(($3961)>>2)]=$3960;
      label = 543; break;
    case 456: 
      var $3963=$1;
      var $3964=$yyvsp;
      var $3965=(($3964)|0);
      var $3966=$3965;
      var $3967=HEAP16[(($3966)>>1)];
      var $3968=_new_sym($3963, $3967);
      var $3969=$yyval;
      HEAP32[(($3969)>>2)]=$3968;
      label = 543; break;
    case 457: 
      var $3971=$1;
      var $3972=(($3971+40)|0);
      HEAP32[(($3972)>>2)]=1;
      var $3973=$1;
      var $3974=$1;
      var $3975=$yyvsp;
      var $3976=((($3975)-(4))|0);
      var $3977=$3976;
      var $3978=HEAP32[(($3977)>>2)];
      var $3979=$1;
      var $3980=$yyvsp;
      var $3981=(($3980)|0);
      var $3982=$3981;
      var $3983=HEAP32[(($3982)>>2)];
      var $3984=_list1_gen($3979, $3983);
      var $3985=_append_gen($3974, $3978, $3984);
      var $3986=_new_dsym($3973, $3985);
      var $3987=$yyval;
      HEAP32[(($3987)>>2)]=$3986;
      label = 543; break;
    case 458: 
      var $3989=$1;
      var $3990=(($3989+40)|0);
      HEAP32[(($3990)>>2)]=1;
      var $3991=$yyvsp;
      var $3992=(($3991)|0);
      var $3993=$3992;
      var $3994=HEAP16[(($3993)>>1)];
      var $3995=$yyval;
      HEAP16[(($3995)>>1)]=$3994;
      label = 543; break;
    case 459: 
      var $3997=$1;
      var $3998=$yyvsp;
      var $3999=(($3998)|0);
      var $4000=$3999;
      var $4001=HEAP32[(($4000)>>2)];
      var $4002=_new_strsym($3997, $4001);
      var $4003=$yyval;
      HEAP16[(($4003)>>1)]=$4002;
      label = 543; break;
    case 460: 
      var $4005=$1;
      var $4006=$yyvsp;
      var $4007=(($4006)|0);
      var $4008=$4007;
      var $4009=HEAP32[(($4008)>>2)];
      var $4010=_new_strsym($4005, $4009);
      var $4011=$yyval;
      HEAP16[(($4011)>>1)]=$4010;
      label = 543; break;
    case 461: 
      var $4013=$1;
      var $4014=$1;
      var $4015=$yyvsp;
      var $4016=(($4015)|0);
      var $4017=$4016;
      var $4018=HEAP32[(($4017)>>2)];
      var $4019=_list1_gen($4014, $4018);
      var $4020=_new_symbols($4013, $4019);
      var $4021=$yyval;
      HEAP32[(($4021)>>2)]=$4020;
      label = 543; break;
    case 462: 
      var $4023=$1;
      var $4024=$1;
      var $4025=$yyvsp;
      var $4026=((($4025)-(4))|0);
      var $4027=$4026;
      var $4028=HEAP32[(($4027)>>2)];
      var $4029=$1;
      var $4030=$yyvsp;
      var $4031=(($4030)|0);
      var $4032=$4031;
      var $4033=HEAP32[(($4032)>>2)];
      var $4034=_list1_gen($4029, $4033);
      var $4035=_append_gen($4024, $4028, $4034);
      var $4036=_new_symbols($4023, $4035);
      var $4037=$yyval;
      HEAP32[(($4037)>>2)]=$4036;
      label = 543; break;
    case 463: 
      var $4039=$1;
      var $4040=$yyvsp;
      var $4041=(($4040)|0);
      var $4042=$4041;
      var $4043=HEAP32[(($4042)>>2)];
      var $4044=_negate_lit($4039, $4043);
      var $4045=$yyval;
      HEAP32[(($4045)>>2)]=$4044;
      label = 543; break;
    case 464: 
      var $4047=$1;
      var $4048=$yyvsp;
      var $4049=(($4048)|0);
      var $4050=$4049;
      var $4051=HEAP32[(($4050)>>2)];
      var $4052=_negate_lit($4047, $4051);
      var $4053=$yyval;
      HEAP32[(($4053)>>2)]=$4052;
      label = 543; break;
    case 465: 
      var $4055=$1;
      var $4056=$yyvsp;
      var $4057=(($4056)|0);
      var $4058=$4057;
      var $4059=HEAP16[(($4058)>>1)];
      var $4060=_new_lvar($4055, $4059);
      var $4061=$yyval;
      HEAP32[(($4061)>>2)]=$4060;
      label = 543; break;
    case 466: 
      var $4063=$1;
      var $4064=$yyvsp;
      var $4065=(($4064)|0);
      var $4066=$4065;
      var $4067=HEAP16[(($4066)>>1)];
      var $4068=_new_ivar($4063, $4067);
      var $4069=$yyval;
      HEAP32[(($4069)>>2)]=$4068;
      label = 543; break;
    case 467: 
      var $4071=$1;
      var $4072=$yyvsp;
      var $4073=(($4072)|0);
      var $4074=$4073;
      var $4075=HEAP16[(($4074)>>1)];
      var $4076=_new_gvar($4071, $4075);
      var $4077=$yyval;
      HEAP32[(($4077)>>2)]=$4076;
      label = 543; break;
    case 468: 
      var $4079=$1;
      var $4080=$yyvsp;
      var $4081=(($4080)|0);
      var $4082=$4081;
      var $4083=HEAP16[(($4082)>>1)];
      var $4084=_new_cvar($4079, $4083);
      var $4085=$yyval;
      HEAP32[(($4085)>>2)]=$4084;
      label = 543; break;
    case 469: 
      var $4087=$1;
      var $4088=$yyvsp;
      var $4089=(($4088)|0);
      var $4090=$4089;
      var $4091=HEAP16[(($4090)>>1)];
      var $4092=_new_const($4087, $4091);
      var $4093=$yyval;
      HEAP32[(($4093)>>2)]=$4092;
      label = 543; break;
    case 470: 
      var $4095=$1;
      var $4096=$yyvsp;
      var $4097=(($4096)|0);
      var $4098=$4097;
      var $4099=HEAP32[(($4098)>>2)];
      _assignable($4095, $4099);
      label = 543; break;
    case 471: 
      var $4101=$1;
      var $4102=$yyvsp;
      var $4103=(($4102)|0);
      var $4104=$4103;
      var $4105=HEAP32[(($4104)>>2)];
      var $4106=_var_reference($4101, $4105);
      var $4107=$yyval;
      HEAP32[(($4107)>>2)]=$4106;
      label = 543; break;
    case 472: 
      var $4109=$1;
      var $4110=_new_nil($4109);
      var $4111=$yyval;
      HEAP32[(($4111)>>2)]=$4110;
      label = 543; break;
    case 473: 
      var $4113=$1;
      var $4114=_new_self($4113);
      var $4115=$yyval;
      HEAP32[(($4115)>>2)]=$4114;
      label = 543; break;
    case 474: 
      var $4117=$1;
      var $4118=_new_true($4117);
      var $4119=$yyval;
      HEAP32[(($4119)>>2)]=$4118;
      label = 543; break;
    case 475: 
      var $4121=$1;
      var $4122=_new_false($4121);
      var $4123=$yyval;
      HEAP32[(($4123)>>2)]=$4122;
      label = 543; break;
    case 476: 
      var $4125=$1;
      var $4126=(($4125+28)|0);
      var $4127=HEAP32[(($4126)>>2)];
      var $4128=(($4127)|(0))!=0;
      if ($4128) { label = 478; break; } else { label = 477; break; }
    case 477: 
      var $4130=$1;
      var $4131=(($4130+28)|0);
      HEAP32[(($4131)>>2)]=((100072)|0);
      label = 478; break;
    case 478: 
      var $4133=$1;
      var $4134=$1;
      var $4135=(($4134+28)|0);
      var $4136=HEAP32[(($4135)>>2)];
      var $4137=$1;
      var $4138=(($4137+28)|0);
      var $4139=HEAP32[(($4138)>>2)];
      var $4140=_strlen($4139);
      var $4141=_new_str($4133, $4136, $4140);
      var $4142=$yyval;
      HEAP32[(($4142)>>2)]=$4141;
      label = 543; break;
    case 479: 
      var $4144=(($buf)|0);
      var $4145=$1;
      var $4146=(($4145+32)|0);
      var $4147=HEAP32[(($4146)>>2)];
      var $4148=_snprintf($4144, 16, ((99880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$4147,tempInt));
      var $4149=$1;
      var $4150=(($buf)|0);
      var $4151=_new_int($4149, $4150, 10);
      var $4152=$yyval;
      HEAP32[(($4152)>>2)]=$4151;
      label = 543; break;
    case 480: 
      var $4154=$yyval;
      HEAP32[(($4154)>>2)]=0;
      label = 543; break;
    case 481: 
      var $4156=$1;
      var $4157=(($4156+40)|0);
      HEAP32[(($4157)>>2)]=0;
      var $4158=$1;
      var $4159=(($4158+72)|0);
      HEAP32[(($4159)>>2)]=1;
      label = 543; break;
    case 482: 
      var $4161=$yyvsp;
      var $4162=((($4161)-(4))|0);
      var $4163=$4162;
      var $4164=HEAP32[(($4163)>>2)];
      var $4165=$yyval;
      HEAP32[(($4165)>>2)]=$4164;
      label = 543; break;
    case 483: 
      $yyerrstatus=0;
      var $4167=$yyval;
      HEAP32[(($4167)>>2)]=0;
      label = 543; break;
    case 484: 
      var $4169=$yyvsp;
      var $4170=((($4169)-(4))|0);
      var $4171=$4170;
      var $4172=HEAP32[(($4171)>>2)];
      var $4173=$yyval;
      HEAP32[(($4173)>>2)]=$4172;
      var $4174=$1;
      var $4175=(($4174+40)|0);
      HEAP32[(($4175)>>2)]=0;
      var $4176=$1;
      var $4177=(($4176+72)|0);
      HEAP32[(($4177)>>2)]=1;
      label = 543; break;
    case 485: 
      var $4179=$yyvsp;
      var $4180=((($4179)-(4))|0);
      var $4181=$4180;
      var $4182=HEAP32[(($4181)>>2)];
      var $4183=$yyval;
      HEAP32[(($4183)>>2)]=$4182;
      label = 543; break;
    case 486: 
      var $4185=$1;
      var $4186=$yyvsp;
      var $4187=((($4186)-(20))|0);
      var $4188=$4187;
      var $4189=HEAP32[(($4188)>>2)];
      var $4190=$yyvsp;
      var $4191=((($4190)-(12))|0);
      var $4192=$4191;
      var $4193=HEAP32[(($4192)>>2)];
      var $4194=$yyvsp;
      var $4195=((($4194)-(4))|0);
      var $4196=$4195;
      var $4197=HEAP16[(($4196)>>1)];
      var $4198=$yyvsp;
      var $4199=(($4198)|0);
      var $4200=$4199;
      var $4201=HEAP16[(($4200)>>1)];
      var $4202=_new_args($4185, $4189, $4193, $4197, 0, $4201);
      var $4203=$yyval;
      HEAP32[(($4203)>>2)]=$4202;
      label = 543; break;
    case 487: 
      var $4205=$1;
      var $4206=$yyvsp;
      var $4207=((($4206)-(28))|0);
      var $4208=$4207;
      var $4209=HEAP32[(($4208)>>2)];
      var $4210=$yyvsp;
      var $4211=((($4210)-(20))|0);
      var $4212=$4211;
      var $4213=HEAP32[(($4212)>>2)];
      var $4214=$yyvsp;
      var $4215=((($4214)-(12))|0);
      var $4216=$4215;
      var $4217=HEAP16[(($4216)>>1)];
      var $4218=$yyvsp;
      var $4219=((($4218)-(4))|0);
      var $4220=$4219;
      var $4221=HEAP32[(($4220)>>2)];
      var $4222=$yyvsp;
      var $4223=(($4222)|0);
      var $4224=$4223;
      var $4225=HEAP16[(($4224)>>1)];
      var $4226=_new_args($4205, $4209, $4213, $4217, $4221, $4225);
      var $4227=$yyval;
      HEAP32[(($4227)>>2)]=$4226;
      label = 543; break;
    case 488: 
      var $4229=$1;
      var $4230=$yyvsp;
      var $4231=((($4230)-(12))|0);
      var $4232=$4231;
      var $4233=HEAP32[(($4232)>>2)];
      var $4234=$yyvsp;
      var $4235=((($4234)-(4))|0);
      var $4236=$4235;
      var $4237=HEAP32[(($4236)>>2)];
      var $4238=$yyvsp;
      var $4239=(($4238)|0);
      var $4240=$4239;
      var $4241=HEAP16[(($4240)>>1)];
      var $4242=_new_args($4229, $4233, $4237, 0, 0, $4241);
      var $4243=$yyval;
      HEAP32[(($4243)>>2)]=$4242;
      label = 543; break;
    case 489: 
      var $4245=$1;
      var $4246=$yyvsp;
      var $4247=((($4246)-(20))|0);
      var $4248=$4247;
      var $4249=HEAP32[(($4248)>>2)];
      var $4250=$yyvsp;
      var $4251=((($4250)-(12))|0);
      var $4252=$4251;
      var $4253=HEAP32[(($4252)>>2)];
      var $4254=$yyvsp;
      var $4255=((($4254)-(4))|0);
      var $4256=$4255;
      var $4257=HEAP32[(($4256)>>2)];
      var $4258=$yyvsp;
      var $4259=(($4258)|0);
      var $4260=$4259;
      var $4261=HEAP16[(($4260)>>1)];
      var $4262=_new_args($4245, $4249, $4253, 0, $4257, $4261);
      var $4263=$yyval;
      HEAP32[(($4263)>>2)]=$4262;
      label = 543; break;
    case 490: 
      var $4265=$1;
      var $4266=$yyvsp;
      var $4267=((($4266)-(12))|0);
      var $4268=$4267;
      var $4269=HEAP32[(($4268)>>2)];
      var $4270=$yyvsp;
      var $4271=((($4270)-(4))|0);
      var $4272=$4271;
      var $4273=HEAP16[(($4272)>>1)];
      var $4274=$yyvsp;
      var $4275=(($4274)|0);
      var $4276=$4275;
      var $4277=HEAP16[(($4276)>>1)];
      var $4278=_new_args($4265, $4269, 0, $4273, 0, $4277);
      var $4279=$yyval;
      HEAP32[(($4279)>>2)]=$4278;
      label = 543; break;
    case 491: 
      var $4281=$1;
      var $4282=$yyvsp;
      var $4283=((($4282)-(20))|0);
      var $4284=$4283;
      var $4285=HEAP32[(($4284)>>2)];
      var $4286=$yyvsp;
      var $4287=((($4286)-(12))|0);
      var $4288=$4287;
      var $4289=HEAP16[(($4288)>>1)];
      var $4290=$yyvsp;
      var $4291=((($4290)-(4))|0);
      var $4292=$4291;
      var $4293=HEAP32[(($4292)>>2)];
      var $4294=$yyvsp;
      var $4295=(($4294)|0);
      var $4296=$4295;
      var $4297=HEAP16[(($4296)>>1)];
      var $4298=_new_args($4281, $4285, 0, $4289, $4293, $4297);
      var $4299=$yyval;
      HEAP32[(($4299)>>2)]=$4298;
      label = 543; break;
    case 492: 
      var $4301=$1;
      var $4302=$yyvsp;
      var $4303=((($4302)-(4))|0);
      var $4304=$4303;
      var $4305=HEAP32[(($4304)>>2)];
      var $4306=$yyvsp;
      var $4307=(($4306)|0);
      var $4308=$4307;
      var $4309=HEAP16[(($4308)>>1)];
      var $4310=_new_args($4301, $4305, 0, 0, 0, $4309);
      var $4311=$yyval;
      HEAP32[(($4311)>>2)]=$4310;
      label = 543; break;
    case 493: 
      var $4313=$1;
      var $4314=$yyvsp;
      var $4315=((($4314)-(12))|0);
      var $4316=$4315;
      var $4317=HEAP32[(($4316)>>2)];
      var $4318=$yyvsp;
      var $4319=((($4318)-(4))|0);
      var $4320=$4319;
      var $4321=HEAP16[(($4320)>>1)];
      var $4322=$yyvsp;
      var $4323=(($4322)|0);
      var $4324=$4323;
      var $4325=HEAP16[(($4324)>>1)];
      var $4326=_new_args($4313, 0, $4317, $4321, 0, $4325);
      var $4327=$yyval;
      HEAP32[(($4327)>>2)]=$4326;
      label = 543; break;
    case 494: 
      var $4329=$1;
      var $4330=$yyvsp;
      var $4331=((($4330)-(20))|0);
      var $4332=$4331;
      var $4333=HEAP32[(($4332)>>2)];
      var $4334=$yyvsp;
      var $4335=((($4334)-(12))|0);
      var $4336=$4335;
      var $4337=HEAP16[(($4336)>>1)];
      var $4338=$yyvsp;
      var $4339=((($4338)-(4))|0);
      var $4340=$4339;
      var $4341=HEAP32[(($4340)>>2)];
      var $4342=$yyvsp;
      var $4343=(($4342)|0);
      var $4344=$4343;
      var $4345=HEAP16[(($4344)>>1)];
      var $4346=_new_args($4329, 0, $4333, $4337, $4341, $4345);
      var $4347=$yyval;
      HEAP32[(($4347)>>2)]=$4346;
      label = 543; break;
    case 495: 
      var $4349=$1;
      var $4350=$yyvsp;
      var $4351=((($4350)-(4))|0);
      var $4352=$4351;
      var $4353=HEAP32[(($4352)>>2)];
      var $4354=$yyvsp;
      var $4355=(($4354)|0);
      var $4356=$4355;
      var $4357=HEAP16[(($4356)>>1)];
      var $4358=_new_args($4349, 0, $4353, 0, 0, $4357);
      var $4359=$yyval;
      HEAP32[(($4359)>>2)]=$4358;
      label = 543; break;
    case 496: 
      var $4361=$1;
      var $4362=$yyvsp;
      var $4363=((($4362)-(12))|0);
      var $4364=$4363;
      var $4365=HEAP32[(($4364)>>2)];
      var $4366=$yyvsp;
      var $4367=((($4366)-(4))|0);
      var $4368=$4367;
      var $4369=HEAP32[(($4368)>>2)];
      var $4370=$yyvsp;
      var $4371=(($4370)|0);
      var $4372=$4371;
      var $4373=HEAP16[(($4372)>>1)];
      var $4374=_new_args($4361, 0, $4365, 0, $4369, $4373);
      var $4375=$yyval;
      HEAP32[(($4375)>>2)]=$4374;
      label = 543; break;
    case 497: 
      var $4377=$1;
      var $4378=$yyvsp;
      var $4379=((($4378)-(4))|0);
      var $4380=$4379;
      var $4381=HEAP16[(($4380)>>1)];
      var $4382=$yyvsp;
      var $4383=(($4382)|0);
      var $4384=$4383;
      var $4385=HEAP16[(($4384)>>1)];
      var $4386=_new_args($4377, 0, 0, $4381, 0, $4385);
      var $4387=$yyval;
      HEAP32[(($4387)>>2)]=$4386;
      label = 543; break;
    case 498: 
      var $4389=$1;
      var $4390=$yyvsp;
      var $4391=((($4390)-(12))|0);
      var $4392=$4391;
      var $4393=HEAP16[(($4392)>>1)];
      var $4394=$yyvsp;
      var $4395=((($4394)-(4))|0);
      var $4396=$4395;
      var $4397=HEAP32[(($4396)>>2)];
      var $4398=$yyvsp;
      var $4399=(($4398)|0);
      var $4400=$4399;
      var $4401=HEAP16[(($4400)>>1)];
      var $4402=_new_args($4389, 0, 0, $4393, $4397, $4401);
      var $4403=$yyval;
      HEAP32[(($4403)>>2)]=$4402;
      label = 543; break;
    case 499: 
      var $4405=$1;
      var $4406=$yyvsp;
      var $4407=(($4406)|0);
      var $4408=$4407;
      var $4409=HEAP16[(($4408)>>1)];
      var $4410=_new_args($4405, 0, 0, 0, 0, $4409);
      var $4411=$yyval;
      HEAP32[(($4411)>>2)]=$4410;
      label = 543; break;
    case 500: 
      var $4413=$1;
      _local_add_f($4413, 0);
      var $4414=$1;
      var $4415=_new_args($4414, 0, 0, 0, 0, 0);
      var $4416=$yyval;
      HEAP32[(($4416)>>2)]=$4415;
      label = 543; break;
    case 501: 
      var $4418=$1;
      _yyerror($4418, ((99636)|0));
      var $4419=$yyval;
      HEAP32[(($4419)>>2)]=0;
      label = 543; break;
    case 502: 
      var $4421=$1;
      _yyerror($4421, ((99388)|0));
      var $4422=$yyval;
      HEAP32[(($4422)>>2)]=0;
      label = 543; break;
    case 503: 
      var $4424=$1;
      _yyerror($4424, ((99100)|0));
      var $4425=$yyval;
      HEAP32[(($4425)>>2)]=0;
      label = 543; break;
    case 504: 
      var $4427=$1;
      _yyerror($4427, ((98624)|0));
      var $4428=$yyval;
      HEAP32[(($4428)>>2)]=0;
      label = 543; break;
    case 505: 
      var $4430=$yyval;
      HEAP16[(($4430)>>1)]=0;
      label = 543; break;
    case 506: 
      var $4432=$1;
      var $4433=$yyvsp;
      var $4434=(($4433)|0);
      var $4435=$4434;
      var $4436=HEAP16[(($4435)>>1)];
      _local_add_f($4432, $4436);
      var $4437=$yyvsp;
      var $4438=(($4437)|0);
      var $4439=$4438;
      var $4440=HEAP16[(($4439)>>1)];
      var $4441=$yyval;
      HEAP16[(($4441)>>1)]=$4440;
      label = 543; break;
    case 507: 
      var $4443=$1;
      var $4444=$yyvsp;
      var $4445=(($4444)|0);
      var $4446=$4445;
      var $4447=HEAP16[(($4446)>>1)];
      var $4448=_new_arg($4443, $4447);
      var $4449=$yyval;
      HEAP32[(($4449)>>2)]=$4448;
      label = 543; break;
    case 508: 
      var $4451=$1;
      var $4452=$yyvsp;
      var $4453=((($4452)-(4))|0);
      var $4454=$4453;
      var $4455=HEAP32[(($4454)>>2)];
      var $4456=_new_masgn($4451, $4455, 0);
      var $4457=$yyval;
      HEAP32[(($4457)>>2)]=$4456;
      label = 543; break;
    case 509: 
      var $4459=$1;
      var $4460=$yyvsp;
      var $4461=(($4460)|0);
      var $4462=$4461;
      var $4463=HEAP32[(($4462)>>2)];
      var $4464=_list1_gen($4459, $4463);
      var $4465=$yyval;
      HEAP32[(($4465)>>2)]=$4464;
      label = 543; break;
    case 510: 
      var $4467=$1;
      var $4468=$yyvsp;
      var $4469=((($4468)-(8))|0);
      var $4470=$4469;
      var $4471=HEAP32[(($4470)>>2)];
      var $4472=$1;
      var $4473=$yyvsp;
      var $4474=(($4473)|0);
      var $4475=$4474;
      var $4476=HEAP32[(($4475)>>2)];
      var $4477=_list1_gen($4472, $4476);
      var $4478=_append_gen($4467, $4471, $4477);
      var $4479=$yyval;
      HEAP32[(($4479)>>2)]=$4478;
      label = 543; break;
    case 511: 
      var $4481=$1;
      var $4482=$yyvsp;
      var $4483=((($4482)-(8))|0);
      var $4484=$4483;
      var $4485=HEAP16[(($4484)>>1)];
      _local_add_f($4481, $4485);
      var $4486=$1;
      var $4487=$yyvsp;
      var $4488=((($4487)-(8))|0);
      var $4489=$4488;
      var $4490=HEAP16[(($4489)>>1)];
      var $4491=(($4490 << 16) >> 16);
      var $4492=$4491;
      var $4493=$yyvsp;
      var $4494=(($4493)|0);
      var $4495=$4494;
      var $4496=HEAP32[(($4495)>>2)];
      var $4497=_cons_gen($4486, $4492, $4496);
      var $4498=$yyval;
      HEAP32[(($4498)>>2)]=$4497;
      label = 543; break;
    case 512: 
      var $4500=$1;
      var $4501=$yyvsp;
      var $4502=((($4501)-(8))|0);
      var $4503=$4502;
      var $4504=HEAP16[(($4503)>>1)];
      _local_add_f($4500, $4504);
      var $4505=$1;
      var $4506=$yyvsp;
      var $4507=((($4506)-(8))|0);
      var $4508=$4507;
      var $4509=HEAP16[(($4508)>>1)];
      var $4510=(($4509 << 16) >> 16);
      var $4511=$4510;
      var $4512=$yyvsp;
      var $4513=(($4512)|0);
      var $4514=$4513;
      var $4515=HEAP32[(($4514)>>2)];
      var $4516=_cons_gen($4505, $4511, $4515);
      var $4517=$yyval;
      HEAP32[(($4517)>>2)]=$4516;
      label = 543; break;
    case 513: 
      var $4519=$1;
      var $4520=$yyvsp;
      var $4521=(($4520)|0);
      var $4522=$4521;
      var $4523=HEAP32[(($4522)>>2)];
      var $4524=_list1_gen($4519, $4523);
      var $4525=$yyval;
      HEAP32[(($4525)>>2)]=$4524;
      label = 543; break;
    case 514: 
      var $4527=$1;
      var $4528=$yyvsp;
      var $4529=((($4528)-(8))|0);
      var $4530=$4529;
      var $4531=HEAP32[(($4530)>>2)];
      var $4532=$1;
      var $4533=$yyvsp;
      var $4534=(($4533)|0);
      var $4535=$4534;
      var $4536=HEAP32[(($4535)>>2)];
      var $4537=_list1_gen($4532, $4536);
      var $4538=_append_gen($4527, $4531, $4537);
      var $4539=$yyval;
      HEAP32[(($4539)>>2)]=$4538;
      label = 543; break;
    case 515: 
      var $4541=$1;
      var $4542=$yyvsp;
      var $4543=(($4542)|0);
      var $4544=$4543;
      var $4545=HEAP32[(($4544)>>2)];
      var $4546=_list1_gen($4541, $4545);
      var $4547=$yyval;
      HEAP32[(($4547)>>2)]=$4546;
      label = 543; break;
    case 516: 
      var $4549=$1;
      var $4550=$yyvsp;
      var $4551=((($4550)-(8))|0);
      var $4552=$4551;
      var $4553=HEAP32[(($4552)>>2)];
      var $4554=$1;
      var $4555=$yyvsp;
      var $4556=(($4555)|0);
      var $4557=$4556;
      var $4558=HEAP32[(($4557)>>2)];
      var $4559=_list1_gen($4554, $4558);
      var $4560=_append_gen($4549, $4553, $4559);
      var $4561=$yyval;
      HEAP32[(($4561)>>2)]=$4560;
      label = 543; break;
    case 517: 
      var $4563=$1;
      var $4564=$yyvsp;
      var $4565=(($4564)|0);
      var $4566=$4565;
      var $4567=HEAP16[(($4566)>>1)];
      _local_add_f($4563, $4567);
      var $4568=$yyvsp;
      var $4569=(($4568)|0);
      var $4570=$4569;
      var $4571=HEAP16[(($4570)>>1)];
      var $4572=$yyval;
      HEAP16[(($4572)>>1)]=$4571;
      label = 543; break;
    case 518: 
      var $4574=$1;
      _local_add_f($4574, 0);
      var $4575=$yyval;
      HEAP16[(($4575)>>1)]=-1;
      label = 543; break;
    case 519: 
      var $4577=$1;
      var $4578=$yyvsp;
      var $4579=(($4578)|0);
      var $4580=$4579;
      var $4581=HEAP16[(($4580)>>1)];
      _local_add_f($4577, $4581);
      var $4582=$yyvsp;
      var $4583=(($4582)|0);
      var $4584=$4583;
      var $4585=HEAP16[(($4584)>>1)];
      var $4586=$yyval;
      HEAP16[(($4586)>>1)]=$4585;
      label = 543; break;
    case 520: 
      var $4588=$yyvsp;
      var $4589=(($4588)|0);
      var $4590=$4589;
      var $4591=HEAP16[(($4590)>>1)];
      var $4592=$yyval;
      HEAP16[(($4592)>>1)]=$4591;
      label = 543; break;
    case 521: 
      var $4594=$1;
      _local_add_f($4594, 0);
      var $4595=$yyval;
      HEAP16[(($4595)>>1)]=0;
      label = 543; break;
    case 522: 
      var $4597=$yyvsp;
      var $4598=(($4597)|0);
      var $4599=$4598;
      var $4600=HEAP32[(($4599)>>2)];
      var $4601=$yyval;
      HEAP32[(($4601)>>2)]=$4600;
      var $4602=$yyval;
      var $4603=HEAP32[(($4602)>>2)];
      var $4604=(($4603)|(0))!=0;
      if ($4604) { label = 524; break; } else { label = 523; break; }
    case 523: 
      var $4606=$1;
      var $4607=_new_nil($4606);
      var $4608=$yyval;
      HEAP32[(($4608)>>2)]=$4607;
      label = 524; break;
    case 524: 
      label = 543; break;
    case 525: 
      var $4611=$1;
      var $4612=(($4611+40)|0);
      HEAP32[(($4612)>>2)]=0;
      label = 543; break;
    case 526: 
      var $4614=$yyvsp;
      var $4615=((($4614)-(4))|0);
      var $4616=$4615;
      var $4617=HEAP32[(($4616)>>2)];
      var $4618=(($4617)|(0))==0;
      if ($4618) { label = 527; break; } else { label = 528; break; }
    case 527: 
      var $4620=$1;
      _yyerror($4620, ((98380)|0));
      label = 532; break;
    case 528: 
      var $4622=$yyvsp;
      var $4623=((($4622)-(4))|0);
      var $4624=$4623;
      var $4625=HEAP32[(($4624)>>2)];
      var $4626=(($4625)|0);
      var $4627=HEAP32[(($4626)>>2)];
      var $4628=$4627;
      if ((($4628)|(0))==55 | (($4628)|(0))==56 | (($4628)|(0))==57 | (($4628)|(0))==58 | (($4628)|(0))==60 | (($4628)|(0))==47 | (($4628)|(0))==51 | (($4628)|(0))==34 | (($4628)|(0))==99) {
        label = 529; break;
      }
      else {
      label = 530; break;
      }
    case 529: 
      var $4630=$1;
      _yyerror($4630, ((98108)|0));
      label = 530; break;
    case 530: 
      label = 531; break;
    case 531: 
      label = 532; break;
    case 532: 
      var $4634=$yyvsp;
      var $4635=((($4634)-(4))|0);
      var $4636=$4635;
      var $4637=HEAP32[(($4636)>>2)];
      var $4638=$yyval;
      HEAP32[(($4638)>>2)]=$4637;
      label = 543; break;
    case 533: 
      var $4640=$yyvsp;
      var $4641=((($4640)-(4))|0);
      var $4642=$4641;
      var $4643=HEAP32[(($4642)>>2)];
      var $4644=$yyval;
      HEAP32[(($4644)>>2)]=$4643;
      label = 543; break;
    case 534: 
      var $4646=$1;
      var $4647=$yyvsp;
      var $4648=(($4647)|0);
      var $4649=$4648;
      var $4650=HEAP32[(($4649)>>2)];
      var $4651=_list1_gen($4646, $4650);
      var $4652=$yyval;
      HEAP32[(($4652)>>2)]=$4651;
      label = 543; break;
    case 535: 
      var $4654=$1;
      var $4655=$yyvsp;
      var $4656=((($4655)-(8))|0);
      var $4657=$4656;
      var $4658=HEAP32[(($4657)>>2)];
      var $4659=$1;
      var $4660=$yyvsp;
      var $4661=(($4660)|0);
      var $4662=$4661;
      var $4663=HEAP32[(($4662)>>2)];
      var $4664=_list1_gen($4659, $4663);
      var $4665=_append_gen($4654, $4658, $4664);
      var $4666=$yyval;
      HEAP32[(($4666)>>2)]=$4665;
      label = 543; break;
    case 536: 
      var $4668=$1;
      var $4669=$yyvsp;
      var $4670=((($4669)-(8))|0);
      var $4671=$4670;
      var $4672=HEAP32[(($4671)>>2)];
      var $4673=$yyvsp;
      var $4674=(($4673)|0);
      var $4675=$4674;
      var $4676=HEAP32[(($4675)>>2)];
      var $4677=_cons_gen($4668, $4672, $4676);
      var $4678=$yyval;
      HEAP32[(($4678)>>2)]=$4677;
      label = 543; break;
    case 537: 
      var $4680=$1;
      var $4681=$1;
      var $4682=$yyvsp;
      var $4683=((($4682)-(4))|0);
      var $4684=$4683;
      var $4685=HEAP16[(($4684)>>1)];
      var $4686=_new_sym($4681, $4685);
      var $4687=$yyvsp;
      var $4688=(($4687)|0);
      var $4689=$4688;
      var $4690=HEAP32[(($4689)>>2)];
      var $4691=_cons_gen($4680, $4686, $4690);
      var $4692=$yyval;
      HEAP32[(($4692)>>2)]=$4691;
      label = 543; break;
    case 538: 
      $yyerrstatus=0;
      label = 543; break;
    case 539: 
      var $4695=$1;
      var $4696=(($4695+32)|0);
      var $4697=HEAP32[(($4696)>>2)];
      var $4698=((($4697)+(1))|0);
      HEAP32[(($4696)>>2)]=$4698;
      var $4699=$1;
      var $4700=(($4699+36)|0);
      HEAP32[(($4700)>>2)]=0;
      label = 543; break;
    case 540: 
      $yyerrstatus=0;
      label = 543; break;
    case 541: 
      var $4703=$yyval;
      HEAP32[(($4703)>>2)]=0;
      label = 543; break;
    case 542: 
      label = 543; break;
    case 543: 
      label = 544; break;
    case 544: 
      var $4707=HEAP32[((37036)>>2)];
      var $4708=(($4707)|(0))!=0;
      if ($4708) { label = 545; break; } else { label = 546; break; }
    case 545: 
      var $4710=HEAP32[((_stderr)>>2)];
      var $4711=_fprintf($4710, ((98980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((97896)|0),tempInt));
      var $4712=HEAP32[((_stderr)>>2)];
      var $4713=$yyn;
      var $4714=((30412+($4713<<1))|0);
      var $4715=HEAP16[(($4714)>>1)];
      var $4716=(($4715)&(65535));
      var $4717=$1;
      _yy_symbol_print($4712, $4716, $yyval, $4717);
      var $4718=HEAP32[((_stderr)>>2)];
      var $4719=_fprintf($4718, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 546; break;
    case 546: 
      label = 547; break;
    case 547: 
      var $4722=$yylen;
      var $4723=$yyvsp;
      var $4724=(((-$4722))|0);
      var $4725=(($4723+($4724<<2))|0);
      $yyvsp=$4725;
      var $4726=$yylen;
      var $4727=$yyssp;
      var $4728=(((-$4726))|0);
      var $4729=(($4727+($4728<<1))|0);
      $yyssp=$4729;
      $yylen=0;
      label = 548; break;
    case 548: 
      var $4731=HEAP32[((37036)>>2)];
      var $4732=(($4731)|(0))!=0;
      if ($4732) { label = 549; break; } else { label = 550; break; }
    case 549: 
      var $4734=$yyss;
      var $4735=$yyssp;
      _yy_stack_print($4734, $4735);
      label = 550; break;
    case 550: 
      label = 551; break;
    case 551: 
      var $4738=$yyvsp;
      var $4739=(($4738+4)|0);
      $yyvsp=$4739;
      var $4740=$4739;
      var $4741=$yyval;
      assert(4 % 1 === 0);HEAP32[(($4740)>>2)]=HEAP32[(($4741)>>2)];
      var $4742=$yyn;
      var $4743=((30412+($4742<<1))|0);
      var $4744=HEAP16[(($4743)>>1)];
      var $4745=(($4744)&(65535));
      $yyn=$4745;
      var $4746=$yyn;
      var $4747=((($4746)-(151))|0);
      var $4748=((32596+($4747<<1))|0);
      var $4749=HEAP16[(($4748)>>1)];
      var $4750=(($4749 << 16) >> 16);
      var $4751=$yyssp;
      var $4752=HEAP16[(($4751)>>1)];
      var $4753=(($4752 << 16) >> 16);
      var $4754=((($4750)+($4753))|0);
      $yystate=$4754;
      var $4755=$yystate;
      var $4756=0 <= (($4755)|(0));
      if ($4756) { label = 552; break; } else { label = 555; break; }
    case 552: 
      var $4758=$yystate;
      var $4759=(($4758)|(0)) <= 10895;
      if ($4759) { label = 553; break; } else { label = 555; break; }
    case 553: 
      var $4761=$yystate;
      var $4762=((37040+($4761<<1))|0);
      var $4763=HEAP16[(($4762)>>1)];
      var $4764=(($4763 << 16) >> 16);
      var $4765=$yyssp;
      var $4766=HEAP16[(($4765)>>1)];
      var $4767=(($4766 << 16) >> 16);
      var $4768=(($4764)|(0))==(($4767)|(0));
      if ($4768) { label = 554; break; } else { label = 555; break; }
    case 554: 
      var $4770=$yystate;
      var $4771=((1608+($4770<<1))|0);
      var $4772=HEAP16[(($4771)>>1)];
      var $4773=(($4772 << 16) >> 16);
      $yystate=$4773;
      label = 556; break;
    case 555: 
      var $4775=$yyn;
      var $4776=((($4775)-(151))|0);
      var $4777=((34816+($4776<<1))|0);
      var $4778=HEAP16[(($4777)>>1)];
      var $4779=(($4778 << 16) >> 16);
      $yystate=$4779;
      label = 556; break;
    case 556: 
      label = 6; break;
    case 557: 
      var $4782=$yyerrstatus;
      var $4783=(($4782)|(0))!=0;
      if ($4783) { label = 576; break; } else { label = 558; break; }
    case 558: 
      var $4785=$yynerrs;
      var $4786=((($4785)+(1))|0);
      $yynerrs=$4786;
      var $4787=$yystate;
      var $4788=$yychar;
      var $4789=_yysyntax_error(0, $4787, $4788);
      $yysize2=$4789;
      var $4790=$yymsg_alloc;
      var $4791=$yysize2;
      var $4792=(($4790)>>>(0)) < (($4791)>>>(0));
      if ($4792) { label = 559; break; } else { label = 569; break; }
    case 559: 
      var $4794=$yymsg_alloc;
      var $4795=(($4794)>>>(0)) < 4294967295;
      if ($4795) { label = 560; break; } else { label = 569; break; }
    case 560: 
      var $4797=$yysize2;
      var $4798=($4797<<1);
      $yyalloc=$4798;
      var $4799=$yysize2;
      var $4800=$yyalloc;
      var $4801=(($4799)>>>(0)) <= (($4800)>>>(0));
      if ($4801) { label = 561; break; } else { label = 562; break; }
    case 561: 
      var $4803=$yyalloc;
      var $4804=(($4803)>>>(0)) <= 4294967295;
      if ($4804) { label = 563; break; } else { label = 562; break; }
    case 562: 
      $yyalloc=-1;
      label = 563; break;
    case 563: 
      var $4807=$yymsg;
      var $4808=(($yymsgbuf)|0);
      var $4809=(($4807)|(0))!=(($4808)|(0));
      if ($4809) { label = 564; break; } else { label = 565; break; }
    case 564: 
      var $4811=$1;
      var $4812=(($4811)|0);
      var $4813=HEAP32[(($4812)>>2)];
      var $4814=$yymsg;
      _mrb_free($4813, $4814);
      label = 565; break;
    case 565: 
      var $4816=$1;
      var $4817=(($4816)|0);
      var $4818=HEAP32[(($4817)>>2)];
      var $4819=$yyalloc;
      var $4820=_mrb_malloc($4818, $4819);
      $yymsg=$4820;
      var $4821=$yymsg;
      var $4822=(($4821)|(0))!=0;
      if ($4822) { label = 566; break; } else { label = 567; break; }
    case 566: 
      var $4824=$yyalloc;
      $yymsg_alloc=$4824;
      label = 568; break;
    case 567: 
      var $4826=(($yymsgbuf)|0);
      $yymsg=$4826;
      $yymsg_alloc=128;
      label = 568; break;
    case 568: 
      label = 569; break;
    case 569: 
      var $4829=$yysize2;
      var $4830=0 < (($4829)>>>(0));
      if ($4830) { label = 570; break; } else { label = 572; break; }
    case 570: 
      var $4832=$yysize2;
      var $4833=$yymsg_alloc;
      var $4834=(($4832)>>>(0)) <= (($4833)>>>(0));
      if ($4834) { label = 571; break; } else { label = 572; break; }
    case 571: 
      var $4836=$yymsg;
      var $4837=$yystate;
      var $4838=$yychar;
      var $4839=_yysyntax_error($4836, $4837, $4838);
      var $4840=$1;
      var $4841=$yymsg;
      _yyerror($4840, $4841);
      label = 575; break;
    case 572: 
      var $4843=$1;
      _yyerror($4843, ((97672)|0));
      var $4844=$yysize2;
      var $4845=(($4844)|(0))!=0;
      if ($4845) { label = 573; break; } else { label = 574; break; }
    case 573: 
      label = 611; break;
    case 574: 
      label = 575; break;
    case 575: 
      label = 576; break;
    case 576: 
      var $4850=$yyerrstatus;
      var $4851=(($4850)|(0))==3;
      if ($4851) { label = 577; break; } else { label = 583; break; }
    case 577: 
      var $4853=$yychar;
      var $4854=(($4853)|(0)) <= 0;
      if ($4854) { label = 578; break; } else { label = 581; break; }
    case 578: 
      var $4856=$yychar;
      var $4857=(($4856)|(0))==0;
      if ($4857) { label = 579; break; } else { label = 580; break; }
    case 579: 
      label = 610; break;
    case 580: 
      label = 582; break;
    case 581: 
      var $4861=$yytoken;
      var $4862=$1;
      _yydestruct(((97452)|0), $4861, $yylval, $4862);
      $yychar=-2;
      label = 582; break;
    case 582: 
      label = 583; break;
    case 583: 
      label = 588; break;
    case 584: 
      var $4875=HEAP32[((37036)>>2)];
      var $4876=(($4875)|(0))!=0;
      if ($4876) { label = 585; break; } else { label = 586; break; }
    case 585: 
      var $4878=$yyss;
      var $4879=$yyssp;
      _yy_stack_print($4878, $4879);
      label = 586; break;
    case 586: 
      label = 587; break;
    case 587: 
      var $4882=$yyssp;
      var $4883=HEAP16[(($4882)>>1)];
      var $4884=(($4883 << 16) >> 16);
      $yystate=$4884;
      label = 588; break;
    case 588: 
      $yyerrstatus=3;
      label = 589; break;
    case 589: 
      var $4887=$yystate;
      var $4888=((32904+($4887<<1))|0);
      var $4889=HEAP16[(($4888)>>1)];
      var $4890=(($4889 << 16) >> 16);
      $yyn=$4890;
      var $4891=$yyn;
      var $4892=(($4891)|(0))!=-745;
      if ($4892) { label = 590; break; } else { label = 597; break; }
    case 590: 
      var $4894=$yyn;
      var $4895=((($4894)+(1))|0);
      $yyn=$4895;
      var $4896=$yyn;
      var $4897=0 <= (($4896)|(0));
      if ($4897) { label = 591; break; } else { label = 596; break; }
    case 591: 
      var $4899=$yyn;
      var $4900=(($4899)|(0)) <= 10895;
      if ($4900) { label = 592; break; } else { label = 596; break; }
    case 592: 
      var $4902=$yyn;
      var $4903=((37040+($4902<<1))|0);
      var $4904=HEAP16[(($4903)>>1)];
      var $4905=(($4904 << 16) >> 16);
      var $4906=(($4905)|(0))==1;
      if ($4906) { label = 593; break; } else { label = 596; break; }
    case 593: 
      var $4908=$yyn;
      var $4909=((1608+($4908<<1))|0);
      var $4910=HEAP16[(($4909)>>1)];
      var $4911=(($4910 << 16) >> 16);
      $yyn=$4911;
      var $4912=$yyn;
      var $4913=0 < (($4912)|(0));
      if ($4913) { label = 594; break; } else { label = 595; break; }
    case 594: 
      label = 604; break;
    case 595: 
      label = 596; break;
    case 596: 
      label = 597; break;
    case 597: 
      var $4918=$yyssp;
      var $4919=$yyss;
      var $4920=(($4918)|(0))==(($4919)|(0));
      if ($4920) { label = 598; break; } else { label = 599; break; }
    case 598: 
      label = 610; break;
    case 599: 
      var $4923=$yystate;
      var $4924=((23452+($4923<<1))|0);
      var $4925=HEAP16[(($4924)>>1)];
      var $4926=(($4925)&(65535));
      var $4927=$yyvsp;
      var $4928=$1;
      _yydestruct(((97316)|0), $4926, $4927, $4928);
      var $4929=$yyvsp;
      var $4930=((($4929)-(4))|0);
      $yyvsp=$4930;
      var $4931=$yyssp;
      var $4932=((($4931)-(2))|0);
      $yyssp=$4932;
      var $4933=$yyssp;
      var $4934=HEAP16[(($4933)>>1)];
      var $4935=(($4934 << 16) >> 16);
      $yystate=$4935;
      label = 600; break;
    case 600: 
      var $4937=HEAP32[((37036)>>2)];
      var $4938=(($4937)|(0))!=0;
      if ($4938) { label = 601; break; } else { label = 602; break; }
    case 601: 
      var $4940=$yyss;
      var $4941=$yyssp;
      _yy_stack_print($4940, $4941);
      label = 602; break;
    case 602: 
      label = 603; break;
    case 603: 
      label = 589; break;
    case 604: 
      var $4945=$yyvsp;
      var $4946=(($4945+4)|0);
      $yyvsp=$4946;
      var $4947=$4946;
      var $4948=$yylval;
      assert(4 % 1 === 0);HEAP32[(($4947)>>2)]=HEAP32[(($4948)>>2)];
      label = 605; break;
    case 605: 
      var $4950=HEAP32[((37036)>>2)];
      var $4951=(($4950)|(0))!=0;
      if ($4951) { label = 606; break; } else { label = 607; break; }
    case 606: 
      var $4953=HEAP32[((_stderr)>>2)];
      var $4954=_fprintf($4953, ((98980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=((94696)|0),tempInt));
      var $4955=HEAP32[((_stderr)>>2)];
      var $4956=$yyn;
      var $4957=((23452+($4956<<1))|0);
      var $4958=HEAP16[(($4957)>>1)];
      var $4959=(($4958)&(65535));
      var $4960=$yyvsp;
      var $4961=$1;
      _yy_symbol_print($4955, $4959, $4960, $4961);
      var $4962=HEAP32[((_stderr)>>2)];
      var $4963=_fprintf($4962, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 607; break;
    case 607: 
      label = 608; break;
    case 608: 
      var $4966=$yyn;
      $yystate=$4966;
      label = 6; break;
    case 609: 
      $yyresult=0;
      label = 612; break;
    case 610: 
      $yyresult=1;
      label = 612; break;
    case 611: 
      var $4970=$1;
      _yyerror($4970, ((97244)|0));
      $yyresult=2;
      label = 612; break;
    case 612: 
      var $4972=$yychar;
      var $4973=(($4972)|(0))!=-2;
      if ($4973) { label = 613; break; } else { label = 614; break; }
    case 613: 
      var $4975=$yytoken;
      var $4976=$1;
      _yydestruct(((97112)|0), $4975, $yylval, $4976);
      label = 614; break;
    case 614: 
      var $4978=$yylen;
      var $4979=$yyvsp;
      var $4980=(((-$4978))|0);
      var $4981=(($4979+($4980<<2))|0);
      $yyvsp=$4981;
      var $4982=$yylen;
      var $4983=$yyssp;
      var $4984=(((-$4982))|0);
      var $4985=(($4983+($4984<<1))|0);
      $yyssp=$4985;
      label = 615; break;
    case 615: 
      var $4987=HEAP32[((37036)>>2)];
      var $4988=(($4987)|(0))!=0;
      if ($4988) { label = 616; break; } else { label = 617; break; }
    case 616: 
      var $4990=$yyss;
      var $4991=$yyssp;
      _yy_stack_print($4990, $4991);
      label = 617; break;
    case 617: 
      label = 618; break;
    case 618: 
      label = 619; break;
    case 619: 
      var $4995=$yyssp;
      var $4996=$yyss;
      var $4997=(($4995)|(0))!=(($4996)|(0));
      if ($4997) { label = 620; break; } else { label = 621; break; }
    case 620: 
      var $4999=$yyssp;
      var $5000=HEAP16[(($4999)>>1)];
      var $5001=(($5000 << 16) >> 16);
      var $5002=((23452+($5001<<1))|0);
      var $5003=HEAP16[(($5002)>>1)];
      var $5004=(($5003)&(65535));
      var $5005=$yyvsp;
      var $5006=$1;
      _yydestruct(((96992)|0), $5004, $5005, $5006);
      var $5007=$yyvsp;
      var $5008=((($5007)-(4))|0);
      $yyvsp=$5008;
      var $5009=$yyssp;
      var $5010=((($5009)-(2))|0);
      $yyssp=$5010;
      label = 619; break;
    case 621: 
      var $5012=$yyss;
      var $5013=(($yyssa)|0);
      var $5014=(($5012)|(0))!=(($5013)|(0));
      if ($5014) { label = 622; break; } else { label = 623; break; }
    case 622: 
      var $5016=$1;
      var $5017=(($5016)|0);
      var $5018=HEAP32[(($5017)>>2)];
      var $5019=$yyss;
      var $5020=$5019;
      _mrb_free($5018, $5020);
      label = 623; break;
    case 623: 
      var $5022=$yymsg;
      var $5023=(($yymsgbuf)|0);
      var $5024=(($5022)|(0))!=(($5023)|(0));
      if ($5024) { label = 624; break; } else { label = 625; break; }
    case 624: 
      var $5026=$1;
      var $5027=(($5026)|0);
      var $5028=HEAP32[(($5027)>>2)];
      var $5029=$yymsg;
      _mrb_free($5028, $5029);
      label = 625; break;
    case 625: 
      var $5031=$yyresult;
      STACKTOP = __stackBase__;
      return $5031;
    default: assert(0, "bad label: " + label);
  }
}
function _cond($n) {
  var label = 0;
  var $1;
  $1=$n;
  var $2=$1;
  return $2;
}
function _append_gen($p, $a, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      $2=$p;
      $3=$a;
      $4=$b;
      var $5=$3;
      $c=$5;
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$4;
      $1=$9;
      label = 9; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=$c;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$c;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      $c=$19;
      label = 4; break;
    case 6: 
      var $21=$4;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$4;
      var $25=$c;
      var $26=(($25+4)|0);
      HEAP32[(($26)>>2)]=$24;
      label = 8; break;
    case 8: 
      var $28=$3;
      $1=$28;
      label = 9; break;
    case 9: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _local_resume($p, $prev) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$prev;
  var $3=$2;
  var $4=$1;
  var $5=(($4+76)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _local_unnest($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4+4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=(($7+76)|0);
  HEAP32[(($8)>>2)]=$6;
  return;
}
function _yylex($lval, $p) {
  var label = 0;
  var $1;
  var $2;
  var $t;
  $1=$lval;
  $2=$p;
  var $3=$1;
  var $4=$2;
  var $5=(($4+1124)|0);
  HEAP32[(($5)>>2)]=$3;
  var $6=$2;
  var $7=_parser_yylex($6);
  $t=$7;
  var $8=$t;
  return $8;
}
function _yy_symbol_print($yyoutput, $yytype, $yyvaluep, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$yyoutput;
      $2=$yytype;
      $3=$yyvaluep;
      $4=$p;
      var $5=$2;
      var $6=(($5)|(0)) < 151;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      var $10=((384+($9<<2))|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=_fprintf($8, ((97608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$11,tempInt));
      label = 4; break;
    case 3: 
      var $14=$1;
      var $15=$2;
      var $16=((384+($15<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=_fprintf($14, ((97584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$17,tempInt));
      label = 4; break;
    case 4: 
      var $20=$1;
      var $21=$2;
      var $22=$3;
      var $23=$4;
      _yy_symbol_value_print($20, $21, $22, $23);
      var $24=$1;
      var $25=_fprintf($24, ((97580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yy_reduce_print($yyvsp, $yyrule, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $yynrhs;
      var $yyi;
      var $yylno;
      $1=$yyvsp;
      $2=$yyrule;
      $3=$p;
      var $4=$2;
      var $5=((29864+$4)|0);
      var $6=HEAP8[($5)];
      var $7=(($6)&(255));
      $yynrhs=$7;
      var $8=$2;
      var $9=((25364+($8<<1))|0);
      var $10=HEAP16[(($9)>>1)];
      var $11=(($10)&(65535));
      $yylno=$11;
      var $12=HEAP32[((_stderr)>>2)];
      var $13=$2;
      var $14=((($13)-(1))|0);
      var $15=$yylno;
      var $16=_fprintf($12, ((97632)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt));
      $yyi=0;
      label = 2; break;
    case 2: 
      var $18=$yyi;
      var $19=$yynrhs;
      var $20=(($18)|(0)) < (($19)|(0));
      if ($20) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $22=HEAP32[((_stderr)>>2)];
      var $23=$yyi;
      var $24=((($23)+(1))|0);
      var $25=_fprintf($22, ((97620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$24,tempInt));
      var $26=HEAP32[((_stderr)>>2)];
      var $27=$2;
      var $28=((31504+($27<<1))|0);
      var $29=HEAP16[(($28)>>1)];
      var $30=(($29)&(65535));
      var $31=$yyi;
      var $32=((($30)+($31))|0);
      var $33=((26456+($32<<1))|0);
      var $34=HEAP16[(($33)>>1)];
      var $35=(($34 << 16) >> 16);
      var $36=$yyi;
      var $37=((($36)+(1))|0);
      var $38=$yynrhs;
      var $39=((($37)-($38))|0);
      var $40=$1;
      var $41=(($40+($39<<2))|0);
      var $42=$3;
      _yy_symbol_print($26, $35, $41, $42);
      var $43=HEAP32[((_stderr)>>2)];
      var $44=_fprintf($43, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 4; break;
    case 4: 
      var $46=$yyi;
      var $47=((($46)+(1))|0);
      $yyi=$47;
      label = 2; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _cons_gen($p, $car, $cdr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c;
      $1=$p;
      $2=$car;
      $3=$cdr;
      var $4=$1;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      $c=$11;
      var $12=$1;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$1;
      var $18=(($17+8)|0);
      HEAP32[(($18)>>2)]=$16;
      label = 4; break;
    case 3: 
      var $20=$1;
      var $21=_parser_palloc($20, 12);
      var $22=$21;
      $c=$22;
      label = 4; break;
    case 4: 
      var $24=$2;
      var $25=$c;
      var $26=(($25)|0);
      HEAP32[(($26)>>2)]=$24;
      var $27=$3;
      var $28=$c;
      var $29=(($28+4)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$1;
      var $31=(($30+32)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32) & 65535);
      var $34=$c;
      var $35=(($34+8)|0);
      HEAP16[(($35)>>1)]=$33;
      var $36=$c;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _new_scope($p, $body) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$body;
  var $3=$1;
  var $4=$1;
  var $5=$1;
  var $6=(($5+76)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=_cons_gen($4, $9, $10);
  var $12=_cons_gen($3, 3, $11);
  return $12;
}
function _new_begin($p, $body) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$p;
      $3=$body;
      var $4=$3;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$2;
      var $8=$3;
      var $9=_list2_gen($7, 17, $8);
      $1=$9;
      label = 4; break;
    case 3: 
      var $11=$2;
      var $12=_cons_gen($11, 17, 0);
      $1=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _list1_gen($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, $4, 0);
  return $5;
}
function _local_switch($p) {
  var label = 0;
  var $1;
  var $prev;
  $1=$p;
  var $2=$1;
  var $3=(($2+76)|0);
  var $4=HEAP32[(($3)>>2)];
  $prev=$4;
  var $5=$1;
  var $6=_cons_gen($5, 0, 0);
  var $7=$1;
  var $8=(($7+76)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$prev;
  return $9;
}
function _yyerror($p, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $n;
      $1=$p;
      $2=$s;
      var $3=$1;
      var $4=(($3+1140)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 6; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$1;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$1;
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($20+36)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=_fprintf($13, ((106376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$19,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$23,tempInt));
      label = 5; break;
    case 4: 
      var $26=HEAP32[((_stderr)>>2)];
      var $27=$1;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+36)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=_fprintf($26, ((106360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,tempInt));
      label = 5; break;
    case 5: 
      label = 9; break;
    case 6: 
      var $37=$1;
      var $38=(($37+1128)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)>>>(0)) < 10;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$2;
      var $43=_strlen($42);
      $n=$43;
      var $44=$1;
      var $45=$n;
      var $46=((($45)+(1))|0);
      var $47=_parser_palloc($44, $46);
      $c=$47;
      var $48=$c;
      var $49=$2;
      var $50=$n;
      var $51=((($50)+(1))|0);
      assert($51 % 1 === 0);_memcpy($48, $49, $51);
      var $52=$c;
      var $53=$1;
      var $54=(($53+1128)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$1;
      var $57=(($56+1144)|0);
      var $58=(($57+((($55)*(12))&-1))|0);
      var $59=(($58+8)|0);
      HEAP32[(($59)>>2)]=$52;
      var $60=$1;
      var $61=(($60+32)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$1;
      var $64=(($63+1128)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$1;
      var $67=(($66+1144)|0);
      var $68=(($67+((($65)*(12))&-1))|0);
      var $69=(($68)|0);
      HEAP32[(($69)>>2)]=$62;
      var $70=$1;
      var $71=(($70+36)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$1;
      var $74=(($73+1128)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$1;
      var $77=(($76+1144)|0);
      var $78=(($77+((($75)*(12))&-1))|0);
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$72;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $82=$1;
      var $83=(($82+1128)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)+(1))|0);
      HEAP32[(($83)>>2)]=$85;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_rescue($p, $body, $resq, $els) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$body;
  $3=$resq;
  $4=$els;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_list4_gen($5, 18, $6, $7, $8);
  return $9;
}
function _yywarn($p, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $n;
      $1=$p;
      $2=$s;
      var $3=$1;
      var $4=(($3+1140)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 6; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      var $9=(($8+28)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$1;
      var $15=(($14+28)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$1;
      var $18=(($17+32)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($20+36)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=_fprintf($13, ((106376)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$19,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$23,tempInt));
      label = 5; break;
    case 4: 
      var $26=HEAP32[((_stderr)>>2)];
      var $27=$1;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+36)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=_fprintf($26, ((106360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$29,HEAP32[(((tempInt)+(4))>>2)]=$32,HEAP32[(((tempInt)+(8))>>2)]=$33,tempInt));
      label = 5; break;
    case 5: 
      label = 9; break;
    case 6: 
      var $37=$1;
      var $38=(($37+1132)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)>>>(0)) < 10;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$2;
      var $43=_strlen($42);
      $n=$43;
      var $44=$1;
      var $45=$n;
      var $46=((($45)+(1))|0);
      var $47=_parser_palloc($44, $46);
      $c=$47;
      var $48=$c;
      var $49=$2;
      var $50=$n;
      var $51=((($50)+(1))|0);
      assert($51 % 1 === 0);_memcpy($48, $49, $51);
      var $52=$c;
      var $53=$1;
      var $54=(($53+1132)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$1;
      var $57=(($56+1264)|0);
      var $58=(($57+((($55)*(12))&-1))|0);
      var $59=(($58+8)|0);
      HEAP32[(($59)>>2)]=$52;
      var $60=$1;
      var $61=(($60+32)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$1;
      var $64=(($63+1132)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$1;
      var $67=(($66+1264)|0);
      var $68=(($67+((($65)*(12))&-1))|0);
      var $69=(($68)|0);
      HEAP32[(($69)>>2)]=$62;
      var $70=$1;
      var $71=(($70+36)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$1;
      var $74=(($73+1132)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$1;
      var $77=(($76+1264)|0);
      var $78=(($77+((($75)*(12))&-1))|0);
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$72;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $82=$1;
      var $83=(($82+1132)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=((($84)+(1))|0);
      HEAP32[(($83)>>2)]=$85;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_ensure($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$1;
  var $8=$3;
  var $9=_cons_gen($7, 0, $8);
  var $10=_cons_gen($5, $6, $9);
  var $11=_cons_gen($4, 19, $10);
  return $11;
}
function _new_nil($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 86);
  return $3;
}
function _new_alias($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=(($6 << 16) >> 16);
  var $8=$7;
  var $9=$3;
  var $10=(($9 << 16) >> 16);
  var $11=$10;
  var $12=_cons_gen($5, $8, $11);
  var $13=_cons_gen($4, 72, $12);
  return $13;
}
function _new_if($p, $a, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_list4_gen($5, 5, $6, $7, $8);
  return $9;
}
function _new_unless($p, $a, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  var $5=$1;
  var $6=$2;
  var $7=$4;
  var $8=$3;
  var $9=_list4_gen($5, 5, $6, $7, $8);
  return $9;
}
function _new_while($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 9, $8);
  return $9;
}
function _new_until($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 10, $8);
  return $9;
}
function _list3_gen($p, $a, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  var $5=$1;
  var $6=$2;
  var $7=$1;
  var $8=$3;
  var $9=$1;
  var $10=$4;
  var $11=_cons_gen($9, $10, 0);
  var $12=_cons_gen($7, $8, $11);
  var $13=_cons_gen($5, $6, $12);
  return $13;
}
function _new_postexe($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 91, $4);
  return $5;
}
function _new_masgn($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 23, $8);
  return $9;
}
function _new_op_asgn($p, $a, $op, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$a;
  $3=$op;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=(($7 << 16) >> 16);
  var $9=$8;
  var $10=$4;
  var $11=_list4_gen($5, 28, $6, $9, $10);
  return $11;
}
function _new_call($p, $a, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=(($7 << 16) >> 16);
  var $9=$8;
  var $10=$4;
  var $11=_list4_gen($5, 29, $6, $9, $10);
  return $11;
}
function _intern_gen2($p, $s, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$s;
  $3=$len;
  var $4=$1;
  var $5=(($4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$2;
  var $8=$3;
  var $9=_mrb_intern2($6, $7, $8);
  return $9;
}
function _backref_error($p, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$p;
      $2=$n;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $c=$6;
      var $7=$c;
      var $8=(($7)|(0))==45;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      _yyerror_i($10, ((106580)|0), $14);
      label = 7; break;
    case 3: 
      var $16=$c;
      var $17=(($16)|(0))==46;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$2;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      _yyerror_i($19, ((106556)|0), $23);
      label = 6; break;
    case 5: 
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$c;
      _mrb_bug($27, ((106392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$28,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_asgn($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 24, $8);
  return $9;
}
function _new_array($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 34, $4);
  return $5;
}
function _new_and($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 20, $8);
  return $9;
}
function _new_or($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 21, $8);
  return $9;
}
function _call_uni_op($p, $recv, $m) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$recv;
  $3=$m;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$3;
  var $8=_intern_gen($6, $7);
  var $9=_new_call($4, $5, $8, 0);
  return $9;
}
function _local_nest($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=$1;
  var $4=(($3+76)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_cons_gen($2, 0, $5);
  var $7=$1;
  var $8=(($7+76)|0);
  HEAP32[(($8)>>2)]=$6;
  return;
}
function _new_block($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=(($5+76)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=_list4_gen($4, 4, $9, $10, $11);
  return $12;
}
function _new_fcall($p, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$b;
  $3=$c;
  var $4=$1;
  var $5=$1;
  var $6=_new_self($5);
  var $7=$2;
  var $8=(($7 << 16) >> 16);
  var $9=$8;
  var $10=$3;
  var $11=_list4_gen($4, 30, $6, $9, $10);
  return $11;
}
function _args_with_block($p, $a, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$a;
      $3=$b;
      var $4=$3;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $7=$2;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$1;
      _yyerror($12, ((97688)|0));
      label = 4; break;
    case 4: 
      var $14=$3;
      var $15=$2;
      var $16=(($15+4)|0);
      HEAP32[(($16)>>2)]=$14;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_super($p, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$c;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 32, $4);
  return $5;
}
function _new_bv($p, $id) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$id;
  return;
}
function _new_yield($p, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$p;
      $3=$c;
      var $4=$3;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $7=$3;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$2;
      _yyerror($12, ((97688)|0));
      label = 4; break;
    case 4: 
      var $14=$2;
      var $15=$3;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=_cons_gen($14, 38, $17);
      $1=$18;
      label = 6; break;
    case 5: 
      var $20=$2;
      var $21=_cons_gen($20, 38, 0);
      $1=$21;
      label = 6; break;
    case 6: 
      var $23=$1;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _new_return($p, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$c;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 37, $4);
  return $5;
}
function _ret_args($p, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$p;
      $3=$n;
      var $4=$3;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$2;
      _yyerror($9, ((97748)|0));
      label = 3; break;
    case 3: 
      var $11=$3;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $18=$3;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      $1=$22;
      label = 6; break;
    case 5: 
      var $24=$2;
      var $25=$3;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_new_array($24, $27);
      $1=$28;
      label = 6; break;
    case 6: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _new_break($p, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$c;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 13, $4);
  return $5;
}
function _new_next($p, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$c;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 14, $4);
  return $5;
}
function _list2_gen($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$3;
  var $8=_cons_gen($6, $7, 0);
  var $9=_cons_gen($4, $5, $8);
  return $9;
}
function _assignable($p, $lhs) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$p;
      $2=$lhs;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6)|(0))==39;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=$2;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13) & 65535);
      _local_add($9, $14);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_colon2($p, $b, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$b;
  $3=$c;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=(($7 << 16) >> 16);
  var $9=$8;
  var $10=_cons_gen($5, $6, $9);
  var $11=_cons_gen($4, 77, $10);
  return $11;
}
function _new_colon3($p, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$c;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 78, $6);
  return $7;
}
function _new_undef($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_list2_gen($3, 73, $6);
  return $7;
}
function _intern_gen_c($p, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2=__stackBase__;
  $1=$p;
  HEAP8[($2)]=$c;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_intern2($5, $2, 1);
  STACKTOP = __stackBase__;
  return $6;
}
function _new_dot2($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 80, $8);
  return $9;
}
function _new_dot3($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 81, $8);
  return $9;
}
function _call_bin_op($p, $recv, $m, $arg1) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$recv;
  $3=$m;
  $4=$arg1;
  var $5=$1;
  var $6=$2;
  var $7=$1;
  var $8=$3;
  var $9=_intern_gen($7, $8);
  var $10=$1;
  var $11=$1;
  var $12=$4;
  var $13=_list1_gen($11, $12);
  var $14=_list1_gen($10, $13);
  var $15=_new_call($5, $6, $9, $14);
  return $15;
}
function _new_hash($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 36, $4);
  return $5;
}
function _new_block_arg($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 69, $4);
  return $5;
}
function _new_splat($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 66, $4);
  return $5;
}
function _call_with_block($p, $a, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      $1=$p;
      $2=$a;
      $3=$b;
      var $4=$2;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==32;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==33;
      if ($12) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $19=$1;
      var $20=$3;
      var $21=_cons_gen($19, 0, $20);
      var $22=$2;
      var $23=(($22+4)|0);
      HEAP32[(($23)>>2)]=$21;
      label = 6; break;
    case 5: 
      var $25=$1;
      var $26=$2;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$3;
      _args_with_block($25, $28, $29);
      label = 6; break;
    case 6: 
      label = 11; break;
    case 7: 
      var $32=$2;
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      $n=$38;
      var $39=$n;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))!=0;
      if ($42) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $44=$1;
      var $45=$3;
      var $46=_cons_gen($44, 0, $45);
      var $47=$n;
      var $48=(($47)|0);
      HEAP32[(($48)>>2)]=$46;
      label = 10; break;
    case 9: 
      var $50=$1;
      var $51=$n;
      var $52=(($51)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$3;
      _args_with_block($50, $53, $54);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_lambda($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=(($5+76)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=$3;
  var $12=_list4_gen($4, 53, $9, $10, $11);
  return $12;
}
function _new_case($p, $a, $b) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $n2;
      $1=$p;
      $2=$a;
      $3=$b;
      var $4=$1;
      var $5=$2;
      var $6=_list2_gen($4, 6, $5);
      $n=$6;
      var $7=$n;
      $n2=$7;
      label = 2; break;
    case 2: 
      var $9=$n2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$n2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $n2=$16;
      label = 2; break;
    case 4: 
      var $18=$3;
      var $19=$n2;
      var $20=(($19+4)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$n;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _new_for($p, $v, $o, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$v;
  $3=$o;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_list4_gen($5, 12, $6, $7, $8);
  return $9;
}
function _new_class($p, $c, $s, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$c;
  $3=$s;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$1;
  var $9=$1;
  var $10=(($9+76)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$4;
  var $15=_cons_gen($8, $13, $14);
  var $16=_list4_gen($5, 74, $6, $7, $15);
  return $16;
}
function _new_sclass($p, $o, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$o;
  $3=$b;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$1;
  var $8=(($7+76)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($9)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$3;
  var $13=_cons_gen($6, $11, $12);
  var $14=_list3_gen($4, 76, $5, $13);
  return $14;
}
function _new_module($p, $m, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$m;
  $3=$b;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$1;
  var $8=(($7+76)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=(($9)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$3;
  var $13=_cons_gen($6, $11, $12);
  var $14=_list3_gen($4, 75, $5, $13);
  return $14;
}
function _new_def($p, $m, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$m;
  $3=$a;
  $4=$b;
  var $5=$1;
  var $6=$2;
  var $7=(($6 << 16) >> 16);
  var $8=$7;
  var $9=$1;
  var $10=(($9+76)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$3;
  var $15=$4;
  var $16=_list5_gen($5, 70, $8, $13, $14, $15);
  return $16;
}
function _new_sdef($p, $o, $m, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$p;
  $2=$o;
  $3=$m;
  $4=$a;
  $5=$b;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=(($8 << 16) >> 16);
  var $10=$9;
  var $11=$1;
  var $12=(($11+76)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=$4;
  var $17=$5;
  var $18=_list6_gen($6, 71, $7, $10, $15, $16, $17);
  return $18;
}
function _new_redo($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 15);
  return $3;
}
function _new_retry($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 16);
  return $3;
}
function _new_arg($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 63, $6);
  return $7;
}
function _new_args($p, $m, $opt, $rest, $m2, $blk) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $n;
  $1=$p;
  $2=$m;
  $3=$opt;
  $4=$rest;
  $5=$m2;
  $6=$blk;
  var $7=$1;
  var $8=$5;
  var $9=$6;
  var $10=(($9 << 16) >> 16);
  var $11=$10;
  var $12=_cons_gen($7, $8, $11);
  $n=$12;
  var $13=$1;
  var $14=$4;
  var $15=(($14 << 16) >> 16);
  var $16=$15;
  var $17=$n;
  var $18=_cons_gen($13, $16, $17);
  $n=$18;
  var $19=$1;
  var $20=$3;
  var $21=$n;
  var $22=_cons_gen($19, $20, $21);
  $n=$22;
  var $23=$1;
  var $24=$2;
  var $25=$n;
  var $26=_cons_gen($23, $24, $25);
  return $26;
}
function _local_add_f($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$1;
  var $5=(($4+76)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=$1;
  var $10=$2;
  var $11=(($10 << 16) >> 16);
  var $12=$11;
  var $13=_list1_gen($9, $12);
  var $14=_append_gen($3, $8, $13);
  var $15=$1;
  var $16=(($15+76)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=(($17)|0);
  HEAP32[(($18)>>2)]=$14;
  return;
}
function _new_zsuper($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 33);
  return $3;
}
function _new_dstr($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 56, $4);
  return $5;
}
function _new_literal_delim($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_cons_gen($2, 100, 0);
  return $3;
}
function _new_dxstr($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 58, $4);
  return $5;
}
function _new_dregx($p, $a, $b) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$a;
  $3=$b;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=_cons_gen($5, $6, $7);
  var $9=_cons_gen($4, 60, $8);
  return $9;
}
function _new_str($p, $s, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$s;
  $3=$len;
  var $4=$1;
  var $5=$1;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=_parser_strndup($6, $7, $8);
  var $10=$9;
  var $11=$3;
  var $12=$11;
  var $13=_cons_gen($5, $10, $12);
  var $14=_cons_gen($4, 55, $13);
  return $14;
}
function _heredoc_end($p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$p;
      var $2=$1;
      var $3=(($2+1116)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+1116)|0);
      HEAP32[(($8)>>2)]=$6;
      var $9=$1;
      var $10=(($9+1116)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==0;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$1;
      var $15=(($14+40)|0);
      HEAP32[(($15)>>2)]=0;
      var $16=$1;
      var $17=(($16+72)|0);
      HEAP32[(($17)>>2)]=1;
      var $18=$1;
      _end_strterm($18);
      var $19=$1;
      var $20=$19;
      var $21=(($20+1120)|0);
      var $22=HEAP8[($21)];
      var $23=$22 & -3;
      var $24=$23 | 2;
      HEAP8[($21)]=$24;
      label = 4; break;
    case 3: 
      var $26=$1;
      var $27=_parsing_heredoc_inf($26);
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=$1;
      var $32=(($31+44)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0);
      HEAP32[(($34)>>2)]=$30;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_words($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 101, $4);
  return $5;
}
function _new_sym($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 54, $6);
  return $7;
}
function _new_dsym($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$1;
  var $5=$2;
  var $6=_new_dstr($4, $5);
  var $7=_cons_gen($3, 97, $6);
  return $7;
}
function _new_strsym($p, $str) {
  var label = 0;
  var $1;
  var $2;
  var $s;
  var $len;
  $1=$p;
  $2=$str;
  var $3=$2;
  var $4=(($3+4)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  $s=$8;
  var $9=$2;
  var $10=(($9+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=(($11+4)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$13;
  $len=$14;
  var $15=$1;
  var $16=(($15)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$s;
  var $19=$len;
  var $20=_mrb_intern2($17, $18, $19);
  return $20;
}
function _new_symbols($p, $a) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$a;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 102, $4);
  return $5;
}
function _negate_lit($p, $n) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$n;
  var $3=$1;
  var $4=$2;
  var $5=_cons_gen($3, 52, $4);
  return $5;
}
function _new_lvar($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 39, $6);
  return $7;
}
function _new_ivar($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 42, $6);
  return $7;
}
function _new_gvar($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 41, $6);
  return $7;
}
function _new_cvar($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 44, $6);
  return $7;
}
function _new_const($p, $sym) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$sym;
  var $3=$1;
  var $4=$2;
  var $5=(($4 << 16) >> 16);
  var $6=$5;
  var $7=_cons_gen($3, 43, $6);
  return $7;
}
function _var_reference($p, $lhs) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      $2=$p;
      $3=$lhs;
      var $4=$3;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=(($7)|(0))==39;
      if ($8) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $10=$2;
      var $11=$3;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14) & 65535);
      var $16=_local_var_p($10, $15);
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $19=$2;
      var $20=$3;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($23) & 65535);
      var $25=_new_fcall($19, $24, 0);
      $n=$25;
      var $26=$2;
      var $27=$3;
      _cons_free_gen($26, $27);
      var $28=$n;
      $1=$28;
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $31=$3;
      $1=$31;
      label = 6; break;
    case 6: 
      var $33=$1;
      return $33;
    default: assert(0, "bad label: " + label);
  }
}
function _new_self($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 85);
  return $3;
}
function _new_true($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 87);
  return $3;
}
function _new_false($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=_list1_gen($2, 88);
  return $3;
}
function _new_int($p, $s, $base) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$s;
  $3=$base;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=_parser_strdup($5, $6);
  var $8=$7;
  var $9=$3;
  var $10=$9;
  var $11=_list3_gen($4, 50, $8, $10);
  return $11;
}
function _yy_stack_print($yybottom, $yytop) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $yybot;
      $1=$yybottom;
      $2=$yytop;
      var $3=HEAP32[((_stderr)>>2)];
      var $4=_fprintf($3, ((97796)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 2; break;
    case 2: 
      var $6=$1;
      var $7=$2;
      var $8=(($6)>>>(0)) <= (($7)>>>(0));
      if ($8) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $10=$1;
      var $11=HEAP16[(($10)>>1)];
      var $12=(($11 << 16) >> 16);
      $yybot=$12;
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$yybot;
      var $15=_fprintf($13, ((97784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,tempInt));
      label = 4; break;
    case 4: 
      var $17=$1;
      var $18=(($17+2)|0);
      $1=$18;
      label = 2; break;
    case 5: 
      var $20=HEAP32[((_stderr)>>2)];
      var $21=_fprintf($20, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yysyntax_error($yyresult, $yystate, $yychar) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $yyn;
      var $yytype;
      var $yysize0;
      var $yysize;
      var $yysize1;
      var $yysize_overflow;
      var $yyarg=__stackBase__;
      var $yyx;
      var $yyfmt;
      var $yyf;
      var $yyformat=(__stackBase__)+(20);
      var $yyprefix;
      var $yyxbegin;
      var $yychecklim;
      var $yyxend;
      var $yycount;
      var $yyp;
      var $yyi;
      $2=$yyresult;
      $3=$yystate;
      $4=$yychar;
      var $5=$3;
      var $6=((32904+($5<<1))|0);
      var $7=HEAP16[(($6)>>1)];
      var $8=(($7 << 16) >> 16);
      $yyn=$8;
      var $9=$yyn;
      var $10=-745 < (($9)|(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$yyn;
      var $13=(($12)|(0)) <= 10895;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 35; break;
    case 4: 
      var $16=$4;
      var $17=(($16)>>>(0)) <= 379;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=$4;
      var $20=((4+$19)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&(255));
      var $25 = $22;label = 7; break;
    case 6: 
      var $25 = 2;label = 7; break;
    case 7: 
      var $25;
      $yytype=$25;
      var $26=$yytype;
      var $27=((384+($26<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_yytnamerr(0, $28);
      $yysize0=$29;
      var $30=$yysize0;
      $yysize=$30;
      $yysize_overflow=0;
      $yyprefix=((23436)|0);
      var $31=$yyn;
      var $32=(($31)|(0)) < 0;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $34=$yyn;
      var $35=(((-$34))|0);
      var $38 = $35;label = 10; break;
    case 9: 
      var $38 = 0;label = 10; break;
    case 10: 
      var $38;
      $yyxbegin=$38;
      var $39=$yyn;
      var $40=(((10895)-($39))|0);
      var $41=((($40)+(1))|0);
      $yychecklim=$41;
      var $42=$yychecklim;
      var $43=(($42)|(0)) < 151;
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $45=$yychecklim;
      var $48 = $45;label = 13; break;
    case 12: 
      var $48 = 151;label = 13; break;
    case 13: 
      var $48;
      $yyxend=$48;
      $yycount=1;
      var $49=$yytype;
      var $50=((384+($49<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($yyarg)|0);
      HEAP32[(($52)>>2)]=$51;
      var $53=(($yyformat)|0);
      var $54=_yystpcpy($53, ((23400)|0));
      $yyfmt=$54;
      var $55=$yyxbegin;
      $yyx=$55;
      label = 14; break;
    case 14: 
      var $57=$yyx;
      var $58=$yyxend;
      var $59=(($57)|(0)) < (($58)|(0));
      if ($59) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $61=$yyx;
      var $62=$yyn;
      var $63=((($61)+($62))|0);
      var $64=((37040+($63<<1))|0);
      var $65=HEAP16[(($64)>>1)];
      var $66=(($65 << 16) >> 16);
      var $67=$yyx;
      var $68=(($66)|(0))==(($67)|(0));
      if ($68) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $70=$yyx;
      var $71=(($70)|(0))!=1;
      if ($71) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $73=$yycount;
      var $74=(($73)|(0))==5;
      if ($74) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $yycount=1;
      var $76=$yysize0;
      $yysize=$76;
      var $77=(($yyformat+27)|0);
      HEAP8[($77)]=0;
      label = 22; break;
    case 19: 
      var $79=$yyx;
      var $80=((384+($79<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$yycount;
      var $83=((($82)+(1))|0);
      $yycount=$83;
      var $84=(($yyarg+($82<<2))|0);
      HEAP32[(($84)>>2)]=$81;
      var $85=$yysize;
      var $86=$yyx;
      var $87=((384+($86<<2))|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=_yytnamerr(0, $88);
      var $90=((($85)+($89))|0);
      $yysize1=$90;
      var $91=$yysize1;
      var $92=$yysize;
      var $93=(($91)>>>(0)) < (($92)>>>(0));
      var $94=(($93)&(1));
      var $95=$yysize_overflow;
      var $96=$95 | $94;
      $yysize_overflow=$96;
      var $97=$yysize1;
      $yysize=$97;
      var $98=$yyfmt;
      var $99=$yyprefix;
      var $100=_yystpcpy($98, $99);
      $yyfmt=$100;
      $yyprefix=((23428)|0);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $103=$yyx;
      var $104=((($103)+(1))|0);
      $yyx=$104;
      label = 14; break;
    case 22: 
      var $106=(($yyformat)|0);
      $yyf=$106;
      var $107=$yysize;
      var $108=$yyf;
      var $109=_yystrlen($108);
      var $110=((($107)+($109))|0);
      $yysize1=$110;
      var $111=$yysize1;
      var $112=$yysize;
      var $113=(($111)>>>(0)) < (($112)>>>(0));
      var $114=(($113)&(1));
      var $115=$yysize_overflow;
      var $116=$115 | $114;
      $yysize_overflow=$116;
      var $117=$yysize1;
      $yysize=$117;
      var $118=$yysize_overflow;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $1=-1;
      label = 35; break;
    case 24: 
      var $122=$2;
      var $123=(($122)|(0))!=0;
      if ($123) { label = 25; break; } else { label = 34; break; }
    case 25: 
      var $125=$2;
      $yyp=$125;
      $yyi=0;
      label = 26; break;
    case 26: 
      var $127=$yyf;
      var $128=HEAP8[($127)];
      var $129=$yyp;
      HEAP8[($129)]=$128;
      var $130=(($128 << 24) >> 24);
      var $131=(($130)|(0))!=0;
      if ($131) { label = 27; break; } else { label = 33; break; }
    case 27: 
      var $133=$yyp;
      var $134=HEAP8[($133)];
      var $135=(($134 << 24) >> 24);
      var $136=(($135)|(0))==37;
      if ($136) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $138=$yyf;
      var $139=(($138+1)|0);
      var $140=HEAP8[($139)];
      var $141=(($140 << 24) >> 24);
      var $142=(($141)|(0))==115;
      if ($142) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $144=$yyi;
      var $145=$yycount;
      var $146=(($144)|(0)) < (($145)|(0));
      if ($146) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $148=$yyp;
      var $149=$yyi;
      var $150=((($149)+(1))|0);
      $yyi=$150;
      var $151=(($yyarg+($149<<2))|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=_yytnamerr($148, $152);
      var $154=$yyp;
      var $155=(($154+$153)|0);
      $yyp=$155;
      var $156=$yyf;
      var $157=(($156+2)|0);
      $yyf=$157;
      label = 32; break;
    case 31: 
      var $159=$yyp;
      var $160=(($159+1)|0);
      $yyp=$160;
      var $161=$yyf;
      var $162=(($161+1)|0);
      $yyf=$162;
      label = 32; break;
    case 32: 
      label = 26; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $166=$yysize;
      $1=$166;
      label = 35; break;
    case 35: 
      var $168=$1;
      STACKTOP = __stackBase__;
      return $168;
    default: assert(0, "bad label: " + label);
  }
}
function _yydestruct($yymsg, $yytype, $yyvaluep, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$yymsg;
      $2=$yytype;
      $3=$yyvaluep;
      $4=$p;
      var $5=$3;
      var $6=$4;
      var $7=$1;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=((106348)|0);
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=HEAP32[((37036)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=HEAP32[((_stderr)>>2)];
      var $16=$1;
      var $17=_fprintf($15, ((98980)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,tempInt));
      var $18=HEAP32[((_stderr)>>2)];
      var $19=$2;
      var $20=$3;
      var $21=$4;
      _yy_symbol_print($18, $19, $20, $21);
      var $22=HEAP32[((_stderr)>>2)];
      var $23=_fprintf($22, ((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $26=$2;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_parse($p, $c) {
  var label = 0;
  label = 1; 
  var mySetjmpIds = {};
  var setjmpTable = {"1": function(value) { label = 9; $6 = value },dummy: 0};
  while(1) try { switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$p;
      $2=$c;
      var $3=$1;
      var $4=(($3+1384)|0);
      var $5=(($4)|0);
      var $6=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($5)>>2)]=tempInt, 0);
      label = 9; break;
    case 9: 
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      _yyerror($9, ((96672)|0));
      var $10=$1;
      var $11=(($10+1128)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+(1))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=$1;
      var $15=(($14+1136)|0);
      HEAP32[(($15)>>2)]=0;
      label = 8; break;
    case 3: 
      var $17=$1;
      var $18=(($17+72)|0);
      HEAP32[(($18)>>2)]=1;
      var $19=$1;
      var $20=(($19+68)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$1;
      var $22=(($21+64)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$1;
      var $24=(($23+1132)|0);
      HEAP32[(($24)>>2)]=0;
      var $25=$1;
      var $26=(($25+1128)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$1;
      var $28=(($27+44)|0);
      HEAP32[(($28)>>2)]=0;
      var $29=$1;
      var $30=$2;
      _parser_init_cxt($29, $30);
      var $31=$1;
      var $32=_yyparse($31);
      var $33=$1;
      var $34=(($33+1136)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $38=$1;
      var $39=_new_nil($38);
      var $40=$1;
      var $41=(($40+1136)|0);
      HEAP32[(($41)>>2)]=$39;
      label = 5; break;
    case 5: 
      var $43=$1;
      var $44=$2;
      _parser_update_cxt($43, $44);
      var $45=$2;
      var $46=(($45)|(0))!=0;
      if ($46) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $48=$2;
      var $49=$48;
      var $50=(($49+24)|0);
      var $51=HEAP8[($50)];
      var $52=(($51)&(255)) >>> 1;
      var $53=$52 & 1;
      var $54=(($53)&(255));
      var $55=(($54)|(0))!=0;
      if ($55) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $57=$1;
      var $58=(($57)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$1;
      var $61=(($60+1136)|0);
      var $62=HEAP32[(($61)>>2)];
      _parser_dump($59, $62, 0);
      label = 8; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _parser_init_cxt($p, $cxt) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      $1=$p;
      $2=$cxt;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 15; break;
    case 3: 
      var $7=$2;
      var $8=(($7+12)|0);
      var $9=HEAP16[(($8)>>1)];
      var $10=(($9 << 16) >> 16)!=0;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP16[(($13)>>1)];
      var $15=(($14 << 16) >> 16);
      var $16=$1;
      var $17=(($16+32)|0);
      HEAP32[(($17)>>2)]=$15;
      label = 5; break;
    case 5: 
      var $19=$2;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$1;
      var $28=(($27+28)|0);
      HEAP32[(($28)>>2)]=$26;
      label = 7; break;
    case 7: 
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $35=$1;
      var $36=_cons_gen($35, 0, 0);
      var $37=$1;
      var $38=(($37+76)|0);
      HEAP32[(($38)>>2)]=$36;
      $i=0;
      label = 9; break;
    case 9: 
      var $40=$i;
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($40)|(0)) < (($43)|(0));
      if ($44) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $46=$1;
      var $47=$i;
      var $48=$2;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50+($47<<1))|0);
      var $52=HEAP16[(($51)>>1)];
      _local_add_f($46, $52);
      label = 11; break;
    case 11: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 9; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $58=$2;
      var $59=$58;
      var $60=(($59+24)|0);
      var $61=HEAP8[($60)];
      var $62=$61 & 1;
      var $63=(($62)&(255));
      var $64=$1;
      var $65=(($64+1140)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$2;
      var $67=(($66+16)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))!=0;
      if ($69) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=$2;
      var $72=$1;
      var $73=(($72+24)|0);
      HEAP32[(($73)>>2)]=$71;
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_update_cxt($p, $cxt) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $n;
      var $n0;
      var $i;
      $1=$p;
      $2=$cxt;
      $i=0;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 12; break;
    case 3: 
      var $7=$1;
      var $8=(($7+1136)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12)|(0))!=3;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 12; break;
    case 5: 
      var $16=$1;
      var $17=(($16+1136)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      $n=$22;
      $n0=$22;
      label = 6; break;
    case 6: 
      var $24=$n;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$i;
      var $28=((($27)+(1))|0);
      $i=$28;
      var $29=$n;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      $n=$31;
      label = 6; break;
    case 8: 
      var $33=$1;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=$i;
      var $41=($40<<1);
      var $42=_mrb_realloc($35, $39, $41);
      var $43=$42;
      var $44=$2;
      var $45=(($44)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$i;
      var $47=$2;
      var $48=(($47+4)|0);
      HEAP32[(($48)>>2)]=$46;
      $i=0;
      var $49=$n0;
      $n=$49;
      label = 9; break;
    case 9: 
      var $51=$n;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $54=$n;
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      var $58=(($57) & 65535);
      var $59=$i;
      var $60=$2;
      var $61=(($60)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+($59<<1))|0);
      HEAP16[(($63)>>1)]=$58;
      label = 11; break;
    case 11: 
      var $65=$i;
      var $66=((($65)+(1))|0);
      $i=$66;
      var $67=$n;
      var $68=(($67+4)|0);
      var $69=HEAP32[(($68)>>2)];
      $n=$69;
      label = 9; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _parser_dump($mrb, $tree, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $n2;
      var $n3;
      var $n1;
      var $n22;
      var $n23;
      var $n24;
      var $n25;
      var $t;
      var $n26;
      var $n7;
      var $n28;
      var $n9;
      var $n210;
      $1=$mrb;
      $2=$tree;
      $3=$offset;
      var $4=$2;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 212; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      _dump_prefix($9);
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      $n=$13;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $2=$16;
      var $17=$n;
      if ((($17)|(0))==17) {
        label = 5; break;
      }
      else if ((($17)|(0))==18) {
        label = 6; break;
      }
      else if ((($17)|(0))==19) {
        label = 22; break;
      }
      else if ((($17)|(0))==53) {
        label = 23; break;
      }
      else if ((($17)|(0))==4) {
        label = 24; break;
      }
      else if ((($17)|(0))==5) {
        label = 41; break;
      }
      else if ((($17)|(0))==20) {
        label = 44; break;
      }
      else if ((($17)|(0))==21) {
        label = 45; break;
      }
      else if ((($17)|(0))==6) {
        label = 46; break;
      }
      else if ((($17)|(0))==9) {
        label = 52; break;
      }
      else if ((($17)|(0))==10) {
        label = 53; break;
      }
      else if ((($17)|(0))==12) {
        label = 54; break;
      }
      else if ((($17)|(0))==3) {
        label = 65; break;
      }
      else if ((($17)|(0))==30 | (($17)|(0))==29) {
        label = 77; break;
      }
      else if ((($17)|(0))==80) {
        label = 82; break;
      }
      else if ((($17)|(0))==81) {
        label = 83; break;
      }
      else if ((($17)|(0))==77) {
        label = 84; break;
      }
      else if ((($17)|(0))==78) {
        label = 85; break;
      }
      else if ((($17)|(0))==34) {
        label = 86; break;
      }
      else if ((($17)|(0))==36) {
        label = 87; break;
      }
      else if ((($17)|(0))==66) {
        label = 91; break;
      }
      else if ((($17)|(0))==24) {
        label = 92; break;
      }
      else if ((($17)|(0))==23) {
        label = 93; break;
      }
      else if ((($17)|(0))==28) {
        label = 107; break;
      }
      else if ((($17)|(0))==32) {
        label = 108; break;
      }
      else if ((($17)|(0))==33) {
        label = 113; break;
      }
      else if ((($17)|(0))==37) {
        label = 114; break;
      }
      else if ((($17)|(0))==38) {
        label = 115; break;
      }
      else if ((($17)|(0))==13) {
        label = 116; break;
      }
      else if ((($17)|(0))==14) {
        label = 117; break;
      }
      else if ((($17)|(0))==15) {
        label = 118; break;
      }
      else if ((($17)|(0))==16) {
        label = 119; break;
      }
      else if ((($17)|(0))==39) {
        label = 120; break;
      }
      else if ((($17)|(0))==41) {
        label = 121; break;
      }
      else if ((($17)|(0))==42) {
        label = 122; break;
      }
      else if ((($17)|(0))==44) {
        label = 123; break;
      }
      else if ((($17)|(0))==43) {
        label = 124; break;
      }
      else if ((($17)|(0))==47) {
        label = 125; break;
      }
      else if ((($17)|(0))==46) {
        label = 126; break;
      }
      else if ((($17)|(0))==45) {
        label = 127; break;
      }
      else if ((($17)|(0))==63) {
        label = 128; break;
      }
      else if ((($17)|(0))==69) {
        label = 129; break;
      }
      else if ((($17)|(0))==50) {
        label = 130; break;
      }
      else if ((($17)|(0))==51) {
        label = 131; break;
      }
      else if ((($17)|(0))==52) {
        label = 132; break;
      }
      else if ((($17)|(0))==55) {
        label = 133; break;
      }
      else if ((($17)|(0))==56) {
        label = 134; break;
      }
      else if ((($17)|(0))==57) {
        label = 135; break;
      }
      else if ((($17)|(0))==58) {
        label = 136; break;
      }
      else if ((($17)|(0))==59) {
        label = 137; break;
      }
      else if ((($17)|(0))==60) {
        label = 138; break;
      }
      else if ((($17)|(0))==54) {
        label = 139; break;
      }
      else if ((($17)|(0))==85) {
        label = 140; break;
      }
      else if ((($17)|(0))==86) {
        label = 141; break;
      }
      else if ((($17)|(0))==87) {
        label = 142; break;
      }
      else if ((($17)|(0))==88) {
        label = 143; break;
      }
      else if ((($17)|(0))==72) {
        label = 144; break;
      }
      else if ((($17)|(0))==73) {
        label = 145; break;
      }
      else if ((($17)|(0))==74) {
        label = 149; break;
      }
      else if ((($17)|(0))==75) {
        label = 158; break;
      }
      else if ((($17)|(0))==76) {
        label = 165; break;
      }
      else if ((($17)|(0))==70) {
        label = 166; break;
      }
      else if ((($17)|(0))==71) {
        label = 193; break;
      }
      else if ((($17)|(0))==91) {
        label = 209; break;
      }
      else if ((($17)|(0))==99) {
        label = 210; break;
      }
      else {
      label = 211; break;
      }
    case 5: 
      var $19=_printf(((96584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=$1;
      var $21=$2;
      var $22=$3;
      var $23=((($22)+(1))|0);
      _dump_recur($20, $21, $23);
      label = 212; break;
    case 6: 
      var $25=_printf(((96496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=$2;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$3;
      var $32=((($31)+(1))|0);
      _dump_prefix($32);
      var $33=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $34=$1;
      var $35=$2;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$3;
      var $39=((($38)+(2))|0);
      _parser_dump($34, $37, $39);
      label = 8; break;
    case 8: 
      var $41=$2;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      $2=$43;
      var $44=$2;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))!=0;
      if ($47) { label = 9; break; } else { label = 19; break; }
    case 9: 
      var $49=$2;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      $n2=$51;
      var $52=$3;
      var $53=((($52)+(1))|0);
      _dump_prefix($53);
      var $54=_printf(((96352)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 10; break;
    case 10: 
      var $56=$n2;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 11; break; } else { label = 18; break; }
    case 11: 
      var $59=$n2;
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      $n3=$61;
      var $62=$n3;
      var $63=(($62)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|(0))!=0;
      if ($65) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $67=$3;
      var $68=((($67)+(2))|0);
      _dump_prefix($68);
      var $69=_printf(((96228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $70=$1;
      var $71=$n3;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$3;
      var $75=((($74)+(3))|0);
      _dump_recur($70, $73, $75);
      label = 13; break;
    case 13: 
      var $77=$n3;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)|(0))!=0;
      if ($82) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $84=$3;
      var $85=((($84)+(2))|0);
      _dump_prefix($85);
      var $86=_printf(((96144)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $87=$1;
      var $88=$n3;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$3;
      var $94=((($93)+(3))|0);
      _parser_dump($87, $92, $94);
      label = 15; break;
    case 15: 
      var $96=$n3;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102)|(0))!=0;
      if ($103) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $105=$3;
      var $106=((($105)+(2))|0);
      _dump_prefix($106);
      var $107=_printf(((96044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $108=$1;
      var $109=$n3;
      var $110=(($109+4)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$3;
      var $117=((($116)+(3))|0);
      _parser_dump($108, $115, $117);
      label = 17; break;
    case 17: 
      var $119=$n2;
      var $120=(($119+4)|0);
      var $121=HEAP32[(($120)>>2)];
      $n2=$121;
      label = 10; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $124=$2;
      var $125=(($124+4)|0);
      var $126=HEAP32[(($125)>>2)];
      $2=$126;
      var $127=$2;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129)|(0))!=0;
      if ($130) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $132=$3;
      var $133=((($132)+(1))|0);
      _dump_prefix($133);
      var $134=_printf(((95976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $135=$1;
      var $136=$2;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$3;
      var $140=((($139)+(2))|0);
      _parser_dump($135, $138, $140);
      label = 21; break;
    case 21: 
      label = 212; break;
    case 22: 
      var $143=_printf(((95800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $144=$3;
      var $145=((($144)+(1))|0);
      _dump_prefix($145);
      var $146=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $147=$1;
      var $148=$2;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$3;
      var $152=((($151)+(2))|0);
      _parser_dump($147, $150, $152);
      var $153=$3;
      var $154=((($153)+(1))|0);
      _dump_prefix($154);
      var $155=_printf(((95472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $156=$1;
      var $157=$2;
      var $158=(($157+4)|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=(($159+4)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$3;
      var $163=((($162)+(2))|0);
      _parser_dump($156, $161, $163);
      label = 212; break;
    case 23: 
      var $165=_printf(((95396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 25; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $168=_printf(((95396)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $169=$2;
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      $2=$171;
      var $172=$2;
      var $173=(($172)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|(0))!=0;
      if ($175) { label = 26; break; } else { label = 40; break; }
    case 26: 
      var $177=$2;
      var $178=(($177)|0);
      var $179=HEAP32[(($178)>>2)];
      $n1=$179;
      var $180=$n1;
      var $181=(($180)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=(($182)|(0))!=0;
      if ($183) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $185=$3;
      var $186=((($185)+(1))|0);
      _dump_prefix($186);
      var $187=_printf(((95328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $188=$1;
      var $189=$n1;
      var $190=(($189)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$3;
      var $193=((($192)+(2))|0);
      _dump_recur($188, $191, $193);
      label = 28; break;
    case 28: 
      var $195=$n1;
      var $196=(($195+4)|0);
      var $197=HEAP32[(($196)>>2)];
      $n1=$197;
      var $198=$n1;
      var $199=(($198)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200)|(0))!=0;
      if ($201) { label = 29; break; } else { label = 33; break; }
    case 29: 
      var $203=$3;
      var $204=((($203)+(1))|0);
      _dump_prefix($204);
      var $205=_printf(((95280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $206=$n1;
      var $207=(($206)|0);
      var $208=HEAP32[(($207)>>2)];
      $n22=$208;
      label = 30; break;
    case 30: 
      var $210=$n22;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $213=$3;
      var $214=((($213)+(2))|0);
      _dump_prefix($214);
      var $215=$1;
      var $216=$n22;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$220;
      var $222=(($221) & 65535);
      var $223=_mrb_sym2name($215, $222);
      var $224=_printf(((95220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$223,tempInt));
      var $225=$1;
      var $226=$n22;
      var $227=(($226)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228+4)|0);
      var $230=HEAP32[(($229)>>2)];
      _parser_dump($225, $230, 0);
      var $231=$n22;
      var $232=(($231+4)|0);
      var $233=HEAP32[(($232)>>2)];
      $n22=$233;
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $236=$n1;
      var $237=(($236+4)|0);
      var $238=HEAP32[(($237)>>2)];
      $n1=$238;
      var $239=$n1;
      var $240=(($239)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|(0))!=0;
      if ($242) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $244=$3;
      var $245=((($244)+(1))|0);
      _dump_prefix($245);
      var $246=$1;
      var $247=$n1;
      var $248=(($247)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=$249;
      var $251=(($250) & 65535);
      var $252=_mrb_sym2name($246, $251);
      var $253=_printf(((95128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$252,tempInt));
      label = 35; break;
    case 35: 
      var $255=$n1;
      var $256=(($255+4)|0);
      var $257=HEAP32[(($256)>>2)];
      $n1=$257;
      var $258=$n1;
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|(0))!=0;
      if ($261) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $263=$3;
      var $264=((($263)+(1))|0);
      _dump_prefix($264);
      var $265=_printf(((95076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $266=$1;
      var $267=$n1;
      var $268=(($267)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=$3;
      var $271=((($270)+(2))|0);
      _dump_recur($266, $269, $271);
      label = 37; break;
    case 37: 
      var $273=$n1;
      var $274=(($273+4)|0);
      var $275=HEAP32[(($274)>>2)];
      $n1=$275;
      var $276=$n1;
      var $277=(($276)|(0))!=0;
      if ($277) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $279=$3;
      var $280=((($279)+(1))|0);
      _dump_prefix($280);
      var $281=$1;
      var $282=$n1;
      var $283=$282;
      var $284=(($283) & 65535);
      var $285=_mrb_sym2name($281, $284);
      var $286=_printf(((95004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$285,tempInt));
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $289=$3;
      var $290=((($289)+(1))|0);
      _dump_prefix($290);
      var $291=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $292=$1;
      var $293=$2;
      var $294=(($293+4)|0);
      var $295=HEAP32[(($294)>>2)];
      var $296=(($295)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$3;
      var $299=((($298)+(2))|0);
      _parser_dump($292, $297, $299);
      label = 212; break;
    case 41: 
      var $301=_printf(((94880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $302=$3;
      var $303=((($302)+(1))|0);
      _dump_prefix($303);
      var $304=_printf(((94848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $305=$1;
      var $306=$2;
      var $307=(($306)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=$3;
      var $310=((($309)+(2))|0);
      _parser_dump($305, $308, $310);
      var $311=$3;
      var $312=((($311)+(1))|0);
      _dump_prefix($312);
      var $313=_printf(((94572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $314=$1;
      var $315=$2;
      var $316=(($315+4)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=$3;
      var $321=((($320)+(2))|0);
      _parser_dump($314, $319, $321);
      var $322=$2;
      var $323=(($322+4)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=(($324+4)|0);
      var $326=HEAP32[(($325)>>2)];
      var $327=(($326)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|(0))!=0;
      if ($329) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $331=$3;
      var $332=((($331)+(1))|0);
      _dump_prefix($332);
      var $333=_printf(((95976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $334=$1;
      var $335=$2;
      var $336=(($335+4)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337+4)|0);
      var $339=HEAP32[(($338)>>2)];
      var $340=(($339)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$3;
      var $343=((($342)+(2))|0);
      _parser_dump($334, $341, $343);
      label = 43; break;
    case 43: 
      label = 212; break;
    case 44: 
      var $346=_printf(((94524)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $347=$1;
      var $348=$2;
      var $349=(($348)|0);
      var $350=HEAP32[(($349)>>2)];
      var $351=$3;
      var $352=((($351)+(1))|0);
      _parser_dump($347, $350, $352);
      var $353=$1;
      var $354=$2;
      var $355=(($354+4)|0);
      var $356=HEAP32[(($355)>>2)];
      var $357=$3;
      var $358=((($357)+(1))|0);
      _parser_dump($353, $356, $358);
      label = 212; break;
    case 45: 
      var $360=_printf(((94456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $361=$1;
      var $362=$2;
      var $363=(($362)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=$3;
      var $366=((($365)+(1))|0);
      _parser_dump($361, $364, $366);
      var $367=$1;
      var $368=$2;
      var $369=(($368+4)|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=$3;
      var $372=((($371)+(1))|0);
      _parser_dump($367, $370, $372);
      label = 212; break;
    case 46: 
      var $374=_printf(((94412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $375=$2;
      var $376=(($375)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=(($377)|(0))!=0;
      if ($378) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $380=$1;
      var $381=$2;
      var $382=(($381)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=$3;
      var $385=((($384)+(1))|0);
      _parser_dump($380, $383, $385);
      label = 48; break;
    case 48: 
      var $387=$2;
      var $388=(($387+4)|0);
      var $389=HEAP32[(($388)>>2)];
      $2=$389;
      label = 49; break;
    case 49: 
      var $391=$2;
      var $392=(($391)|(0))!=0;
      if ($392) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $394=$3;
      var $395=((($394)+(1))|0);
      _dump_prefix($395);
      var $396=_printf(((94360)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $397=$1;
      var $398=$2;
      var $399=(($398)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$3;
      var $404=((($403)+(2))|0);
      _dump_recur($397, $402, $404);
      var $405=$3;
      var $406=((($405)+(1))|0);
      _dump_prefix($406);
      var $407=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $408=$1;
      var $409=$2;
      var $410=(($409)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($411+4)|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=$3;
      var $415=((($414)+(2))|0);
      _parser_dump($408, $413, $415);
      var $416=$2;
      var $417=(($416+4)|0);
      var $418=HEAP32[(($417)>>2)];
      $2=$418;
      label = 49; break;
    case 51: 
      label = 212; break;
    case 52: 
      var $421=_printf(((94308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $422=$3;
      var $423=((($422)+(1))|0);
      _dump_prefix($423);
      var $424=_printf(((94848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $425=$1;
      var $426=$2;
      var $427=(($426)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$3;
      var $430=((($429)+(2))|0);
      _parser_dump($425, $428, $430);
      var $431=$3;
      var $432=((($431)+(1))|0);
      _dump_prefix($432);
      var $433=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $434=$1;
      var $435=$2;
      var $436=(($435+4)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=$3;
      var $439=((($438)+(2))|0);
      _parser_dump($434, $437, $439);
      label = 212; break;
    case 53: 
      var $441=_printf(((94224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $442=$3;
      var $443=((($442)+(1))|0);
      _dump_prefix($443);
      var $444=_printf(((94848)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $445=$1;
      var $446=$2;
      var $447=(($446)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=$3;
      var $450=((($449)+(2))|0);
      _parser_dump($445, $448, $450);
      var $451=$3;
      var $452=((($451)+(1))|0);
      _dump_prefix($452);
      var $453=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $454=$1;
      var $455=$2;
      var $456=(($455+4)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=$3;
      var $459=((($458)+(2))|0);
      _parser_dump($454, $457, $459);
      label = 212; break;
    case 54: 
      var $461=_printf(((94180)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $462=$3;
      var $463=((($462)+(1))|0);
      _dump_prefix($463);
      var $464=_printf(((94076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $465=$2;
      var $466=(($465)|0);
      var $467=HEAP32[(($466)>>2)];
      $n23=$467;
      var $468=$n23;
      var $469=(($468)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470)|(0))!=0;
      if ($471) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $473=$3;
      var $474=((($473)+(2))|0);
      _dump_prefix($474);
      var $475=_printf(((94028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $476=$1;
      var $477=$n23;
      var $478=(($477)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=$3;
      var $481=((($480)+(3))|0);
      _dump_recur($476, $479, $481);
      label = 56; break;
    case 56: 
      var $483=$n23;
      var $484=(($483+4)|0);
      var $485=HEAP32[(($484)>>2)];
      $n23=$485;
      var $486=$n23;
      var $487=(($486)|(0))!=0;
      if ($487) { label = 57; break; } else { label = 64; break; }
    case 57: 
      var $489=$n23;
      var $490=(($489)|0);
      var $491=HEAP32[(($490)>>2)];
      var $492=(($491)|(0))!=0;
      if ($492) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $494=$3;
      var $495=((($494)+(2))|0);
      _dump_prefix($495);
      var $496=_printf(((93692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $497=$1;
      var $498=$n23;
      var $499=(($498)|0);
      var $500=HEAP32[(($499)>>2)];
      var $501=$3;
      var $502=((($501)+(3))|0);
      _parser_dump($497, $500, $502);
      label = 59; break;
    case 59: 
      var $504=$n23;
      var $505=(($504+4)|0);
      var $506=HEAP32[(($505)>>2)];
      $n23=$506;
      var $507=$n23;
      var $508=(($507)|(0))!=0;
      if ($508) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $510=$n23;
      var $511=(($510)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=(($512)|(0))!=0;
      if ($513) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $515=$3;
      var $516=((($515)+(2))|0);
      _dump_prefix($516);
      var $517=_printf(((93644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $518=$1;
      var $519=$n23;
      var $520=(($519)|0);
      var $521=HEAP32[(($520)>>2)];
      var $522=$3;
      var $523=((($522)+(3))|0);
      _dump_recur($518, $521, $523);
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $527=$2;
      var $528=(($527+4)|0);
      var $529=HEAP32[(($528)>>2)];
      $2=$529;
      var $530=$3;
      var $531=((($530)+(1))|0);
      _dump_prefix($531);
      var $532=_printf(((93552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $533=$1;
      var $534=$2;
      var $535=(($534)|0);
      var $536=HEAP32[(($535)>>2)];
      var $537=$3;
      var $538=((($537)+(2))|0);
      _parser_dump($533, $536, $538);
      var $539=$2;
      var $540=(($539+4)|0);
      var $541=HEAP32[(($540)>>2)];
      $2=$541;
      var $542=$3;
      var $543=((($542)+(1))|0);
      _dump_prefix($543);
      var $544=_printf(((93520)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $545=$1;
      var $546=$2;
      var $547=(($546)|0);
      var $548=HEAP32[(($547)>>2)];
      var $549=$3;
      var $550=((($549)+(2))|0);
      _parser_dump($545, $548, $550);
      label = 212; break;
    case 65: 
      var $552=_printf(((93456)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $553=$2;
      var $554=(($553)|0);
      var $555=HEAP32[(($554)>>2)];
      $n24=$555;
      var $556=$n24;
      var $557=(($556)|(0))!=0;
      if ($557) { label = 66; break; } else { label = 76; break; }
    case 66: 
      var $559=$n24;
      var $560=(($559)|0);
      var $561=HEAP32[(($560)>>2)];
      var $562=(($561)|(0))!=0;
      if ($562) { label = 68; break; } else { label = 67; break; }
    case 67: 
      var $564=$n24;
      var $565=(($564+4)|0);
      var $566=HEAP32[(($565)>>2)];
      var $567=(($566)|(0))!=0;
      if ($567) { label = 68; break; } else { label = 76; break; }
    case 68: 
      var $569=$3;
      var $570=((($569)+(1))|0);
      _dump_prefix($570);
      var $571=_printf(((93364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $572=$3;
      var $573=((($572)+(2))|0);
      _dump_prefix($573);
      label = 69; break;
    case 69: 
      var $575=$n24;
      var $576=(($575)|(0))!=0;
      if ($576) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $578=$n24;
      var $579=(($578)|0);
      var $580=HEAP32[(($579)>>2)];
      var $581=(($580)|(0))!=0;
      if ($581) { label = 71; break; } else { label = 74; break; }
    case 71: 
      var $583=$n24;
      var $584=$2;
      var $585=(($584)|0);
      var $586=HEAP32[(($585)>>2)];
      var $587=(($583)|(0))!=(($586)|(0));
      if ($587) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $589=_printf(((93316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 73; break;
    case 73: 
      var $591=$1;
      var $592=$n24;
      var $593=(($592)|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=$594;
      var $596=(($595) & 65535);
      var $597=_mrb_sym2name($591, $596);
      var $598=_printf(((93288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$597,tempInt));
      label = 74; break;
    case 74: 
      var $600=$n24;
      var $601=(($600+4)|0);
      var $602=HEAP32[(($601)>>2)];
      $n24=$602;
      label = 69; break;
    case 75: 
      var $604=_printf(((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 76; break;
    case 76: 
      var $606=$2;
      var $607=(($606+4)|0);
      var $608=HEAP32[(($607)>>2)];
      $2=$608;
      var $609=$3;
      var $610=((($609)+(1))|0);
      $3=$610;
      label = 4; break;
    case 77: 
      var $612=_printf(((114108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $613=$1;
      var $614=$2;
      var $615=(($614)|0);
      var $616=HEAP32[(($615)>>2)];
      var $617=$3;
      var $618=((($617)+(1))|0);
      _parser_dump($613, $616, $618);
      var $619=$3;
      var $620=((($619)+(1))|0);
      _dump_prefix($620);
      var $621=$1;
      var $622=$2;
      var $623=(($622+4)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=(($624)|0);
      var $626=HEAP32[(($625)>>2)];
      var $627=$626;
      var $628=(($627) & 65535);
      var $629=_mrb_sym2name($621, $628);
      var $630=$2;
      var $631=(($630+4)|0);
      var $632=HEAP32[(($631)>>2)];
      var $633=(($632)|0);
      var $634=HEAP32[(($633)>>2)];
      var $635=$634;
      var $636=_printf(((114044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$629,HEAP32[(((tempInt)+(4))>>2)]=$635,tempInt));
      var $637=$2;
      var $638=(($637+4)|0);
      var $639=HEAP32[(($638)>>2)];
      var $640=(($639+4)|0);
      var $641=HEAP32[(($640)>>2)];
      var $642=(($641)|0);
      var $643=HEAP32[(($642)>>2)];
      $2=$643;
      var $644=$2;
      var $645=(($644)|(0))!=0;
      if ($645) { label = 78; break; } else { label = 81; break; }
    case 78: 
      var $647=$3;
      var $648=((($647)+(1))|0);
      _dump_prefix($648);
      var $649=_printf(((113672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $650=$1;
      var $651=$2;
      var $652=(($651)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=$3;
      var $655=((($654)+(2))|0);
      _dump_recur($650, $653, $655);
      var $656=$2;
      var $657=(($656+4)|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=(($658)|(0))!=0;
      if ($659) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $661=$3;
      var $662=((($661)+(1))|0);
      _dump_prefix($662);
      var $663=_printf(((113664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $664=$1;
      var $665=$2;
      var $666=(($665+4)|0);
      var $667=HEAP32[(($666)>>2)];
      var $668=$3;
      var $669=((($668)+(2))|0);
      _parser_dump($664, $667, $669);
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 212; break;
    case 82: 
      var $673=_printf(((113652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $674=$1;
      var $675=$2;
      var $676=(($675)|0);
      var $677=HEAP32[(($676)>>2)];
      var $678=$3;
      var $679=((($678)+(1))|0);
      _parser_dump($674, $677, $679);
      var $680=$1;
      var $681=$2;
      var $682=(($681+4)|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=$3;
      var $685=((($684)+(1))|0);
      _parser_dump($680, $683, $685);
      label = 212; break;
    case 83: 
      var $687=_printf(((113608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $688=$1;
      var $689=$2;
      var $690=(($689)|0);
      var $691=HEAP32[(($690)>>2)];
      var $692=$3;
      var $693=((($692)+(1))|0);
      _parser_dump($688, $691, $693);
      var $694=$1;
      var $695=$2;
      var $696=(($695+4)|0);
      var $697=HEAP32[(($696)>>2)];
      var $698=$3;
      var $699=((($698)+(1))|0);
      _parser_dump($694, $697, $699);
      label = 212; break;
    case 84: 
      var $701=_printf(((113568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $702=$1;
      var $703=$2;
      var $704=(($703)|0);
      var $705=HEAP32[(($704)>>2)];
      var $706=$3;
      var $707=((($706)+(1))|0);
      _parser_dump($702, $705, $707);
      var $708=$3;
      var $709=((($708)+(1))|0);
      _dump_prefix($709);
      var $710=$1;
      var $711=$2;
      var $712=(($711+4)|0);
      var $713=HEAP32[(($712)>>2)];
      var $714=$713;
      var $715=(($714) & 65535);
      var $716=_mrb_sym2name($710, $715);
      var $717=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$716,tempInt));
      label = 212; break;
    case 85: 
      var $719=_printf(((113516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $720=$3;
      var $721=((($720)+(1))|0);
      _dump_prefix($721);
      var $722=$1;
      var $723=$2;
      var $724=$723;
      var $725=(($724) & 65535);
      var $726=_mrb_sym2name($722, $725);
      var $727=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$726,tempInt));
      label = 212; break;
    case 86: 
      var $729=_printf(((113492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $730=$1;
      var $731=$2;
      var $732=$3;
      var $733=((($732)+(1))|0);
      _dump_recur($730, $731, $733);
      label = 212; break;
    case 87: 
      var $735=_printf(((113388)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 88; break;
    case 88: 
      var $737=$2;
      var $738=(($737)|(0))!=0;
      if ($738) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $740=$3;
      var $741=((($740)+(1))|0);
      _dump_prefix($741);
      var $742=_printf(((113364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $743=$1;
      var $744=$2;
      var $745=(($744)|0);
      var $746=HEAP32[(($745)>>2)];
      var $747=(($746)|0);
      var $748=HEAP32[(($747)>>2)];
      var $749=$3;
      var $750=((($749)+(2))|0);
      _parser_dump($743, $748, $750);
      var $751=$3;
      var $752=((($751)+(1))|0);
      _dump_prefix($752);
      var $753=_printf(((113136)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $754=$1;
      var $755=$2;
      var $756=(($755)|0);
      var $757=HEAP32[(($756)>>2)];
      var $758=(($757+4)|0);
      var $759=HEAP32[(($758)>>2)];
      var $760=$3;
      var $761=((($760)+(2))|0);
      _parser_dump($754, $759, $761);
      var $762=$2;
      var $763=(($762+4)|0);
      var $764=HEAP32[(($763)>>2)];
      $2=$764;
      label = 88; break;
    case 90: 
      label = 212; break;
    case 91: 
      var $767=_printf(((113076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $768=$1;
      var $769=$2;
      var $770=$3;
      var $771=((($770)+(1))|0);
      _parser_dump($768, $769, $771);
      label = 212; break;
    case 92: 
      var $773=_printf(((113044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $774=$3;
      var $775=((($774)+(1))|0);
      _dump_prefix($775);
      var $776=_printf(((112952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $777=$1;
      var $778=$2;
      var $779=(($778)|0);
      var $780=HEAP32[(($779)>>2)];
      var $781=$3;
      var $782=((($781)+(2))|0);
      _parser_dump($777, $780, $782);
      var $783=$3;
      var $784=((($783)+(1))|0);
      _dump_prefix($784);
      var $785=_printf(((112876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $786=$1;
      var $787=$2;
      var $788=(($787+4)|0);
      var $789=HEAP32[(($788)>>2)];
      var $790=$3;
      var $791=((($790)+(2))|0);
      _parser_dump($786, $789, $791);
      label = 212; break;
    case 93: 
      var $793=_printf(((112812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $794=$3;
      var $795=((($794)+(1))|0);
      _dump_prefix($795);
      var $796=_printf(((112712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $797=$2;
      var $798=(($797)|0);
      var $799=HEAP32[(($798)>>2)];
      $n25=$799;
      var $800=$n25;
      var $801=(($800)|0);
      var $802=HEAP32[(($801)>>2)];
      var $803=(($802)|(0))!=0;
      if ($803) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $805=$3;
      var $806=((($805)+(2))|0);
      _dump_prefix($806);
      var $807=_printf(((94028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $808=$1;
      var $809=$n25;
      var $810=(($809)|0);
      var $811=HEAP32[(($810)>>2)];
      var $812=$3;
      var $813=((($812)+(3))|0);
      _dump_recur($808, $811, $813);
      label = 95; break;
    case 95: 
      var $815=$n25;
      var $816=(($815+4)|0);
      var $817=HEAP32[(($816)>>2)];
      $n25=$817;
      var $818=$n25;
      var $819=(($818)|(0))!=0;
      if ($819) { label = 96; break; } else { label = 106; break; }
    case 96: 
      var $821=$n25;
      var $822=(($821)|0);
      var $823=HEAP32[(($822)>>2)];
      var $824=(($823)|(0))!=0;
      if ($824) { label = 97; break; } else { label = 101; break; }
    case 97: 
      var $826=$3;
      var $827=((($826)+(2))|0);
      _dump_prefix($827);
      var $828=_printf(((93692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $829=$n25;
      var $830=(($829)|0);
      var $831=HEAP32[(($830)>>2)];
      var $832=(($831)|(0))==-1;
      if ($832) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $834=$3;
      var $835=((($834)+(2))|0);
      _dump_prefix($835);
      var $836=_printf(((112648)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 100; break;
    case 99: 
      var $838=$1;
      var $839=$n25;
      var $840=(($839)|0);
      var $841=HEAP32[(($840)>>2)];
      var $842=$3;
      var $843=((($842)+(3))|0);
      _parser_dump($838, $841, $843);
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $846=$n25;
      var $847=(($846+4)|0);
      var $848=HEAP32[(($847)>>2)];
      $n25=$848;
      var $849=$n25;
      var $850=(($849)|(0))!=0;
      if ($850) { label = 102; break; } else { label = 105; break; }
    case 102: 
      var $852=$n25;
      var $853=(($852)|0);
      var $854=HEAP32[(($853)>>2)];
      var $855=(($854)|(0))!=0;
      if ($855) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $857=$3;
      var $858=((($857)+(2))|0);
      _dump_prefix($858);
      var $859=_printf(((93644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $860=$1;
      var $861=$n25;
      var $862=(($861)|0);
      var $863=HEAP32[(($862)>>2)];
      var $864=$3;
      var $865=((($864)+(3))|0);
      _dump_recur($860, $863, $865);
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $869=$3;
      var $870=((($869)+(1))|0);
      _dump_prefix($870);
      var $871=_printf(((112876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $872=$1;
      var $873=$2;
      var $874=(($873+4)|0);
      var $875=HEAP32[(($874)>>2)];
      var $876=$3;
      var $877=((($876)+(2))|0);
      _parser_dump($872, $875, $877);
      label = 212; break;
    case 107: 
      var $879=_printf(((112528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $880=$3;
      var $881=((($880)+(1))|0);
      _dump_prefix($881);
      var $882=_printf(((112952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $883=$1;
      var $884=$2;
      var $885=(($884)|0);
      var $886=HEAP32[(($885)>>2)];
      var $887=$3;
      var $888=((($887)+(2))|0);
      _parser_dump($883, $886, $888);
      var $889=$2;
      var $890=(($889+4)|0);
      var $891=HEAP32[(($890)>>2)];
      $2=$891;
      var $892=$3;
      var $893=((($892)+(1))|0);
      _dump_prefix($893);
      var $894=$1;
      var $895=$2;
      var $896=(($895)|0);
      var $897=HEAP32[(($896)>>2)];
      var $898=$897;
      var $899=(($898) & 65535);
      var $900=_mrb_sym2name($894, $899);
      var $901=$2;
      var $902=(($901)|0);
      var $903=HEAP32[(($902)>>2)];
      var $904=$903;
      var $905=_printf(((112468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$900,HEAP32[(((tempInt)+(4))>>2)]=$904,tempInt));
      var $906=$2;
      var $907=(($906+4)|0);
      var $908=HEAP32[(($907)>>2)];
      $2=$908;
      var $909=$1;
      var $910=$2;
      var $911=(($910)|0);
      var $912=HEAP32[(($911)>>2)];
      var $913=$3;
      var $914=((($913)+(1))|0);
      _parser_dump($909, $912, $914);
      label = 212; break;
    case 108: 
      var $916=_printf(((112168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $917=$2;
      var $918=(($917)|(0))!=0;
      if ($918) { label = 109; break; } else { label = 112; break; }
    case 109: 
      var $920=$3;
      var $921=((($920)+(1))|0);
      _dump_prefix($921);
      var $922=_printf(((113672)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $923=$1;
      var $924=$2;
      var $925=(($924)|0);
      var $926=HEAP32[(($925)>>2)];
      var $927=$3;
      var $928=((($927)+(2))|0);
      _dump_recur($923, $926, $928);
      var $929=$2;
      var $930=(($929+4)|0);
      var $931=HEAP32[(($930)>>2)];
      var $932=(($931)|(0))!=0;
      if ($932) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $934=$3;
      var $935=((($934)+(1))|0);
      _dump_prefix($935);
      var $936=_printf(((113664)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $937=$1;
      var $938=$2;
      var $939=(($938+4)|0);
      var $940=HEAP32[(($939)>>2)];
      var $941=$3;
      var $942=((($941)+(2))|0);
      _parser_dump($937, $940, $942);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 212; break;
    case 113: 
      var $946=_printf(((112148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 114: 
      var $948=_printf(((112132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $949=$1;
      var $950=$2;
      var $951=$3;
      var $952=((($951)+(1))|0);
      _parser_dump($949, $950, $952);
      label = 212; break;
    case 115: 
      var $954=_printf(((112116)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $955=$1;
      var $956=$2;
      var $957=$3;
      var $958=((($957)+(1))|0);
      _dump_recur($955, $956, $958);
      label = 212; break;
    case 116: 
      var $960=_printf(((112088)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $961=$1;
      var $962=$2;
      var $963=$3;
      var $964=((($963)+(1))|0);
      _parser_dump($961, $962, $964);
      label = 212; break;
    case 117: 
      var $966=_printf(((112068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $967=$1;
      var $968=$2;
      var $969=$3;
      var $970=((($969)+(1))|0);
      _parser_dump($967, $968, $970);
      label = 212; break;
    case 118: 
      var $972=_printf(((112056)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 119: 
      var $974=_printf(((112036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 120: 
      var $976=$1;
      var $977=$2;
      var $978=$977;
      var $979=(($978) & 65535);
      var $980=_mrb_sym2name($976, $979);
      var $981=_printf(((111976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$980,tempInt));
      label = 212; break;
    case 121: 
      var $983=$1;
      var $984=$2;
      var $985=$984;
      var $986=(($985) & 65535);
      var $987=_mrb_sym2name($983, $986);
      var $988=_printf(((111908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$987,tempInt));
      label = 212; break;
    case 122: 
      var $990=$1;
      var $991=$2;
      var $992=$991;
      var $993=(($992) & 65535);
      var $994=_mrb_sym2name($990, $993);
      var $995=_printf(((111608)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$994,tempInt));
      label = 212; break;
    case 123: 
      var $997=$1;
      var $998=$2;
      var $999=$998;
      var $1000=(($999) & 65535);
      var $1001=_mrb_sym2name($997, $1000);
      var $1002=_printf(((111592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1001,tempInt));
      label = 212; break;
    case 124: 
      var $1004=$1;
      var $1005=$2;
      var $1006=$1005;
      var $1007=(($1006) & 65535);
      var $1008=_mrb_sym2name($1004, $1007);
      var $1009=_printf(((111576)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1008,tempInt));
      label = 212; break;
    case 125: 
      var $1011=_printf(((111560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1012=$3;
      var $1013=((($1012)+(1))|0);
      _dump_prefix($1013);
      var $1014=_printf(((112952)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1015=$1;
      var $1016=$2;
      var $1017=(($1016)|0);
      var $1018=HEAP32[(($1017)>>2)];
      var $1019=$3;
      var $1020=((($1019)+(2))|0);
      _parser_dump($1015, $1018, $1020);
      var $1021=$3;
      var $1022=((($1021)+(1))|0);
      _dump_prefix($1022);
      var $1023=_printf(((112876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1024=$1;
      var $1025=$2;
      var $1026=(($1025+4)|0);
      var $1027=HEAP32[(($1026)>>2)];
      var $1028=$3;
      var $1029=((($1028)+(2))|0);
      _parser_dump($1024, $1027, $1029);
      label = 212; break;
    case 126: 
      var $1031=$2;
      var $1032=$1031;
      var $1033=_printf(((111512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1032,tempInt));
      label = 212; break;
    case 127: 
      var $1035=$2;
      var $1036=$1035;
      var $1037=_printf(((111484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1036,tempInt));
      label = 212; break;
    case 128: 
      var $1039=$1;
      var $1040=$2;
      var $1041=$1040;
      var $1042=(($1041) & 65535);
      var $1043=_mrb_sym2name($1039, $1042);
      var $1044=_printf(((111468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1043,tempInt));
      label = 212; break;
    case 129: 
      var $1046=_printf(((111432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1047=$1;
      var $1048=$2;
      var $1049=$3;
      var $1050=((($1049)+(1))|0);
      _parser_dump($1047, $1048, $1050);
      label = 212; break;
    case 130: 
      var $1052=$2;
      var $1053=(($1052)|0);
      var $1054=HEAP32[(($1053)>>2)];
      var $1055=$1054;
      var $1056=$2;
      var $1057=(($1056+4)|0);
      var $1058=HEAP32[(($1057)>>2)];
      var $1059=(($1058)|0);
      var $1060=HEAP32[(($1059)>>2)];
      var $1061=$1060;
      var $1062=_printf(((111400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1055,HEAP32[(((tempInt)+(4))>>2)]=$1061,tempInt));
      label = 212; break;
    case 131: 
      var $1064=$2;
      var $1065=$1064;
      var $1066=_printf(((111384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1065,tempInt));
      label = 212; break;
    case 132: 
      var $1068=_printf(((111188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1069=$1;
      var $1070=$2;
      var $1071=$3;
      var $1072=((($1071)+(1))|0);
      _parser_dump($1069, $1070, $1072);
      label = 212; break;
    case 133: 
      var $1074=$2;
      var $1075=(($1074)|0);
      var $1076=HEAP32[(($1075)>>2)];
      var $1077=$1076;
      var $1078=$2;
      var $1079=(($1078+4)|0);
      var $1080=HEAP32[(($1079)>>2)];
      var $1081=$1080;
      var $1082=_printf(((111156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1077,HEAP32[(((tempInt)+(4))>>2)]=$1081,tempInt));
      label = 212; break;
    case 134: 
      var $1084=_printf(((111140)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1085=$1;
      var $1086=$2;
      var $1087=$3;
      var $1088=((($1087)+(1))|0);
      _dump_recur($1085, $1086, $1088);
      label = 212; break;
    case 135: 
      var $1090=$2;
      var $1091=(($1090)|0);
      var $1092=HEAP32[(($1091)>>2)];
      var $1093=$1092;
      var $1094=$2;
      var $1095=(($1094+4)|0);
      var $1096=HEAP32[(($1095)>>2)];
      var $1097=$1096;
      var $1098=_printf(((111108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1093,HEAP32[(((tempInt)+(4))>>2)]=$1097,tempInt));
      label = 212; break;
    case 136: 
      var $1100=_printf(((111068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1101=$1;
      var $1102=$2;
      var $1103=$3;
      var $1104=((($1103)+(1))|0);
      _dump_recur($1101, $1102, $1104);
      label = 212; break;
    case 137: 
      var $1106=$2;
      var $1107=(($1106)|0);
      var $1108=HEAP32[(($1107)>>2)];
      var $1109=$1108;
      var $1110=$2;
      var $1111=(($1110+4)|0);
      var $1112=HEAP32[(($1111)>>2)];
      var $1113=$1112;
      var $1114=_printf(((111036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1109,HEAP32[(((tempInt)+(4))>>2)]=$1113,tempInt));
      label = 212; break;
    case 138: 
      var $1116=_printf(((111016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1117=$1;
      var $1118=$2;
      var $1119=(($1118)|0);
      var $1120=HEAP32[(($1119)>>2)];
      var $1121=$3;
      var $1122=((($1121)+(1))|0);
      _dump_recur($1117, $1120, $1122);
      var $1123=$3;
      _dump_prefix($1123);
      var $1124=$2;
      var $1125=(($1124+4)|0);
      var $1126=HEAP32[(($1125)>>2)];
      var $1127=(($1126+4)|0);
      var $1128=HEAP32[(($1127)>>2)];
      var $1129=(($1128)|0);
      var $1130=HEAP32[(($1129)>>2)];
      var $1131=$1130;
      var $1132=_printf(((110956)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1131,tempInt));
      var $1133=$3;
      _dump_prefix($1133);
      var $1134=$2;
      var $1135=(($1134+4)|0);
      var $1136=HEAP32[(($1135)>>2)];
      var $1137=(($1136+4)|0);
      var $1138=HEAP32[(($1137)>>2)];
      var $1139=(($1138+4)|0);
      var $1140=HEAP32[(($1139)>>2)];
      var $1141=$1140;
      var $1142=_printf(((110908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1141,tempInt));
      label = 212; break;
    case 139: 
      var $1144=$1;
      var $1145=$2;
      var $1146=$1145;
      var $1147=(($1146) & 65535);
      var $1148=_mrb_sym2name($1144, $1147);
      var $1149=_printf(((110892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1148,tempInt));
      label = 212; break;
    case 140: 
      var $1151=_printf(((110668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 141: 
      var $1153=_printf(((110656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 142: 
      var $1155=_printf(((110636)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 143: 
      var $1157=_printf(((110624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 144: 
      var $1159=$1;
      var $1160=$2;
      var $1161=(($1160)|0);
      var $1162=HEAP32[(($1161)>>2)];
      var $1163=$1162;
      var $1164=(($1163) & 65535);
      var $1165=_mrb_sym2name($1159, $1164);
      var $1166=$1;
      var $1167=$2;
      var $1168=(($1167+4)|0);
      var $1169=HEAP32[(($1168)>>2)];
      var $1170=$1169;
      var $1171=(($1170) & 65535);
      var $1172=_mrb_sym2name($1166, $1171);
      var $1173=_printf(((110568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1165,HEAP32[(((tempInt)+(4))>>2)]=$1172,tempInt));
      label = 212; break;
    case 145: 
      var $1175=_printf(((110516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1176=$2;
      $t=$1176;
      label = 146; break;
    case 146: 
      var $1178=$t;
      var $1179=(($1178)|(0))!=0;
      if ($1179) { label = 147; break; } else { label = 148; break; }
    case 147: 
      var $1181=$1;
      var $1182=$t;
      var $1183=(($1182)|0);
      var $1184=HEAP32[(($1183)>>2)];
      var $1185=$1184;
      var $1186=(($1185) & 65535);
      var $1187=_mrb_sym2name($1181, $1186);
      var $1188=_printf(((110512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1187,tempInt));
      var $1189=$t;
      var $1190=(($1189+4)|0);
      var $1191=HEAP32[(($1190)>>2)];
      $t=$1191;
      label = 146; break;
    case 148: 
      var $1193=_printf(((110492)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 212; break;
    case 149: 
      var $1195=_printf(((110460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1196=$2;
      var $1197=(($1196)|0);
      var $1198=HEAP32[(($1197)>>2)];
      var $1199=(($1198)|0);
      var $1200=HEAP32[(($1199)>>2)];
      var $1201=(($1200)|(0))==0;
      if ($1201) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $1203=$3;
      var $1204=((($1203)+(1))|0);
      _dump_prefix($1204);
      var $1205=$1;
      var $1206=$2;
      var $1207=(($1206)|0);
      var $1208=HEAP32[(($1207)>>2)];
      var $1209=(($1208+4)|0);
      var $1210=HEAP32[(($1209)>>2)];
      var $1211=$1210;
      var $1212=(($1211) & 65535);
      var $1213=_mrb_sym2name($1205, $1212);
      var $1214=_printf(((110452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1213,tempInt));
      label = 155; break;
    case 151: 
      var $1216=$2;
      var $1217=(($1216)|0);
      var $1218=HEAP32[(($1217)>>2)];
      var $1219=(($1218)|0);
      var $1220=HEAP32[(($1219)>>2)];
      var $1221=(($1220)|(0))==1;
      if ($1221) { label = 152; break; } else { label = 153; break; }
    case 152: 
      var $1223=$3;
      var $1224=((($1223)+(1))|0);
      _dump_prefix($1224);
      var $1225=$1;
      var $1226=$2;
      var $1227=(($1226)|0);
      var $1228=HEAP32[(($1227)>>2)];
      var $1229=(($1228+4)|0);
      var $1230=HEAP32[(($1229)>>2)];
      var $1231=$1230;
      var $1232=(($1231) & 65535);
      var $1233=_mrb_sym2name($1225, $1232);
      var $1234=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1233,tempInt));
      label = 154; break;
    case 153: 
      var $1236=$1;
      var $1237=$2;
      var $1238=(($1237)|0);
      var $1239=HEAP32[(($1238)>>2)];
      var $1240=(($1239)|0);
      var $1241=HEAP32[(($1240)>>2)];
      var $1242=$3;
      var $1243=((($1242)+(1))|0);
      _parser_dump($1236, $1241, $1243);
      var $1244=$3;
      var $1245=((($1244)+(1))|0);
      _dump_prefix($1245);
      var $1246=$1;
      var $1247=$2;
      var $1248=(($1247)|0);
      var $1249=HEAP32[(($1248)>>2)];
      var $1250=(($1249+4)|0);
      var $1251=HEAP32[(($1250)>>2)];
      var $1252=$1251;
      var $1253=(($1252) & 65535);
      var $1254=_mrb_sym2name($1246, $1253);
      var $1255=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1254,tempInt));
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      var $1258=$2;
      var $1259=(($1258+4)|0);
      var $1260=HEAP32[(($1259)>>2)];
      var $1261=(($1260)|0);
      var $1262=HEAP32[(($1261)>>2)];
      var $1263=(($1262)|(0))!=0;
      if ($1263) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $1265=$3;
      var $1266=((($1265)+(1))|0);
      _dump_prefix($1266);
      var $1267=_printf(((110256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1268=$1;
      var $1269=$2;
      var $1270=(($1269+4)|0);
      var $1271=HEAP32[(($1270)>>2)];
      var $1272=(($1271)|0);
      var $1273=HEAP32[(($1272)>>2)];
      var $1274=$3;
      var $1275=((($1274)+(2))|0);
      _parser_dump($1268, $1273, $1275);
      label = 157; break;
    case 157: 
      var $1277=$3;
      var $1278=((($1277)+(1))|0);
      _dump_prefix($1278);
      var $1279=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1280=$1;
      var $1281=$2;
      var $1282=(($1281+4)|0);
      var $1283=HEAP32[(($1282)>>2)];
      var $1284=(($1283+4)|0);
      var $1285=HEAP32[(($1284)>>2)];
      var $1286=(($1285)|0);
      var $1287=HEAP32[(($1286)>>2)];
      var $1288=(($1287+4)|0);
      var $1289=HEAP32[(($1288)>>2)];
      var $1290=$3;
      var $1291=((($1290)+(2))|0);
      _parser_dump($1280, $1289, $1291);
      label = 212; break;
    case 158: 
      var $1293=_printf(((110240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1294=$2;
      var $1295=(($1294)|0);
      var $1296=HEAP32[(($1295)>>2)];
      var $1297=(($1296)|0);
      var $1298=HEAP32[(($1297)>>2)];
      var $1299=(($1298)|(0))==0;
      if ($1299) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $1301=$3;
      var $1302=((($1301)+(1))|0);
      _dump_prefix($1302);
      var $1303=$1;
      var $1304=$2;
      var $1305=(($1304)|0);
      var $1306=HEAP32[(($1305)>>2)];
      var $1307=(($1306+4)|0);
      var $1308=HEAP32[(($1307)>>2)];
      var $1309=$1308;
      var $1310=(($1309) & 65535);
      var $1311=_mrb_sym2name($1303, $1310);
      var $1312=_printf(((110452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1311,tempInt));
      label = 164; break;
    case 160: 
      var $1314=$2;
      var $1315=(($1314)|0);
      var $1316=HEAP32[(($1315)>>2)];
      var $1317=(($1316)|0);
      var $1318=HEAP32[(($1317)>>2)];
      var $1319=(($1318)|(0))==1;
      if ($1319) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $1321=$3;
      var $1322=((($1321)+(1))|0);
      _dump_prefix($1322);
      var $1323=$1;
      var $1324=$2;
      var $1325=(($1324)|0);
      var $1326=HEAP32[(($1325)>>2)];
      var $1327=(($1326+4)|0);
      var $1328=HEAP32[(($1327)>>2)];
      var $1329=$1328;
      var $1330=(($1329) & 65535);
      var $1331=_mrb_sym2name($1323, $1330);
      var $1332=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1331,tempInt));
      label = 163; break;
    case 162: 
      var $1334=$1;
      var $1335=$2;
      var $1336=(($1335)|0);
      var $1337=HEAP32[(($1336)>>2)];
      var $1338=(($1337)|0);
      var $1339=HEAP32[(($1338)>>2)];
      var $1340=$3;
      var $1341=((($1340)+(1))|0);
      _parser_dump($1334, $1339, $1341);
      var $1342=$3;
      var $1343=((($1342)+(1))|0);
      _dump_prefix($1343);
      var $1344=$1;
      var $1345=$2;
      var $1346=(($1345)|0);
      var $1347=HEAP32[(($1346)>>2)];
      var $1348=(($1347+4)|0);
      var $1349=HEAP32[(($1348)>>2)];
      var $1350=$1349;
      var $1351=(($1350) & 65535);
      var $1352=_mrb_sym2name($1344, $1351);
      var $1353=_printf(((113540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1352,tempInt));
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      var $1356=$3;
      var $1357=((($1356)+(1))|0);
      _dump_prefix($1357);
      var $1358=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1359=$1;
      var $1360=$2;
      var $1361=(($1360+4)|0);
      var $1362=HEAP32[(($1361)>>2)];
      var $1363=(($1362)|0);
      var $1364=HEAP32[(($1363)>>2)];
      var $1365=(($1364+4)|0);
      var $1366=HEAP32[(($1365)>>2)];
      var $1367=$3;
      var $1368=((($1367)+(2))|0);
      _parser_dump($1359, $1366, $1368);
      label = 212; break;
    case 165: 
      var $1370=_printf(((110224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1371=$1;
      var $1372=$2;
      var $1373=(($1372)|0);
      var $1374=HEAP32[(($1373)>>2)];
      var $1375=$3;
      var $1376=((($1375)+(1))|0);
      _parser_dump($1371, $1374, $1376);
      var $1377=$3;
      var $1378=((($1377)+(1))|0);
      _dump_prefix($1378);
      var $1379=_printf(((96432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1380=$1;
      var $1381=$2;
      var $1382=(($1381+4)|0);
      var $1383=HEAP32[(($1382)>>2)];
      var $1384=(($1383)|0);
      var $1385=HEAP32[(($1384)>>2)];
      var $1386=(($1385+4)|0);
      var $1387=HEAP32[(($1386)>>2)];
      var $1388=$3;
      var $1389=((($1388)+(2))|0);
      _parser_dump($1380, $1387, $1389);
      label = 212; break;
    case 166: 
      var $1391=_printf(((110212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1392=$3;
      var $1393=((($1392)+(1))|0);
      _dump_prefix($1393);
      var $1394=$1;
      var $1395=$2;
      var $1396=(($1395)|0);
      var $1397=HEAP32[(($1396)>>2)];
      var $1398=$1397;
      var $1399=(($1398) & 65535);
      var $1400=_mrb_sym2name($1394, $1399);
      var $1401=_printf(((110192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1400,tempInt));
      var $1402=$2;
      var $1403=(($1402+4)|0);
      var $1404=HEAP32[(($1403)>>2)];
      $2=$1404;
      var $1405=$2;
      var $1406=(($1405)|0);
      var $1407=HEAP32[(($1406)>>2)];
      $n26=$1407;
      var $1408=$n26;
      var $1409=(($1408)|(0))!=0;
      if ($1409) { label = 167; break; } else { label = 177; break; }
    case 167: 
      var $1411=$n26;
      var $1412=(($1411)|0);
      var $1413=HEAP32[(($1412)>>2)];
      var $1414=(($1413)|(0))!=0;
      if ($1414) { label = 169; break; } else { label = 168; break; }
    case 168: 
      var $1416=$n26;
      var $1417=(($1416+4)|0);
      var $1418=HEAP32[(($1417)>>2)];
      var $1419=(($1418)|(0))!=0;
      if ($1419) { label = 169; break; } else { label = 177; break; }
    case 169: 
      var $1421=$3;
      var $1422=((($1421)+(1))|0);
      _dump_prefix($1422);
      var $1423=_printf(((93364)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1424=$3;
      var $1425=((($1424)+(2))|0);
      _dump_prefix($1425);
      label = 170; break;
    case 170: 
      var $1427=$n26;
      var $1428=(($1427)|(0))!=0;
      if ($1428) { label = 171; break; } else { label = 176; break; }
    case 171: 
      var $1430=$n26;
      var $1431=(($1430)|0);
      var $1432=HEAP32[(($1431)>>2)];
      var $1433=(($1432)|(0))!=0;
      if ($1433) { label = 172; break; } else { label = 175; break; }
    case 172: 
      var $1435=$n26;
      var $1436=$2;
      var $1437=(($1436)|0);
      var $1438=HEAP32[(($1437)>>2)];
      var $1439=(($1435)|(0))!=(($1438)|(0));
      if ($1439) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $1441=_printf(((93316)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 174; break;
    case 174: 
      var $1443=$1;
      var $1444=$n26;
      var $1445=(($1444)|0);
      var $1446=HEAP32[(($1445)>>2)];
      var $1447=$1446;
      var $1448=(($1447) & 65535);
      var $1449=_mrb_sym2name($1443, $1448);
      var $1450=_printf(((93288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1449,tempInt));
      label = 175; break;
    case 175: 
      var $1452=$n26;
      var $1453=(($1452+4)|0);
      var $1454=HEAP32[(($1453)>>2)];
      $n26=$1454;
      label = 170; break;
    case 176: 
      var $1456=_printf(((95692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 177; break;
    case 177: 
      var $1458=$2;
      var $1459=(($1458+4)|0);
      var $1460=HEAP32[(($1459)>>2)];
      $2=$1460;
      var $1461=$2;
      var $1462=(($1461)|0);
      var $1463=HEAP32[(($1462)>>2)];
      var $1464=(($1463)|(0))!=0;
      if ($1464) { label = 178; break; } else { label = 192; break; }
    case 178: 
      var $1466=$2;
      var $1467=(($1466)|0);
      var $1468=HEAP32[(($1467)>>2)];
      $n7=$1468;
      var $1469=$n7;
      var $1470=(($1469)|0);
      var $1471=HEAP32[(($1470)>>2)];
      var $1472=(($1471)|(0))!=0;
      if ($1472) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $1474=$3;
      var $1475=((($1474)+(1))|0);
      _dump_prefix($1475);
      var $1476=_printf(((95328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1477=$1;
      var $1478=$n7;
      var $1479=(($1478)|0);
      var $1480=HEAP32[(($1479)>>2)];
      var $1481=$3;
      var $1482=((($1481)+(2))|0);
      _dump_recur($1477, $1480, $1482);
      label = 180; break;
    case 180: 
      var $1484=$n7;
      var $1485=(($1484+4)|0);
      var $1486=HEAP32[(($1485)>>2)];
      $n7=$1486;
      var $1487=$n7;
      var $1488=(($1487)|0);
      var $1489=HEAP32[(($1488)>>2)];
      var $1490=(($1489)|(0))!=0;
      if ($1490) { label = 181; break; } else { label = 185; break; }
    case 181: 
      var $1492=$3;
      var $1493=((($1492)+(1))|0);
      _dump_prefix($1493);
      var $1494=_printf(((95280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1495=$n7;
      var $1496=(($1495)|0);
      var $1497=HEAP32[(($1496)>>2)];
      $n28=$1497;
      label = 182; break;
    case 182: 
      var $1499=$n28;
      var $1500=(($1499)|(0))!=0;
      if ($1500) { label = 183; break; } else { label = 184; break; }
    case 183: 
      var $1502=$3;
      var $1503=((($1502)+(2))|0);
      _dump_prefix($1503);
      var $1504=$1;
      var $1505=$n28;
      var $1506=(($1505)|0);
      var $1507=HEAP32[(($1506)>>2)];
      var $1508=(($1507)|0);
      var $1509=HEAP32[(($1508)>>2)];
      var $1510=$1509;
      var $1511=(($1510) & 65535);
      var $1512=_mrb_sym2name($1504, $1511);
      var $1513=_printf(((95220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1512,tempInt));
      var $1514=$1;
      var $1515=$n28;
      var $1516=(($1515)|0);
      var $1517=HEAP32[(($1516)>>2)];
      var $1518=(($1517+4)|0);
      var $1519=HEAP32[(($1518)>>2)];
      _parser_dump($1514, $1519, 0);
      var $1520=$n28;
      var $1521=(($1520+4)|0);
      var $1522=HEAP32[(($1521)>>2)];
      $n28=$1522;
      label = 182; break;
    case 184: 
      label = 185; break;
    case 185: 
      var $1525=$n7;
      var $1526=(($1525+4)|0);
      var $1527=HEAP32[(($1526)>>2)];
      $n7=$1527;
      var $1528=$n7;
      var $1529=(($1528)|0);
      var $1530=HEAP32[(($1529)>>2)];
      var $1531=(($1530)|(0))!=0;
      if ($1531) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $1533=$3;
      var $1534=((($1533)+(1))|0);
      _dump_prefix($1534);
      var $1535=$1;
      var $1536=$n7;
      var $1537=(($1536)|0);
      var $1538=HEAP32[(($1537)>>2)];
      var $1539=$1538;
      var $1540=(($1539) & 65535);
      var $1541=_mrb_sym2name($1535, $1540);
      var $1542=_printf(((95128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1541,tempInt));
      label = 187; break;
    case 187: 
      var $1544=$n7;
      var $1545=(($1544+4)|0);
      var $1546=HEAP32[(($1545)>>2)];
      $n7=$1546;
      var $1547=$n7;
      var $1548=(($1547)|0);
      var $1549=HEAP32[(($1548)>>2)];
      var $1550=(($1549)|(0))!=0;
      if ($1550) { label = 188; break; } else { label = 189; break; }
    case 188: 
      var $1552=$3;
      var $1553=((($1552)+(1))|0);
      _dump_prefix($1553);
      var $1554=_printf(((95076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1555=$1;
      var $1556=$n7;
      var $1557=(($1556)|0);
      var $1558=HEAP32[(($1557)>>2)];
      var $1559=$3;
      var $1560=((($1559)+(2))|0);
      _dump_recur($1555, $1558, $1560);
      label = 189; break;
    case 189: 
      var $1562=$n7;
      var $1563=(($1562+4)|0);
      var $1564=HEAP32[(($1563)>>2)];
      $n7=$1564;
      var $1565=$n7;
      var $1566=(($1565)|(0))!=0;
      if ($1566) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $1568=$3;
      var $1569=((($1568)+(1))|0);
      _dump_prefix($1569);
      var $1570=$1;
      var $1571=$n7;
      var $1572=$1571;
      var $1573=(($1572) & 65535);
      var $1574=_mrb_sym2name($1570, $1573);
      var $1575=_printf(((95004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1574,tempInt));
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      var $1578=$1;
      var $1579=$2;
      var $1580=(($1579+4)|0);
      var $1581=HEAP32[(($1580)>>2)];
      var $1582=(($1581)|0);
      var $1583=HEAP32[(($1582)>>2)];
      var $1584=$3;
      var $1585=((($1584)+(1))|0);
      _parser_dump($1578, $1583, $1585);
      label = 212; break;
    case 193: 
      var $1587=_printf(((110172)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1588=$1;
      var $1589=$2;
      var $1590=(($1589)|0);
      var $1591=HEAP32[(($1590)>>2)];
      var $1592=$3;
      var $1593=((($1592)+(1))|0);
      _parser_dump($1588, $1591, $1593);
      var $1594=$2;
      var $1595=(($1594+4)|0);
      var $1596=HEAP32[(($1595)>>2)];
      $2=$1596;
      var $1597=$3;
      var $1598=((($1597)+(1))|0);
      _dump_prefix($1598);
      var $1599=$1;
      var $1600=$2;
      var $1601=(($1600)|0);
      var $1602=HEAP32[(($1601)>>2)];
      var $1603=$1602;
      var $1604=(($1603) & 65535);
      var $1605=_mrb_sym2name($1599, $1604);
      var $1606=_printf(((110452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1605,tempInt));
      var $1607=$2;
      var $1608=(($1607+4)|0);
      var $1609=HEAP32[(($1608)>>2)];
      var $1610=(($1609+4)|0);
      var $1611=HEAP32[(($1610)>>2)];
      $2=$1611;
      var $1612=$2;
      var $1613=(($1612)|0);
      var $1614=HEAP32[(($1613)>>2)];
      var $1615=(($1614)|(0))!=0;
      if ($1615) { label = 194; break; } else { label = 208; break; }
    case 194: 
      var $1617=$2;
      var $1618=(($1617)|0);
      var $1619=HEAP32[(($1618)>>2)];
      $n9=$1619;
      var $1620=$n9;
      var $1621=(($1620)|0);
      var $1622=HEAP32[(($1621)>>2)];
      var $1623=(($1622)|(0))!=0;
      if ($1623) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $1625=$3;
      var $1626=((($1625)+(1))|0);
      _dump_prefix($1626);
      var $1627=_printf(((95328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1628=$1;
      var $1629=$n9;
      var $1630=(($1629)|0);
      var $1631=HEAP32[(($1630)>>2)];
      var $1632=$3;
      var $1633=((($1632)+(2))|0);
      _dump_recur($1628, $1631, $1633);
      label = 196; break;
    case 196: 
      var $1635=$n9;
      var $1636=(($1635+4)|0);
      var $1637=HEAP32[(($1636)>>2)];
      $n9=$1637;
      var $1638=$n9;
      var $1639=(($1638)|0);
      var $1640=HEAP32[(($1639)>>2)];
      var $1641=(($1640)|(0))!=0;
      if ($1641) { label = 197; break; } else { label = 201; break; }
    case 197: 
      var $1643=$3;
      var $1644=((($1643)+(1))|0);
      _dump_prefix($1644);
      var $1645=_printf(((95280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1646=$n9;
      var $1647=(($1646)|0);
      var $1648=HEAP32[(($1647)>>2)];
      $n210=$1648;
      label = 198; break;
    case 198: 
      var $1650=$n210;
      var $1651=(($1650)|(0))!=0;
      if ($1651) { label = 199; break; } else { label = 200; break; }
    case 199: 
      var $1653=$3;
      var $1654=((($1653)+(2))|0);
      _dump_prefix($1654);
      var $1655=$1;
      var $1656=$n210;
      var $1657=(($1656)|0);
      var $1658=HEAP32[(($1657)>>2)];
      var $1659=(($1658)|0);
      var $1660=HEAP32[(($1659)>>2)];
      var $1661=$1660;
      var $1662=(($1661) & 65535);
      var $1663=_mrb_sym2name($1655, $1662);
      var $1664=_printf(((95220)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1663,tempInt));
      var $1665=$1;
      var $1666=$n210;
      var $1667=(($1666)|0);
      var $1668=HEAP32[(($1667)>>2)];
      var $1669=(($1668+4)|0);
      var $1670=HEAP32[(($1669)>>2)];
      _parser_dump($1665, $1670, 0);
      var $1671=$n210;
      var $1672=(($1671+4)|0);
      var $1673=HEAP32[(($1672)>>2)];
      $n210=$1673;
      label = 198; break;
    case 200: 
      label = 201; break;
    case 201: 
      var $1676=$n9;
      var $1677=(($1676+4)|0);
      var $1678=HEAP32[(($1677)>>2)];
      $n9=$1678;
      var $1679=$n9;
      var $1680=(($1679)|0);
      var $1681=HEAP32[(($1680)>>2)];
      var $1682=(($1681)|(0))!=0;
      if ($1682) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $1684=$3;
      var $1685=((($1684)+(1))|0);
      _dump_prefix($1685);
      var $1686=$1;
      var $1687=$n9;
      var $1688=(($1687)|0);
      var $1689=HEAP32[(($1688)>>2)];
      var $1690=$1689;
      var $1691=(($1690) & 65535);
      var $1692=_mrb_sym2name($1686, $1691);
      var $1693=_printf(((95128)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1692,tempInt));
      label = 203; break;
    case 203: 
      var $1695=$n9;
      var $1696=(($1695+4)|0);
      var $1697=HEAP32[(($1696)>>2)];
      $n9=$1697;
      var $1698=$n9;
      var $1699=(($1698)|0);
      var $1700=HEAP32[(($1699)>>2)];
      var $1701=(($1700)|(0))!=0;
      if ($1701) { label = 204; break; } else { label = 205; break; }
    case 204: 
      var $1703=$3;
      var $1704=((($1703)+(1))|0);
      _dump_prefix($1704);
      var $1705=_printf(((95076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1706=$1;
      var $1707=$n9;
      var $1708=(($1707)|0);
      var $1709=HEAP32[(($1708)>>2)];
      var $1710=$3;
      var $1711=((($1710)+(2))|0);
      _dump_recur($1706, $1709, $1711);
      label = 205; break;
    case 205: 
      var $1713=$n9;
      var $1714=(($1713+4)|0);
      var $1715=HEAP32[(($1714)>>2)];
      $n9=$1715;
      var $1716=$n9;
      var $1717=(($1716)|(0))!=0;
      if ($1717) { label = 206; break; } else { label = 207; break; }
    case 206: 
      var $1719=$3;
      var $1720=((($1719)+(1))|0);
      _dump_prefix($1720);
      var $1721=$1;
      var $1722=$n9;
      var $1723=$1722;
      var $1724=(($1723) & 65535);
      var $1725=_mrb_sym2name($1721, $1724);
      var $1726=_printf(((95004)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1725,tempInt));
      label = 207; break;
    case 207: 
      label = 208; break;
    case 208: 
      var $1729=$2;
      var $1730=(($1729+4)|0);
      var $1731=HEAP32[(($1730)>>2)];
      $2=$1731;
      var $1732=$1;
      var $1733=$2;
      var $1734=(($1733)|0);
      var $1735=HEAP32[(($1734)>>2)];
      var $1736=$3;
      var $1737=((($1736)+(1))|0);
      _parser_dump($1732, $1735, $1737);
      label = 212; break;
    case 209: 
      var $1739=_printf(((110156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1740=$1;
      var $1741=$2;
      var $1742=$3;
      var $1743=((($1742)+(1))|0);
      _parser_dump($1740, $1741, $1743);
      label = 212; break;
    case 210: 
      var $1745=_printf(((110132)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $1746=$1;
      var $1747=$2;
      var $1748=$1747;
      var $1749=(($1748+16)|0);
      var $1750=HEAP32[(($1749)>>2)];
      var $1751=$3;
      var $1752=((($1751)+(1))|0);
      _parser_dump($1746, $1750, $1752);
      label = 212; break;
    case 211: 
      var $1754=$n;
      var $1755=$n;
      var $1756=_printf(((110092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1754,HEAP32[(((tempInt)+(4))>>2)]=$1755,tempInt));
      label = 212; break;
    case 212: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_new($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $pool;
      var $p;
      $2=$mrb;
      var $3=$2;
      var $4=_mrb_pool_open($3);
      $pool=$4;
      var $5=$pool;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 6; break;
    case 3: 
      var $9=$pool;
      var $10=_mrb_pool_alloc($9, 1424);
      var $11=$10;
      $p=$11;
      var $12=$p;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=0;
      label = 6; break;
    case 5: 
      var $16=$p;
      var $17=$16;
      assert(1424 % 1 === 0);_memcpy($17, 77744, 1424);
      var $18=$2;
      var $19=$p;
      var $20=(($19)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$pool;
      var $22=$p;
      var $23=(($22+4)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$p;
      var $25=(($24+68)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$p;
      var $27=(($26+64)|0);
      HEAP32[(($27)>>2)]=0;
      var $28=$p;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=0;
      var $30=$p;
      var $31=(($30+12)|0);
      HEAP32[(($31)>>2)]=0;
      var $32=$p;
      var $33=(($32+20)|0);
      HEAP32[(($33)>>2)]=0;
      var $34=$p;
      var $35=(($34+72)|0);
      HEAP32[(($35)>>2)]=1;
      var $36=$p;
      var $37=(($36+68)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$p;
      var $39=(($38+64)|0);
      HEAP32[(($39)>>2)]=0;
      var $40=$p;
      var $41=(($40+1140)|0);
      HEAP32[(($41)>>2)]=0;
      var $42=$p;
      var $43=(($42+32)|0);
      HEAP32[(($43)>>2)]=1;
      var $44=$p;
      var $45=(($44+36)|0);
      HEAP32[(($45)>>2)]=0;
      var $46=$p;
      var $47=(($46+44)|0);
      HEAP32[(($47)>>2)]=0;
      var $48=$p;
      var $49=(($48+1116)|0);
      HEAP32[(($49)>>2)]=0;
      var $50=$p;
      var $51=(($50+1112)|0);
      HEAP32[(($51)>>2)]=0;
      var $52=$p;
      $1=$52;
      label = 6; break;
    case 6: 
      var $54=$1;
      return $54;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_parser_free($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+4)|0);
  var $4=HEAP32[(($3)>>2)];
  _mrb_pool_close($4);
  return;
}
function _mrbc_context_new($mrb) {
  var label = 0;
  var $1;
  var $c;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_calloc($2, 1, 28);
  var $4=$3;
  $c=$4;
  var $5=$c;
  return $5;
}
function _mrbc_context_free($mrb, $cxt) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cxt;
  var $3=$1;
  var $4=$2;
  var $5=(($4)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$6;
  _mrb_free($3, $7);
  var $8=$1;
  var $9=$2;
  var $10=$9;
  _mrb_free($8, $10);
  return;
}
function _mrb_parse_nstring($mrb, $s, $len, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $p;
      $2=$mrb;
      $3=$s;
      $4=$len;
      $5=$c;
      var $6=$2;
      var $7=_mrb_parser_new($6);
      $p=$7;
      var $8=$p;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $12=$3;
      var $13=$p;
      var $14=(($13+12)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$3;
      var $16=$4;
      var $17=(($15+$16)|0);
      var $18=$p;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=$17;
      var $20=$p;
      var $21=$5;
      _mrb_parser_parse($20, $21);
      var $22=$p;
      $1=$22;
      label = 4; break;
    case 4: 
      var $24=$1;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _load_exec($agg_result, $mrb, $p, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 328)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $v=__stackBase__;
      var $buf=(__stackBase__)+(12);
      var $4=(__stackBase__)+(268);
      var $5=(__stackBase__)+(280);
      var $6=(__stackBase__)+(292);
      var $7=(__stackBase__)+(304);
      var $8=(__stackBase__)+(316);
      $1=$mrb;
      $2=$p;
      $3=$c;
      var $9=$2;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_undef_value246($agg_result);
      label = 19; break;
    case 3: 
      var $13=$2;
      var $14=(($13+1136)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$2;
      var $19=(($18+1128)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $23=$2;
      var $24=(($23+1140)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=(($buf)|0);
      var $29=$2;
      var $30=(($29+1144)|0);
      var $31=(($30)|0);
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$2;
      var $35=(($34+1144)|0);
      var $36=(($35)|0);
      var $37=(($36+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=_snprintf($28, 256, ((110040)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
      $n=$39;
      var $40=$1;
      var $41=$1;
      var $42=_mrb_class_get($41, ((109900)|0));
      var $43=(($buf)|0);
      var $44=$n;
      _mrb_exc_new($4, $40, $42, $43, $44);
      var $45=(($4)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=$1;
      var $50=(($49+16)|0);
      HEAP32[(($50)>>2)]=$48;
      var $51=$2;
      _mrb_parser_free($51);
      _mrb_undef_value246($agg_result);
      label = 19; break;
    case 7: 
      var $53=$1;
      var $54=$1;
      var $55=_mrb_class_get($54, ((109900)|0));
      _mrb_exc_new($5, $53, $55, ((80092)|0), 12);
      var $56=(($5)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      var $60=$1;
      var $61=(($60+16)|0);
      HEAP32[(($61)>>2)]=$59;
      var $62=$2;
      _mrb_parser_free($62);
      _mrb_undef_value246($agg_result);
      label = 19; break;
    case 8: 
      var $64=$1;
      var $65=$2;
      var $66=_mrb_generate_code($64, $65);
      $n=$66;
      var $67=$2;
      _mrb_parser_free($67);
      var $68=$n;
      var $69=(($68)|(0)) < 0;
      if ($69) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $71=$1;
      var $72=$1;
      var $73=_mrb_class_get($72, ((109872)|0));
      _mrb_exc_new($6, $71, $73, ((80076)|0), 13);
      var $74=(($6)|0);
      var $75=$74;
      var $76=HEAP32[(($75)>>2)];
      var $77=$76;
      var $78=$1;
      var $79=(($78+16)|0);
      HEAP32[(($79)>>2)]=$77;
      _mrb_nil_value247($agg_result);
      label = 19; break;
    case 10: 
      var $81=$3;
      var $82=(($81)|(0))!=0;
      if ($82) { label = 11; break; } else { label = 16; break; }
    case 11: 
      var $84=$3;
      var $85=$84;
      var $86=(($85+24)|0);
      var $87=HEAP8[($86)];
      var $88=(($87)&(255)) >>> 1;
      var $89=$88 & 1;
      var $90=(($89 << 24) >> 24)!=0;
      if ($90) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $92=$1;
      var $93=$n;
      _codedump_all($92, $93);
      label = 13; break;
    case 13: 
      var $95=$3;
      var $96=$95;
      var $97=(($96+24)|0);
      var $98=HEAP8[($97)];
      var $99=(($98)&(255)) >>> 2;
      var $100=$99 & 1;
      var $101=(($100 << 24) >> 24)!=0;
      if ($101) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $103=$n;
      _mrb_fixnum_value248($agg_result, $103);
      label = 19; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $106=$1;
      var $107=$1;
      var $108=$n;
      var $109=$1;
      var $110=(($109+24)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=(($111+($108<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=_mrb_proc_new($107, $113);
      var $115=$1;
      _mrb_top_self($7, $115);
      _mrb_run($8, $106, $114, $7);
      var $116=$v;
      var $117=$8;
      assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
      var $118=$1;
      var $119=(($118+16)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120)|(0))!=0;
      if ($121) { label = 17; break; } else { label = 18; break; }
    case 17: 
      _mrb_nil_value247($agg_result);
      label = 19; break;
    case 18: 
      var $124=$agg_result;
      var $125=$v;
      assert(12 % 1 === 0);HEAP32[(($124)>>2)]=HEAP32[(($125)>>2)];HEAP32[((($124)+(4))>>2)]=HEAP32[((($125)+(4))>>2)];HEAP32[((($124)+(8))>>2)]=HEAP32[((($125)+(8))>>2)];
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_load_nstring_cxt($agg_result, $mrb, $s, $len, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$mrb;
  $2=$s;
  $3=$len;
  $4=$c;
  var $5=$1;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=_mrb_parse_nstring($6, $7, $8, $9);
  var $11=$4;
  _load_exec($agg_result, $5, $10, $11);
  return;
}
function _mrb_load_nstring($agg_result, $mrb, $s, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$s;
  $3=$len;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  _mrb_load_nstring_cxt($agg_result, $4, $5, $6, 0);
  return;
}
function _mrb_load_string_cxt($agg_result, $mrb, $s, $c) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$s;
  $3=$c;
  var $4=$1;
  var $5=$2;
  var $6=$2;
  var $7=_strlen($6);
  var $8=$3;
  _mrb_load_nstring_cxt($agg_result, $4, $5, $7, $8);
  return;
}
function _mrb_load_string($agg_result, $mrb, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$s;
  var $3=$1;
  var $4=$2;
  _mrb_load_string_cxt($agg_result, $3, $4, 0);
  return;
}
function _dump_prefix($offset) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$offset;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=((($3)-(1))|0);
      $1=$4;
      var $5=(($3)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stdout)>>2)];
      var $8=_fputc(32, $7);
      var $9=HEAP32[((_stdout)>>2)];
      var $10=_fputc(32, $9);
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _dump_recur($mrb, $tree, $offset) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$tree;
      $3=$offset;
      label = 2; break;
    case 2: 
      var $5=$2;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$1;
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$3;
      _parser_dump($8, $11, $12);
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      $2=$15;
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value246($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=5;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value247($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value248($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
// WARNING: content after a branch in a label, line: 15030
// WARNING: content after a branch in a label, line: 15152
// WARNING: content after a branch in a label, line: 15275
// WARNING: content after a branch in a label, line: 15350
function _parser_yylex($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 260)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $space_seen;
      var $cmd_state;
      var $last_state;
      var $token_column;
      var $token;
      var $c2;
      var $buf=__stackBase__;
      var $c21;
      var $is_float;
      var $seen_point;
      var $seen_e;
      var $nondigit;
      var $start;
      var $c0;
      var $d;
      var $endp=(__stackBase__)+(256);
      var $term;
      var $paren;
      var $result;
      var $kw;
      var $state;
      var $ident;
      $2=$p;
      $space_seen=0;
      var $3=$2;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+44)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=$13 & 64;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $17=$2;
      var $18=(($17+1116)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $22=$2;
      var $23=$22;
      var $24=(($23+1120)|0);
      var $25=HEAP8[($24)];
      var $26=$25 & 1;
      var $27=(($26 << 24) >> 24)!=0;
      if ($27) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $29=$2;
      var $30=_parse_string($29);
      $1=$30;
      label = 706; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $33=$2;
      var $34=_parse_string($33);
      $1=$34;
      label = 706; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $37=$2;
      var $38=(($37+72)|0);
      var $39=HEAP32[(($38)>>2)];
      $cmd_state=$39;
      var $40=$2;
      var $41=(($40+72)|0);
      HEAP32[(($41)>>2)]=0;
      label = 10; break;
    case 10: 
      var $43=$2;
      var $44=(($43+40)|0);
      var $45=HEAP32[(($44)>>2)];
      $last_state=$45;
      var $46=$2;
      var $47=_nextc($46);
      $c=$47;
      if ((($47)|(0))==0 | (($47)|(0))==4 | (($47)|(0))==26 | (($47)|(0))==-1) {
        label = 11; break;
      }
      else if ((($47)|(0))==32 | (($47)|(0))==9 | (($47)|(0))==12 | (($47)|(0))==13 | (($47)|(0))==11) {
        label = 12; break;
      }
      else if ((($47)|(0))==35) {
        label = 13; break;
      }
      else if ((($47)|(0))==10) {
        label = 14; break;
      }
      else if ((($47)|(0))==42) {
        label = 31; break;
      }
      else if ((($47)|(0))==33) {
        label = 55; break;
      }
      else if ((($47)|(0))==61) {
        label = 66; break;
      }
      else if ((($47)|(0))==60) {
        label = 84; break;
      }
      else if ((($47)|(0))==62) {
        label = 111; break;
      }
      else if ((($47)|(0))==34) {
        label = 122; break;
      }
      else if ((($47)|(0))==39) {
        label = 123; break;
      }
      else if ((($47)|(0))==96) {
        label = 124; break;
      }
      else if ((($47)|(0))==63) {
        label = 132; break;
      }
      else if ((($47)|(0))==38) {
        label = 167; break;
      }
      else if ((($47)|(0))==124) {
        label = 191; break;
      }
      else if ((($47)|(0))==43) {
        label = 202; break;
      }
      else if ((($47)|(0))==45) {
        label = 223; break;
      }
      else if ((($47)|(0))==46) {
        label = 246; break;
      }
      else if ((($47)|(0))==48 | (($47)|(0))==49 | (($47)|(0))==50 | (($47)|(0))==51 | (($47)|(0))==52 | (($47)|(0))==53 | (($47)|(0))==54 | (($47)|(0))==55 | (($47)|(0))==56 | (($47)|(0))==57) {
        label = 255; break;
      }
      else if ((($47)|(0))==41 | (($47)|(0))==93) {
        label = 404; break;
      }
      else if ((($47)|(0))==125) {
        label = 405; break;
      }
      else if ((($47)|(0))==58) {
        label = 409; break;
      }
      else if ((($47)|(0))==47) {
        label = 427; break;
      }
      else if ((($47)|(0))==94) {
        label = 444; break;
      }
      else if ((($47)|(0))==59) {
        label = 451; break;
      }
      else if ((($47)|(0))==44) {
        label = 452; break;
      }
      else if ((($47)|(0))==126) {
        label = 453; break;
      }
      else if ((($47)|(0))==40) {
        label = 460; break;
      }
      else if ((($47)|(0))==91) {
        label = 472; break;
      }
      else if ((($47)|(0))==123) {
        label = 491; break;
      }
      else if ((($47)|(0))==92) {
        label = 504; break;
      }
      else if ((($47)|(0))==37) {
        label = 507; break;
      }
      else if ((($47)|(0))==36) {
        label = 556; break;
      }
      else if ((($47)|(0))==64) {
        label = 586; break;
      }
      else if ((($47)|(0))==95) {
        label = 604; break;
      }
      else {
      label = 605; break;
      }
    case 11: 
      $1=0;
      label = 706; break;
    case 12: 
      $space_seen=1;
      label = 10; break;
    case 13: 
      var $51=$2;
      _skip($51, 10);
      label = 14; break;
    case 14: 
      var $53=$2;
      var $54=$53;
      var $55=(($54+1120)|0);
      var $56=HEAP8[($55)];
      var $57=$56 & -2;
      HEAP8[($55)]=$57;
      var $58=$2;
      var $59=(($58+1116)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|(0))!=0;
      if ($61) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $63=$2;
      var $64=$2;
      var $65=_parsing_heredoc_inf($64);
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=_new_strterm($63, $67, 0, 0);
      var $69=$2;
      var $70=(($69+44)|0);
      HEAP32[(($70)>>2)]=$68;
      label = 30; break;
    case 16: 
      var $72=$2;
      var $73=(($72+40)|0);
      var $74=HEAP32[(($73)>>2)];
      if ((($74)|(0))==0 | (($74)|(0))==7 | (($74)|(0))==8 | (($74)|(0))==9 | (($74)|(0))==10) {
        label = 17; break;
      }
      else {
      label = 18; break;
      }
    case 17: 
      var $76=$2;
      var $77=(($76+32)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=((($78)+(1))|0);
      HEAP32[(($77)>>2)]=$79;
      var $80=$2;
      var $81=(($80+36)|0);
      HEAP32[(($81)>>2)]=0;
      label = 10; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $85=$2;
      var $86=_nextc($85);
      $c=$86;
      var $87=(($86)|(0))!=0;
      if ($87) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $89=$c;
      if ((($89)|(0))==32 | (($89)|(0))==9 | (($89)|(0))==12 | (($89)|(0))==13 | (($89)|(0))==11) {
        label = 22; break;
      }
      else if ((($89)|(0))==46) {
        label = 23; break;
      }
      else if ((($89)|(0))==-1) {
        label = 26; break;
      }
      else {
      label = 27; break;
      }
    case 22: 
      $space_seen=1;
      label = 28; break;
    case 23: 
      var $92=$2;
      var $93=_nextc($92);
      $c=$93;
      var $94=(($93)|(0))!=46;
      if ($94) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $96=$2;
      var $97=$c;
      _pushback($96, $97);
      var $98=$2;
      _pushback($98, 46);
      label = 10; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 30; break;
    case 27: 
      var $102=$2;
      var $103=$c;
      _pushback($102, $103);
      label = 30; break;
    case 28: 
      label = 20; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $107=$2;
      var $108=(($107+72)|0);
      HEAP32[(($108)>>2)]=1;
      var $109=$2;
      var $110=(($109+40)|0);
      HEAP32[(($110)>>2)]=0;
      $1=10;
      label = 706; break;
    case 31: 
      var $112=$2;
      var $113=_nextc($112);
      $c=$113;
      var $114=(($113)|(0))==42;
      if ($114) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $116=$2;
      var $117=_nextc($116);
      $c=$117;
      var $118=(($117)|(0))==61;
      if ($118) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $120=$2;
      var $121=_intern_gen2($120, ((105760)|0), 2);
      var $122=$2;
      var $123=(($122+1124)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$124;
      var $126=$125;
      HEAP16[(($126)>>1)]=$121;
      var $127=$2;
      var $128=(($127+40)|0);
      HEAP32[(($128)>>2)]=0;
      $1=345;
      label = 706; break;
    case 34: 
      var $130=$2;
      var $131=$c;
      _pushback($130, $131);
      $c=326;
      label = 50; break;
    case 35: 
      var $133=$c;
      var $134=(($133)|(0))==61;
      if ($134) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $136=$2;
      var $137=_intern_gen_c($136, 42);
      var $138=$2;
      var $139=(($138+1124)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$140;
      var $142=$141;
      HEAP16[(($142)>>1)]=$137;
      var $143=$2;
      var $144=(($143+40)|0);
      HEAP32[(($144)>>2)]=0;
      $1=345;
      label = 706; break;
    case 37: 
      var $146=$2;
      var $147=$c;
      _pushback($146, $147);
      var $148=$2;
      var $149=(($148+40)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150)|(0))==4;
      if ($151) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $153=$2;
      var $154=(($153+40)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|(0))==5;
      if ($156) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $158=$space_seen;
      var $159=(($158)|(0))!=0;
      if ($159) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $161=$c;
      var $162=(($161) & 255);
      var $163=(($162)&(255));
      var $164=_isspace($163);
      var $165=(($164)|(0))!=0;
      if ($165) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $167=$2;
      _yywarning($167, ((109832)|0));
      $c=353;
      label = 49; break;
    case 42: 
      var $169=$2;
      var $170=(($169+40)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|(0))==0;
      if ($172) { label = 46; break; } else { label = 43; break; }
    case 43: 
      var $174=$2;
      var $175=(($174+40)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176)|(0))==6;
      if ($177) { label = 46; break; } else { label = 44; break; }
    case 44: 
      var $179=$2;
      var $180=(($179+40)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($181)|(0))==10;
      if ($182) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $184=$2;
      var $185=(($184+40)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186)|(0))==9;
      if ($187) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $c=353;
      label = 48; break;
    case 47: 
      $c=42;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $193=$2;
      var $194=(($193+40)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=(($195)|(0))==7;
      if ($196) { label = 52; break; } else { label = 51; break; }
    case 51: 
      var $198=$2;
      var $199=(($198+40)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200)|(0))==8;
      if ($201) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $203=$2;
      var $204=(($203+40)|0);
      HEAP32[(($204)>>2)]=4;
      label = 54; break;
    case 53: 
      var $206=$2;
      var $207=(($206+40)|0);
      HEAP32[(($207)>>2)]=0;
      label = 54; break;
    case 54: 
      var $209=$c;
      $1=$209;
      label = 706; break;
    case 55: 
      var $211=$2;
      var $212=_nextc($211);
      $c=$212;
      var $213=$2;
      var $214=(($213+40)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=(($215)|(0))==7;
      if ($216) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $218=$2;
      var $219=(($218+40)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=(($220)|(0))==8;
      if ($221) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $223=$2;
      var $224=(($223+40)|0);
      HEAP32[(($224)>>2)]=4;
      var $225=$c;
      var $226=(($225)|(0))==64;
      if ($226) { label = 58; break; } else { label = 59; break; }
    case 58: 
      $1=33;
      label = 706; break;
    case 59: 
      label = 61; break;
    case 60: 
      var $230=$2;
      var $231=(($230+40)|0);
      HEAP32[(($231)>>2)]=0;
      label = 61; break;
    case 61: 
      var $233=$c;
      var $234=(($233)|(0))==61;
      if ($234) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $1=330;
      label = 706; break;
    case 63: 
      var $237=$c;
      var $238=(($237)|(0))==126;
      if ($238) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $1=336;
      label = 706; break;
    case 65: 
      var $241=$2;
      var $242=$c;
      _pushback($241, $242);
      $1=33;
      label = 706; break;
    case 66: 
      var $244=$2;
      var $245=(($244+36)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=(($246)|(0))==1;
      if ($247) { label = 67; break; } else { label = 70; break; }
    case 67: 
      var $249=$2;
      var $250=_peeks($249, ((109804)|0));
      var $251=(($250)|(0))!=0;
      if ($251) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $253=$2;
      var $254=_skips($253, ((109788)|0));
      label = 10; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $257=$2;
      var $258=(($257+40)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=(($259)|(0))==7;
      if ($260) { label = 72; break; } else { label = 71; break; }
    case 71: 
      var $262=$2;
      var $263=(($262+40)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=(($264)|(0))==8;
      if ($265) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $267=$2;
      var $268=(($267+40)|0);
      HEAP32[(($268)>>2)]=4;
      label = 74; break;
    case 73: 
      var $270=$2;
      var $271=(($270+40)|0);
      HEAP32[(($271)>>2)]=0;
      label = 74; break;
    case 74: 
      var $273=$2;
      var $274=_nextc($273);
      $c=$274;
      var $275=(($274)|(0))==61;
      if ($275) { label = 75; break; } else { label = 78; break; }
    case 75: 
      var $277=$2;
      var $278=_nextc($277);
      $c=$278;
      var $279=(($278)|(0))==61;
      if ($279) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $1=329;
      label = 706; break;
    case 77: 
      var $282=$2;
      var $283=$c;
      _pushback($282, $283);
      $1=328;
      label = 706; break;
    case 78: 
      var $285=$c;
      var $286=(($285)|(0))==126;
      if ($286) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $1=335;
      label = 706; break;
    case 80: 
      var $289=$c;
      var $290=(($289)|(0))==62;
      if ($290) { label = 81; break; } else { label = 82; break; }
    case 81: 
      $1=346;
      label = 706; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $294=$2;
      var $295=$c;
      _pushback($294, $295);
      $1=61;
      label = 706; break;
    case 84: 
      var $297=$2;
      var $298=(($297+40)|0);
      var $299=HEAP32[(($298)>>2)];
      $last_state=$299;
      var $300=$2;
      var $301=_nextc($300);
      $c=$301;
      var $302=$c;
      var $303=(($302)|(0))==60;
      if ($303) { label = 85; break; } else { label = 96; break; }
    case 85: 
      var $305=$2;
      var $306=(($305+40)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307)|(0))!=8;
      if ($308) { label = 86; break; } else { label = 96; break; }
    case 86: 
      var $310=$2;
      var $311=(($310+40)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312)|(0))!=9;
      if ($313) { label = 87; break; } else { label = 96; break; }
    case 87: 
      var $315=$2;
      var $316=(($315+40)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|(0))==1;
      if ($318) { label = 96; break; } else { label = 88; break; }
    case 88: 
      var $320=$2;
      var $321=(($320+40)|0);
      var $322=HEAP32[(($321)>>2)];
      var $323=(($322)|(0))==2;
      if ($323) { label = 96; break; } else { label = 89; break; }
    case 89: 
      var $325=$2;
      var $326=(($325+40)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327)|(0))==3;
      if ($328) { label = 96; break; } else { label = 90; break; }
    case 90: 
      var $330=$2;
      var $331=(($330+40)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=(($332)|(0))==4;
      if ($333) { label = 92; break; } else { label = 91; break; }
    case 91: 
      var $335=$2;
      var $336=(($335+40)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337)|(0))==5;
      if ($338) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $340=$space_seen;
      var $341=(($340)|(0))!=0;
      if ($341) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $343=$2;
      var $344=_heredoc_identifier($343);
      $token=$344;
      var $345=$token;
      var $346=(($345)|(0))!=0;
      if ($346) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $348=$token;
      $1=$348;
      label = 706; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $351=$2;
      var $352=(($351+40)|0);
      var $353=HEAP32[(($352)>>2)];
      var $354=(($353)|(0))==7;
      if ($354) { label = 98; break; } else { label = 97; break; }
    case 97: 
      var $356=$2;
      var $357=(($356+40)|0);
      var $358=HEAP32[(($357)>>2)];
      var $359=(($358)|(0))==8;
      if ($359) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $361=$2;
      var $362=(($361+40)|0);
      HEAP32[(($362)>>2)]=4;
      label = 102; break;
    case 99: 
      var $364=$2;
      var $365=(($364+40)|0);
      HEAP32[(($365)>>2)]=0;
      var $366=$2;
      var $367=(($366+40)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368)|(0))==9;
      if ($369) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $371=$2;
      var $372=(($371+72)|0);
      HEAP32[(($372)>>2)]=1;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $375=$c;
      var $376=(($375)|(0))==61;
      if ($376) { label = 103; break; } else { label = 106; break; }
    case 103: 
      var $378=$2;
      var $379=_nextc($378);
      $c=$379;
      var $380=(($379)|(0))==62;
      if ($380) { label = 104; break; } else { label = 105; break; }
    case 104: 
      $1=327;
      label = 706; break;
    case 105: 
      var $383=$2;
      var $384=$c;
      _pushback($383, $384);
      $1=332;
      label = 706; break;
    case 106: 
      var $386=$c;
      var $387=(($386)|(0))==60;
      if ($387) { label = 107; break; } else { label = 110; break; }
    case 107: 
      var $389=$2;
      var $390=_nextc($389);
      $c=$390;
      var $391=(($390)|(0))==61;
      if ($391) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $393=$2;
      var $394=_intern_gen2($393, ((106460)|0), 2);
      var $395=$2;
      var $396=(($395+1124)|0);
      var $397=HEAP32[(($396)>>2)];
      var $398=$397;
      var $399=$398;
      HEAP16[(($399)>>1)]=$394;
      var $400=$2;
      var $401=(($400+40)|0);
      HEAP32[(($401)>>2)]=0;
      $1=345;
      label = 706; break;
    case 109: 
      var $403=$2;
      var $404=$c;
      _pushback($403, $404);
      $1=341;
      label = 706; break;
    case 110: 
      var $406=$2;
      var $407=$c;
      _pushback($406, $407);
      $1=60;
      label = 706; break;
    case 111: 
      var $409=$2;
      var $410=(($409+40)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($411)|(0))==7;
      if ($412) { label = 113; break; } else { label = 112; break; }
    case 112: 
      var $414=$2;
      var $415=(($414+40)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|(0))==8;
      if ($417) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $419=$2;
      var $420=(($419+40)|0);
      HEAP32[(($420)>>2)]=4;
      label = 115; break;
    case 114: 
      var $422=$2;
      var $423=(($422+40)|0);
      HEAP32[(($423)>>2)]=0;
      label = 115; break;
    case 115: 
      var $425=$2;
      var $426=_nextc($425);
      $c=$426;
      var $427=(($426)|(0))==61;
      if ($427) { label = 116; break; } else { label = 117; break; }
    case 116: 
      $1=331;
      label = 706; break;
    case 117: 
      var $430=$c;
      var $431=(($430)|(0))==62;
      if ($431) { label = 118; break; } else { label = 121; break; }
    case 118: 
      var $433=$2;
      var $434=_nextc($433);
      $c=$434;
      var $435=(($434)|(0))==61;
      if ($435) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $437=$2;
      var $438=_intern_gen2($437, ((106084)|0), 2);
      var $439=$2;
      var $440=(($439+1124)|0);
      var $441=HEAP32[(($440)>>2)];
      var $442=$441;
      var $443=$442;
      HEAP16[(($443)>>1)]=$438;
      var $444=$2;
      var $445=(($444+40)|0);
      HEAP32[(($445)>>2)]=0;
      $1=345;
      label = 706; break;
    case 120: 
      var $447=$2;
      var $448=$c;
      _pushback($447, $448);
      $1=342;
      label = 706; break;
    case 121: 
      var $450=$2;
      var $451=$c;
      _pushback($450, $451);
      $1=62;
      label = 706; break;
    case 122: 
      var $453=$2;
      var $454=_new_strterm($453, 3, 34, 0);
      var $455=$2;
      var $456=(($455+44)|0);
      HEAP32[(($456)>>2)]=$454;
      $1=360;
      label = 706; break;
    case 123: 
      var $458=$2;
      var $459=_new_strterm($458, 1, 39, 0);
      var $460=$2;
      var $461=(($460+44)|0);
      HEAP32[(($461)>>2)]=$459;
      var $462=$2;
      var $463=_parse_string($462);
      $1=$463;
      label = 706; break;
    case 124: 
      var $465=$2;
      var $466=(($465+40)|0);
      var $467=HEAP32[(($466)>>2)];
      var $468=(($467)|(0))==7;
      if ($468) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $470=$2;
      var $471=(($470+40)|0);
      HEAP32[(($471)>>2)]=3;
      $1=96;
      label = 706; break;
    case 126: 
      var $473=$2;
      var $474=(($473+40)|0);
      var $475=HEAP32[(($474)>>2)];
      var $476=(($475)|(0))==8;
      if ($476) { label = 127; break; } else { label = 131; break; }
    case 127: 
      var $478=$cmd_state;
      var $479=(($478)|(0))!=0;
      if ($479) { label = 128; break; } else { label = 129; break; }
    case 128: 
      var $481=$2;
      var $482=(($481+40)|0);
      HEAP32[(($482)>>2)]=5;
      label = 130; break;
    case 129: 
      var $484=$2;
      var $485=(($484+40)|0);
      HEAP32[(($485)>>2)]=4;
      label = 130; break;
    case 130: 
      $1=96;
      label = 706; break;
    case 131: 
      var $488=$2;
      var $489=_new_strterm($488, 131, 96, 0);
      var $490=$2;
      var $491=(($490+44)|0);
      HEAP32[(($491)>>2)]=$489;
      $1=361;
      label = 706; break;
    case 132: 
      var $493=$2;
      var $494=(($493+40)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=(($495)|(0))==1;
      if ($496) { label = 135; break; } else { label = 133; break; }
    case 133: 
      var $498=$2;
      var $499=(($498+40)|0);
      var $500=HEAP32[(($499)>>2)];
      var $501=(($500)|(0))==2;
      if ($501) { label = 135; break; } else { label = 134; break; }
    case 134: 
      var $503=$2;
      var $504=(($503+40)|0);
      var $505=HEAP32[(($504)>>2)];
      var $506=(($505)|(0))==3;
      if ($506) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $508=$2;
      var $509=(($508+40)|0);
      HEAP32[(($509)>>2)]=10;
      $1=63;
      label = 706; break;
    case 136: 
      var $511=$2;
      var $512=_nextc($511);
      $c=$512;
      var $513=$c;
      var $514=(($513)|(0))==-1;
      if ($514) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $516=$2;
      _yyerror($516, ((109760)|0));
      $1=0;
      label = 706; break;
    case 138: 
      var $518=$c;
      var $519=_isspace($518);
      var $520=(($519)|(0))!=0;
      if ($520) { label = 139; break; } else { label = 154; break; }
    case 139: 
      var $522=$2;
      var $523=(($522+40)|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=(($524)|(0))==4;
      if ($525) { label = 152; break; } else { label = 140; break; }
    case 140: 
      var $527=$2;
      var $528=(($527+40)|0);
      var $529=HEAP32[(($528)>>2)];
      var $530=(($529)|(0))==5;
      if ($530) { label = 152; break; } else { label = 141; break; }
    case 141: 
      var $532=$c;
      if ((($532)|(0))==32) {
        label = 142; break;
      }
      else if ((($532)|(0))==10) {
        label = 143; break;
      }
      else if ((($532)|(0))==9) {
        label = 144; break;
      }
      else if ((($532)|(0))==11) {
        label = 145; break;
      }
      else if ((($532)|(0))==13) {
        label = 146; break;
      }
      else if ((($532)|(0))==12) {
        label = 147; break;
      }
      else {
      label = 148; break;
      }
    case 142: 
      $c2=115;
      label = 149; break;
    case 143: 
      $c2=110;
      label = 149; break;
    case 144: 
      $c2=116;
      label = 149; break;
    case 145: 
      $c2=118;
      label = 149; break;
    case 146: 
      $c2=114;
      label = 149; break;
    case 147: 
      $c2=102;
      label = 149; break;
    case 148: 
      $c2=0;
      label = 149; break;
    case 149: 
      var $541=$c2;
      var $542=(($541)|(0))!=0;
      if ($542) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $544=(($buf)|0);
      var $545=$c2;
      var $546=_snprintf($544, 256, ((109700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$545,tempInt));
      var $547=$2;
      var $548=(($buf)|0);
      _yyerror($547, $548);
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $552=$2;
      var $553=$c;
      _pushback($552, $553);
      var $554=$2;
      var $555=(($554+40)|0);
      HEAP32[(($555)>>2)]=10;
      $1=63;
      label = 706; break;
    case 154: 
      var $557=$2;
      var $558=_newtok($557);
      $token_column=$558;
      var $559=$c;
      var $560=_isalnum($559);
      var $561=(($560)|(0))!=0;
      if ($561) { label = 156; break; } else { label = 155; break; }
    case 155: 
      var $563=$c;
      var $564=(($563)|(0))==95;
      if ($564) { label = 156; break; } else { label = 160; break; }
    case 156: 
      var $566=$2;
      var $567=_nextc($566);
      $c21=$567;
      var $568=$2;
      var $569=$c21;
      _pushback($568, $569);
      var $570=$c21;
      var $571=_isalnum($570);
      var $572=(($571)|(0))!=0;
      if ($572) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $574=$c21;
      var $575=(($574)|(0))==95;
      if ($575) { label = 158; break; } else { label = 159; break; }
    case 158: 
      label = 153; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $579=$c;
      var $580=(($579)|(0))==92;
      if ($580) { label = 161; break; } else { label = 165; break; }
    case 161: 
      var $582=$2;
      var $583=_nextc($582);
      $c=$583;
      var $584=$c;
      var $585=(($584)|(0))==117;
      if ($585) { label = 162; break; } else { label = 163; break; }
    case 162: 
      label = 164; break;
    case 163: 
      var $588=$2;
      var $589=$c;
      _pushback($588, $589);
      var $590=$2;
      var $591=_read_escape($590);
      $c=$591;
      var $592=$2;
      var $593=$c;
      _tokadd($592, $593);
      label = 164; break;
    case 164: 
      label = 166; break;
    case 165: 
      var $596=$2;
      var $597=$c;
      _tokadd($596, $597);
      label = 166; break;
    case 166: 
      var $599=$2;
      _tokfix($599);
      var $600=$2;
      var $601=$2;
      var $602=_tok($601);
      var $603=$2;
      var $604=_toklen($603);
      var $605=_new_str($600, $602, $604);
      var $606=$2;
      var $607=(($606+1124)|0);
      var $608=HEAP32[(($607)>>2)];
      var $609=$608;
      var $610=$609;
      HEAP32[(($610)>>2)]=$605;
      var $611=$2;
      var $612=(($611+40)|0);
      HEAP32[(($612)>>2)]=1;
      $1=315;
      label = 706; break;
    case 167: 
      var $614=$2;
      var $615=_nextc($614);
      $c=$615;
      var $616=(($615)|(0))==38;
      if ($616) { label = 168; break; } else { label = 171; break; }
    case 168: 
      var $618=$2;
      var $619=(($618+40)|0);
      HEAP32[(($619)>>2)]=0;
      var $620=$2;
      var $621=_nextc($620);
      $c=$621;
      var $622=(($621)|(0))==61;
      if ($622) { label = 169; break; } else { label = 170; break; }
    case 169: 
      var $624=$2;
      var $625=_intern_gen2($624, ((109660)|0), 2);
      var $626=$2;
      var $627=(($626+1124)|0);
      var $628=HEAP32[(($627)>>2)];
      var $629=$628;
      var $630=$629;
      HEAP16[(($630)>>1)]=$625;
      var $631=$2;
      var $632=(($631+40)|0);
      HEAP32[(($632)>>2)]=0;
      $1=345;
      label = 706; break;
    case 170: 
      var $634=$2;
      var $635=$c;
      _pushback($634, $635);
      $1=333;
      label = 706; break;
    case 171: 
      var $637=$c;
      var $638=(($637)|(0))==61;
      if ($638) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $640=$2;
      var $641=_intern_gen_c($640, 38);
      var $642=$2;
      var $643=(($642+1124)|0);
      var $644=HEAP32[(($643)>>2)];
      var $645=$644;
      var $646=$645;
      HEAP16[(($646)>>1)]=$641;
      var $647=$2;
      var $648=(($647+40)|0);
      HEAP32[(($648)>>2)]=0;
      $1=345;
      label = 706; break;
    case 173: 
      label = 174; break;
    case 174: 
      var $651=$2;
      var $652=$c;
      _pushback($651, $652);
      var $653=$2;
      var $654=(($653+40)|0);
      var $655=HEAP32[(($654)>>2)];
      var $656=(($655)|(0))==4;
      if ($656) { label = 176; break; } else { label = 175; break; }
    case 175: 
      var $658=$2;
      var $659=(($658+40)|0);
      var $660=HEAP32[(($659)>>2)];
      var $661=(($660)|(0))==5;
      if ($661) { label = 176; break; } else { label = 179; break; }
    case 176: 
      var $663=$space_seen;
      var $664=(($663)|(0))!=0;
      if ($664) { label = 177; break; } else { label = 179; break; }
    case 177: 
      var $666=$c;
      var $667=(($666) & 255);
      var $668=(($667)&(255));
      var $669=_isspace($668);
      var $670=(($669)|(0))!=0;
      if ($670) { label = 179; break; } else { label = 178; break; }
    case 178: 
      var $672=$2;
      _yywarning($672, ((109616)|0));
      $c=354;
      label = 186; break;
    case 179: 
      var $674=$2;
      var $675=(($674+40)|0);
      var $676=HEAP32[(($675)>>2)];
      var $677=(($676)|(0))==0;
      if ($677) { label = 183; break; } else { label = 180; break; }
    case 180: 
      var $679=$2;
      var $680=(($679+40)|0);
      var $681=HEAP32[(($680)>>2)];
      var $682=(($681)|(0))==6;
      if ($682) { label = 183; break; } else { label = 181; break; }
    case 181: 
      var $684=$2;
      var $685=(($684+40)|0);
      var $686=HEAP32[(($685)>>2)];
      var $687=(($686)|(0))==10;
      if ($687) { label = 183; break; } else { label = 182; break; }
    case 182: 
      var $689=$2;
      var $690=(($689+40)|0);
      var $691=HEAP32[(($690)>>2)];
      var $692=(($691)|(0))==9;
      if ($692) { label = 183; break; } else { label = 184; break; }
    case 183: 
      $c=354;
      label = 185; break;
    case 184: 
      $c=38;
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $697=$2;
      var $698=(($697+40)|0);
      var $699=HEAP32[(($698)>>2)];
      var $700=(($699)|(0))==7;
      if ($700) { label = 188; break; } else { label = 187; break; }
    case 187: 
      var $702=$2;
      var $703=(($702+40)|0);
      var $704=HEAP32[(($703)>>2)];
      var $705=(($704)|(0))==8;
      if ($705) { label = 188; break; } else { label = 189; break; }
    case 188: 
      var $707=$2;
      var $708=(($707+40)|0);
      HEAP32[(($708)>>2)]=4;
      label = 190; break;
    case 189: 
      var $710=$2;
      var $711=(($710+40)|0);
      HEAP32[(($711)>>2)]=0;
      label = 190; break;
    case 190: 
      var $713=$c;
      $1=$713;
      label = 706; break;
    case 191: 
      var $715=$2;
      var $716=_nextc($715);
      $c=$716;
      var $717=(($716)|(0))==124;
      if ($717) { label = 192; break; } else { label = 195; break; }
    case 192: 
      var $719=$2;
      var $720=(($719+40)|0);
      HEAP32[(($720)>>2)]=0;
      var $721=$2;
      var $722=_nextc($721);
      $c=$722;
      var $723=(($722)|(0))==61;
      if ($723) { label = 193; break; } else { label = 194; break; }
    case 193: 
      var $725=$2;
      var $726=_intern_gen2($725, ((109464)|0), 2);
      var $727=$2;
      var $728=(($727+1124)|0);
      var $729=HEAP32[(($728)>>2)];
      var $730=$729;
      var $731=$730;
      HEAP16[(($731)>>1)]=$726;
      var $732=$2;
      var $733=(($732+40)|0);
      HEAP32[(($733)>>2)]=0;
      $1=345;
      label = 706; break;
    case 194: 
      var $735=$2;
      var $736=$c;
      _pushback($735, $736);
      $1=334;
      label = 706; break;
    case 195: 
      var $738=$c;
      var $739=(($738)|(0))==61;
      if ($739) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $741=$2;
      var $742=_intern_gen_c($741, 124);
      var $743=$2;
      var $744=(($743+1124)|0);
      var $745=HEAP32[(($744)>>2)];
      var $746=$745;
      var $747=$746;
      HEAP16[(($747)>>1)]=$742;
      var $748=$2;
      var $749=(($748+40)|0);
      HEAP32[(($749)>>2)]=0;
      $1=345;
      label = 706; break;
    case 197: 
      var $751=$2;
      var $752=(($751+40)|0);
      var $753=HEAP32[(($752)>>2)];
      var $754=(($753)|(0))==7;
      if ($754) { label = 199; break; } else { label = 198; break; }
    case 198: 
      var $756=$2;
      var $757=(($756+40)|0);
      var $758=HEAP32[(($757)>>2)];
      var $759=(($758)|(0))==8;
      if ($759) { label = 199; break; } else { label = 200; break; }
    case 199: 
      var $761=$2;
      var $762=(($761+40)|0);
      HEAP32[(($762)>>2)]=4;
      label = 201; break;
    case 200: 
      var $764=$2;
      var $765=(($764+40)|0);
      HEAP32[(($765)>>2)]=0;
      label = 201; break;
    case 201: 
      var $767=$2;
      var $768=$c;
      _pushback($767, $768);
      $1=124;
      label = 706; break;
    case 202: 
      var $770=$2;
      var $771=_nextc($770);
      $c=$771;
      var $772=$2;
      var $773=(($772+40)|0);
      var $774=HEAP32[(($773)>>2)];
      var $775=(($774)|(0))==7;
      if ($775) { label = 204; break; } else { label = 203; break; }
    case 203: 
      var $777=$2;
      var $778=(($777+40)|0);
      var $779=HEAP32[(($778)>>2)];
      var $780=(($779)|(0))==8;
      if ($780) { label = 204; break; } else { label = 207; break; }
    case 204: 
      var $782=$2;
      var $783=(($782+40)|0);
      HEAP32[(($783)>>2)]=4;
      var $784=$c;
      var $785=(($784)|(0))==64;
      if ($785) { label = 205; break; } else { label = 206; break; }
    case 205: 
      $1=324;
      label = 706; break;
    case 206: 
      var $788=$2;
      var $789=$c;
      _pushback($788, $789);
      $1=43;
      label = 706; break;
    case 207: 
      var $791=$c;
      var $792=(($791)|(0))==61;
      if ($792) { label = 208; break; } else { label = 209; break; }
    case 208: 
      var $794=$2;
      var $795=_intern_gen_c($794, 43);
      var $796=$2;
      var $797=(($796+1124)|0);
      var $798=HEAP32[(($797)>>2)];
      var $799=$798;
      var $800=$799;
      HEAP16[(($800)>>1)]=$795;
      var $801=$2;
      var $802=(($801+40)|0);
      HEAP32[(($802)>>2)]=0;
      $1=345;
      label = 706; break;
    case 209: 
      var $804=$2;
      var $805=(($804+40)|0);
      var $806=HEAP32[(($805)>>2)];
      var $807=(($806)|(0))==0;
      if ($807) { label = 218; break; } else { label = 210; break; }
    case 210: 
      var $809=$2;
      var $810=(($809+40)|0);
      var $811=HEAP32[(($810)>>2)];
      var $812=(($811)|(0))==6;
      if ($812) { label = 218; break; } else { label = 211; break; }
    case 211: 
      var $814=$2;
      var $815=(($814+40)|0);
      var $816=HEAP32[(($815)>>2)];
      var $817=(($816)|(0))==10;
      if ($817) { label = 218; break; } else { label = 212; break; }
    case 212: 
      var $819=$2;
      var $820=(($819+40)|0);
      var $821=HEAP32[(($820)>>2)];
      var $822=(($821)|(0))==9;
      if ($822) { label = 218; break; } else { label = 213; break; }
    case 213: 
      var $824=$2;
      var $825=(($824+40)|0);
      var $826=HEAP32[(($825)>>2)];
      var $827=(($826)|(0))==4;
      if ($827) { label = 215; break; } else { label = 214; break; }
    case 214: 
      var $829=$2;
      var $830=(($829+40)|0);
      var $831=HEAP32[(($830)>>2)];
      var $832=(($831)|(0))==5;
      if ($832) { label = 215; break; } else { label = 222; break; }
    case 215: 
      var $834=$space_seen;
      var $835=(($834)|(0))!=0;
      if ($835) { label = 216; break; } else { label = 222; break; }
    case 216: 
      var $837=$c;
      var $838=(($837) & 255);
      var $839=(($838)&(255));
      var $840=_isspace($839);
      var $841=(($840)|(0))!=0;
      if ($841) { label = 222; break; } else { label = 217; break; }
    case 217: 
      var $843=$2;
      var $844=_arg_ambiguous($843);
      var $845=(($844)|(0))!=0;
      if ($845) { label = 218; break; } else { label = 222; break; }
    case 218: 
      var $847=$2;
      var $848=(($847+40)|0);
      HEAP32[(($848)>>2)]=0;
      var $849=$2;
      var $850=$c;
      _pushback($849, $850);
      var $851=$c;
      var $852=(($851)|(0))!=-1;
      if ($852) { label = 219; break; } else { label = 221; break; }
    case 219: 
      var $854=$c;
      var $855=(($854) & 255);
      var $856=(($855)&(255));
      var $857=_isdigit($856);
      var $858=(($857)|(0))!=0;
      if ($858) { label = 220; break; } else { label = 221; break; }
    case 220: 
      $c=43;
      label = 254; break;
    case 221: 
      $1=324;
      label = 706; break;
    case 222: 
      var $862=$2;
      var $863=(($862+40)|0);
      HEAP32[(($863)>>2)]=0;
      var $864=$2;
      var $865=$c;
      _pushback($864, $865);
      $1=43;
      label = 706; break;
    case 223: 
      var $867=$2;
      var $868=_nextc($867);
      $c=$868;
      var $869=$2;
      var $870=(($869+40)|0);
      var $871=HEAP32[(($870)>>2)];
      var $872=(($871)|(0))==7;
      if ($872) { label = 225; break; } else { label = 224; break; }
    case 224: 
      var $874=$2;
      var $875=(($874+40)|0);
      var $876=HEAP32[(($875)>>2)];
      var $877=(($876)|(0))==8;
      if ($877) { label = 225; break; } else { label = 228; break; }
    case 225: 
      var $879=$2;
      var $880=(($879+40)|0);
      HEAP32[(($880)>>2)]=4;
      var $881=$c;
      var $882=(($881)|(0))==64;
      if ($882) { label = 226; break; } else { label = 227; break; }
    case 226: 
      $1=325;
      label = 706; break;
    case 227: 
      var $885=$2;
      var $886=$c;
      _pushback($885, $886);
      $1=45;
      label = 706; break;
    case 228: 
      var $888=$c;
      var $889=(($888)|(0))==61;
      if ($889) { label = 229; break; } else { label = 230; break; }
    case 229: 
      var $891=$2;
      var $892=_intern_gen_c($891, 45);
      var $893=$2;
      var $894=(($893+1124)|0);
      var $895=HEAP32[(($894)>>2)];
      var $896=$895;
      var $897=$896;
      HEAP16[(($897)>>1)]=$892;
      var $898=$2;
      var $899=(($898+40)|0);
      HEAP32[(($899)>>2)]=0;
      $1=345;
      label = 706; break;
    case 230: 
      var $901=$c;
      var $902=(($901)|(0))==62;
      if ($902) { label = 231; break; } else { label = 232; break; }
    case 231: 
      var $904=$2;
      var $905=(($904+40)|0);
      HEAP32[(($905)>>2)]=3;
      $1=355;
      label = 706; break;
    case 232: 
      var $907=$2;
      var $908=(($907+40)|0);
      var $909=HEAP32[(($908)>>2)];
      var $910=(($909)|(0))==0;
      if ($910) { label = 241; break; } else { label = 233; break; }
    case 233: 
      var $912=$2;
      var $913=(($912+40)|0);
      var $914=HEAP32[(($913)>>2)];
      var $915=(($914)|(0))==6;
      if ($915) { label = 241; break; } else { label = 234; break; }
    case 234: 
      var $917=$2;
      var $918=(($917+40)|0);
      var $919=HEAP32[(($918)>>2)];
      var $920=(($919)|(0))==10;
      if ($920) { label = 241; break; } else { label = 235; break; }
    case 235: 
      var $922=$2;
      var $923=(($922+40)|0);
      var $924=HEAP32[(($923)>>2)];
      var $925=(($924)|(0))==9;
      if ($925) { label = 241; break; } else { label = 236; break; }
    case 236: 
      var $927=$2;
      var $928=(($927+40)|0);
      var $929=HEAP32[(($928)>>2)];
      var $930=(($929)|(0))==4;
      if ($930) { label = 238; break; } else { label = 237; break; }
    case 237: 
      var $932=$2;
      var $933=(($932+40)|0);
      var $934=HEAP32[(($933)>>2)];
      var $935=(($934)|(0))==5;
      if ($935) { label = 238; break; } else { label = 245; break; }
    case 238: 
      var $937=$space_seen;
      var $938=(($937)|(0))!=0;
      if ($938) { label = 239; break; } else { label = 245; break; }
    case 239: 
      var $940=$c;
      var $941=(($940) & 255);
      var $942=(($941)&(255));
      var $943=_isspace($942);
      var $944=(($943)|(0))!=0;
      if ($944) { label = 245; break; } else { label = 240; break; }
    case 240: 
      var $946=$2;
      var $947=_arg_ambiguous($946);
      var $948=(($947)|(0))!=0;
      if ($948) { label = 241; break; } else { label = 245; break; }
    case 241: 
      var $950=$2;
      var $951=(($950+40)|0);
      HEAP32[(($951)>>2)]=0;
      var $952=$2;
      var $953=$c;
      _pushback($952, $953);
      var $954=$c;
      var $955=(($954)|(0))!=-1;
      if ($955) { label = 242; break; } else { label = 244; break; }
    case 242: 
      var $957=$c;
      var $958=(($957) & 255);
      var $959=(($958)&(255));
      var $960=_isdigit($959);
      var $961=(($960)|(0))!=0;
      if ($961) { label = 243; break; } else { label = 244; break; }
    case 243: 
      $1=368;
      label = 706; break;
    case 244: 
      $1=325;
      label = 706; break;
    case 245: 
      var $965=$2;
      var $966=(($965+40)|0);
      HEAP32[(($966)>>2)]=0;
      var $967=$2;
      var $968=$c;
      _pushback($967, $968);
      $1=45;
      label = 706; break;
    case 246: 
      var $970=$2;
      var $971=(($970+40)|0);
      HEAP32[(($971)>>2)]=0;
      var $972=$2;
      var $973=_nextc($972);
      $c=$973;
      var $974=(($973)|(0))==46;
      if ($974) { label = 247; break; } else { label = 250; break; }
    case 247: 
      var $976=$2;
      var $977=_nextc($976);
      $c=$977;
      var $978=(($977)|(0))==46;
      if ($978) { label = 248; break; } else { label = 249; break; }
    case 248: 
      $1=338;
      label = 706; break;
    case 249: 
      var $981=$2;
      var $982=$c;
      _pushback($981, $982);
      $1=337;
      label = 706; break;
    case 250: 
      var $984=$2;
      var $985=$c;
      _pushback($984, $985);
      var $986=$c;
      var $987=(($986)|(0))!=-1;
      if ($987) { label = 251; break; } else { label = 253; break; }
    case 251: 
      var $989=$c;
      var $990=(($989) & 255);
      var $991=(($990)&(255));
      var $992=_isdigit($991);
      var $993=(($992)|(0))!=0;
      if ($993) { label = 252; break; } else { label = 253; break; }
    case 252: 
      var $995=$2;
      _yyerror($995, ((109396)|0));
      label = 253; break;
    case 253: 
      var $997=$2;
      var $998=(($997+40)|0);
      HEAP32[(($998)>>2)]=8;
      $1=46;
      label = 706; break;
    case 254: 
      label = 255; break;
    case 255: 
      $nondigit=0;
      $seen_e=0;
      $seen_point=0;
      $is_float=0;
      var $1001=$2;
      var $1002=(($1001+40)|0);
      HEAP32[(($1002)>>2)]=1;
      var $1003=$2;
      var $1004=_newtok($1003);
      $token_column=$1004;
      var $1005=$c;
      var $1006=(($1005)|(0))==45;
      if ($1006) { label = 257; break; } else { label = 256; break; }
    case 256: 
      var $1008=$c;
      var $1009=(($1008)|(0))==43;
      if ($1009) { label = 257; break; } else { label = 258; break; }
    case 257: 
      var $1011=$2;
      var $1012=$c;
      _tokadd($1011, $1012);
      var $1013=$2;
      var $1014=_nextc($1013);
      $c=$1014;
      label = 258; break;
    case 258: 
      var $1016=$c;
      var $1017=(($1016)|(0))==48;
      if ($1017) { label = 259; break; } else { label = 366; break; }
    case 259: 
      var $1019=$2;
      var $1020=_toklen($1019);
      $start=$1020;
      var $1021=$2;
      var $1022=_nextc($1021);
      $c=$1022;
      var $1023=$c;
      var $1024=(($1023)|(0))==120;
      if ($1024) { label = 261; break; } else { label = 260; break; }
    case 260: 
      var $1026=$c;
      var $1027=(($1026)|(0))==88;
      if ($1027) { label = 261; break; } else { label = 280; break; }
    case 261: 
      var $1029=$2;
      var $1030=_nextc($1029);
      $c=$1030;
      var $1031=$c;
      var $1032=(($1031)|(0))!=-1;
      if ($1032) { label = 262; break; } else { label = 273; break; }
    case 262: 
      var $1034=$c;
      var $1035=(($1034) & 255);
      var $1036=(($1035)&(255));
      var $1037=_isxdigit($1036);
      var $1038=(($1037)|(0))!=0;
      if ($1038) { label = 263; break; } else { label = 273; break; }
    case 263: 
      label = 264; break;
    case 264: 
      var $1041=$c;
      var $1042=(($1041)|(0))==95;
      if ($1042) { label = 265; break; } else { label = 268; break; }
    case 265: 
      var $1044=$nondigit;
      var $1045=(($1044)|(0))!=0;
      if ($1045) { label = 266; break; } else { label = 267; break; }
    case 266: 
      label = 272; break;
    case 267: 
      var $1048=$c;
      $nondigit=$1048;
      label = 271; break;
    case 268: 
      var $1050=$c;
      var $1051=(($1050) & 255);
      var $1052=(($1051)&(255));
      var $1053=_isxdigit($1052);
      var $1054=(($1053)|(0))!=0;
      if ($1054) { label = 270; break; } else { label = 269; break; }
    case 269: 
      label = 272; break;
    case 270: 
      $nondigit=0;
      var $1057=$2;
      var $1058=$c;
      var $1059=_tolower($1058);
      _tokadd($1057, $1059);
      label = 271; break;
    case 271: 
      var $1061=$2;
      var $1062=_nextc($1061);
      $c=$1062;
      var $1063=(($1062)|(0))!=-1;
      if ($1063) { label = 264; break; } else { label = 272; break; }
    case 272: 
      label = 273; break;
    case 273: 
      var $1066=$2;
      var $1067=$c;
      _pushback($1066, $1067);
      var $1068=$2;
      _tokfix($1068);
      var $1069=$2;
      var $1070=_toklen($1069);
      var $1071=$start;
      var $1072=(($1070)|(0))==(($1071)|(0));
      if ($1072) { label = 274; break; } else { label = 276; break; }
    case 274: 
      label = 275; break;
    case 275: 
      var $1075=$2;
      _yyerror($1075, ((109360)|0));
      $1=0;
      label = 706; break;
    case 276: 
      var $1078=$nondigit;
      var $1079=(($1078)|(0))!=0;
      if ($1079) { label = 277; break; } else { label = 278; break; }
    case 277: 
      label = 394; break;
    case 278: 
      label = 279; break;
    case 279: 
      var $1083=$2;
      var $1084=$2;
      var $1085=_tok($1084);
      var $1086=_new_int($1083, $1085, 16);
      var $1087=$2;
      var $1088=(($1087+1124)|0);
      var $1089=HEAP32[(($1088)>>2)];
      var $1090=$1089;
      var $1091=$1090;
      HEAP32[(($1091)>>2)]=$1086;
      $1=313;
      label = 706; break;
    case 280: 
      var $1093=$c;
      var $1094=(($1093)|(0))==98;
      if ($1094) { label = 282; break; } else { label = 281; break; }
    case 281: 
      var $1096=$c;
      var $1097=(($1096)|(0))==66;
      if ($1097) { label = 282; break; } else { label = 302; break; }
    case 282: 
      var $1099=$2;
      var $1100=_nextc($1099);
      $c=$1100;
      var $1101=$c;
      var $1102=(($1101)|(0))==48;
      if ($1102) { label = 284; break; } else { label = 283; break; }
    case 283: 
      var $1104=$c;
      var $1105=(($1104)|(0))==49;
      if ($1105) { label = 284; break; } else { label = 295; break; }
    case 284: 
      label = 285; break;
    case 285: 
      var $1108=$c;
      var $1109=(($1108)|(0))==95;
      if ($1109) { label = 286; break; } else { label = 289; break; }
    case 286: 
      var $1111=$nondigit;
      var $1112=(($1111)|(0))!=0;
      if ($1112) { label = 287; break; } else { label = 288; break; }
    case 287: 
      label = 294; break;
    case 288: 
      var $1115=$c;
      $nondigit=$1115;
      label = 293; break;
    case 289: 
      var $1117=$c;
      var $1118=(($1117)|(0))!=48;
      if ($1118) { label = 290; break; } else { label = 292; break; }
    case 290: 
      var $1120=$c;
      var $1121=(($1120)|(0))!=49;
      if ($1121) { label = 291; break; } else { label = 292; break; }
    case 291: 
      label = 294; break;
    case 292: 
      $nondigit=0;
      var $1124=$2;
      var $1125=$c;
      _tokadd($1124, $1125);
      label = 293; break;
    case 293: 
      var $1127=$2;
      var $1128=_nextc($1127);
      $c=$1128;
      var $1129=(($1128)|(0))!=-1;
      if ($1129) { label = 285; break; } else { label = 294; break; }
    case 294: 
      label = 295; break;
    case 295: 
      var $1132=$2;
      var $1133=$c;
      _pushback($1132, $1133);
      var $1134=$2;
      _tokfix($1134);
      var $1135=$2;
      var $1136=_toklen($1135);
      var $1137=$start;
      var $1138=(($1136)|(0))==(($1137)|(0));
      if ($1138) { label = 296; break; } else { label = 298; break; }
    case 296: 
      label = 297; break;
    case 297: 
      var $1141=$2;
      _yyerror($1141, ((109360)|0));
      $1=0;
      label = 706; break;
    case 298: 
      var $1144=$nondigit;
      var $1145=(($1144)|(0))!=0;
      if ($1145) { label = 299; break; } else { label = 300; break; }
    case 299: 
      label = 394; break;
    case 300: 
      label = 301; break;
    case 301: 
      var $1149=$2;
      var $1150=$2;
      var $1151=_tok($1150);
      var $1152=_new_int($1149, $1151, 2);
      var $1153=$2;
      var $1154=(($1153+1124)|0);
      var $1155=HEAP32[(($1154)>>2)];
      var $1156=$1155;
      var $1157=$1156;
      HEAP32[(($1157)>>2)]=$1152;
      $1=313;
      label = 706; break;
    case 302: 
      var $1159=$c;
      var $1160=(($1159)|(0))==100;
      if ($1160) { label = 304; break; } else { label = 303; break; }
    case 303: 
      var $1162=$c;
      var $1163=(($1162)|(0))==68;
      if ($1163) { label = 304; break; } else { label = 323; break; }
    case 304: 
      var $1165=$2;
      var $1166=_nextc($1165);
      $c=$1166;
      var $1167=$c;
      var $1168=(($1167)|(0))!=-1;
      if ($1168) { label = 305; break; } else { label = 316; break; }
    case 305: 
      var $1170=$c;
      var $1171=(($1170) & 255);
      var $1172=(($1171)&(255));
      var $1173=_isdigit($1172);
      var $1174=(($1173)|(0))!=0;
      if ($1174) { label = 306; break; } else { label = 316; break; }
    case 306: 
      label = 307; break;
    case 307: 
      var $1177=$c;
      var $1178=(($1177)|(0))==95;
      if ($1178) { label = 308; break; } else { label = 311; break; }
    case 308: 
      var $1180=$nondigit;
      var $1181=(($1180)|(0))!=0;
      if ($1181) { label = 309; break; } else { label = 310; break; }
    case 309: 
      label = 315; break;
    case 310: 
      var $1184=$c;
      $nondigit=$1184;
      label = 314; break;
    case 311: 
      var $1186=$c;
      var $1187=(($1186) & 255);
      var $1188=(($1187)&(255));
      var $1189=_isdigit($1188);
      var $1190=(($1189)|(0))!=0;
      if ($1190) { label = 313; break; } else { label = 312; break; }
    case 312: 
      label = 315; break;
    case 313: 
      $nondigit=0;
      var $1193=$2;
      var $1194=$c;
      _tokadd($1193, $1194);
      label = 314; break;
    case 314: 
      var $1196=$2;
      var $1197=_nextc($1196);
      $c=$1197;
      var $1198=(($1197)|(0))!=-1;
      if ($1198) { label = 307; break; } else { label = 315; break; }
    case 315: 
      label = 316; break;
    case 316: 
      var $1201=$2;
      var $1202=$c;
      _pushback($1201, $1202);
      var $1203=$2;
      _tokfix($1203);
      var $1204=$2;
      var $1205=_toklen($1204);
      var $1206=$start;
      var $1207=(($1205)|(0))==(($1206)|(0));
      if ($1207) { label = 317; break; } else { label = 319; break; }
    case 317: 
      label = 318; break;
    case 318: 
      var $1210=$2;
      _yyerror($1210, ((109360)|0));
      $1=0;
      label = 706; break;
    case 319: 
      var $1213=$nondigit;
      var $1214=(($1213)|(0))!=0;
      if ($1214) { label = 320; break; } else { label = 321; break; }
    case 320: 
      label = 394; break;
    case 321: 
      label = 322; break;
    case 322: 
      var $1218=$2;
      var $1219=$2;
      var $1220=_tok($1219);
      var $1221=_new_int($1218, $1220, 10);
      var $1222=$2;
      var $1223=(($1222+1124)|0);
      var $1224=HEAP32[(($1223)>>2)];
      var $1225=$1224;
      var $1226=$1225;
      HEAP32[(($1226)>>2)]=$1221;
      $1=313;
      label = 706; break;
    case 323: 
      var $1228=$c;
      var $1229=(($1228)|(0))==95;
      if ($1229) { label = 324; break; } else { label = 325; break; }
    case 324: 
      label = 336; break;
    case 325: 
      var $1232=$c;
      var $1233=(($1232)|(0))==111;
      if ($1233) { label = 327; break; } else { label = 326; break; }
    case 326: 
      var $1235=$c;
      var $1236=(($1235)|(0))==79;
      if ($1236) { label = 327; break; } else { label = 333; break; }
    case 327: 
      var $1238=$2;
      var $1239=_nextc($1238);
      $c=$1239;
      var $1240=$c;
      var $1241=(($1240)|(0))==-1;
      if ($1241) { label = 330; break; } else { label = 328; break; }
    case 328: 
      var $1243=$c;
      var $1244=(($1243)|(0))==95;
      if ($1244) { label = 330; break; } else { label = 329; break; }
    case 329: 
      var $1246=$c;
      var $1247=(($1246) & 255);
      var $1248=(($1247)&(255));
      var $1249=_isdigit($1248);
      var $1250=(($1249)|(0))!=0;
      if ($1250) { label = 332; break; } else { label = 330; break; }
    case 330: 
      label = 331; break;
    case 331: 
      var $1253=$2;
      _yyerror($1253, ((109360)|0));
      $1=0;
      label = 706; break;
    case 332: 
      label = 333; break;
    case 333: 
      var $1257=$c;
      var $1258=(($1257)|(0)) >= 48;
      if ($1258) { label = 334; break; } else { label = 355; break; }
    case 334: 
      var $1260=$c;
      var $1261=(($1260)|(0)) <= 55;
      if ($1261) { label = 335; break; } else { label = 355; break; }
    case 335: 
      label = 336; break;
    case 336: 
      label = 337; break;
    case 337: 
      var $1265=$c;
      var $1266=(($1265)|(0))==95;
      if ($1266) { label = 338; break; } else { label = 341; break; }
    case 338: 
      var $1268=$nondigit;
      var $1269=(($1268)|(0))!=0;
      if ($1269) { label = 339; break; } else { label = 340; break; }
    case 339: 
      label = 348; break;
    case 340: 
      var $1272=$c;
      $nondigit=$1272;
      label = 347; break;
    case 341: 
      var $1274=$c;
      var $1275=(($1274)|(0)) < 48;
      if ($1275) { label = 343; break; } else { label = 342; break; }
    case 342: 
      var $1277=$c;
      var $1278=(($1277)|(0)) > 57;
      if ($1278) { label = 343; break; } else { label = 344; break; }
    case 343: 
      label = 348; break;
    case 344: 
      var $1281=$c;
      var $1282=(($1281)|(0)) > 55;
      if ($1282) { label = 345; break; } else { label = 346; break; }
    case 345: 
      label = 358; break;
    case 346: 
      $nondigit=0;
      var $1285=$2;
      var $1286=$c;
      _tokadd($1285, $1286);
      label = 347; break;
    case 347: 
      var $1288=$2;
      var $1289=_nextc($1288);
      $c=$1289;
      var $1290=(($1289)|(0))!=-1;
      if ($1290) { label = 337; break; } else { label = 348; break; }
    case 348: 
      var $1292=$2;
      var $1293=_toklen($1292);
      var $1294=$start;
      var $1295=(($1293)|(0)) > (($1294)|(0));
      if ($1295) { label = 349; break; } else { label = 352; break; }
    case 349: 
      var $1297=$2;
      var $1298=$c;
      _pushback($1297, $1298);
      var $1299=$2;
      _tokfix($1299);
      var $1300=$nondigit;
      var $1301=(($1300)|(0))!=0;
      if ($1301) { label = 350; break; } else { label = 351; break; }
    case 350: 
      label = 394; break;
    case 351: 
      var $1304=$2;
      var $1305=$2;
      var $1306=_tok($1305);
      var $1307=_new_int($1304, $1306, 8);
      var $1308=$2;
      var $1309=(($1308+1124)|0);
      var $1310=HEAP32[(($1309)>>2)];
      var $1311=$1310;
      var $1312=$1311;
      HEAP32[(($1312)>>2)]=$1307;
      $1=313;
      label = 706; break;
    case 352: 
      var $1314=$nondigit;
      var $1315=(($1314)|(0))!=0;
      if ($1315) { label = 353; break; } else { label = 354; break; }
    case 353: 
      var $1317=$2;
      var $1318=$c;
      _pushback($1317, $1318);
      label = 394; break;
    case 354: 
      label = 355; break;
    case 355: 
      var $1321=$c;
      var $1322=(($1321)|(0)) > 55;
      if ($1322) { label = 356; break; } else { label = 359; break; }
    case 356: 
      var $1324=$c;
      var $1325=(($1324)|(0)) <= 57;
      if ($1325) { label = 357; break; } else { label = 359; break; }
    case 357: 
      label = 358; break;
    case 358: 
      var $1328=$2;
      _yyerror($1328, ((109340)|0));
      label = 365; break;
    case 359: 
      var $1330=$c;
      var $1331=(($1330)|(0))==46;
      if ($1331) { label = 362; break; } else { label = 360; break; }
    case 360: 
      var $1333=$c;
      var $1334=(($1333)|(0))==101;
      if ($1334) { label = 362; break; } else { label = 361; break; }
    case 361: 
      var $1336=$c;
      var $1337=(($1336)|(0))==69;
      if ($1337) { label = 362; break; } else { label = 363; break; }
    case 362: 
      var $1339=$2;
      _tokadd($1339, 48);
      label = 364; break;
    case 363: 
      var $1341=$2;
      var $1342=$c;
      _pushback($1341, $1342);
      var $1343=$2;
      var $1344=_new_int($1343, ((109328)|0), 10);
      var $1345=$2;
      var $1346=(($1345+1124)|0);
      var $1347=HEAP32[(($1346)>>2)];
      var $1348=$1347;
      var $1349=$1348;
      HEAP32[(($1349)>>2)]=$1344;
      $1=313;
      label = 706; break;
    case 364: 
      label = 365; break;
    case 365: 
      label = 366; break;
    case 366: 
      label = 367; break;
    case 367: 
      var $1354=$c;
      if ((($1354)|(0))==48 | (($1354)|(0))==49 | (($1354)|(0))==50 | (($1354)|(0))==51 | (($1354)|(0))==52 | (($1354)|(0))==53 | (($1354)|(0))==54 | (($1354)|(0))==55 | (($1354)|(0))==56 | (($1354)|(0))==57) {
        label = 368; break;
      }
      else if ((($1354)|(0))==46) {
        label = 369; break;
      }
      else if ((($1354)|(0))==101 | (($1354)|(0))==69) {
        label = 379; break;
      }
      else if ((($1354)|(0))==95) {
        label = 387; break;
      }
      else {
      label = 390; break;
      }
    case 368: 
      $nondigit=0;
      var $1356=$2;
      var $1357=$c;
      _tokadd($1356, $1357);
      label = 391; break;
    case 369: 
      var $1359=$nondigit;
      var $1360=(($1359)|(0))!=0;
      if ($1360) { label = 370; break; } else { label = 371; break; }
    case 370: 
      label = 394; break;
    case 371: 
      var $1363=$seen_point;
      var $1364=(($1363)|(0))!=0;
      if ($1364) { label = 373; break; } else { label = 372; break; }
    case 372: 
      var $1366=$seen_e;
      var $1367=(($1366)|(0))!=0;
      if ($1367) { label = 373; break; } else { label = 374; break; }
    case 373: 
      label = 392; break;
    case 374: 
      var $1370=$2;
      var $1371=_nextc($1370);
      $c0=$1371;
      var $1372=$c0;
      var $1373=(($1372)|(0))==-1;
      if ($1373) { label = 376; break; } else { label = 375; break; }
    case 375: 
      var $1375=$c0;
      var $1376=(($1375) & 255);
      var $1377=(($1376)&(255));
      var $1378=_isdigit($1377);
      var $1379=(($1378)|(0))!=0;
      if ($1379) { label = 377; break; } else { label = 376; break; }
    case 376: 
      var $1381=$2;
      var $1382=$c0;
      _pushback($1381, $1382);
      label = 392; break;
    case 377: 
      var $1384=$c0;
      $c=$1384;
      label = 378; break;
    case 378: 
      var $1386=$2;
      _tokadd($1386, 46);
      var $1387=$2;
      var $1388=$c;
      _tokadd($1387, $1388);
      var $1389=$is_float;
      var $1390=((($1389)+(1))|0);
      $is_float=$1390;
      var $1391=$seen_point;
      var $1392=((($1391)+(1))|0);
      $seen_point=$1392;
      $nondigit=0;
      label = 391; break;
    case 379: 
      var $1394=$nondigit;
      var $1395=(($1394)|(0))!=0;
      if ($1395) { label = 380; break; } else { label = 381; break; }
    case 380: 
      var $1397=$2;
      var $1398=$c;
      _pushback($1397, $1398);
      var $1399=$nondigit;
      $c=$1399;
      label = 392; break;
    case 381: 
      var $1401=$seen_e;
      var $1402=(($1401)|(0))!=0;
      if ($1402) { label = 382; break; } else { label = 383; break; }
    case 382: 
      label = 392; break;
    case 383: 
      var $1405=$2;
      var $1406=$c;
      _tokadd($1405, $1406);
      var $1407=$seen_e;
      var $1408=((($1407)+(1))|0);
      $seen_e=$1408;
      var $1409=$is_float;
      var $1410=((($1409)+(1))|0);
      $is_float=$1410;
      var $1411=$c;
      $nondigit=$1411;
      var $1412=$2;
      var $1413=_nextc($1412);
      $c=$1413;
      var $1414=$c;
      var $1415=(($1414)|(0))!=45;
      if ($1415) { label = 384; break; } else { label = 386; break; }
    case 384: 
      var $1417=$c;
      var $1418=(($1417)|(0))!=43;
      if ($1418) { label = 385; break; } else { label = 386; break; }
    case 385: 
      label = 367; break;
    case 386: 
      var $1421=$2;
      var $1422=$c;
      _tokadd($1421, $1422);
      var $1423=$c;
      $nondigit=$1423;
      label = 391; break;
    case 387: 
      var $1425=$nondigit;
      var $1426=(($1425)|(0))!=0;
      if ($1426) { label = 388; break; } else { label = 389; break; }
    case 388: 
      label = 392; break;
    case 389: 
      var $1429=$c;
      $nondigit=$1429;
      label = 391; break;
    case 390: 
      label = 392; break;
    case 391: 
      var $1432=$2;
      var $1433=_nextc($1432);
      $c=$1433;
      label = 367; break;
    case 392: 
      var $1435=$2;
      var $1436=$c;
      _pushback($1435, $1436);
      var $1437=$nondigit;
      var $1438=(($1437)|(0))!=0;
      if ($1438) { label = 393; break; } else { label = 395; break; }
    case 393: 
      label = 394; break;
    case 394: 
      var $1441=$2;
      var $1442=$nondigit;
      _yyerror_i($1441, ((109296)|0), $1442);
      label = 395; break;
    case 395: 
      var $1444=$2;
      _tokfix($1444);
      var $1445=$is_float;
      var $1446=(($1445)|(0))!=0;
      if ($1446) { label = 396; break; } else { label = 403; break; }
    case 396: 
      var $1448=___errno_location();
      HEAP32[(($1448)>>2)]=0;
      var $1449=$2;
      var $1450=_tok($1449);
      var $1451=_strtod($1450, $endp);
      $d=$1451;
      var $1452=$d;
      var $1453=$1452 == 0;
      if ($1453) { label = 397; break; } else { label = 399; break; }
    case 397: 
      var $1455=HEAP32[(($endp)>>2)];
      var $1456=$2;
      var $1457=_tok($1456);
      var $1458=(($1455)|(0))==(($1457)|(0));
      if ($1458) { label = 398; break; } else { label = 399; break; }
    case 398: 
      var $1460=$2;
      var $1461=$2;
      var $1462=_tok($1461);
      _yywarning_s($1460, ((109260)|0), $1462);
      label = 402; break;
    case 399: 
      var $1464=___errno_location();
      var $1465=HEAP32[(($1464)>>2)];
      var $1466=(($1465)|(0))==34;
      if ($1466) { label = 400; break; } else { label = 401; break; }
    case 400: 
      var $1468=$2;
      var $1469=$2;
      var $1470=_tok($1469);
      _yywarning_s($1468, ((109216)|0), $1470);
      var $1471=___errno_location();
      HEAP32[(($1471)>>2)]=0;
      label = 401; break;
    case 401: 
      label = 402; break;
    case 402: 
      var $1474=$2;
      var $1475=$2;
      var $1476=_tok($1475);
      var $1477=_new_float($1474, $1476);
      var $1478=$2;
      var $1479=(($1478+1124)|0);
      var $1480=HEAP32[(($1479)>>2)];
      var $1481=$1480;
      var $1482=$1481;
      HEAP32[(($1482)>>2)]=$1477;
      $1=314;
      label = 706; break;
    case 403: 
      var $1484=$2;
      var $1485=$2;
      var $1486=_tok($1485);
      var $1487=_new_int($1484, $1486, 10);
      var $1488=$2;
      var $1489=(($1488+1124)|0);
      var $1490=HEAP32[(($1489)>>2)];
      var $1491=$1490;
      var $1492=$1491;
      HEAP32[(($1492)>>2)]=$1487;
      $1=313;
      label = 706; break;
    case 404: 
      var $1494=$2;
      var $1495=(($1494+56)|0);
      var $1496=HEAP32[(($1495)>>2)];
      var $1497=((($1496)-(1))|0);
      HEAP32[(($1495)>>2)]=$1497;
      label = 405; break;
    case 405: 
      var $1499=$2;
      var $1500=(($1499+48)|0);
      var $1501=HEAP32[(($1500)>>2)];
      var $1502=$1501 >>> 1;
      var $1503=$2;
      var $1504=(($1503+48)|0);
      var $1505=HEAP32[(($1504)>>2)];
      var $1506=$1505 & 1;
      var $1507=$1502 | $1506;
      var $1508=$2;
      var $1509=(($1508+48)|0);
      HEAP32[(($1509)>>2)]=$1507;
      var $1510=$2;
      var $1511=(($1510+52)|0);
      var $1512=HEAP32[(($1511)>>2)];
      var $1513=$1512 >>> 1;
      var $1514=$2;
      var $1515=(($1514+52)|0);
      var $1516=HEAP32[(($1515)>>2)];
      var $1517=$1516 & 1;
      var $1518=$1513 | $1517;
      var $1519=$2;
      var $1520=(($1519+52)|0);
      HEAP32[(($1520)>>2)]=$1518;
      var $1521=$c;
      var $1522=(($1521)|(0))==41;
      if ($1522) { label = 406; break; } else { label = 407; break; }
    case 406: 
      var $1524=$2;
      var $1525=(($1524+40)|0);
      HEAP32[(($1525)>>2)]=3;
      label = 408; break;
    case 407: 
      var $1527=$2;
      var $1528=(($1527+40)|0);
      HEAP32[(($1528)>>2)]=2;
      label = 408; break;
    case 408: 
      var $1530=$c;
      $1=$1530;
      label = 706; break;
    case 409: 
      var $1532=$2;
      var $1533=_nextc($1532);
      $c=$1533;
      var $1534=$c;
      var $1535=(($1534)|(0))==58;
      if ($1535) { label = 410; break; } else { label = 421; break; }
    case 410: 
      var $1537=$2;
      var $1538=(($1537+40)|0);
      var $1539=HEAP32[(($1538)>>2)];
      var $1540=(($1539)|(0))==0;
      if ($1540) { label = 419; break; } else { label = 411; break; }
    case 411: 
      var $1542=$2;
      var $1543=(($1542+40)|0);
      var $1544=HEAP32[(($1543)>>2)];
      var $1545=(($1544)|(0))==6;
      if ($1545) { label = 419; break; } else { label = 412; break; }
    case 412: 
      var $1547=$2;
      var $1548=(($1547+40)|0);
      var $1549=HEAP32[(($1548)>>2)];
      var $1550=(($1549)|(0))==10;
      if ($1550) { label = 419; break; } else { label = 413; break; }
    case 413: 
      var $1552=$2;
      var $1553=(($1552+40)|0);
      var $1554=HEAP32[(($1553)>>2)];
      var $1555=(($1554)|(0))==9;
      if ($1555) { label = 419; break; } else { label = 414; break; }
    case 414: 
      var $1557=$2;
      var $1558=(($1557+40)|0);
      var $1559=HEAP32[(($1558)>>2)];
      var $1560=(($1559)|(0))==9;
      if ($1560) { label = 419; break; } else { label = 415; break; }
    case 415: 
      var $1562=$2;
      var $1563=(($1562+40)|0);
      var $1564=HEAP32[(($1563)>>2)];
      var $1565=(($1564)|(0))==4;
      if ($1565) { label = 417; break; } else { label = 416; break; }
    case 416: 
      var $1567=$2;
      var $1568=(($1567+40)|0);
      var $1569=HEAP32[(($1568)>>2)];
      var $1570=(($1569)|(0))==5;
      if ($1570) { label = 417; break; } else { label = 420; break; }
    case 417: 
      var $1572=$space_seen;
      var $1573=(($1572)|(0))!=0;
      if ($1573) { label = 418; break; } else { label = 420; break; }
    case 418: 
      var $1575=_isspace(255);
      var $1576=(($1575)|(0))!=0;
      if ($1576) { label = 420; break; } else { label = 419; break; }
    case 419: 
      var $1578=$2;
      var $1579=(($1578+40)|0);
      HEAP32[(($1579)>>2)]=0;
      $1=344;
      label = 706; break;
    case 420: 
      var $1581=$2;
      var $1582=(($1581+40)|0);
      HEAP32[(($1582)>>2)]=8;
      $1=343;
      label = 706; break;
    case 421: 
      var $1584=$2;
      var $1585=(($1584+40)|0);
      var $1586=HEAP32[(($1585)>>2)];
      var $1587=(($1586)|(0))==1;
      if ($1587) { label = 425; break; } else { label = 422; break; }
    case 422: 
      var $1589=$2;
      var $1590=(($1589+40)|0);
      var $1591=HEAP32[(($1590)>>2)];
      var $1592=(($1591)|(0))==2;
      if ($1592) { label = 425; break; } else { label = 423; break; }
    case 423: 
      var $1594=$2;
      var $1595=(($1594+40)|0);
      var $1596=HEAP32[(($1595)>>2)];
      var $1597=(($1596)|(0))==3;
      if ($1597) { label = 425; break; } else { label = 424; break; }
    case 424: 
      var $1599=$c;
      var $1600=(($1599) & 255);
      var $1601=(($1600)&(255));
      var $1602=_isspace($1601);
      var $1603=(($1602)|(0))!=0;
      if ($1603) { label = 425; break; } else { label = 426; break; }
    case 425: 
      var $1605=$2;
      var $1606=$c;
      _pushback($1605, $1606);
      var $1607=$2;
      var $1608=(($1607+40)|0);
      HEAP32[(($1608)>>2)]=0;
      $1=58;
      label = 706; break;
    case 426: 
      var $1610=$2;
      var $1611=$c;
      _pushback($1610, $1611);
      var $1612=$2;
      var $1613=(($1612+40)|0);
      HEAP32[(($1613)>>2)]=7;
      $1=356;
      label = 706; break;
    case 427: 
      var $1615=$2;
      var $1616=(($1615+40)|0);
      var $1617=HEAP32[(($1616)>>2)];
      var $1618=(($1617)|(0))==0;
      if ($1618) { label = 431; break; } else { label = 428; break; }
    case 428: 
      var $1620=$2;
      var $1621=(($1620+40)|0);
      var $1622=HEAP32[(($1621)>>2)];
      var $1623=(($1622)|(0))==6;
      if ($1623) { label = 431; break; } else { label = 429; break; }
    case 429: 
      var $1625=$2;
      var $1626=(($1625+40)|0);
      var $1627=HEAP32[(($1626)>>2)];
      var $1628=(($1627)|(0))==10;
      if ($1628) { label = 431; break; } else { label = 430; break; }
    case 430: 
      var $1630=$2;
      var $1631=(($1630+40)|0);
      var $1632=HEAP32[(($1631)>>2)];
      var $1633=(($1632)|(0))==9;
      if ($1633) { label = 431; break; } else { label = 432; break; }
    case 431: 
      var $1635=$2;
      var $1636=_new_strterm($1635, 7, 47, 0);
      var $1637=$2;
      var $1638=(($1637+44)|0);
      HEAP32[(($1638)>>2)]=$1636;
      $1=357;
      label = 706; break;
    case 432: 
      var $1640=$2;
      var $1641=_nextc($1640);
      $c=$1641;
      var $1642=(($1641)|(0))==61;
      if ($1642) { label = 433; break; } else { label = 434; break; }
    case 433: 
      var $1644=$2;
      var $1645=_intern_gen_c($1644, 47);
      var $1646=$2;
      var $1647=(($1646+1124)|0);
      var $1648=HEAP32[(($1647)>>2)];
      var $1649=$1648;
      var $1650=$1649;
      HEAP16[(($1650)>>1)]=$1645;
      var $1651=$2;
      var $1652=(($1651+40)|0);
      HEAP32[(($1652)>>2)]=0;
      $1=345;
      label = 706; break;
    case 434: 
      var $1654=$2;
      var $1655=$c;
      _pushback($1654, $1655);
      var $1656=$2;
      var $1657=(($1656+40)|0);
      var $1658=HEAP32[(($1657)>>2)];
      var $1659=(($1658)|(0))==4;
      if ($1659) { label = 436; break; } else { label = 435; break; }
    case 435: 
      var $1661=$2;
      var $1662=(($1661+40)|0);
      var $1663=HEAP32[(($1662)>>2)];
      var $1664=(($1663)|(0))==5;
      if ($1664) { label = 436; break; } else { label = 439; break; }
    case 436: 
      var $1666=$space_seen;
      var $1667=(($1666)|(0))!=0;
      if ($1667) { label = 437; break; } else { label = 439; break; }
    case 437: 
      var $1669=$c;
      var $1670=(($1669) & 255);
      var $1671=(($1670)&(255));
      var $1672=_isspace($1671);
      var $1673=(($1672)|(0))!=0;
      if ($1673) { label = 439; break; } else { label = 438; break; }
    case 438: 
      var $1675=$2;
      var $1676=_new_strterm($1675, 7, 47, 0);
      var $1677=$2;
      var $1678=(($1677+44)|0);
      HEAP32[(($1678)>>2)]=$1676;
      $1=357;
      label = 706; break;
    case 439: 
      var $1680=$2;
      var $1681=(($1680+40)|0);
      var $1682=HEAP32[(($1681)>>2)];
      var $1683=(($1682)|(0))==7;
      if ($1683) { label = 441; break; } else { label = 440; break; }
    case 440: 
      var $1685=$2;
      var $1686=(($1685+40)|0);
      var $1687=HEAP32[(($1686)>>2)];
      var $1688=(($1687)|(0))==8;
      if ($1688) { label = 441; break; } else { label = 442; break; }
    case 441: 
      var $1690=$2;
      var $1691=(($1690+40)|0);
      HEAP32[(($1691)>>2)]=4;
      label = 443; break;
    case 442: 
      var $1693=$2;
      var $1694=(($1693+40)|0);
      HEAP32[(($1694)>>2)]=0;
      label = 443; break;
    case 443: 
      $1=47;
      label = 706; break;
    case 444: 
      var $1697=$2;
      var $1698=_nextc($1697);
      $c=$1698;
      var $1699=(($1698)|(0))==61;
      if ($1699) { label = 445; break; } else { label = 446; break; }
    case 445: 
      var $1701=$2;
      var $1702=_intern_gen_c($1701, 94);
      var $1703=$2;
      var $1704=(($1703+1124)|0);
      var $1705=HEAP32[(($1704)>>2)];
      var $1706=$1705;
      var $1707=$1706;
      HEAP16[(($1707)>>1)]=$1702;
      var $1708=$2;
      var $1709=(($1708+40)|0);
      HEAP32[(($1709)>>2)]=0;
      $1=345;
      label = 706; break;
    case 446: 
      var $1711=$2;
      var $1712=(($1711+40)|0);
      var $1713=HEAP32[(($1712)>>2)];
      var $1714=(($1713)|(0))==7;
      if ($1714) { label = 448; break; } else { label = 447; break; }
    case 447: 
      var $1716=$2;
      var $1717=(($1716+40)|0);
      var $1718=HEAP32[(($1717)>>2)];
      var $1719=(($1718)|(0))==8;
      if ($1719) { label = 448; break; } else { label = 449; break; }
    case 448: 
      var $1721=$2;
      var $1722=(($1721+40)|0);
      HEAP32[(($1722)>>2)]=4;
      label = 450; break;
    case 449: 
      var $1724=$2;
      var $1725=(($1724+40)|0);
      HEAP32[(($1725)>>2)]=0;
      label = 450; break;
    case 450: 
      var $1727=$2;
      var $1728=$c;
      _pushback($1727, $1728);
      $1=94;
      label = 706; break;
    case 451: 
      var $1730=$2;
      var $1731=(($1730+40)|0);
      HEAP32[(($1731)>>2)]=0;
      $1=59;
      label = 706; break;
    case 452: 
      var $1733=$2;
      var $1734=(($1733+40)|0);
      HEAP32[(($1734)>>2)]=0;
      $1=44;
      label = 706; break;
    case 453: 
      var $1736=$2;
      var $1737=(($1736+40)|0);
      var $1738=HEAP32[(($1737)>>2)];
      var $1739=(($1738)|(0))==7;
      if ($1739) { label = 455; break; } else { label = 454; break; }
    case 454: 
      var $1741=$2;
      var $1742=(($1741+40)|0);
      var $1743=HEAP32[(($1742)>>2)];
      var $1744=(($1743)|(0))==8;
      if ($1744) { label = 455; break; } else { label = 458; break; }
    case 455: 
      var $1746=$2;
      var $1747=_nextc($1746);
      $c=$1747;
      var $1748=(($1747)|(0))!=64;
      if ($1748) { label = 456; break; } else { label = 457; break; }
    case 456: 
      var $1750=$2;
      var $1751=$c;
      _pushback($1750, $1751);
      label = 457; break;
    case 457: 
      var $1753=$2;
      var $1754=(($1753+40)|0);
      HEAP32[(($1754)>>2)]=4;
      label = 459; break;
    case 458: 
      var $1756=$2;
      var $1757=(($1756+40)|0);
      HEAP32[(($1757)>>2)]=0;
      label = 459; break;
    case 459: 
      $1=126;
      label = 706; break;
    case 460: 
      var $1760=$2;
      var $1761=(($1760+40)|0);
      var $1762=HEAP32[(($1761)>>2)];
      var $1763=(($1762)|(0))==0;
      if ($1763) { label = 464; break; } else { label = 461; break; }
    case 461: 
      var $1765=$2;
      var $1766=(($1765+40)|0);
      var $1767=HEAP32[(($1766)>>2)];
      var $1768=(($1767)|(0))==6;
      if ($1768) { label = 464; break; } else { label = 462; break; }
    case 462: 
      var $1770=$2;
      var $1771=(($1770+40)|0);
      var $1772=HEAP32[(($1771)>>2)];
      var $1773=(($1772)|(0))==10;
      if ($1773) { label = 464; break; } else { label = 463; break; }
    case 463: 
      var $1775=$2;
      var $1776=(($1775+40)|0);
      var $1777=HEAP32[(($1776)>>2)];
      var $1778=(($1777)|(0))==9;
      if ($1778) { label = 464; break; } else { label = 465; break; }
    case 464: 
      $c=347;
      label = 471; break;
    case 465: 
      var $1781=$2;
      var $1782=(($1781+40)|0);
      var $1783=HEAP32[(($1782)>>2)];
      var $1784=(($1783)|(0))==4;
      if ($1784) { label = 467; break; } else { label = 466; break; }
    case 466: 
      var $1786=$2;
      var $1787=(($1786+40)|0);
      var $1788=HEAP32[(($1787)>>2)];
      var $1789=(($1788)|(0))==5;
      if ($1789) { label = 467; break; } else { label = 470; break; }
    case 467: 
      var $1791=$space_seen;
      var $1792=(($1791)|(0))!=0;
      if ($1792) { label = 468; break; } else { label = 470; break; }
    case 468: 
      var $1794=_isspace(255);
      var $1795=(($1794)|(0))!=0;
      if ($1795) { label = 470; break; } else { label = 469; break; }
    case 469: 
      $c=348;
      label = 470; break;
    case 470: 
      label = 471; break;
    case 471: 
      var $1799=$2;
      var $1800=(($1799+56)|0);
      var $1801=HEAP32[(($1800)>>2)];
      var $1802=((($1801)+(1))|0);
      HEAP32[(($1800)>>2)]=$1802;
      var $1803=$2;
      var $1804=(($1803+48)|0);
      var $1805=HEAP32[(($1804)>>2)];
      var $1806=$1805 << 1;
      var $1807=$2;
      var $1808=(($1807+48)|0);
      HEAP32[(($1808)>>2)]=$1806;
      var $1809=$2;
      var $1810=(($1809+52)|0);
      var $1811=HEAP32[(($1810)>>2)];
      var $1812=$1811 << 1;
      var $1813=$2;
      var $1814=(($1813+52)|0);
      HEAP32[(($1814)>>2)]=$1812;
      var $1815=$2;
      var $1816=(($1815+40)|0);
      HEAP32[(($1816)>>2)]=0;
      var $1817=$c;
      $1=$1817;
      label = 706; break;
    case 472: 
      var $1819=$2;
      var $1820=(($1819+56)|0);
      var $1821=HEAP32[(($1820)>>2)];
      var $1822=((($1821)+(1))|0);
      HEAP32[(($1820)>>2)]=$1822;
      var $1823=$2;
      var $1824=(($1823+40)|0);
      var $1825=HEAP32[(($1824)>>2)];
      var $1826=(($1825)|(0))==7;
      if ($1826) { label = 474; break; } else { label = 473; break; }
    case 473: 
      var $1828=$2;
      var $1829=(($1828+40)|0);
      var $1830=HEAP32[(($1829)>>2)];
      var $1831=(($1830)|(0))==8;
      if ($1831) { label = 474; break; } else { label = 479; break; }
    case 474: 
      var $1833=$2;
      var $1834=(($1833+40)|0);
      HEAP32[(($1834)>>2)]=4;
      var $1835=$2;
      var $1836=_nextc($1835);
      $c=$1836;
      var $1837=(($1836)|(0))==93;
      if ($1837) { label = 475; break; } else { label = 478; break; }
    case 475: 
      var $1839=$2;
      var $1840=_nextc($1839);
      $c=$1840;
      var $1841=(($1840)|(0))==61;
      if ($1841) { label = 476; break; } else { label = 477; break; }
    case 476: 
      $1=340;
      label = 706; break;
    case 477: 
      var $1844=$2;
      var $1845=$c;
      _pushback($1844, $1845);
      $1=339;
      label = 706; break;
    case 478: 
      var $1847=$2;
      var $1848=$c;
      _pushback($1847, $1848);
      $1=91;
      label = 706; break;
    case 479: 
      var $1850=$2;
      var $1851=(($1850+40)|0);
      var $1852=HEAP32[(($1851)>>2)];
      var $1853=(($1852)|(0))==0;
      if ($1853) { label = 483; break; } else { label = 480; break; }
    case 480: 
      var $1855=$2;
      var $1856=(($1855+40)|0);
      var $1857=HEAP32[(($1856)>>2)];
      var $1858=(($1857)|(0))==6;
      if ($1858) { label = 483; break; } else { label = 481; break; }
    case 481: 
      var $1860=$2;
      var $1861=(($1860+40)|0);
      var $1862=HEAP32[(($1861)>>2)];
      var $1863=(($1862)|(0))==10;
      if ($1863) { label = 483; break; } else { label = 482; break; }
    case 482: 
      var $1865=$2;
      var $1866=(($1865+40)|0);
      var $1867=HEAP32[(($1866)>>2)];
      var $1868=(($1867)|(0))==9;
      if ($1868) { label = 483; break; } else { label = 484; break; }
    case 483: 
      $c=350;
      label = 489; break;
    case 484: 
      var $1871=$2;
      var $1872=(($1871+40)|0);
      var $1873=HEAP32[(($1872)>>2)];
      var $1874=(($1873)|(0))==4;
      if ($1874) { label = 486; break; } else { label = 485; break; }
    case 485: 
      var $1876=$2;
      var $1877=(($1876+40)|0);
      var $1878=HEAP32[(($1877)>>2)];
      var $1879=(($1878)|(0))==5;
      if ($1879) { label = 486; break; } else { label = 488; break; }
    case 486: 
      var $1881=$space_seen;
      var $1882=(($1881)|(0))!=0;
      if ($1882) { label = 487; break; } else { label = 488; break; }
    case 487: 
      $c=350;
      label = 488; break;
    case 488: 
      label = 489; break;
    case 489: 
      label = 490; break;
    case 490: 
      var $1887=$2;
      var $1888=(($1887+40)|0);
      HEAP32[(($1888)>>2)]=0;
      var $1889=$2;
      var $1890=(($1889+48)|0);
      var $1891=HEAP32[(($1890)>>2)];
      var $1892=$1891 << 1;
      var $1893=$2;
      var $1894=(($1893+48)|0);
      HEAP32[(($1894)>>2)]=$1892;
      var $1895=$2;
      var $1896=(($1895+52)|0);
      var $1897=HEAP32[(($1896)>>2)];
      var $1898=$1897 << 1;
      var $1899=$2;
      var $1900=(($1899+52)|0);
      HEAP32[(($1900)>>2)]=$1898;
      var $1901=$c;
      $1=$1901;
      label = 706; break;
    case 491: 
      var $1903=$2;
      var $1904=(($1903+60)|0);
      var $1905=HEAP32[(($1904)>>2)];
      var $1906=(($1905)|(0))!=0;
      if ($1906) { label = 492; break; } else { label = 494; break; }
    case 492: 
      var $1908=$2;
      var $1909=(($1908+60)|0);
      var $1910=HEAP32[(($1909)>>2)];
      var $1911=$2;
      var $1912=(($1911+56)|0);
      var $1913=HEAP32[(($1912)>>2)];
      var $1914=(($1910)|(0))==(($1913)|(0));
      if ($1914) { label = 493; break; } else { label = 494; break; }
    case 493: 
      var $1916=$2;
      var $1917=(($1916+40)|0);
      HEAP32[(($1917)>>2)]=0;
      var $1918=$2;
      var $1919=(($1918+60)|0);
      HEAP32[(($1919)>>2)]=0;
      var $1920=$2;
      var $1921=(($1920+56)|0);
      var $1922=HEAP32[(($1921)>>2)];
      var $1923=((($1922)-(1))|0);
      HEAP32[(($1921)>>2)]=$1923;
      var $1924=$2;
      var $1925=(($1924+48)|0);
      var $1926=HEAP32[(($1925)>>2)];
      var $1927=$1926 << 1;
      var $1928=$2;
      var $1929=(($1928+48)|0);
      HEAP32[(($1929)>>2)]=$1927;
      var $1930=$2;
      var $1931=(($1930+52)|0);
      var $1932=HEAP32[(($1931)>>2)];
      var $1933=$1932 << 1;
      var $1934=$2;
      var $1935=(($1934+52)|0);
      HEAP32[(($1935)>>2)]=$1933;
      $1=363;
      label = 706; break;
    case 494: 
      var $1937=$2;
      var $1938=(($1937+40)|0);
      var $1939=HEAP32[(($1938)>>2)];
      var $1940=(($1939)|(0))==4;
      if ($1940) { label = 498; break; } else { label = 495; break; }
    case 495: 
      var $1942=$2;
      var $1943=(($1942+40)|0);
      var $1944=HEAP32[(($1943)>>2)];
      var $1945=(($1944)|(0))==5;
      if ($1945) { label = 498; break; } else { label = 496; break; }
    case 496: 
      var $1947=$2;
      var $1948=(($1947+40)|0);
      var $1949=HEAP32[(($1948)>>2)];
      var $1950=(($1949)|(0))==1;
      if ($1950) { label = 498; break; } else { label = 497; break; }
    case 497: 
      var $1952=$2;
      var $1953=(($1952+40)|0);
      var $1954=HEAP32[(($1953)>>2)];
      var $1955=(($1954)|(0))==3;
      if ($1955) { label = 498; break; } else { label = 499; break; }
    case 498: 
      $c=123;
      label = 503; break;
    case 499: 
      var $1958=$2;
      var $1959=(($1958+40)|0);
      var $1960=HEAP32[(($1959)>>2)];
      var $1961=(($1960)|(0))==2;
      if ($1961) { label = 500; break; } else { label = 501; break; }
    case 500: 
      $c=352;
      label = 502; break;
    case 501: 
      $c=351;
      label = 502; break;
    case 502: 
      label = 503; break;
    case 503: 
      var $1966=$2;
      var $1967=(($1966+48)|0);
      var $1968=HEAP32[(($1967)>>2)];
      var $1969=$1968 << 1;
      var $1970=$2;
      var $1971=(($1970+48)|0);
      HEAP32[(($1971)>>2)]=$1969;
      var $1972=$2;
      var $1973=(($1972+52)|0);
      var $1974=HEAP32[(($1973)>>2)];
      var $1975=$1974 << 1;
      var $1976=$2;
      var $1977=(($1976+52)|0);
      HEAP32[(($1977)>>2)]=$1975;
      var $1978=$2;
      var $1979=(($1978+40)|0);
      HEAP32[(($1979)>>2)]=0;
      var $1980=$c;
      $1=$1980;
      label = 706; break;
    case 504: 
      var $1982=$2;
      var $1983=_nextc($1982);
      $c=$1983;
      var $1984=$c;
      var $1985=(($1984)|(0))==10;
      if ($1985) { label = 505; break; } else { label = 506; break; }
    case 505: 
      var $1987=$2;
      var $1988=(($1987+32)|0);
      var $1989=HEAP32[(($1988)>>2)];
      var $1990=((($1989)+(1))|0);
      HEAP32[(($1988)>>2)]=$1990;
      var $1991=$2;
      var $1992=(($1991+36)|0);
      HEAP32[(($1992)>>2)]=0;
      $space_seen=1;
      label = 10; break;
    case 506: 
      var $1994=$2;
      var $1995=$c;
      _pushback($1994, $1995);
      $1=92;
      label = 706; break;
    case 507: 
      var $1997=$2;
      var $1998=(($1997+40)|0);
      var $1999=HEAP32[(($1998)>>2)];
      var $2000=(($1999)|(0))==0;
      if ($2000) { label = 511; break; } else { label = 508; break; }
    case 508: 
      var $2002=$2;
      var $2003=(($2002+40)|0);
      var $2004=HEAP32[(($2003)>>2)];
      var $2005=(($2004)|(0))==6;
      if ($2005) { label = 511; break; } else { label = 509; break; }
    case 509: 
      var $2007=$2;
      var $2008=(($2007+40)|0);
      var $2009=HEAP32[(($2008)>>2)];
      var $2010=(($2009)|(0))==10;
      if ($2010) { label = 511; break; } else { label = 510; break; }
    case 510: 
      var $2012=$2;
      var $2013=(($2012+40)|0);
      var $2014=HEAP32[(($2013)>>2)];
      var $2015=(($2014)|(0))==9;
      if ($2015) { label = 511; break; } else { label = 544; break; }
    case 511: 
      var $2017=$2;
      var $2018=_nextc($2017);
      $c=$2018;
      label = 512; break;
    case 512: 
      var $2020=$c;
      var $2021=(($2020)|(0))==-1;
      if ($2021) { label = 514; break; } else { label = 513; break; }
    case 513: 
      var $2023=$c;
      var $2024=(($2023) & 255);
      var $2025=(($2024)&(255));
      var $2026=_isalnum($2025);
      var $2027=(($2026)|(0))!=0;
      if ($2027) { label = 515; break; } else { label = 514; break; }
    case 514: 
      var $2029=$c;
      $term=$2029;
      $c=81;
      label = 518; break;
    case 515: 
      var $2031=$2;
      var $2032=_nextc($2031);
      $term=$2032;
      var $2033=$term;
      var $2034=_isalnum($2033);
      var $2035=(($2034)|(0))!=0;
      if ($2035) { label = 516; break; } else { label = 517; break; }
    case 516: 
      var $2037=$2;
      _yyerror($2037, ((109168)|0));
      $1=0;
      label = 706; break;
    case 517: 
      label = 518; break;
    case 518: 
      var $2040=$c;
      var $2041=(($2040)|(0))==-1;
      if ($2041) { label = 520; break; } else { label = 519; break; }
    case 519: 
      var $2043=$term;
      var $2044=(($2043)|(0))==-1;
      if ($2044) { label = 520; break; } else { label = 521; break; }
    case 520: 
      var $2046=$2;
      _yyerror($2046, ((109108)|0));
      $1=0;
      label = 706; break;
    case 521: 
      var $2048=$term;
      $paren=$2048;
      var $2049=$term;
      var $2050=(($2049)|(0))==40;
      if ($2050) { label = 522; break; } else { label = 523; break; }
    case 522: 
      $term=41;
      label = 533; break;
    case 523: 
      var $2053=$term;
      var $2054=(($2053)|(0))==91;
      if ($2054) { label = 524; break; } else { label = 525; break; }
    case 524: 
      $term=93;
      label = 532; break;
    case 525: 
      var $2057=$term;
      var $2058=(($2057)|(0))==123;
      if ($2058) { label = 526; break; } else { label = 527; break; }
    case 526: 
      $term=125;
      label = 531; break;
    case 527: 
      var $2061=$term;
      var $2062=(($2061)|(0))==60;
      if ($2062) { label = 528; break; } else { label = 529; break; }
    case 528: 
      $term=62;
      label = 530; break;
    case 529: 
      $paren=0;
      label = 530; break;
    case 530: 
      label = 531; break;
    case 531: 
      label = 532; break;
    case 532: 
      label = 533; break;
    case 533: 
      var $2069=$c;
      if ((($2069)|(0))==81) {
        label = 534; break;
      }
      else if ((($2069)|(0))==113) {
        label = 535; break;
      }
      else if ((($2069)|(0))==87) {
        label = 536; break;
      }
      else if ((($2069)|(0))==119) {
        label = 537; break;
      }
      else if ((($2069)|(0))==120) {
        label = 538; break;
      }
      else if ((($2069)|(0))==114) {
        label = 539; break;
      }
      else if ((($2069)|(0))==115) {
        label = 540; break;
      }
      else if ((($2069)|(0))==73) {
        label = 541; break;
      }
      else if ((($2069)|(0))==105) {
        label = 542; break;
      }
      else {
      label = 543; break;
      }
    case 534: 
      var $2071=$2;
      var $2072=$term;
      var $2073=$paren;
      var $2074=_new_strterm($2071, 3, $2072, $2073);
      var $2075=$2;
      var $2076=(($2075+44)|0);
      HEAP32[(($2076)>>2)]=$2074;
      $1=360;
      label = 706; break;
    case 535: 
      var $2078=$2;
      var $2079=$term;
      var $2080=$paren;
      var $2081=_new_strterm($2078, 1, $2079, $2080);
      var $2082=$2;
      var $2083=(($2082+44)|0);
      HEAP32[(($2083)>>2)]=$2081;
      var $2084=$2;
      var $2085=_parse_string($2084);
      $1=$2085;
      label = 706; break;
    case 536: 
      var $2087=$2;
      var $2088=$term;
      var $2089=$paren;
      var $2090=_new_strterm($2087, 43, $2088, $2089);
      var $2091=$2;
      var $2092=(($2091+44)|0);
      HEAP32[(($2092)>>2)]=$2090;
      $1=358;
      label = 706; break;
    case 537: 
      var $2094=$2;
      var $2095=$term;
      var $2096=$paren;
      var $2097=_new_strterm($2094, 41, $2095, $2096);
      var $2098=$2;
      var $2099=(($2098+44)|0);
      HEAP32[(($2099)>>2)]=$2097;
      $1=358;
      label = 706; break;
    case 538: 
      var $2101=$2;
      var $2102=$term;
      var $2103=$paren;
      var $2104=_new_strterm($2101, 131, $2102, $2103);
      var $2105=$2;
      var $2106=(($2105+44)|0);
      HEAP32[(($2106)>>2)]=$2104;
      $1=361;
      label = 706; break;
    case 539: 
      var $2108=$2;
      var $2109=$term;
      var $2110=$paren;
      var $2111=_new_strterm($2108, 7, $2109, $2110);
      var $2112=$2;
      var $2113=(($2112+44)|0);
      HEAP32[(($2113)>>2)]=$2111;
      $1=357;
      label = 706; break;
    case 540: 
      var $2115=$2;
      var $2116=$term;
      var $2117=$paren;
      var $2118=_new_strterm($2115, 17, $2116, $2117);
      var $2119=$2;
      var $2120=(($2119+44)|0);
      HEAP32[(($2120)>>2)]=$2118;
      $1=356;
      label = 706; break;
    case 541: 
      var $2122=$2;
      var $2123=$term;
      var $2124=$paren;
      var $2125=_new_strterm($2122, 51, $2123, $2124);
      var $2126=$2;
      var $2127=(($2126+44)|0);
      HEAP32[(($2127)>>2)]=$2125;
      $1=359;
      label = 706; break;
    case 542: 
      var $2129=$2;
      var $2130=$term;
      var $2131=$paren;
      var $2132=_new_strterm($2129, 49, $2130, $2131);
      var $2133=$2;
      var $2134=(($2133+44)|0);
      HEAP32[(($2134)>>2)]=$2132;
      $1=359;
      label = 706; break;
    case 543: 
      var $2136=$2;
      _yyerror($2136, ((109168)|0));
      $1=0;
      label = 706; break;
    case 544: 
      var $2138=$2;
      var $2139=_nextc($2138);
      $c=$2139;
      var $2140=(($2139)|(0))==61;
      if ($2140) { label = 545; break; } else { label = 546; break; }
    case 545: 
      var $2142=$2;
      var $2143=_intern_gen_c($2142, 37);
      var $2144=$2;
      var $2145=(($2144+1124)|0);
      var $2146=HEAP32[(($2145)>>2)];
      var $2147=$2146;
      var $2148=$2147;
      HEAP16[(($2148)>>1)]=$2143;
      var $2149=$2;
      var $2150=(($2149+40)|0);
      HEAP32[(($2150)>>2)]=0;
      $1=345;
      label = 706; break;
    case 546: 
      var $2152=$2;
      var $2153=(($2152+40)|0);
      var $2154=HEAP32[(($2153)>>2)];
      var $2155=(($2154)|(0))==4;
      if ($2155) { label = 548; break; } else { label = 547; break; }
    case 547: 
      var $2157=$2;
      var $2158=(($2157+40)|0);
      var $2159=HEAP32[(($2158)>>2)];
      var $2160=(($2159)|(0))==5;
      if ($2160) { label = 548; break; } else { label = 551; break; }
    case 548: 
      var $2162=$space_seen;
      var $2163=(($2162)|(0))!=0;
      if ($2163) { label = 549; break; } else { label = 551; break; }
    case 549: 
      var $2165=$c;
      var $2166=(($2165) & 255);
      var $2167=(($2166)&(255));
      var $2168=_isspace($2167);
      var $2169=(($2168)|(0))!=0;
      if ($2169) { label = 551; break; } else { label = 550; break; }
    case 550: 
      label = 512; break;
    case 551: 
      var $2172=$2;
      var $2173=(($2172+40)|0);
      var $2174=HEAP32[(($2173)>>2)];
      var $2175=(($2174)|(0))==7;
      if ($2175) { label = 553; break; } else { label = 552; break; }
    case 552: 
      var $2177=$2;
      var $2178=(($2177+40)|0);
      var $2179=HEAP32[(($2178)>>2)];
      var $2180=(($2179)|(0))==8;
      if ($2180) { label = 553; break; } else { label = 554; break; }
    case 553: 
      var $2182=$2;
      var $2183=(($2182+40)|0);
      HEAP32[(($2183)>>2)]=4;
      label = 555; break;
    case 554: 
      var $2185=$2;
      var $2186=(($2185+40)|0);
      HEAP32[(($2186)>>2)]=0;
      label = 555; break;
    case 555: 
      var $2188=$2;
      var $2189=$c;
      _pushback($2188, $2189);
      $1=37;
      label = 706; break;
    case 556: 
      var $2191=$2;
      var $2192=(($2191+40)|0);
      HEAP32[(($2192)>>2)]=1;
      var $2193=$2;
      var $2194=_newtok($2193);
      $token_column=$2194;
      var $2195=$2;
      var $2196=_nextc($2195);
      $c=$2196;
      var $2197=$c;
      var $2198=(($2197)|(0))==-1;
      if ($2198) { label = 557; break; } else { label = 558; break; }
    case 557: 
      var $2200=$2;
      _yyerror($2200, ((108944)|0));
      $1=0;
      label = 706; break;
    case 558: 
      var $2202=$c;
      if ((($2202)|(0))==95) {
        label = 559; break;
      }
      else if ((($2202)|(0))==126 | (($2202)|(0))==42 | (($2202)|(0))==36 | (($2202)|(0))==63 | (($2202)|(0))==33 | (($2202)|(0))==64 | (($2202)|(0))==47 | (($2202)|(0))==92 | (($2202)|(0))==59 | (($2202)|(0))==44 | (($2202)|(0))==46 | (($2202)|(0))==61 | (($2202)|(0))==58 | (($2202)|(0))==60 | (($2202)|(0))==62 | (($2202)|(0))==34) {
        label = 565; break;
      }
      else if ((($2202)|(0))==45) {
        label = 566; break;
      }
      else if ((($2202)|(0))==38 | (($2202)|(0))==96 | (($2202)|(0))==39 | (($2202)|(0))==43) {
        label = 568; break;
      }
      else if ((($2202)|(0))==49 | (($2202)|(0))==50 | (($2202)|(0))==51 | (($2202)|(0))==52 | (($2202)|(0))==53 | (($2202)|(0))==54 | (($2202)|(0))==55 | (($2202)|(0))==56 | (($2202)|(0))==57) {
        label = 571; break;
      }
      else if ((($2202)|(0))==48) {
        label = 584; break;
      }
      else {
      label = 579; break;
      }
    case 559: 
      var $2204=$2;
      var $2205=_nextc($2204);
      $c=$2205;
      var $2206=$c;
      var $2207=(($2206)|(0))!=-1;
      if ($2207) { label = 560; break; } else { label = 564; break; }
    case 560: 
      var $2209=$c;
      var $2210=_isalnum($2209);
      var $2211=(($2210)|(0))!=0;
      if ($2211) { label = 563; break; } else { label = 561; break; }
    case 561: 
      var $2213=$c;
      var $2214=(($2213)|(0))==95;
      if ($2214) { label = 563; break; } else { label = 562; break; }
    case 562: 
      var $2216=$c;
      var $2217=(($2216)>>>(0)) <= 127;
      if ($2217) { label = 564; break; } else { label = 563; break; }
    case 563: 
      var $2219=$2;
      _tokadd($2219, 36);
      var $2220=$2;
      var $2221=$c;
      _tokadd($2220, $2221);
      label = 585; break;
    case 564: 
      var $2223=$2;
      var $2224=$c;
      _pushback($2223, $2224);
      $c=95;
      label = 565; break;
    case 565: 
      var $2226=$2;
      _tokadd($2226, 36);
      var $2227=$2;
      var $2228=$c;
      _tokadd($2227, $2228);
      var $2229=$2;
      _tokfix($2229);
      var $2230=$2;
      var $2231=$2;
      var $2232=_tok($2231);
      var $2233=_intern_gen($2230, $2232);
      var $2234=$2;
      var $2235=(($2234+1124)|0);
      var $2236=HEAP32[(($2235)>>2)];
      var $2237=$2236;
      var $2238=$2237;
      HEAP16[(($2238)>>1)]=$2233;
      $1=308;
      label = 706; break;
    case 566: 
      var $2240=$2;
      _tokadd($2240, 36);
      var $2241=$2;
      var $2242=$c;
      _tokadd($2241, $2242);
      var $2243=$2;
      var $2244=_nextc($2243);
      $c=$2244;
      var $2245=$2;
      var $2246=$c;
      _pushback($2245, $2246);
      label = 567; break;
    case 567: 
      var $2248=$2;
      _tokfix($2248);
      var $2249=$2;
      var $2250=$2;
      var $2251=_tok($2250);
      var $2252=_intern_gen($2249, $2251);
      var $2253=$2;
      var $2254=(($2253+1124)|0);
      var $2255=HEAP32[(($2254)>>2)];
      var $2256=$2255;
      var $2257=$2256;
      HEAP16[(($2257)>>1)]=$2252;
      $1=308;
      label = 706; break;
    case 568: 
      var $2259=$last_state;
      var $2260=(($2259)|(0))==7;
      if ($2260) { label = 569; break; } else { label = 570; break; }
    case 569: 
      var $2262=$2;
      _tokadd($2262, 36);
      var $2263=$2;
      var $2264=$c;
      _tokadd($2263, $2264);
      label = 567; break;
    case 570: 
      var $2266=$2;
      var $2267=$c;
      var $2268=_new_back_ref($2266, $2267);
      var $2269=$2;
      var $2270=(($2269+1124)|0);
      var $2271=HEAP32[(($2270)>>2)];
      var $2272=$2271;
      var $2273=$2272;
      HEAP32[(($2273)>>2)]=$2268;
      $1=322;
      label = 706; break;
    case 571: 
      label = 572; break;
    case 572: 
      var $2276=$2;
      var $2277=$c;
      _tokadd($2276, $2277);
      var $2278=$2;
      var $2279=_nextc($2278);
      $c=$2279;
      label = 573; break;
    case 573: 
      var $2281=$c;
      var $2282=(($2281)|(0))!=-1;
      if ($2282) { label = 574; break; } else { var $2288 = 0;label = 575; break; }
    case 574: 
      var $2284=$c;
      var $2285=_isdigit($2284);
      var $2286=(($2285)|(0))!=0;
      var $2288 = $2286;label = 575; break;
    case 575: 
      var $2288;
      if ($2288) { label = 572; break; } else { label = 576; break; }
    case 576: 
      var $2290=$2;
      var $2291=$c;
      _pushback($2290, $2291);
      var $2292=$last_state;
      var $2293=(($2292)|(0))==7;
      if ($2293) { label = 577; break; } else { label = 578; break; }
    case 577: 
      label = 567; break;
    case 578: 
      var $2296=$2;
      _tokfix($2296);
      var $2297=$2;
      var $2298=$2;
      var $2299=_tok($2298);
      var $2300=_atoi($2299);
      var $2301=_new_nth_ref($2297, $2300);
      var $2302=$2;
      var $2303=(($2302+1124)|0);
      var $2304=HEAP32[(($2303)>>2)];
      var $2305=$2304;
      var $2306=$2305;
      HEAP32[(($2306)>>2)]=$2301;
      $1=321;
      label = 706; break;
    case 579: 
      var $2308=$c;
      var $2309=_isalnum($2308);
      var $2310=(($2309)|(0))!=0;
      if ($2310) { label = 583; break; } else { label = 580; break; }
    case 580: 
      var $2312=$c;
      var $2313=(($2312)|(0))==95;
      if ($2313) { label = 583; break; } else { label = 581; break; }
    case 581: 
      var $2315=$c;
      var $2316=(($2315)>>>(0)) <= 127;
      if ($2316) { label = 582; break; } else { label = 583; break; }
    case 582: 
      var $2318=$2;
      var $2319=$c;
      _pushback($2318, $2319);
      $1=36;
      label = 706; break;
    case 583: 
      label = 584; break;
    case 584: 
      var $2322=$2;
      _tokadd($2322, 36);
      label = 585; break;
    case 585: 
      label = 610; break;
    case 586: 
      var $2325=$2;
      var $2326=_nextc($2325);
      $c=$2326;
      var $2327=$2;
      var $2328=_newtok($2327);
      $token_column=$2328;
      var $2329=$2;
      _tokadd($2329, 64);
      var $2330=$c;
      var $2331=(($2330)|(0))==64;
      if ($2331) { label = 587; break; } else { label = 588; break; }
    case 587: 
      var $2333=$2;
      _tokadd($2333, 64);
      var $2334=$2;
      var $2335=_nextc($2334);
      $c=$2335;
      label = 588; break;
    case 588: 
      var $2337=$c;
      var $2338=(($2337)|(0))==-1;
      if ($2338) { label = 589; break; } else { label = 593; break; }
    case 589: 
      var $2340=$2;
      var $2341=(($2340+1108)|0);
      var $2342=HEAP32[(($2341)>>2)];
      var $2343=(($2342)|(0))==1;
      if ($2343) { label = 590; break; } else { label = 591; break; }
    case 590: 
      var $2345=$2;
      _yyerror($2345, ((108892)|0));
      label = 592; break;
    case 591: 
      var $2347=$2;
      _yyerror($2347, ((108848)|0));
      label = 592; break;
    case 592: 
      $1=0;
      label = 706; break;
    case 593: 
      var $2350=$c;
      var $2351=_isdigit($2350);
      var $2352=(($2351)|(0))!=0;
      if ($2352) { label = 594; break; } else { label = 598; break; }
    case 594: 
      var $2354=$2;
      var $2355=(($2354+1108)|0);
      var $2356=HEAP32[(($2355)>>2)];
      var $2357=(($2356)|(0))==1;
      if ($2357) { label = 595; break; } else { label = 596; break; }
    case 595: 
      var $2359=$2;
      var $2360=$c;
      _yyerror_i($2359, ((108796)|0), $2360);
      label = 597; break;
    case 596: 
      var $2362=$2;
      var $2363=$c;
      _yyerror_i($2362, ((108740)|0), $2363);
      label = 597; break;
    case 597: 
      $1=0;
      label = 706; break;
    case 598: 
      label = 599; break;
    case 599: 
      var $2367=$c;
      var $2368=_isalnum($2367);
      var $2369=(($2368)|(0))!=0;
      if ($2369) { label = 603; break; } else { label = 600; break; }
    case 600: 
      var $2371=$c;
      var $2372=(($2371)|(0))==95;
      if ($2372) { label = 603; break; } else { label = 601; break; }
    case 601: 
      var $2374=$c;
      var $2375=(($2374)>>>(0)) <= 127;
      if ($2375) { label = 602; break; } else { label = 603; break; }
    case 602: 
      var $2377=$2;
      var $2378=$c;
      _pushback($2377, $2378);
      $1=64;
      label = 706; break;
    case 603: 
      label = 610; break;
    case 604: 
      var $2381=$2;
      var $2382=_newtok($2381);
      $token_column=$2382;
      label = 610; break;
    case 605: 
      var $2384=$c;
      var $2385=_isalnum($2384);
      var $2386=(($2385)|(0))!=0;
      if ($2386) { label = 609; break; } else { label = 606; break; }
    case 606: 
      var $2388=$c;
      var $2389=(($2388)|(0))==95;
      if ($2389) { label = 609; break; } else { label = 607; break; }
    case 607: 
      var $2391=$c;
      var $2392=(($2391)>>>(0)) <= 127;
      if ($2392) { label = 608; break; } else { label = 609; break; }
    case 608: 
      var $2394=$2;
      var $2395=$c;
      _yyerror_i($2394, ((108668)|0), $2395);
      label = 10; break;
    case 609: 
      var $2397=$2;
      var $2398=_newtok($2397);
      $token_column=$2398;
      label = 610; break;
    case 610: 
      label = 611; break;
    case 611: 
      var $2401=$2;
      var $2402=$c;
      _tokadd($2401, $2402);
      var $2403=$2;
      var $2404=_nextc($2403);
      $c=$2404;
      var $2405=$c;
      var $2406=(($2405)|(0)) < 0;
      if ($2406) { label = 612; break; } else { label = 613; break; }
    case 612: 
      label = 618; break;
    case 613: 
      label = 614; break;
    case 614: 
      var $2410=$c;
      var $2411=_isalnum($2410);
      var $2412=(($2411)|(0))!=0;
      if ($2412) { var $2421 = 1;label = 617; break; } else { label = 615; break; }
    case 615: 
      var $2414=$c;
      var $2415=(($2414)|(0))==95;
      if ($2415) { var $2421 = 1;label = 617; break; } else { label = 616; break; }
    case 616: 
      var $2417=$c;
      var $2418=(($2417)>>>(0)) <= 127;
      var $2419=$2418 ^ 1;
      var $2421 = $2419;label = 617; break;
    case 617: 
      var $2421;
      if ($2421) { label = 611; break; } else { label = 618; break; }
    case 618: 
      var $2423=$token_column;
      var $2424=(($2423)|(0))==0;
      if ($2424) { label = 619; break; } else { label = 624; break; }
    case 619: 
      var $2426=$2;
      var $2427=_toklen($2426);
      var $2428=(($2427)|(0))==7;
      if ($2428) { label = 620; break; } else { label = 624; break; }
    case 620: 
      var $2430=$c;
      var $2431=(($2430)|(0)) < 0;
      if ($2431) { label = 622; break; } else { label = 621; break; }
    case 621: 
      var $2433=$c;
      var $2434=(($2433)|(0))==10;
      if ($2434) { label = 622; break; } else { label = 624; break; }
    case 622: 
      var $2436=$2;
      var $2437=_tok($2436);
      var $2438=$2;
      var $2439=_toklen($2438);
      var $2440=_strncmp($2437, ((108660)|0), $2439);
      var $2441=(($2440)|(0))==0;
      if ($2441) { label = 623; break; } else { label = 624; break; }
    case 623: 
      $1=-1;
      label = 706; break;
    case 624: 
      var $2444=$2;
      var $2445=_tok($2444);
      var $2446=(($2445)|0);
      var $2447=HEAP8[($2446)];
      var $2448=(($2447 << 24) >> 24);
      if ((($2448)|(0))==64 | (($2448)|(0))==36) {
        label = 625; break;
      }
      else {
      label = 626; break;
      }
    case 625: 
      var $2450=$2;
      var $2451=$c;
      _pushback($2450, $2451);
      label = 632; break;
    case 626: 
      var $2453=$c;
      var $2454=(($2453)|(0))==33;
      if ($2454) { label = 628; break; } else { label = 627; break; }
    case 627: 
      var $2456=$c;
      var $2457=(($2456)|(0))==63;
      if ($2457) { label = 628; break; } else { label = 630; break; }
    case 628: 
      var $2459=$2;
      var $2460=_peek_n($2459, 61, 0);
      var $2461=(($2460)|(0))!=0;
      if ($2461) { label = 630; break; } else { label = 629; break; }
    case 629: 
      var $2463=$2;
      var $2464=$c;
      _tokadd($2463, $2464);
      label = 631; break;
    case 630: 
      var $2466=$2;
      var $2467=$c;
      _pushback($2466, $2467);
      label = 631; break;
    case 631: 
      label = 632; break;
    case 632: 
      var $2470=$2;
      _tokfix($2470);
      $result=0;
      var $2471=$2;
      var $2472=(($2471+40)|0);
      var $2473=HEAP32[(($2472)>>2)];
      $last_state=$2473;
      var $2474=$2;
      var $2475=_tok($2474);
      var $2476=(($2475)|0);
      var $2477=HEAP8[($2476)];
      var $2478=(($2477 << 24) >> 24);
      if ((($2478)|(0))==36) {
        label = 633; break;
      }
      else if ((($2478)|(0))==64) {
        label = 634; break;
      }
      else {
      label = 638; break;
      }
    case 633: 
      var $2480=$2;
      var $2481=(($2480+40)|0);
      HEAP32[(($2481)>>2)]=1;
      $result=308;
      label = 705; break;
    case 634: 
      var $2483=$2;
      var $2484=(($2483+40)|0);
      HEAP32[(($2484)>>2)]=1;
      var $2485=$2;
      var $2486=_tok($2485);
      var $2487=(($2486+1)|0);
      var $2488=HEAP8[($2487)];
      var $2489=(($2488 << 24) >> 24);
      var $2490=(($2489)|(0))==64;
      if ($2490) { label = 635; break; } else { label = 636; break; }
    case 635: 
      $result=311;
      label = 637; break;
    case 636: 
      $result=309;
      label = 637; break;
    case 637: 
      label = 705; break;
    case 638: 
      var $2495=$2;
      var $2496=_toklast($2495);
      var $2497=(($2496)|(0))==33;
      if ($2497) { label = 640; break; } else { label = 639; break; }
    case 639: 
      var $2499=$2;
      var $2500=_toklast($2499);
      var $2501=(($2500)|(0))==63;
      if ($2501) { label = 640; break; } else { label = 641; break; }
    case 640: 
      $result=307;
      label = 655; break;
    case 641: 
      var $2504=$2;
      var $2505=(($2504+40)|0);
      var $2506=HEAP32[(($2505)>>2)];
      var $2507=(($2506)|(0))==7;
      if ($2507) { label = 642; break; } else { label = 650; break; }
    case 642: 
      var $2509=$2;
      var $2510=_nextc($2509);
      $c=$2510;
      var $2511=(($2510)|(0))==61;
      if ($2511) { label = 643; break; } else { label = 648; break; }
    case 643: 
      var $2513=$2;
      var $2514=_peek_n($2513, 126, 0);
      var $2515=(($2514)|(0))!=0;
      if ($2515) { label = 648; break; } else { label = 644; break; }
    case 644: 
      var $2517=$2;
      var $2518=_peek_n($2517, 62, 0);
      var $2519=(($2518)|(0))!=0;
      if ($2519) { label = 648; break; } else { label = 645; break; }
    case 645: 
      var $2521=$2;
      var $2522=_peek_n($2521, 61, 0);
      var $2523=(($2522)|(0))!=0;
      if ($2523) { label = 646; break; } else { label = 647; break; }
    case 646: 
      var $2525=$2;
      var $2526=_peek_n($2525, 62, 1);
      var $2527=(($2526)|(0))!=0;
      if ($2527) { label = 647; break; } else { label = 648; break; }
    case 647: 
      $result=306;
      var $2529=$2;
      var $2530=$c;
      _tokadd($2529, $2530);
      var $2531=$2;
      _tokfix($2531);
      label = 649; break;
    case 648: 
      var $2533=$2;
      var $2534=$c;
      _pushback($2533, $2534);
      label = 649; break;
    case 649: 
      label = 650; break;
    case 650: 
      var $2537=$result;
      var $2538=(($2537)|(0))==0;
      if ($2538) { label = 651; break; } else { label = 653; break; }
    case 651: 
      var $2540=$2;
      var $2541=_tok($2540);
      var $2542=(($2541)|0);
      var $2543=HEAP8[($2542)];
      var $2544=(($2543 << 24) >> 24);
      var $2545=_isupper($2544);
      var $2546=(($2545)|(0))!=0;
      if ($2546) { label = 652; break; } else { label = 653; break; }
    case 652: 
      $result=310;
      label = 654; break;
    case 653: 
      $result=306;
      label = 654; break;
    case 654: 
      label = 655; break;
    case 655: 
      var $2551=$2;
      var $2552=(($2551+40)|0);
      var $2553=HEAP32[(($2552)>>2)];
      var $2554=(($2553)|(0))==0;
      if ($2554) { label = 656; break; } else { label = 657; break; }
    case 656: 
      var $2556=$cmd_state;
      var $2557=(($2556)|(0))!=0;
      if ($2557) { label = 657; break; } else { label = 659; break; }
    case 657: 
      var $2559=$2;
      var $2560=(($2559+40)|0);
      var $2561=HEAP32[(($2560)>>2)];
      var $2562=(($2561)|(0))==4;
      if ($2562) { label = 659; break; } else { label = 658; break; }
    case 658: 
      var $2564=$2;
      var $2565=(($2564+40)|0);
      var $2566=HEAP32[(($2565)>>2)];
      var $2567=(($2566)|(0))==5;
      if ($2567) { label = 659; break; } else { label = 663; break; }
    case 659: 
      var $2569=$2;
      var $2570=_peek_n($2569, 58, 0);
      var $2571=(($2570)|(0))!=0;
      if ($2571) { label = 660; break; } else { label = 662; break; }
    case 660: 
      var $2573=$2;
      var $2574=_peek_n($2573, 58, 1);
      var $2575=(($2574)|(0))!=0;
      if ($2575) { label = 662; break; } else { label = 661; break; }
    case 661: 
      var $2577=$2;
      var $2578=(($2577+40)|0);
      HEAP32[(($2578)>>2)]=0;
      var $2579=$2;
      var $2580=_nextc($2579);
      var $2581=$2;
      _tokfix($2581);
      var $2582=$2;
      var $2583=$2;
      var $2584=_tok($2583);
      var $2585=_intern_gen($2582, $2584);
      var $2586=$2;
      var $2587=(($2586+1124)|0);
      var $2588=HEAP32[(($2587)>>2)];
      var $2589=$2588;
      var $2590=$2589;
      HEAP16[(($2590)>>1)]=$2585;
      $1=312;
      label = 706; break;
    case 662: 
      label = 663; break;
    case 663: 
      var $2593=$2;
      var $2594=(($2593+40)|0);
      var $2595=HEAP32[(($2594)>>2)];
      var $2596=(($2595)|(0))!=8;
      if ($2596) { label = 664; break; } else { label = 689; break; }
    case 664: 
      var $2598=$2;
      var $2599=_tok($2598);
      var $2600=$2;
      var $2601=_toklen($2600);
      var $2602=_reserved_word($2599, $2601);
      $kw=$2602;
      var $2603=$kw;
      var $2604=(($2603)|(0))!=0;
      if ($2604) { label = 665; break; } else { label = 688; break; }
    case 665: 
      var $2606=$2;
      var $2607=(($2606+40)|0);
      var $2608=HEAP32[(($2607)>>2)];
      $state=$2608;
      var $2609=$kw;
      var $2610=(($2609+12)|0);
      var $2611=HEAP32[(($2610)>>2)];
      var $2612=$2;
      var $2613=(($2612+40)|0);
      HEAP32[(($2613)>>2)]=$2611;
      var $2614=$state;
      var $2615=(($2614)|(0))==7;
      if ($2615) { label = 666; break; } else { label = 667; break; }
    case 666: 
      var $2617=$2;
      var $2618=$kw;
      var $2619=(($2618)|0);
      var $2620=HEAP32[(($2619)>>2)];
      var $2621=_intern_gen($2617, $2620);
      var $2622=$2;
      var $2623=(($2622+1124)|0);
      var $2624=HEAP32[(($2623)>>2)];
      var $2625=$2624;
      var $2626=$2625;
      HEAP16[(($2626)>>1)]=$2621;
      var $2627=$kw;
      var $2628=(($2627+4)|0);
      var $2629=(($2628)|0);
      var $2630=HEAP32[(($2629)>>2)];
      $1=$2630;
      label = 706; break;
    case 667: 
      var $2632=$2;
      var $2633=(($2632+40)|0);
      var $2634=HEAP32[(($2633)>>2)];
      var $2635=(($2634)|(0))==0;
      if ($2635) { label = 668; break; } else { label = 669; break; }
    case 668: 
      var $2637=$2;
      var $2638=(($2637+72)|0);
      HEAP32[(($2638)>>2)]=1;
      label = 669; break;
    case 669: 
      var $2640=$kw;
      var $2641=(($2640+4)|0);
      var $2642=(($2641)|0);
      var $2643=HEAP32[(($2642)>>2)];
      var $2644=(($2643)|(0))==281;
      if ($2644) { label = 670; break; } else { label = 682; break; }
    case 670: 
      var $2646=$2;
      var $2647=(($2646+60)|0);
      var $2648=HEAP32[(($2647)>>2)];
      var $2649=(($2648)|(0))!=0;
      if ($2649) { label = 671; break; } else { label = 673; break; }
    case 671: 
      var $2651=$2;
      var $2652=(($2651+60)|0);
      var $2653=HEAP32[(($2652)>>2)];
      var $2654=$2;
      var $2655=(($2654+56)|0);
      var $2656=HEAP32[(($2655)>>2)];
      var $2657=(($2653)|(0))==(($2656)|(0));
      if ($2657) { label = 672; break; } else { label = 673; break; }
    case 672: 
      var $2659=$2;
      var $2660=(($2659+60)|0);
      HEAP32[(($2660)>>2)]=0;
      var $2661=$2;
      var $2662=(($2661+56)|0);
      var $2663=HEAP32[(($2662)>>2)];
      var $2664=((($2663)-(1))|0);
      HEAP32[(($2662)>>2)]=$2664;
      $1=284;
      label = 706; break;
    case 673: 
      var $2666=$2;
      var $2667=(($2666+48)|0);
      var $2668=HEAP32[(($2667)>>2)];
      var $2669=$2668 & 1;
      var $2670=(($2669)|(0))!=0;
      if ($2670) { label = 674; break; } else { label = 675; break; }
    case 674: 
      $1=282;
      label = 706; break;
    case 675: 
      var $2673=$2;
      var $2674=(($2673+52)|0);
      var $2675=HEAP32[(($2674)>>2)];
      var $2676=$2675 & 1;
      var $2677=(($2676)|(0))!=0;
      if ($2677) { label = 676; break; } else { label = 678; break; }
    case 676: 
      var $2679=$state;
      var $2680=(($2679)|(0))!=5;
      if ($2680) { label = 677; break; } else { label = 678; break; }
    case 677: 
      $1=283;
      label = 706; break;
    case 678: 
      var $2683=$state;
      var $2684=(($2683)|(0))==2;
      if ($2684) { label = 680; break; } else { label = 679; break; }
    case 679: 
      var $2686=$state;
      var $2687=(($2686)|(0))==0;
      if ($2687) { label = 680; break; } else { label = 681; break; }
    case 680: 
      $1=283;
      label = 706; break;
    case 681: 
      $1=281;
      label = 706; break;
    case 682: 
      var $2691=$state;
      var $2692=(($2691)|(0))==0;
      if ($2692) { label = 684; break; } else { label = 683; break; }
    case 683: 
      var $2694=$state;
      var $2695=(($2694)|(0))==10;
      if ($2695) { label = 684; break; } else { label = 685; break; }
    case 684: 
      var $2697=$kw;
      var $2698=(($2697+4)|0);
      var $2699=(($2698)|0);
      var $2700=HEAP32[(($2699)>>2)];
      $1=$2700;
      label = 706; break;
    case 685: 
      var $2702=$kw;
      var $2703=(($2702+4)|0);
      var $2704=(($2703)|0);
      var $2705=HEAP32[(($2704)>>2)];
      var $2706=$kw;
      var $2707=(($2706+4)|0);
      var $2708=(($2707+4)|0);
      var $2709=HEAP32[(($2708)>>2)];
      var $2710=(($2705)|(0))!=(($2709)|(0));
      if ($2710) { label = 686; break; } else { label = 687; break; }
    case 686: 
      var $2712=$2;
      var $2713=(($2712+40)|0);
      HEAP32[(($2713)>>2)]=0;
      label = 687; break;
    case 687: 
      var $2715=$kw;
      var $2716=(($2715+4)|0);
      var $2717=(($2716+4)|0);
      var $2718=HEAP32[(($2717)>>2)];
      $1=$2718;
      label = 706; break;
    case 688: 
      label = 689; break;
    case 689: 
      var $2721=$2;
      var $2722=(($2721+40)|0);
      var $2723=HEAP32[(($2722)>>2)];
      var $2724=(($2723)|(0))==0;
      if ($2724) { label = 696; break; } else { label = 690; break; }
    case 690: 
      var $2726=$2;
      var $2727=(($2726+40)|0);
      var $2728=HEAP32[(($2727)>>2)];
      var $2729=(($2728)|(0))==6;
      if ($2729) { label = 696; break; } else { label = 691; break; }
    case 691: 
      var $2731=$2;
      var $2732=(($2731+40)|0);
      var $2733=HEAP32[(($2732)>>2)];
      var $2734=(($2733)|(0))==10;
      if ($2734) { label = 696; break; } else { label = 692; break; }
    case 692: 
      var $2736=$2;
      var $2737=(($2736+40)|0);
      var $2738=HEAP32[(($2737)>>2)];
      var $2739=(($2738)|(0))==9;
      if ($2739) { label = 696; break; } else { label = 693; break; }
    case 693: 
      var $2741=$2;
      var $2742=(($2741+40)|0);
      var $2743=HEAP32[(($2742)>>2)];
      var $2744=(($2743)|(0))==8;
      if ($2744) { label = 696; break; } else { label = 694; break; }
    case 694: 
      var $2746=$2;
      var $2747=(($2746+40)|0);
      var $2748=HEAP32[(($2747)>>2)];
      var $2749=(($2748)|(0))==4;
      if ($2749) { label = 696; break; } else { label = 695; break; }
    case 695: 
      var $2751=$2;
      var $2752=(($2751+40)|0);
      var $2753=HEAP32[(($2752)>>2)];
      var $2754=(($2753)|(0))==5;
      if ($2754) { label = 696; break; } else { label = 700; break; }
    case 696: 
      var $2756=$cmd_state;
      var $2757=(($2756)|(0))!=0;
      if ($2757) { label = 697; break; } else { label = 698; break; }
    case 697: 
      var $2759=$2;
      var $2760=(($2759+40)|0);
      HEAP32[(($2760)>>2)]=5;
      label = 699; break;
    case 698: 
      var $2762=$2;
      var $2763=(($2762+40)|0);
      HEAP32[(($2763)>>2)]=4;
      label = 699; break;
    case 699: 
      label = 704; break;
    case 700: 
      var $2766=$2;
      var $2767=(($2766+40)|0);
      var $2768=HEAP32[(($2767)>>2)];
      var $2769=(($2768)|(0))==7;
      if ($2769) { label = 701; break; } else { label = 702; break; }
    case 701: 
      var $2771=$2;
      var $2772=(($2771+40)|0);
      HEAP32[(($2772)>>2)]=3;
      label = 703; break;
    case 702: 
      var $2774=$2;
      var $2775=(($2774+40)|0);
      HEAP32[(($2775)>>2)]=1;
      label = 703; break;
    case 703: 
      label = 704; break;
    case 704: 
      label = 705; break;
    case 705: 
      var $2779=$2;
      var $2780=$2;
      var $2781=_tok($2780);
      var $2782=_intern_gen($2779, $2781);
      $ident=$2782;
      var $2783=$ident;
      var $2784=$2;
      var $2785=(($2784+1124)|0);
      var $2786=HEAP32[(($2785)>>2)];
      var $2787=$2786;
      var $2788=$2787;
      HEAP16[(($2788)>>1)]=$2783;
      var $2789=$result;
      $1=$2789;
      label = 706; break;
    case 706: 
      var $2791=$1;
      STACKTOP = __stackBase__;
      return $2791;
    default: assert(0, "bad label: " + label);
  }
}
function _parse_string($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 388)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $type;
      var $nest_level;
      var $beg;
      var $end;
      var $hinf;
      var $line_head;
      var $s;
      var $len;
      var $buf=__stackBase__;
      var $f;
      var $c1;
      var $s2;
      var $flag=(__stackBase__)+(256);
      var $msg=(__stackBase__)+(260);
      $2=$p;
      var $3=$2;
      var $4=(($3+44)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $type=$8;
      var $9=$2;
      var $10=(($9+44)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $nest_level=$16;
      var $17=$2;
      var $18=(($17+44)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      $beg=$26;
      var $27=$2;
      var $28=(($27+44)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      $end=$36;
      var $37=$type;
      var $38=$37 & 64;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $41=$2;
      var $42=_parsing_heredoc_inf($41);
      var $45 = $42;label = 4; break;
    case 3: 
      var $45 = 0;label = 4; break;
    case 4: 
      var $45;
      $hinf=$45;
      var $46=$2;
      var $47=_newtok($46);
      label = 5; break;
    case 5: 
      var $49=$2;
      var $50=_nextc($49);
      $c=$50;
      var $51=$end;
      var $52=(($50)|(0))!=(($51)|(0));
      if ($52) { var $57 = 1;label = 7; break; } else { label = 6; break; }
    case 6: 
      var $54=$nest_level;
      var $55=(($54)|(0))!=0;
      var $57 = $55;label = 7; break;
    case 7: 
      var $57;
      if ($57) { label = 8; break; } else { label = 80; break; }
    case 8: 
      var $59=$hinf;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 9; break; } else { label = 26; break; }
    case 9: 
      var $62=$c;
      var $63=(($62)|(0))==10;
      if ($63) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $65=$c;
      var $66=(($65)|(0))==-1;
      if ($66) { label = 11; break; } else { label = 26; break; }
    case 11: 
      var $68=$2;
      _tokadd($68, 10);
      var $69=$2;
      _tokfix($69);
      var $70=$2;
      var $71=(($70+32)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)+(1))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=$2;
      var $75=(($74+36)|0);
      HEAP32[(($75)>>2)]=0;
      var $76=$hinf;
      var $77=$76;
      var $78=HEAP8[($77)];
      var $79=(($78)&(255)) >>> 1;
      var $80=$79 & 1;
      var $81=(($80)&(255));
      $line_head=$81;
      var $82=$hinf;
      var $83=$82;
      var $84=HEAP8[($83)];
      var $85=$84 & -3;
      var $86=$85 | 2;
      HEAP8[($83)]=$86;
      var $87=$line_head;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 12; break; } else { label = 23; break; }
    case 12: 
      var $90=$2;
      var $91=_tok($90);
      $s=$91;
      var $92=$2;
      var $93=_toklen($92);
      $len=$93;
      var $94=$hinf;
      var $95=$94;
      var $96=HEAP8[($95)];
      var $97=$96 & 1;
      var $98=(($97 << 24) >> 24)!=0;
      if ($98) { label = 13; break; } else { label = 19; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $101=$s;
      var $102=HEAP8[($101)];
      var $103=(($102)&(255));
      var $104=_isspace($103);
      var $105=(($104)|(0))!=0;
      if ($105) { label = 15; break; } else { var $110 = 0;label = 16; break; }
    case 15: 
      var $107=$len;
      var $108=(($107)|(0)) > 0;
      var $110 = $108;label = 16; break;
    case 16: 
      var $110;
      if ($110) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $112=$s;
      var $113=(($112+1)|0);
      $s=$113;
      var $114=$len;
      var $115=((($114)-(1))|0);
      $len=$115;
      label = 14; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $118=$len;
      var $119=((($118)-(1))|0);
      var $120=$hinf;
      var $121=(($120+12)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($119)|(0))==(($122)|(0));
      if ($123) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $125=$s;
      var $126=$hinf;
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$len;
      var $130=((($129)-(1))|0);
      var $131=_strncmp($125, $128, $130);
      var $132=(($131)|(0))==0;
      if ($132) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $1=365;
      label = 101; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $136=$c;
      var $137=(($136)|(0))==-1;
      if ($137) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $139=(($buf)|0);
      var $140=$hinf;
      var $141=(($140+8)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=_snprintf($139, 256, ((106792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$142,tempInt));
      var $144=$2;
      var $145=(($buf)|0);
      _yyerror($144, $145);
      $1=0;
      label = 101; break;
    case 25: 
      var $147=$2;
      var $148=$2;
      var $149=_tok($148);
      var $150=$2;
      var $151=_toklen($150);
      var $152=_new_str($147, $149, $151);
      var $153=$2;
      var $154=(($153+1124)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$155;
      var $157=$156;
      HEAP32[(($157)>>2)]=$152;
      $1=320;
      label = 101; break;
    case 26: 
      var $159=$c;
      var $160=(($159)|(0))==-1;
      if ($160) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $162=$2;
      _yyerror($162, ((106752)|0));
      $1=0;
      label = 101; break;
    case 28: 
      var $164=$c;
      var $165=$beg;
      var $166=(($164)|(0))==(($165)|(0));
      if ($166) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $168=$nest_level;
      var $169=((($168)+(1))|0);
      $nest_level=$169;
      var $170=$nest_level;
      var $171=$170;
      var $172=$2;
      var $173=(($172+44)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($176)|0);
      HEAP32[(($177)>>2)]=$171;
      label = 68; break;
    case 30: 
      var $179=$c;
      var $180=$end;
      var $181=(($179)|(0))==(($180)|(0));
      if ($181) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $183=$nest_level;
      var $184=((($183)-(1))|0);
      $nest_level=$184;
      var $185=$nest_level;
      var $186=$185;
      var $187=$2;
      var $188=(($187+44)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=(($189+4)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=(($191)|0);
      HEAP32[(($192)>>2)]=$186;
      label = 67; break;
    case 32: 
      var $194=$c;
      var $195=(($194)|(0))==92;
      if ($195) { label = 33; break; } else { label = 58; break; }
    case 33: 
      var $197=$2;
      var $198=_nextc($197);
      $c=$198;
      var $199=$type;
      var $200=$199 & 2;
      var $201=(($200)|(0))!=0;
      if ($201) { label = 34; break; } else { label = 47; break; }
    case 34: 
      var $203=$c;
      var $204=$end;
      var $205=(($203)|(0))==(($204)|(0));
      if ($205) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $207=$c;
      var $208=$beg;
      var $209=(($207)|(0))==(($208)|(0));
      if ($209) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $211=$2;
      var $212=$c;
      _tokadd($211, $212);
      label = 46; break;
    case 37: 
      var $214=$c;
      var $215=(($214)|(0))==10;
      if ($215) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $217=$type;
      var $218=$217 & 32;
      var $219=(($218)|(0))!=0;
      if ($219) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $221=$2;
      var $222=(($221+32)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=((($223)+(1))|0);
      HEAP32[(($222)>>2)]=$224;
      var $225=$2;
      var $226=(($225+36)|0);
      HEAP32[(($226)>>2)]=0;
      var $227=$2;
      _tokadd($227, 10);
      label = 45; break;
    case 40: 
      var $229=$2;
      var $230=$c;
      _pushback($229, $230);
      var $231=$type;
      var $232=$231 & 4;
      var $233=(($232)|(0))!=0;
      if ($233) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $235=$2;
      _tokadd($235, 92);
      label = 42; break;
    case 42: 
      var $237=$2;
      var $238=$2;
      var $239=_read_escape($238);
      _tokadd($237, $239);
      var $240=$hinf;
      var $241=(($240)|(0))!=0;
      if ($241) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $243=$hinf;
      var $244=$243;
      var $245=HEAP8[($244)];
      var $246=$245 & -3;
      HEAP8[($244)]=$246;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 57; break;
    case 47: 
      var $251=$c;
      var $252=$beg;
      var $253=(($251)|(0))!=(($252)|(0));
      if ($253) { label = 48; break; } else { label = 56; break; }
    case 48: 
      var $255=$c;
      var $256=$end;
      var $257=(($255)|(0))!=(($256)|(0));
      if ($257) { label = 49; break; } else { label = 56; break; }
    case 49: 
      var $259=$c;
      if ((($259)|(0))==10) {
        label = 50; break;
      }
      else if ((($259)|(0))==92) {
        label = 51; break;
      }
      else {
      label = 52; break;
      }
    case 50: 
      var $261=$2;
      var $262=(($261+32)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=((($263)+(1))|0);
      HEAP32[(($262)>>2)]=$264;
      var $265=$2;
      var $266=(($265+36)|0);
      HEAP32[(($266)>>2)]=0;
      label = 55; break;
    case 51: 
      label = 55; break;
    case 52: 
      var $269=$c;
      var $270=(($269) & 255);
      var $271=(($270)&(255));
      var $272=_isspace($271);
      var $273=(($272)|(0))!=0;
      if ($273) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $275=$2;
      _tokadd($275, 92);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $279=$2;
      var $280=$c;
      _tokadd($279, $280);
      label = 57; break;
    case 57: 
      label = 5; break;
    case 58: 
      var $283=$c;
      var $284=(($283)|(0))==35;
      if ($284) { label = 59; break; } else { label = 65; break; }
    case 59: 
      var $286=$type;
      var $287=$286 & 2;
      var $288=(($287)|(0))!=0;
      if ($288) { label = 60; break; } else { label = 65; break; }
    case 60: 
      var $290=$2;
      var $291=_nextc($290);
      $c=$291;
      var $292=$c;
      var $293=(($292)|(0))==123;
      if ($293) { label = 61; break; } else { label = 64; break; }
    case 61: 
      var $295=$2;
      _tokfix($295);
      var $296=$2;
      var $297=(($296+40)|0);
      HEAP32[(($297)>>2)]=0;
      var $298=$2;
      var $299=(($298+72)|0);
      HEAP32[(($299)>>2)]=1;
      var $300=$2;
      var $301=$2;
      var $302=_tok($301);
      var $303=$2;
      var $304=_toklen($303);
      var $305=_new_str($300, $302, $304);
      var $306=$2;
      var $307=(($306+1124)|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=$308;
      var $310=$309;
      HEAP32[(($310)>>2)]=$305;
      var $311=$hinf;
      var $312=(($311)|(0))!=0;
      if ($312) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $314=$hinf;
      var $315=$314;
      var $316=HEAP8[($315)];
      var $317=$316 & -3;
      HEAP8[($315)]=$317;
      label = 63; break;
    case 63: 
      $1=319;
      label = 101; break;
    case 64: 
      var $320=$2;
      _tokadd($320, 35);
      var $321=$2;
      var $322=$c;
      _pushback($321, $322);
      label = 5; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $328=$type;
      var $329=$328 & 32;
      var $330=(($329)|(0))!=0;
      if ($330) { label = 70; break; } else { label = 79; break; }
    case 70: 
      var $332=$c;
      var $333=(($332) & 255);
      var $334=(($333)&(255));
      var $335=_isspace($334);
      var $336=(($335)|(0))!=0;
      if ($336) { label = 71; break; } else { label = 79; break; }
    case 71: 
      var $338=$2;
      var $339=_toklen($338);
      var $340=(($339)|(0))==0;
      if ($340) { label = 72; break; } else { label = 78; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $343=$c;
      var $344=(($343)|(0))==10;
      if ($344) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $346=$2;
      var $347=(($346+32)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=((($348)+(1))|0);
      HEAP32[(($347)>>2)]=$349;
      var $350=$2;
      var $351=(($350+36)|0);
      HEAP32[(($351)>>2)]=0;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $354=$2;
      var $355=_nextc($354);
      $c=$355;
      var $356=(($355) & 255);
      var $357=(($356)&(255));
      var $358=_isspace($357);
      var $359=(($358)|(0))!=0;
      if ($359) { label = 73; break; } else { label = 77; break; }
    case 77: 
      var $361=$2;
      var $362=$c;
      _pushback($361, $362);
      $1=366;
      label = 101; break;
    case 78: 
      var $364=$2;
      var $365=$c;
      _pushback($364, $365);
      var $366=$2;
      _tokfix($366);
      var $367=$2;
      var $368=$2;
      var $369=_tok($368);
      var $370=$2;
      var $371=_toklen($370);
      var $372=_new_str($367, $369, $371);
      var $373=$2;
      var $374=(($373+1124)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$375;
      var $377=$376;
      HEAP32[(($377)>>2)]=$372;
      $1=320;
      label = 101; break;
    case 79: 
      var $379=$2;
      var $380=$c;
      _tokadd($379, $380);
      label = 5; break;
    case 80: 
      var $382=$2;
      _tokfix($382);
      var $383=$2;
      var $384=(($383+40)|0);
      HEAP32[(($384)>>2)]=1;
      var $385=$2;
      _end_strterm($385);
      var $386=$type;
      var $387=$386 & 128;
      var $388=(($387)|(0))!=0;
      if ($388) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $390=$2;
      var $391=$2;
      var $392=_tok($391);
      var $393=$2;
      var $394=_toklen($393);
      var $395=_new_xstr($390, $392, $394);
      var $396=$2;
      var $397=(($396+1124)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=$398;
      var $400=$399;
      HEAP32[(($400)>>2)]=$395;
      $1=316;
      label = 101; break;
    case 82: 
      var $402=$type;
      var $403=$402 & 4;
      var $404=(($403)|(0))!=0;
      if ($404) { label = 83; break; } else { label = 100; break; }
    case 83: 
      $f=0;
      var $406=$2;
      var $407=$2;
      var $408=_tok($407);
      var $409=$2;
      var $410=_toklen($409);
      var $411=_parser_strndup($406, $408, $410);
      $s2=$411;
      var $412=$flag;
      HEAP8[($412)]=0; HEAP8[((($412)+(1))|0)]=0; HEAP8[((($412)+(2))|0)]=0; HEAP8[((($412)+(3))|0)]=0;
      var $413=$2;
      var $414=_newtok($413);
      label = 84; break;
    case 84: 
      var $416=$2;
      var $417=_nextc($416);
      $c1=$417;
      var $418=$c1;
      var $419=(($418) & 255);
      var $420=(($419)&(255));
      var $421=_isalpha($420);
      var $422=(($421)|(0))!=0;
      if ($422) { label = 85; break; } else { label = 91; break; }
    case 85: 
      var $424=$c1;
      if ((($424)|(0))==105) {
        label = 86; break;
      }
      else if ((($424)|(0))==120) {
        label = 87; break;
      }
      else if ((($424)|(0))==109) {
        label = 88; break;
      }
      else {
      label = 89; break;
      }
    case 86: 
      var $426=$f;
      var $427=$426 | 1;
      $f=$427;
      label = 90; break;
    case 87: 
      var $429=$f;
      var $430=$429 | 2;
      $f=$430;
      label = 90; break;
    case 88: 
      var $432=$f;
      var $433=$432 | 4;
      $f=$433;
      label = 90; break;
    case 89: 
      var $435=$2;
      var $436=$c1;
      _tokadd($435, $436);
      label = 90; break;
    case 90: 
      label = 84; break;
    case 91: 
      var $439=$2;
      var $440=$c1;
      _pushback($439, $440);
      var $441=$2;
      var $442=_toklen($441);
      var $443=(($442)|(0))!=0;
      if ($443) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $445=$2;
      _tokfix($445);
      var $446=(($msg)|0);
      var $447=$2;
      var $448=_toklen($447);
      var $449=(($448)|(0)) > 1;
      var $450=$449 ? (((106712)|0)) : (((100264)|0));
      var $451=$2;
      var $452=_tok($451);
      var $453=_snprintf($446, 128, ((106720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$450,HEAP32[(((tempInt)+(4))>>2)]=$452,tempInt));
      var $454=$2;
      var $455=(($msg)|0);
      _yyerror($454, $455);
      label = 93; break;
    case 93: 
      var $457=$f;
      var $458=$457 & 1;
      var $459=(($458)|(0))!=0;
      if ($459) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $461=(($flag)|0);
      var $462=_strcat($461, ((106656)|0));
      label = 95; break;
    case 95: 
      var $464=$f;
      var $465=$464 & 2;
      var $466=(($465)|(0))!=0;
      if ($466) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $468=(($flag)|0);
      var $469=_strcat($468, ((106652)|0));
      label = 97; break;
    case 97: 
      var $471=$f;
      var $472=$471 & 4;
      var $473=(($472)|(0))!=0;
      if ($473) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $475=(($flag)|0);
      var $476=_strcat($475, ((106624)|0));
      label = 99; break;
    case 99: 
      var $478=$2;
      var $479=$s2;
      var $480=$2;
      var $481=(($flag)|0);
      var $482=_parser_strdup($480, $481);
      var $483=_new_regx($478, $479, $482);
      var $484=$2;
      var $485=(($484+1124)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=$486;
      var $488=$487;
      HEAP32[(($488)>>2)]=$483;
      $1=317;
      label = 101; break;
    case 100: 
      var $490=$2;
      var $491=$2;
      var $492=_tok($491);
      var $493=$2;
      var $494=_toklen($493);
      var $495=_new_str($490, $492, $494);
      var $496=$2;
      var $497=(($496+1124)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=$498;
      var $500=$499;
      HEAP32[(($500)>>2)]=$495;
      $1=318;
      label = 101; break;
    case 101: 
      var $502=$1;
      STACKTOP = __stackBase__;
      return $502;
    default: assert(0, "bad label: " + label);
  }
}
function _nextc($p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $tmp;
      var $cxt;
      $2=$p;
      var $3=$2;
      var $4=(($3+80)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+80)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      $c=$13;
      var $14=$2;
      var $15=(($14+80)|0);
      var $16=HEAP32[(($15)>>2)];
      $tmp=$16;
      var $17=$2;
      var $18=(($17+80)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($22+80)|0);
      HEAP32[(($23)>>2)]=$21;
      var $24=$2;
      var $25=$tmp;
      _cons_free_gen($24, $25);
      label = 15; break;
    case 3: 
      var $27=$2;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $32=$2;
      var $33=(($32+20)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=_feof($34);
      var $36=(($35)|(0))!=0;
      if ($36) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 16; break;
    case 6: 
      var $39=$2;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=_fgetc($41);
      $c=$42;
      var $43=$c;
      var $44=(($43)|(0))==-1;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 16; break;
    case 8: 
      label = 14; break;
    case 9: 
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|(0))!=0;
      if ($51) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $53=$2;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$2;
      var $57=(($56+16)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($55)>>>(0)) >= (($58)>>>(0));
      if ($59) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 16; break;
    case 12: 
      var $62=$2;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+1)|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=HEAP8[($64)];
      var $67=(($66)&(255));
      $c=$67;
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $71=$2;
      var $72=(($71+36)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)+(1))|0);
      HEAP32[(($72)>>2)]=$74;
      var $75=$c;
      $1=$75;
      label = 21; break;
    case 16: 
      var $77=$2;
      var $78=(($77+24)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      if ($80) { label = 18; break; } else { label = 17; break; }
    case 17: 
      $1=-1;
      label = 21; break;
    case 18: 
      var $83=$2;
      var $84=(($83+24)|0);
      var $85=HEAP32[(($84)>>2)];
      $cxt=$85;
      var $86=$cxt;
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$2;
      var $90=FUNCTION_TABLE[$88]($89);
      var $91=(($90)|(0)) < 0;
      if ($91) { label = 19; break; } else { label = 20; break; }
    case 19: 
      $1=-1;
      label = 21; break;
    case 20: 
      var $94=$2;
      var $95=(($94+24)|0);
      HEAP32[(($95)>>2)]=0;
      var $96=$2;
      var $97=_nextc($96);
      $c=$97;
      var $98=$cxt;
      var $99=$2;
      var $100=(($99+24)|0);
      HEAP32[(($100)>>2)]=$98;
      var $101=$c;
      $1=$101;
      label = 21; break;
    case 21: 
      var $103=$1;
      return $103;
    default: assert(0, "bad label: " + label);
  }
}
function _newtok($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+1108)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=$1;
  var $5=(($4+36)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=((($6)-(1))|0);
  return $7;
}
function _tokadd($p, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$p;
      $2=$c;
      var $3=$1;
      var $4=(($3+1108)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) < 1024;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8) & 255);
      var $10=$1;
      var $11=(($10+1108)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+(1))|0);
      HEAP32[(($11)>>2)]=$13;
      var $14=$1;
      var $15=(($14+84)|0);
      var $16=(($15+$12)|0);
      HEAP8[($16)]=$9;
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _skip($p, $term) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$p;
      $2=$term;
      label = 2; break;
    case 2: 
      var $4=$1;
      var $5=_nextc($4);
      $c=$5;
      var $6=$c;
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 7; break;
    case 4: 
      var $10=$c;
      var $11=$2;
      var $12=(($11 << 24) >> 24);
      var $13=(($10)|(0))==(($12)|(0));
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 7; break;
    case 6: 
      label = 2; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_strterm($p, $type, $term, $paren) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$p;
  $2=$type;
  $3=$term;
  $4=$paren;
  var $5=$1;
  var $6=$2;
  var $7=$6;
  var $8=$1;
  var $9=$1;
  var $10=$4;
  var $11=$10;
  var $12=$3;
  var $13=$12;
  var $14=_cons_gen($9, $11, $13);
  var $15=_cons_gen($8, 0, $14);
  var $16=_cons_gen($5, $7, $15);
  return $16;
}
function _pushback($p, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$p;
      $2=$c;
      var $3=$2;
      var $4=(($3)|(0)) < 0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $7=$1;
      var $8=(($7+36)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      HEAP32[(($8)>>2)]=$10;
      var $11=$1;
      var $12=$2;
      var $13=$12;
      var $14=$1;
      var $15=(($14+80)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_cons_gen($11, $13, $16);
      var $18=$1;
      var $19=(($18+80)|0);
      HEAP32[(($19)>>2)]=$17;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _yywarning($p, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$s;
  var $3=$1;
  var $4=$2;
  _yywarn($3, $4);
  return;
}
function _peeks($p, $s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $len;
      var $n;
      $2=$p;
      $3=$s;
      var $4=$3;
      var $5=_strlen($4);
      $len=$5;
      var $6=$2;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 8; break; }
    case 2: 
      $n=0;
      label = 3; break;
    case 3: 
      var $12=$3;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24)!=0;
      if ($14) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $16=$2;
      var $17=$3;
      var $18=(($17+1)|0);
      $3=$18;
      var $19=HEAP8[($17)];
      var $20=(($19 << 24) >> 24);
      var $21=$n;
      var $22=((($21)+(1))|0);
      $n=$22;
      var $23=_peek_n($16, $20, $21);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 15; break;
    case 6: 
      label = 3; break;
    case 7: 
      $1=1;
      label = 15; break;
    case 8: 
      var $29=$2;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$len;
      var $38=(($36+$37)|0);
      var $39=$2;
      var $40=(($39+16)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($38)>>>(0)) >= (($41)>>>(0));
      if ($42) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $44=$2;
      var $45=(($44+12)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$3;
      var $48=$len;
      var $49=_memcmp($46, $47, $48);
      var $50=(($49)|(0))==0;
      if ($50) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=1;
      label = 15; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $56=$1;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _skips($p, $s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $len;
      $2=$p;
      $3=$s;
      label = 2; break;
    case 2: 
      label = 3; break;
    case 3: 
      var $6=$2;
      var $7=_nextc($6);
      $c=$7;
      var $8=$c;
      var $9=(($8)|(0)) < 0;
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$c;
      $1=$11;
      label = 15; break;
    case 5: 
      var $13=$c;
      var $14=$3;
      var $15=HEAP8[($14)];
      var $16=(($15 << 24) >> 24);
      var $17=(($13)|(0))==(($16)|(0));
      if ($17) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 8; break;
    case 7: 
      label = 3; break;
    case 8: 
      var $21=$3;
      var $22=(($21+1)|0);
      $3=$22;
      var $23=$2;
      var $24=$3;
      var $25=_peeks($23, $24);
      var $26=(($25)|(0))!=0;
      if ($26) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $28=$3;
      var $29=_strlen($28);
      $len=$29;
      label = 10; break;
    case 10: 
      var $31=$len;
      var $32=((($31)-(1))|0);
      $len=$32;
      var $33=(($31)|(0))!=0;
      if ($33) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $35=$2;
      var $36=_nextc($35);
      label = 10; break;
    case 12: 
      $1=1;
      label = 15; break;
    case 13: 
      var $39=$3;
      var $40=((($39)-(1))|0);
      $3=$40;
      label = 14; break;
    case 14: 
      label = 2; break;
    case 15: 
      var $43=$1;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _heredoc_identifier($p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $type;
      var $indent;
      var $quote;
      var $newnode;
      var $info;
      var $term;
      var $n;
      $2=$p;
      $type=65;
      $indent=0;
      $quote=0;
      var $3=$2;
      var $4=_nextc($3);
      $c=$4;
      var $5=$c;
      var $6=(($5) & 255);
      var $7=(($6)&(255));
      var $8=_isspace($7);
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$c;
      var $12=(($11)|(0))==61;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$2;
      var $15=$c;
      _pushback($14, $15);
      $1=0;
      label = 43; break;
    case 4: 
      var $17=$c;
      var $18=(($17)|(0))==45;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $indent=1;
      var $20=$2;
      var $21=_nextc($20);
      $c=$21;
      label = 6; break;
    case 6: 
      var $23=$c;
      var $24=(($23)|(0))==39;
      if ($24) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $26=$c;
      var $27=(($26)|(0))==34;
      if ($27) { label = 8; break; } else { label = 20; break; }
    case 8: 
      var $29=$c;
      $term=$29;
      var $30=$c;
      var $31=(($30)|(0))==39;
      if ($31) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $quote=1;
      label = 10; break;
    case 10: 
      var $34=$2;
      var $35=_newtok($34);
      label = 11; break;
    case 11: 
      var $37=$2;
      var $38=_nextc($37);
      $c=$38;
      var $39=(($38)|(0))!=-1;
      if ($39) { label = 12; break; } else { var $45 = 0;label = 13; break; }
    case 12: 
      var $41=$c;
      var $42=$term;
      var $43=(($41)|(0))!=(($42)|(0));
      var $45 = $43;label = 13; break;
    case 13: 
      var $45;
      if ($45) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $47=$c;
      var $48=(($47)|(0))==10;
      if ($48) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $c=-1;
      label = 17; break;
    case 16: 
      var $51=$2;
      var $52=$c;
      _tokadd($51, $52);
      label = 11; break;
    case 17: 
      var $54=$c;
      var $55=(($54)|(0))==-1;
      if ($55) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $57=$2;
      _yyerror($57, ((106836)|0));
      $1=0;
      label = 43; break;
    case 19: 
      label = 35; break;
    case 20: 
      var $60=$c;
      var $61=_isalnum($60);
      var $62=(($61)|(0))!=0;
      if ($62) { label = 26; break; } else { label = 21; break; }
    case 21: 
      var $64=$c;
      var $65=(($64)|(0))==95;
      if ($65) { label = 26; break; } else { label = 22; break; }
    case 22: 
      var $67=$c;
      var $68=(($67)>>>(0)) <= 127;
      if ($68) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $70=$2;
      var $71=$c;
      _pushback($70, $71);
      var $72=$indent;
      var $73=(($72)|(0))!=0;
      if ($73) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $75=$2;
      _pushback($75, 45);
      label = 25; break;
    case 25: 
      $1=0;
      label = 43; break;
    case 26: 
      var $78=$2;
      var $79=_newtok($78);
      label = 27; break;
    case 27: 
      var $81=$2;
      var $82=$c;
      _tokadd($81, $82);
      label = 28; break;
    case 28: 
      var $84=$2;
      var $85=_nextc($84);
      $c=$85;
      var $86=(($85)|(0))!=-1;
      if ($86) { label = 29; break; } else { var $101 = 0;label = 33; break; }
    case 29: 
      var $88=$c;
      var $89=_isalnum($88);
      var $90=(($89)|(0))!=0;
      if ($90) { var $99 = 1;label = 32; break; } else { label = 30; break; }
    case 30: 
      var $92=$c;
      var $93=(($92)|(0))==95;
      if ($93) { var $99 = 1;label = 32; break; } else { label = 31; break; }
    case 31: 
      var $95=$c;
      var $96=(($95)>>>(0)) <= 127;
      var $97=$96 ^ 1;
      var $99 = $97;label = 32; break;
    case 32: 
      var $99;
      var $101 = $99;label = 33; break;
    case 33: 
      var $101;
      if ($101) { label = 27; break; } else { label = 34; break; }
    case 34: 
      var $103=$2;
      var $104=$c;
      _pushback($103, $104);
      label = 35; break;
    case 35: 
      var $106=$2;
      _tokfix($106);
      var $107=$2;
      var $108=_new_heredoc($107);
      $newnode=$108;
      var $109=$newnode;
      var $110=(($109+4)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$111;
      $info=$112;
      var $113=$2;
      var $114=$2;
      var $115=_tok($114);
      var $116=$2;
      var $117=_toklen($116);
      var $118=_parser_strndup($113, $115, $117);
      var $119=$info;
      var $120=(($119+8)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$2;
      var $122=_toklen($121);
      var $123=$info;
      var $124=(($123+12)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$quote;
      var $126=(($125)|(0))!=0;
      if ($126) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $128=$type;
      var $129=$128 | 2;
      $type=$129;
      label = 37; break;
    case 37: 
      var $131=$type;
      var $132=$info;
      var $133=(($132+4)|0);
      HEAP32[(($133)>>2)]=$131;
      var $134=$indent;
      var $135=(($134) & 255);
      var $136=$info;
      var $137=$135 & 1;
      var $138=$136;
      var $139=$137 & 1;
      var $140=HEAP8[($138)];
      var $141=$140 & -2;
      var $142=$141 | $139;
      HEAP8[($138)]=$142;
      var $143=$info;
      var $144=$143;
      var $145=HEAP8[($144)];
      var $146=$145 & -3;
      var $147=$146 | 2;
      HEAP8[($144)]=$147;
      var $148=$info;
      var $149=(($148+16)|0);
      HEAP32[(($149)>>2)]=0;
      var $150=$2;
      var $151=$2;
      var $152=(($151+1112)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$2;
      var $155=$newnode;
      var $156=_list1_gen($154, $155);
      var $157=_append_gen($150, $153, $156);
      var $158=$2;
      var $159=(($158+1112)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$2;
      var $161=(($160+1116)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=(($162)|(0))==0;
      if ($163) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $165=$2;
      var $166=(($165+1112)|0);
      var $167=HEAP32[(($166)>>2)];
      $n=$167;
      label = 39; break;
    case 39: 
      var $169=$n;
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($171)|(0))!=0;
      if ($172) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $174=$n;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      $n=$176;
      label = 39; break;
    case 41: 
      var $178=$n;
      var $179=$2;
      var $180=(($179+1116)|0);
      HEAP32[(($180)>>2)]=$178;
      label = 42; break;
    case 42: 
      var $182=$2;
      var $183=$182;
      var $184=(($183+1120)|0);
      var $185=HEAP8[($184)];
      var $186=$185 & -2;
      var $187=$186 | 1;
      HEAP8[($184)]=$187;
      var $188=$2;
      var $189=(($188+40)|0);
      HEAP32[(($189)>>2)]=1;
      var $190=$newnode;
      var $191=$2;
      var $192=(($191+1124)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$193;
      var $195=$194;
      HEAP32[(($195)>>2)]=$190;
      $1=364;
      label = 43; break;
    case 43: 
      var $197=$1;
      return $197;
    default: assert(0, "bad label: " + label);
  }
}
function _read_escape($p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $buf=__stackBase__;
      var $i=(__stackBase__)+(12);
      var $buf1=(__stackBase__)+(16);
      var $i2=(__stackBase__)+(24);
      $2=$p;
      var $3=$2;
      var $4=_nextc($3);
      $c=$4;
      if ((($4)|(0))==92) {
        label = 2; break;
      }
      else if ((($4)|(0))==110) {
        label = 3; break;
      }
      else if ((($4)|(0))==116) {
        label = 4; break;
      }
      else if ((($4)|(0))==114) {
        label = 5; break;
      }
      else if ((($4)|(0))==102) {
        label = 6; break;
      }
      else if ((($4)|(0))==118) {
        label = 7; break;
      }
      else if ((($4)|(0))==97) {
        label = 8; break;
      }
      else if ((($4)|(0))==101) {
        label = 9; break;
      }
      else if ((($4)|(0))==48 | (($4)|(0))==49 | (($4)|(0))==50 | (($4)|(0))==51 | (($4)|(0))==52 | (($4)|(0))==53 | (($4)|(0))==54 | (($4)|(0))==55) {
        label = 10; break;
      }
      else if ((($4)|(0))==120) {
        label = 20; break;
      }
      else if ((($4)|(0))==98) {
        label = 31; break;
      }
      else if ((($4)|(0))==115) {
        label = 32; break;
      }
      else if ((($4)|(0))==77) {
        label = 33; break;
      }
      else if ((($4)|(0))==67) {
        label = 40; break;
      }
      else if ((($4)|(0))==99) {
        label = 43; break;
      }
      else if ((($4)|(0))==-1) {
        label = 53; break;
      }
      else {
      label = 54; break;
      }
    case 2: 
      var $6=$c;
      $1=$6;
      label = 55; break;
    case 3: 
      $1=10;
      label = 55; break;
    case 4: 
      $1=9;
      label = 55; break;
    case 5: 
      $1=13;
      label = 55; break;
    case 6: 
      $1=12;
      label = 55; break;
    case 7: 
      $1=11;
      label = 55; break;
    case 8: 
      $1=7;
      label = 55; break;
    case 9: 
      $1=27;
      label = 55; break;
    case 10: 
      var $15=$c;
      var $16=(($buf)|0);
      HEAP32[(($16)>>2)]=$15;
      HEAP32[(($i)>>2)]=1;
      label = 11; break;
    case 11: 
      var $18=HEAP32[(($i)>>2)];
      var $19=(($18)|(0)) < 3;
      if ($19) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $21=$2;
      var $22=_nextc($21);
      var $23=HEAP32[(($i)>>2)];
      var $24=(($buf+($23<<2))|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=HEAP32[(($i)>>2)];
      var $26=(($buf+($25<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))==-1;
      if ($28) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 52; break;
    case 14: 
      var $31=HEAP32[(($i)>>2)];
      var $32=(($buf+($31<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0)) < 48;
      if ($34) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $36=HEAP32[(($i)>>2)];
      var $37=(($buf+($36<<2))|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=55 < (($38)|(0));
      if ($39) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $41=$2;
      var $42=HEAP32[(($i)>>2)];
      var $43=(($buf+($42<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      _pushback($41, $44);
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $47=HEAP32[(($i)>>2)];
      var $48=((($47)+(1))|0);
      HEAP32[(($i)>>2)]=$48;
      label = 11; break;
    case 19: 
      var $50=(($buf)|0);
      var $51=HEAP32[(($i)>>2)];
      var $52=_scan_oct($50, $51, $i);
      $c=$52;
      var $53=$c;
      $1=$53;
      label = 55; break;
    case 20: 
      HEAP32[(($i2)>>2)]=0;
      label = 21; break;
    case 21: 
      var $56=HEAP32[(($i2)>>2)];
      var $57=(($56)|(0)) < 2;
      if ($57) { label = 22; break; } else { label = 28; break; }
    case 22: 
      var $59=$2;
      var $60=_nextc($59);
      var $61=HEAP32[(($i2)>>2)];
      var $62=(($buf1+($61<<2))|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=HEAP32[(($i2)>>2)];
      var $64=(($buf1+($63<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|(0))==-1;
      if ($66) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 52; break;
    case 24: 
      var $69=HEAP32[(($i2)>>2)];
      var $70=(($buf1+($69<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71) & 255);
      var $73=(($72)&(255));
      var $74=_isxdigit($73);
      var $75=(($74)|(0))!=0;
      if ($75) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $77=$2;
      var $78=HEAP32[(($i2)>>2)];
      var $79=(($buf1+($78<<2))|0);
      var $80=HEAP32[(($79)>>2)];
      _pushback($77, $80);
      label = 28; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $83=HEAP32[(($i2)>>2)];
      var $84=((($83)+(1))|0);
      HEAP32[(($i2)>>2)]=$84;
      label = 21; break;
    case 28: 
      var $86=(($buf1)|0);
      var $87=HEAP32[(($i2)>>2)];
      var $88=_scan_hex($86, $87, $i2);
      $c=$88;
      var $89=HEAP32[(($i2)>>2)];
      var $90=(($89)|(0))==0;
      if ($90) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $92=$2;
      _yyerror($92, ((107032)|0));
      $1=0;
      label = 55; break;
    case 30: 
      var $94=$c;
      $1=$94;
      label = 55; break;
    case 31: 
      $1=8;
      label = 55; break;
    case 32: 
      $1=32;
      label = 55; break;
    case 33: 
      var $98=$2;
      var $99=_nextc($98);
      $c=$99;
      var $100=(($99)|(0))!=45;
      if ($100) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $102=$2;
      _yyerror($102, ((107032)|0));
      var $103=$2;
      var $104=$c;
      _pushback($103, $104);
      $1=0;
      label = 55; break;
    case 35: 
      var $106=$2;
      var $107=_nextc($106);
      $c=$107;
      var $108=(($107)|(0))==92;
      if ($108) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $110=$2;
      var $111=_read_escape($110);
      var $112=$111 | 128;
      $1=$112;
      label = 55; break;
    case 37: 
      var $114=$c;
      var $115=(($114)|(0))==-1;
      if ($115) { label = 38; break; } else { label = 39; break; }
    case 38: 
      label = 52; break;
    case 39: 
      var $118=$c;
      var $119=$118 & 255;
      var $120=$119 | 128;
      $1=$120;
      label = 55; break;
    case 40: 
      var $122=$2;
      var $123=_nextc($122);
      $c=$123;
      var $124=(($123)|(0))!=45;
      if ($124) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $126=$2;
      _yyerror($126, ((107032)|0));
      var $127=$2;
      var $128=$c;
      _pushback($127, $128);
      $1=0;
      label = 55; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $131=$2;
      var $132=_nextc($131);
      $c=$132;
      var $133=(($132)|(0))==92;
      if ($133) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $135=$2;
      var $136=_read_escape($135);
      $c=$136;
      label = 51; break;
    case 45: 
      var $138=$c;
      var $139=(($138)|(0))==63;
      if ($139) { label = 46; break; } else { label = 47; break; }
    case 46: 
      $1=127;
      label = 55; break;
    case 47: 
      var $142=$c;
      var $143=(($142)|(0))==-1;
      if ($143) { label = 48; break; } else { label = 49; break; }
    case 48: 
      label = 52; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $148=$c;
      var $149=$148 & 159;
      $1=$149;
      label = 55; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $152=$2;
      _yyerror($152, ((107032)|0));
      $1=0;
      label = 55; break;
    case 54: 
      var $154=$c;
      $1=$154;
      label = 55; break;
    case 55: 
      var $156=$1;
      STACKTOP = __stackBase__;
      return $156;
    default: assert(0, "bad label: " + label);
  }
}
function _tok($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+84)|0);
  var $4=(($3)|0);
  return $4;
}
function _toklen($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+1108)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _toklast($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=(($2+1108)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=((($4)-(1))|0);
  var $6=$1;
  var $7=(($6+84)|0);
  var $8=(($7+$5)|0);
  var $9=HEAP8[($8)];
  var $10=(($9 << 24) >> 24);
  return $10;
}
function _hash($str, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $hval;
      $1=$str;
      $2=$len;
      var $3=$2;
      $hval=$3;
      var $4=$hval;
      if ((($4)|(0))==2 | (($4)|(0))==1) {
        label = 3; break;
      }
      else {
      label = 2; break;
      }
    case 2: 
      var $6=$1;
      var $7=(($6+2)|0);
      var $8=HEAP8[($7)];
      var $9=(($8)&(255));
      var $10=((80440+$9)|0);
      var $11=HEAP8[($10)];
      var $12=(($11)&(255));
      var $13=$hval;
      var $14=((($13)+($12))|0);
      $hval=$14;
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=(($16)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=((80440+$19)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&(255));
      var $23=$hval;
      var $24=((($23)+($22))|0);
      $hval=$24;
      label = 4; break;
    case 4: 
      var $26=$hval;
      var $27=$2;
      var $28=((($27)-(1))|0);
      var $29=$1;
      var $30=(($29+$28)|0);
      var $31=HEAP8[($30)];
      var $32=(($31)&(255));
      var $33=((80440+$32)|0);
      var $34=HEAP8[($33)];
      var $35=(($34)&(255));
      var $36=((($26)+($35))|0);
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _scan_oct($start, $len, $retlen) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      var $retval;
      $1=$start;
      $2=$len;
      $3=$retlen;
      var $4=$1;
      $s=$4;
      $retval=0;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=((($6)-(1))|0);
      $2=$7;
      var $8=(($6)|(0))!=0;
      if ($8) { label = 3; break; } else { var $18 = 0;label = 5; break; }
    case 3: 
      var $10=$s;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0)) >= 48;
      if ($12) { label = 4; break; } else { var $18 = 0;label = 5; break; }
    case 4: 
      var $14=$s;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0)) <= 55;
      var $18 = $16;label = 5; break;
    case 5: 
      var $18;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$retval;
      var $21=$20 << 3;
      $retval=$21;
      var $22=$s;
      var $23=(($22+4)|0);
      $s=$23;
      var $24=HEAP32[(($22)>>2)];
      var $25=((($24)-(48))|0);
      var $26=$retval;
      var $27=$26 | $25;
      $retval=$27;
      label = 2; break;
    case 7: 
      var $29=$s;
      var $30=$1;
      var $31=$29;
      var $32=$30;
      var $33=((($31)-($32))|0);
      var $34=((((($33)|(0)))/(4))&-1);
      var $35=$3;
      HEAP32[(($35)>>2)]=$34;
      var $36=$retval;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _cons_free_gen($p, $cons) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$cons;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=(($6+4)|0);
  HEAP32[(($7)>>2)]=$5;
  var $8=$2;
  var $9=$1;
  var $10=(($9+8)|0);
  HEAP32[(($10)>>2)]=$8;
  return;
}
function _yystpcpy($yydest, $yysrc) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $yyd;
      var $yys;
      $1=$yydest;
      $2=$yysrc;
      var $3=$1;
      $yyd=$3;
      var $4=$2;
      $yys=$4;
      label = 2; break;
    case 2: 
      var $6=$yys;
      var $7=(($6+1)|0);
      $yys=$7;
      var $8=HEAP8[($6)];
      var $9=$yyd;
      var $10=(($9+1)|0);
      $yyd=$10;
      HEAP8[($9)]=$8;
      var $11=(($8 << 24) >> 24);
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      label = 2; break;
    case 4: 
      var $15=$yyd;
      var $16=((($15)-(1))|0);
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _yystrlen($yystr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $yylen;
      $1=$yystr;
      $yylen=0;
      label = 2; break;
    case 2: 
      var $3=$yylen;
      var $4=$1;
      var $5=(($4+$3)|0);
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$yylen;
      var $11=((($10)+(1))|0);
      $yylen=$11;
      label = 2; break;
    case 5: 
      var $13=$yylen;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _local_var_p($p, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $n;
      $2=$p;
      $3=$sym;
      var $4=$2;
      var $5=(($4+76)|0);
      var $6=HEAP32[(($5)>>2)];
      $l=$6;
      label = 2; break;
    case 2: 
      var $8=$l;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $11=$l;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $n=$13;
      label = 4; break;
    case 4: 
      var $15=$n;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $18=$n;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=(($21) & 65535);
      var $23=(($22 << 16) >> 16);
      var $24=$3;
      var $25=(($24 << 16) >> 16);
      var $26=(($23)|(0))==(($25)|(0));
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=1;
      label = 10; break;
    case 7: 
      var $29=$n;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      $n=$31;
      label = 4; break;
    case 8: 
      var $33=$l;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      $l=$35;
      label = 2; break;
    case 9: 
      $1=0;
      label = 10; break;
    case 10: 
      var $38=$1;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _tokfix($p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$p;
      var $2=$1;
      var $3=(($2+1108)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0)) >= 1024;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      _yyerror($7, ((107064)|0));
      label = 3; break;
    case 3: 
      var $9=$1;
      var $10=(($9+1108)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$1;
      var $13=(($12+84)|0);
      var $14=(($13+$11)|0);
      HEAP8[($14)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _arg_ambiguous($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  _yywarning($2, ((107104)|0));
  return 1;
}
function _yyerror_i($p, $fmt, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $buf=__stackBase__;
  $1=$p;
  $2=$fmt;
  $3=$i;
  var $4=(($buf)|0);
  var $5=$2;
  var $6=$3;
  var $7=_snprintf($4, 256, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,tempInt));
  var $8=$1;
  var $9=(($buf)|0);
  _yyerror($8, $9);
  STACKTOP = __stackBase__;
  return;
}
function _yywarning_s($p, $fmt, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $buf=__stackBase__;
  $1=$p;
  $2=$fmt;
  $3=$s;
  var $4=(($buf)|0);
  var $5=$2;
  var $6=$3;
  var $7=_snprintf($4, 256, $5, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$6,tempInt));
  var $8=$1;
  var $9=(($buf)|0);
  _yywarning($8, $9);
  STACKTOP = __stackBase__;
  return;
}
function _new_float($p, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$s;
  var $3=$1;
  var $4=$1;
  var $5=$2;
  var $6=_parser_strdup($4, $5);
  var $7=$6;
  var $8=_cons_gen($3, 51, $7);
  return $8;
}
function _intern_gen($p, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$s;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=_mrb_intern249($5, $6);
  return $7;
}
function _new_back_ref($p, $n) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$n;
  var $3=$1;
  var $4=$2;
  var $5=$4;
  var $6=_cons_gen($3, 46, $5);
  return $6;
}
function _new_nth_ref($p, $n) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$n;
  var $3=$1;
  var $4=$2;
  var $5=$4;
  var $6=_cons_gen($3, 45, $5);
  return $6;
}
function _peek_n($p, $c, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $list;
      var $c0;
      $2=$p;
      $3=$c;
      $4=$n;
      $list=0;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=_nextc($6);
      $c0=$7;
      var $8=$c0;
      var $9=(($8)|(0)) < 0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 12; break;
    case 4: 
      var $12=$2;
      var $13=$list;
      var $14=$2;
      var $15=$c0;
      var $16=$15;
      var $17=_list1_gen($14, $16);
      var $18=_append_gen($12, $13, $17);
      $list=$18;
      label = 5; break;
    case 5: 
      var $20=$4;
      var $21=((($20)-(1))|0);
      $4=$21;
      var $22=(($20)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 6; break; }
    case 6: 
      var $24=$2;
      var $25=(($24+80)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$2;
      var $30=$2;
      var $31=(($30+80)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=$list;
      var $35=_list1_gen($33, $34);
      var $36=_append_gen($29, $32, $35);
      var $37=$2;
      var $38=(($37+80)|0);
      HEAP32[(($38)>>2)]=$36;
      label = 9; break;
    case 8: 
      var $40=$list;
      var $41=$2;
      var $42=(($41+80)|0);
      HEAP32[(($42)>>2)]=$40;
      label = 9; break;
    case 9: 
      var $44=$c0;
      var $45=$3;
      var $46=(($44)|(0))==(($45)|(0));
      if ($46) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=1;
      label = 12; break;
    case 11: 
      $1=0;
      label = 12; break;
    case 12: 
      var $50=$1;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _reserved_word($str, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $key;
      var $s;
      $2=$str;
      $3=$len;
      var $4=$3;
      var $5=(($4)>>>(0)) <= 12;
      if ($5) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $7=$3;
      var $8=(($7)>>>(0)) >= 2;
      if ($8) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $10=$2;
      var $11=$3;
      var $12=_hash($10, $11);
      $key=$12;
      var $13=$key;
      var $14=(($13)|(0)) <= 50;
      if ($14) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $16=$key;
      var $17=(($16)|(0)) >= 0;
      if ($17) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $19=$key;
      var $20=((59056+($19<<4))|0);
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      $s=$22;
      var $23=$2;
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=$s;
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=(($25)|(0))==(($28)|(0));
      if ($29) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $31=$2;
      var $32=(($31+1)|0);
      var $33=$s;
      var $34=(($33+1)|0);
      var $35=_strcmp($32, $34);
      var $36=(($35)|(0))!=0;
      if ($36) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $38=$key;
      var $39=((59056+($38<<4))|0);
      $1=$39;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $44=$1;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern249($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _parser_strdup($p, $s) {
  var label = 0;
  var $1;
  var $2;
  $1=$p;
  $2=$s;
  var $3=$1;
  var $4=$2;
  var $5=$2;
  var $6=_strlen($5);
  var $7=_parser_strndup($3, $4, $6);
  return $7;
}
function _parser_strndup($p, $s, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $b;
  $1=$p;
  $2=$s;
  $3=$len;
  var $4=$1;
  var $5=$3;
  var $6=((($5)+(1))|0);
  var $7=_parser_palloc($4, $6);
  $b=$7;
  var $8=$b;
  var $9=$2;
  var $10=$3;
  assert($10 % 1 === 0);_memcpy($8, $9, $10);
  var $11=$3;
  var $12=$b;
  var $13=(($12+$11)|0);
  HEAP8[($13)]=0;
  var $14=$b;
  return $14;
}
function _scan_hex($start, $len, $retlen) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      var $retval;
      var $tmp;
      $1=$start;
      $2=$len;
      $3=$retlen;
      var $4=$1;
      $s=$4;
      $retval=0;
      label = 2; break;
    case 2: 
      var $6=$2;
      var $7=((($6)-(1))|0);
      $2=$7;
      var $8=(($6)|(0))!=0;
      if ($8) { label = 3; break; } else { var $19 = 0;label = 5; break; }
    case 3: 
      var $10=$s;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { var $19 = 0;label = 5; break; }
    case 4: 
      var $14=$s;
      var $15=HEAP32[(($14)>>2)];
      var $16=_strchr(((59016)|0), $15);
      $tmp=$16;
      var $17=(($16)|(0))!=0;
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$retval;
      var $22=$21 << 4;
      $retval=$22;
      var $23=$tmp;
      var $24=$23;
      var $25=((($24)-(59016))|0);
      var $26=$25 & 15;
      var $27=$retval;
      var $28=$27 | $26;
      $retval=$28;
      var $29=$s;
      var $30=(($29+4)|0);
      $s=$30;
      label = 2; break;
    case 7: 
      var $32=$s;
      var $33=$1;
      var $34=$32;
      var $35=$33;
      var $36=((($34)-($35))|0);
      var $37=((((($36)|(0)))/(4))&-1);
      var $38=$3;
      HEAP32[(($38)>>2)]=$37;
      var $39=$retval;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _new_heredoc($p) {
  var label = 0;
  var $1;
  var $inf;
  $1=$p;
  var $2=$1;
  var $3=_parser_palloc($2, 20);
  var $4=$3;
  $inf=$4;
  var $5=$1;
  var $6=$inf;
  var $7=$6;
  var $8=_cons_gen($5, 99, $7);
  return $8;
}
function _end_strterm($p) {
  var label = 0;
  var $1;
  $1=$p;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+4)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+4)|0);
  var $9=HEAP32[(($8)>>2)];
  _cons_free_gen($2, $9);
  var $10=$1;
  var $11=$1;
  var $12=(($11+44)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=(($13+4)|0);
  var $15=HEAP32[(($14)>>2)];
  _cons_free_gen($10, $15);
  var $16=$1;
  var $17=$1;
  var $18=(($17+44)|0);
  var $19=HEAP32[(($18)>>2)];
  _cons_free_gen($16, $19);
  var $20=$1;
  var $21=(($20+44)|0);
  HEAP32[(($21)>>2)]=0;
  return;
}
function _new_xstr($p, $s, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$s;
  $3=$len;
  var $4=$1;
  var $5=$1;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=_parser_strndup($6, $7, $8);
  var $10=$9;
  var $11=$3;
  var $12=$11;
  var $13=_cons_gen($5, $10, $12);
  var $14=_cons_gen($4, 57, $13);
  return $14;
}
function _new_regx($p, $p1, $p2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$p;
  $2=$p1;
  $3=$p2;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=$6;
  var $8=$3;
  var $9=$8;
  var $10=_cons_gen($5, $7, $9);
  var $11=_cons_gen($4, 59, $10);
  return $11;
}
function _yytnamerr($yyres, $yystr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $yyn;
      var $yyp;
      $2=$yyres;
      $3=$yystr;
      var $4=$3;
      var $5=HEAP8[($4)];
      var $6=(($5 << 24) >> 24);
      var $7=(($6)|(0))==34;
      if ($7) { label = 2; break; } else { label = 16; break; }
    case 2: 
      $yyn=0;
      var $9=$3;
      $yyp=$9;
      label = 3; break;
    case 3: 
      var $11=$yyp;
      var $12=(($11+1)|0);
      $yyp=$12;
      var $13=HEAP8[($12)];
      var $14=(($13 << 24) >> 24);
      if ((($14)|(0))==39 | (($14)|(0))==44) {
        label = 4; break;
      }
      else if ((($14)|(0))==92) {
        label = 5; break;
      }
      else if ((($14)|(0))==34) {
        label = 11; break;
      }
      else {
      label = 8; break;
      }
    case 4: 
      label = 15; break;
    case 5: 
      var $17=$yyp;
      var $18=(($17+1)|0);
      $yyp=$18;
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24);
      var $21=(($20)|(0))!=92;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 15; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $25=$2;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$yyp;
      var $29=HEAP8[($28)];
      var $30=$yyn;
      var $31=$2;
      var $32=(($31+$30)|0);
      HEAP8[($32)]=$29;
      label = 10; break;
    case 10: 
      var $34=$yyn;
      var $35=((($34)+(1))|0);
      $yyn=$35;
      label = 14; break;
    case 11: 
      var $37=$2;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $40=$yyn;
      var $41=$2;
      var $42=(($41+$40)|0);
      HEAP8[($42)]=0;
      label = 13; break;
    case 13: 
      var $44=$yyn;
      $1=$44;
      label = 19; break;
    case 14: 
      label = 3; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $48=$2;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $51=$3;
      var $52=_yystrlen($51);
      $1=$52;
      label = 19; break;
    case 18: 
      var $54=$2;
      var $55=$3;
      var $56=_yystpcpy($54, $55);
      var $57=$2;
      var $58=$56;
      var $59=$57;
      var $60=((($58)-($59))|0);
      $1=$60;
      label = 19; break;
    case 19: 
      var $62=$1;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
function _list6_gen($p, $a, $b, $c, $d, $e, $f) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  var $7;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  $5=$d;
  $6=$e;
  $7=$f;
  var $8=$1;
  var $9=$2;
  var $10=$1;
  var $11=$3;
  var $12=$1;
  var $13=$4;
  var $14=$1;
  var $15=$5;
  var $16=$1;
  var $17=$6;
  var $18=$1;
  var $19=$7;
  var $20=_cons_gen($18, $19, 0);
  var $21=_cons_gen($16, $17, $20);
  var $22=_cons_gen($14, $15, $21);
  var $23=_cons_gen($12, $13, $22);
  var $24=_cons_gen($10, $11, $23);
  var $25=_cons_gen($8, $9, $24);
  return $25;
}
function _list5_gen($p, $a, $b, $c, $d, $e) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $6;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  $5=$d;
  $6=$e;
  var $7=$1;
  var $8=$2;
  var $9=$1;
  var $10=$3;
  var $11=$1;
  var $12=$4;
  var $13=$1;
  var $14=$5;
  var $15=$1;
  var $16=$6;
  var $17=_cons_gen($15, $16, 0);
  var $18=_cons_gen($13, $14, $17);
  var $19=_cons_gen($11, $12, $18);
  var $20=_cons_gen($9, $10, $19);
  var $21=_cons_gen($7, $8, $20);
  return $21;
}
function _parser_palloc($p, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $m;
      $1=$p;
      $2=$size;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=_mrb_pool_alloc($5, $6);
      $m=$7;
      var $8=$m;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+1384)|0);
      var $13=(($12)|0);
      _longjmp($13, 1);
      throw "Reached an unreachable!";
    case 3: 
      var $15=$m;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _yy_symbol_value_print($yyoutput, $yytype, $yyvaluep, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$yyoutput;
      $2=$yytype;
      $3=$yyvaluep;
      $4=$p;
      var $5=$3;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 5; break;
    case 3: 
      var $9=$4;
      var $10=$1;
      var $11=$2;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _list4_gen($p, $a, $b, $c, $d) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$p;
  $2=$a;
  $3=$b;
  $4=$c;
  $5=$d;
  var $6=$1;
  var $7=$2;
  var $8=$1;
  var $9=$3;
  var $10=$1;
  var $11=$4;
  var $12=$1;
  var $13=$5;
  var $14=_cons_gen($12, $13, 0);
  var $15=_cons_gen($10, $11, $14);
  var $16=_cons_gen($8, $9, $15);
  var $17=_cons_gen($6, $7, $16);
  return $17;
}
function _local_add($p, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$p;
      $2=$sym;
      var $3=$1;
      var $4=$2;
      var $5=_local_var_p($3, $4);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      _local_add_f($8, $9);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_new_capa($agg_result, $mrb, $capa) {
  var label = 0;
  var $1;
  var $2;
  var $a;
  $1=$mrb;
  $2=$capa;
  var $3=$1;
  var $4=$2;
  var $5=_ary_new_capa($3, $4);
  $a=$5;
  var $6=$a;
  var $7=$6;
  _mrb_obj_value625($agg_result, $7);
  return;
}
function _ary_new_capa($mrb, $capa) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a;
      var $blen;
      $1=$mrb;
      $2=$capa;
      var $3=$2;
      var $4=(($3)|(0)) > 357913941;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$1;
      var $8=_mrb_class_get($7, ((96392)|0));
      _mrb_raise($6, $8, ((98564)|0));
      label = 3; break;
    case 3: 
      var $10=$2;
      var $11=((($10)*(12))&-1);
      $blen=$11;
      var $12=$blen;
      var $13=$2;
      var $14=(($12)|(0)) < (($13)|(0));
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_class_get($17, ((96392)|0));
      _mrb_raise($16, $18, ((98564)|0));
      label = 5; break;
    case 5: 
      var $20=$1;
      var $21=$1;
      var $22=(($21+64)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=_mrb_obj_alloc($20, 14, $23);
      var $25=$24;
      $a=$25;
      var $26=$1;
      var $27=$blen;
      var $28=_mrb_malloc($26, $27);
      var $29=$28;
      var $30=$a;
      var $31=(($30+20)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$2;
      var $33=$a;
      var $34=(($33+16)|0);
      var $35=$34;
      HEAP32[(($35)>>2)]=$32;
      var $36=$a;
      var $37=(($36+12)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$a;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value625($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_new($agg_result, $mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_ary_new_capa($agg_result, $2, 0);
  return;
}
function _mrb_assoc_new($agg_result, $mrb, $car, $cdr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $car; $car = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($car)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($car)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($car)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $cdr; $cdr = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cdr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cdr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cdr)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arv=__stackBase__;
  $1=$mrb;
  var $2=(($arv)|0);
  var $3=$2;
  var $4=$car;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  var $5=(($arv+12)|0);
  var $6=$5;
  var $7=$cdr;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=$1;
  var $9=(($arv)|0);
  _mrb_ary_new_from_values($agg_result, $8, 2, $9);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_new_from_values($agg_result, $mrb, $size, $vals) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $ary=__stackBase__;
  var $a;
  var $4=(__stackBase__)+(12);
  $1=$mrb;
  $2=$size;
  $3=$vals;
  var $5=$1;
  var $6=$2;
  _mrb_ary_new_capa($4, $5, $6);
  var $7=$ary;
  var $8=$4;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  var $9=(($ary)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  $a=$12;
  var $13=$a;
  var $14=(($13+20)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=$3;
  var $17=$2;
  _array_copy($15, $16, $17);
  var $18=$2;
  var $19=$a;
  var $20=(($19+12)|0);
  HEAP32[(($20)>>2)]=$18;
  var $21=$agg_result;
  var $22=$ary;
  assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_s_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $vals=__stackBase__;
  var $len=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
  var $4=$1;
  var $5=HEAP32[(($len)>>2)];
  var $6=HEAP32[(($vals)>>2)];
  _mrb_ary_new_from_values($agg_result, $4, $5, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_concat($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a2;
  $1=$mrb;
  var $2=(($other)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $a2=$5;
  var $6=$1;
  var $7=(($self)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=$a2;
  var $12=(($11+20)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$a2;
  var $15=(($14+12)|0);
  var $16=HEAP32[(($15)>>2)];
  _ary_concat($6, $10, $13, $16);
  STACKTOP = __stackBase__;
  return;
}
function _ary_concat($mrb, $a, $ptr, $blen) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $len;
      $1=$mrb;
      $2=$a;
      $3=$ptr;
      $4=$blen;
      var $5=$2;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$4;
      var $9=((($7)+($8))|0);
      $len=$9;
      var $10=$1;
      var $11=$2;
      _ary_modify($10, $11);
      var $12=$2;
      var $13=(($12+16)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$len;
      var $17=(($15)|(0)) < (($16)|(0));
      if ($17) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $19=$1;
      var $20=$2;
      var $21=$len;
      _ary_expand_capa($19, $20, $21);
      label = 3; break;
    case 3: 
      var $23=$2;
      var $24=(($23+20)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$2;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25+((($28)*(12))&-1))|0);
      var $30=$3;
      var $31=$4;
      _array_copy($29, $30, $31);
      var $32=$1;
      var $33=$2;
      var $34=$33;
      _mrb_write_barrier($32, $34);
      var $35=$len;
      var $36=$2;
      var $37=(($36+12)|0);
      HEAP32[(($37)>>2)]=$35;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_concat_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ptr=__stackBase__;
  var $blen=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((110528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
  var $4=$1;
  var $5=(($self)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=HEAP32[(($ptr)>>2)];
  var $10=HEAP32[(($blen)>>2)];
  _ary_concat($4, $8, $9, $10);
  var $11=$agg_result;
  var $12=$self;
  assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a1;
  var $a2;
  var $ary=__stackBase__;
  var $ptr=(__stackBase__)+(12);
  var $blen=(__stackBase__)+(16);
  var $2=(__stackBase__)+(20);
  $1=$mrb;
  var $3=(($self)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  $a1=$6;
  var $7=$1;
  var $8=_mrb_get_args($7, ((110528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ptr,HEAP32[(((tempInt)+(4))>>2)]=$blen,tempInt));
  var $9=$1;
  var $10=$a1;
  var $11=(($10+12)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=HEAP32[(($blen)>>2)];
  var $14=((($12)+($13))|0);
  _mrb_ary_new_capa($2, $9, $14);
  var $15=$ary;
  var $16=$2;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  var $17=(($ary)|0);
  var $18=$17;
  var $19=HEAP32[(($18)>>2)];
  var $20=$19;
  $a2=$20;
  var $21=$a2;
  var $22=(($21+20)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=$a1;
  var $25=(($24+20)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$a1;
  var $28=(($27+12)|0);
  var $29=HEAP32[(($28)>>2)];
  _array_copy($23, $26, $29);
  var $30=$a2;
  var $31=(($30+20)|0);
  var $32=HEAP32[(($31)>>2)];
  var $33=$a1;
  var $34=(($33+12)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=(($32+((($35)*(12))&-1))|0);
  var $37=HEAP32[(($ptr)>>2)];
  var $38=HEAP32[(($blen)>>2)];
  _array_copy($36, $37, $38);
  var $39=$a1;
  var $40=(($39+12)|0);
  var $41=HEAP32[(($40)>>2)];
  var $42=HEAP32[(($blen)>>2)];
  var $43=((($41)+($42))|0);
  var $44=$a2;
  var $45=(($44+12)|0);
  HEAP32[(($45)>>2)]=$43;
  var $46=$agg_result;
  var $47=$ary;
  assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _array_copy($dst, $src, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$dst;
      $2=$src;
      $3=$size;
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$3;
      var $7=(($5)>>>(0)) < (($6)>>>(0));
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=$i;
      var $10=$1;
      var $11=(($10+((($9)*(12))&-1))|0);
      var $12=$i;
      var $13=$2;
      var $14=(($13+((($12)*(12))&-1))|0);
      var $15=$11;
      var $16=$14;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $18=$i;
      var $19=((($18)+(1))|0);
      $i=$19;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_cmp($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary2=__stackBase__;
      var $a1;
      var $a2;
      var $r=(__stackBase__)+(12);
      var $i;
      var $len;
      var $cmp;
      var $v=(__stackBase__)+(24);
      var $2=(__stackBase__)+(36);
      var $3=(__stackBase__)+(48);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((106296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $6=(($ary2+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==14;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value632($agg_result);
      label = 20; break;
    case 3: 
      var $11=(($ary1)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      $a1=$14;
      var $15=(($ary2)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      $a2=$18;
      var $19=$a1;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$a2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($21)|(0))==(($24)|(0));
      if ($25) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $27=$a1;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$a2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|(0))==(($32)|(0));
      if ($33) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_fixnum_value633($agg_result, 0);
      label = 20; break;
    case 6: 
      var $36=$1;
      var $37=_mrb_intern2($36, ((103268)|0), 3);
      $cmp=$37;
      var $38=(($ary1)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      $len=$43;
      var $44=$len;
      var $45=(($ary2)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($44)|(0)) > (($50)|(0));
      if ($51) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $53=(($ary2)|0);
      var $54=$53;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      $len=$58;
      label = 8; break;
    case 8: 
      $i=0;
      label = 9; break;
    case 9: 
      var $61=$i;
      var $62=$len;
      var $63=(($61)|(0)) < (($62)|(0));
      if ($63) { label = 10; break; } else { label = 15; break; }
    case 10: 
      var $65=$i;
      _ary_elt($v, $ary2, $65);
      var $66=$1;
      var $67=$i;
      _ary_elt($2, $ary1, $67);
      var $68=$cmp;
      _mrb_funcall_argv($3, $66, $2, $68, 1, $v);
      var $69=$r;
      var $70=$3;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      var $71=(($r+8)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0))!=3;
      if ($73) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $75=(($r)|0);
      var $76=$75;
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|(0))!=0;
      if ($78) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $80=$agg_result;
      var $81=$r;
      assert(12 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];
      label = 20; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $84=$i;
      var $85=((($84)+(1))|0);
      $i=$85;
      label = 9; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $88=$a1;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$a2;
      var $92=(($91+12)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=((($90)-($93))|0);
      $len=$94;
      var $95=$len;
      var $96=(($95)|(0))==0;
      if ($96) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $103 = 0;label = 19; break;
    case 18: 
      var $99=$len;
      var $100=(($99)|(0)) > 0;
      var $101=$100 ? 1 : -1;
      var $103 = $101;label = 19; break;
    case 19: 
      var $103;
      _mrb_fixnum_value633($agg_result, $103);
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value632($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value633($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_elt($agg_result, $ary, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$offset;
      var $2=(($ary)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value632($agg_result);
      label = 7; break;
    case 3: 
      var $11=$1;
      var $12=(($11)|(0)) < 0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=(($ary)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($19)|(0)) <= (($20)|(0));
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value632($agg_result);
      label = 7; break;
    case 6: 
      var $24=$1;
      var $25=(($ary)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+((($24)*(12))&-1))|0);
      var $32=$agg_result;
      var $33=$31;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_replace($mrb, $self, $other) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $other; $other = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($other)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($other)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($other)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a2;
  $1=$mrb;
  var $2=(($other)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $a2=$5;
  var $6=$1;
  var $7=(($self)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=$a2;
  var $12=(($11+20)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=$a2;
  var $15=(($14+12)|0);
  var $16=HEAP32[(($15)>>2)];
  _ary_replace($6, $10, $13, $16);
  STACKTOP = __stackBase__;
  return;
}
function _ary_replace($mrb, $a, $argv, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$mrb;
      $2=$a;
      $3=$argv;
      $4=$len;
      var $5=$1;
      var $6=$2;
      _ary_modify($5, $6);
      var $7=$2;
      var $8=(($7+16)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$4;
      var $12=(($10)|(0)) < (($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$1;
      var $15=$2;
      var $16=$4;
      _ary_expand_capa($14, $15, $16);
      label = 3; break;
    case 3: 
      var $18=$2;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$3;
      var $22=$4;
      _array_copy($20, $21, $22);
      var $23=$1;
      var $24=$2;
      var $25=$24;
      _mrb_write_barrier($23, $25);
      var $26=$4;
      var $27=$2;
      var $28=(($27+12)|0);
      HEAP32[(($28)>>2)]=$26;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_replace_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $other=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((100368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $4=$1;
  _mrb_ary_replace($4, $self, $other);
  var $5=$agg_result;
  var $6=$self;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_times($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a1;
      var $a2;
      var $ary=__stackBase__;
      var $ptr;
      var $times=(__stackBase__)+(12);
      var $2=(__stackBase__)+(16);
      $1=$mrb;
      var $3=(($self)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $a1=$6;
      var $7=$1;
      var $8=_mrb_get_args($7, ((97844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$times,tempInt));
      var $9=HEAP32[(($times)>>2)];
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_get($13, ((96392)|0));
      _mrb_raise($12, $14, ((95244)|0));
      label = 3; break;
    case 3: 
      var $16=HEAP32[(($times)>>2)];
      var $17=(($16)|(0))==0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      _mrb_ary_new($agg_result, $19);
      label = 9; break;
    case 5: 
      var $21=$1;
      var $22=$a1;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=HEAP32[(($times)>>2)];
      var $26=Math.imul($24,$25);
      _mrb_ary_new_capa($2, $21, $26);
      var $27=$ary;
      var $28=$2;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $29=(($ary)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      $a2=$32;
      var $33=$a2;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      $ptr=$35;
      label = 6; break;
    case 6: 
      var $37=HEAP32[(($times)>>2)];
      var $38=((($37)-(1))|0);
      HEAP32[(($times)>>2)]=$38;
      var $39=(($37)|(0))!=0;
      if ($39) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $41=$ptr;
      var $42=$a1;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$a1;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      _array_copy($41, $44, $47);
      var $48=$a1;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$ptr;
      var $52=(($51+((($50)*(12))&-1))|0);
      $ptr=$52;
      var $53=$a1;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$a2;
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)+($55))|0);
      HEAP32[(($57)>>2)]=$59;
      label = 6; break;
    case 8: 
      var $61=$agg_result;
      var $62=$ary;
      assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_reverse_bang($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $p1;
      var $p2;
      var $tmp=__stackBase__;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$a;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0)) > 1;
      if ($9) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $11=$1;
      var $12=$a;
      _ary_modify($11, $12);
      var $13=$a;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      $p1=$15;
      var $16=$a;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$a;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18+((($21)*(12))&-1))|0);
      var $23=((($22)-(12))|0);
      $p2=$23;
      label = 3; break;
    case 3: 
      var $25=$p1;
      var $26=$p2;
      var $27=(($25)>>>(0)) < (($26)>>>(0));
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$p1;
      var $30=$tmp;
      var $31=$29;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=$p1;
      var $33=(($32+12)|0);
      $p1=$33;
      var $34=$p2;
      var $35=$32;
      var $36=$34;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      var $37=$p2;
      var $38=((($37)-(12))|0);
      $p2=$38;
      var $39=$37;
      var $40=$tmp;
      assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $43=$agg_result;
      var $44=$self;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_modify($mrb, $a) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $shared;
      var $ptr;
      var $p;
      var $len;
      $1=$mrb;
      $2=$a;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $7=$6 & 2097151;
      var $8=$7 & 256;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      $shared=$14;
      var $15=$shared;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==1;
      if ($18) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $20=$2;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$shared;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($22)|(0))==(($25)|(0));
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$shared;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=(($31+20)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$2;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36+16)|0);
      var $38=$37;
      HEAP32[(($38)>>2)]=$35;
      var $39=$1;
      var $40=$shared;
      var $41=$40;
      _mrb_free($39, $41);
      label = 8; break;
    case 5: 
      var $43=$2;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      $p=$45;
      var $46=$2;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)*(12))&-1);
      $len=$49;
      var $50=$1;
      var $51=$len;
      var $52=_mrb_malloc($50, $51);
      var $53=$52;
      $ptr=$53;
      var $54=$p;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $57=$ptr;
      var $58=$p;
      var $59=$2;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      _array_copy($57, $58, $61);
      label = 7; break;
    case 7: 
      var $63=$ptr;
      var $64=$2;
      var $65=(($64+20)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$2;
      var $67=(($66+12)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=$70;
      HEAP32[(($71)>>2)]=$68;
      var $72=$1;
      var $73=$shared;
      _mrb_ary_decref($72, $73);
      label = 8; break;
    case 8: 
      var $75=$2;
      var $76=$75;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 >>> 11;
      var $79=$78 & 2097151;
      var $80=$79 & -257;
      var $81=$80 & 2097151;
      var $82=$75;
      var $83=$81 & 2097151;
      var $84=$83 << 11;
      var $85=HEAP32[(($82)>>2)];
      var $86=$85 & 2047;
      var $87=$86 | $84;
      HEAP32[(($82)>>2)]=$87;
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_reverse($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $ary=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $p1;
      var $p2;
      var $e;
      $1=$mrb;
      var $3=(($self)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $a=$6;
      var $7=$1;
      var $8=$a;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      _mrb_ary_new_capa($2, $7, $10);
      var $11=$ary;
      var $12=$2;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($ary)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $b=$16;
      var $17=$a;
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0)) > 0;
      if ($20) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $22=$a;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      $p1=$24;
      var $25=$p1;
      var $26=$a;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($25+((($28)*(12))&-1))|0);
      $e=$29;
      var $30=$b;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$a;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($32+((($35)*(12))&-1))|0);
      var $37=((($36)-(12))|0);
      $p2=$37;
      label = 3; break;
    case 3: 
      var $39=$p1;
      var $40=$e;
      var $41=(($39)>>>(0)) < (($40)>>>(0));
      if ($41) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $43=$p2;
      var $44=((($43)-(12))|0);
      $p2=$44;
      var $45=$p1;
      var $46=(($45+12)|0);
      $p1=$46;
      var $47=$43;
      var $48=$45;
      assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
      label = 3; break;
    case 5: 
      var $50=$a;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=$b;
      var $54=(($53+12)|0);
      HEAP32[(($54)>>2)]=$52;
      label = 6; break;
    case 6: 
      var $56=$agg_result;
      var $57=$ary;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_push($mrb, $ary, $elem) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $elem; $elem = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($elem)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($elem)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($elem)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      $1=$mrb;
      var $2=(($ary)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=$a;
      _ary_modify($6, $7);
      var $8=$a;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$a;
      var $12=(($11+16)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($10)|(0))==(($14)|(0));
      if ($15) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $17=$1;
      var $18=$a;
      var $19=$a;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=((($21)+(1))|0);
      _ary_expand_capa($17, $18, $22);
      label = 3; break;
    case 3: 
      var $24=$a;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)+(1))|0);
      HEAP32[(($25)>>2)]=$27;
      var $28=$a;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+((($26)*(12))&-1))|0);
      var $32=$31;
      var $33=$elem;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      var $34=$1;
      var $35=$a;
      var $36=$35;
      _mrb_write_barrier($34, $36);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_expand_capa($mrb, $a, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $capa;
      var $expanded_ptr;
      $1=$mrb;
      $2=$a;
      $3=$len;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      $capa=$7;
      var $8=$3;
      var $9=(($8)|(0)) > 357913941;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_get($12, ((96392)|0));
      _mrb_raise($11, $13, ((98564)|0));
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $16=$capa;
      var $17=$3;
      var $18=(($16)|(0)) < (($17)|(0));
      if ($18) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $20=$capa;
      var $21=(($20)|(0))==0;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $capa=4;
      label = 8; break;
    case 7: 
      var $24=$capa;
      var $25=($24<<1);
      $capa=$25;
      label = 8; break;
    case 8: 
      label = 4; break;
    case 9: 
      var $28=$capa;
      var $29=(($28)|(0)) > 357913941;
      if ($29) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $capa=357913941;
      label = 11; break;
    case 11: 
      var $32=$capa;
      var $33=$2;
      var $34=(($33+16)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($32)|(0)) > (($36)|(0));
      if ($37) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $39=$1;
      var $40=$2;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=$capa;
      var $45=((($44)*(12))&-1);
      var $46=_mrb_realloc($39, $43, $45);
      var $47=$46;
      $expanded_ptr=$47;
      var $48=$expanded_ptr;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $51=$1;
      var $52=$1;
      var $53=_mrb_class_get($52, ((98300)|0));
      _mrb_raise($51, $53, ((98052)|0));
      label = 14; break;
    case 14: 
      var $55=$capa;
      var $56=$2;
      var $57=(($56+16)|0);
      var $58=$57;
      HEAP32[(($58)>>2)]=$55;
      var $59=$expanded_ptr;
      var $60=$2;
      var $61=(($60+20)|0);
      HEAP32[(($61)>>2)]=$59;
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_push_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $len=(__stackBase__)+(4);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((97568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      label = 2; break;
    case 2: 
      var $5=HEAP32[(($len)>>2)];
      var $6=((($5)-(1))|0);
      HEAP32[(($len)>>2)]=$6;
      var $7=(($5)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$1;
      var $10=HEAP32[(($argv)>>2)];
      var $11=(($10+12)|0);
      HEAP32[(($argv)>>2)]=$11;
      _mrb_ary_push($9, $self, $10);
      label = 2; break;
    case 4: 
      var $13=$agg_result;
      var $14=$self;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_pop($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      $1=$mrb;
      var $2=(($ary)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$a;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value632($agg_result);
      label = 4; break;
    case 3: 
      var $12=$a;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($13)>>2)]=$15;
      var $16=$a;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+((($15)*(12))&-1))|0);
      var $20=$agg_result;
      var $21=$19;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_shift($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $val=__stackBase__;
      var $ptr;
      var $size;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$a;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value632($agg_result);
      label = 13; break;
    case 3: 
      var $12=$a;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 11;
      var $16=$15 & 2097151;
      var $17=$16 & 256;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 4; break; } else { label = 6; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $21=$a;
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=$val;
      var $26=$24;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$a;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+12)|0);
      HEAP32[(($28)>>2)]=$30;
      var $31=$a;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      HEAP32[(($32)>>2)]=$34;
      var $35=$agg_result;
      var $36=$val;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      label = 13; break;
    case 6: 
      var $38=$a;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0)) > 10;
      if ($41) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $43=$1;
      var $44=$a;
      _ary_make_shared($43, $44);
      label = 5; break;
    case 8: 
      var $46=$a;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      $ptr=$48;
      var $49=$a;
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      $size=$51;
      var $52=$ptr;
      var $53=$val;
      var $54=$52;
      assert(12 % 1 === 0);HEAP32[(($53)>>2)]=HEAP32[(($54)>>2)];HEAP32[((($53)+(4))>>2)]=HEAP32[((($54)+(4))>>2)];HEAP32[((($53)+(8))>>2)]=HEAP32[((($54)+(8))>>2)];
      label = 9; break;
    case 9: 
      var $56=$size;
      var $57=((($56)-(1))|0);
      $size=$57;
      var $58=(($57)|(0))!=0;
      if ($58) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $60=$ptr;
      var $61=$ptr;
      var $62=(($61+12)|0);
      var $63=$60;
      var $64=$62;
      assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
      var $65=$ptr;
      var $66=(($65+12)|0);
      $ptr=$66;
      label = 9; break;
    case 11: 
      var $68=$a;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)-(1))|0);
      HEAP32[(($69)>>2)]=$71;
      label = 12; break;
    case 12: 
      var $73=$agg_result;
      var $74=$val;
      assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_make_shared($mrb, $a) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $shared;
      $1=$mrb;
      $2=$a;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 11;
      var $7=$6 & 2097151;
      var $8=$7 & 256;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 6; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=_mrb_malloc($11, 12);
      var $13=$12;
      $shared=$13;
      var $14=$shared;
      var $15=(($14)|0);
      HEAP32[(($15)>>2)]=1;
      var $16=$2;
      var $17=(($16+16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$2;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($19)|(0)) > (($22)|(0));
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$1;
      var $26=$2;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=$2;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)*(12))&-1);
      var $34=((($33)+(1))|0);
      var $35=_mrb_realloc($25, $29, $34);
      var $36=$35;
      var $37=$shared;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=(($39+20)|0);
      HEAP32[(($40)>>2)]=$36;
      label = 5; break;
    case 4: 
      var $42=$2;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$shared;
      var $46=(($45+4)|0);
      HEAP32[(($46)>>2)]=$44;
      label = 5; break;
    case 5: 
      var $48=$2;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$shared;
      var $52=(($51+8)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$shared;
      var $54=$2;
      var $55=(($54+16)|0);
      var $56=$55;
      HEAP32[(($56)>>2)]=$53;
      var $57=$2;
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 >>> 11;
      var $61=$60 & 2097151;
      var $62=$61 | 256;
      var $63=$62 & 2097151;
      var $64=$57;
      var $65=$63 & 2097151;
      var $66=$65 << 11;
      var $67=HEAP32[(($64)>>2)];
      var $68=$67 & 2047;
      var $69=$68 | $66;
      HEAP32[(($64)>>2)]=$69;
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_unshift($agg_result, $mrb, $self, $item) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $item; $item = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($item)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($item)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($item)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$a;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 11;
      var $10=$9 & 2097151;
      var $11=$10 & 256;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $14=$a;
      var $15=(($14+16)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==1;
      if ($20) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $22=$a;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$a;
      var $26=(($25+16)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$24;
      var $32=$30;
      var $33=((($31)-($32))|0);
      var $34=((((($33)|(0)))/(12))&-1);
      var $35=(($34)|(0)) >= 1;
      if ($35) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $37=$a;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(12))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=$a;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0);
      var $45=$44;
      var $46=$item;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      label = 8; break;
    case 5: 
      var $48=$1;
      var $49=$a;
      _ary_modify($48, $49);
      var $50=$a;
      var $51=(($50+16)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$a;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)+(1))|0);
      var $58=(($53)|(0)) < (($57)|(0));
      if ($58) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $60=$1;
      var $61=$a;
      var $62=$a;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)+(1))|0);
      _ary_expand_capa($60, $61, $65);
      label = 7; break;
    case 7: 
      var $67=$a;
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+12)|0);
      var $71=$a;
      var $72=(($71+20)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$a;
      var $75=(($74+12)|0);
      var $76=HEAP32[(($75)>>2)];
      _value_move640($70, $73, $76);
      var $77=$a;
      var $78=(($77+20)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|0);
      var $81=$80;
      var $82=$item;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $84=$a;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)+(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=$1;
      var $89=$a;
      var $90=$89;
      _mrb_write_barrier($88, $90);
      var $91=$agg_result;
      var $92=$self;
      assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _value_move640($s1, $s2, $n) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$s1;
      $2=$s2;
      $3=$n;
      var $4=$1;
      var $5=$2;
      var $6=(($4)>>>(0)) > (($5)>>>(0));
      if ($6) { label = 2; break; } else { label = 7; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      var $10=$3;
      var $11=(($9+((($10)*(12))&-1))|0);
      var $12=(($8)>>>(0)) < (($11)>>>(0));
      if ($12) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $14=$3;
      var $15=$1;
      var $16=(($15+((($14)*(12))&-1))|0);
      $1=$16;
      var $17=$3;
      var $18=$2;
      var $19=(($18+((($17)*(12))&-1))|0);
      $2=$19;
      label = 4; break;
    case 4: 
      var $21=$3;
      var $22=((($21)-(1))|0);
      $3=$22;
      var $23=(($21)>>>(0)) > 0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$1;
      var $26=((($25)-(12))|0);
      $1=$26;
      var $27=$2;
      var $28=((($27)-(12))|0);
      $2=$28;
      var $29=$26;
      var $30=$28;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 4; break;
    case 6: 
      label = 14; break;
    case 7: 
      var $33=$1;
      var $34=$2;
      var $35=(($33)|(0))!=(($34)|(0));
      if ($35) { label = 8; break; } else { label = 12; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $38=$3;
      var $39=((($38)-(1))|0);
      $3=$39;
      var $40=(($38)>>>(0)) > 0;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=$1;
      var $43=(($42+12)|0);
      $1=$43;
      var $44=$2;
      var $45=(($44+12)|0);
      $2=$45;
      var $46=$42;
      var $47=$44;
      assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
      label = 9; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_unshift_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $vals=__stackBase__;
      var $len=(__stackBase__)+(4);
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((97568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $8=$a;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $12=$11 & 2097151;
      var $13=$12 & 256;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $16=$a;
      var $17=(($16+16)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==1;
      if ($22) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $24=$a;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$a;
      var $28=(($27+16)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$26;
      var $34=$32;
      var $35=((($33)-($34))|0);
      var $36=((((($35)|(0)))/(12))&-1);
      var $37=HEAP32[(($len)>>2)];
      var $38=(($36)|(0)) >= (($37)|(0));
      if ($38) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $40=HEAP32[(($len)>>2)];
      var $41=$a;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(((-$40))|0);
      var $45=(($43+((($44)*(12))&-1))|0);
      HEAP32[(($42)>>2)]=$45;
      label = 10; break;
    case 5: 
      var $47=$1;
      var $48=$a;
      _ary_modify($47, $48);
      var $49=HEAP32[(($len)>>2)];
      var $50=(($49)|(0))==0;
      if ($50) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $52=$agg_result;
      var $53=$self;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      label = 11; break;
    case 7: 
      var $55=$a;
      var $56=(($55+16)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$a;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=HEAP32[(($len)>>2)];
      var $63=((($61)+($62))|0);
      var $64=(($58)|(0)) < (($63)|(0));
      if ($64) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $66=$1;
      var $67=$a;
      var $68=$a;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=HEAP32[(($len)>>2)];
      var $72=((($70)+($71))|0);
      _ary_expand_capa($66, $67, $72);
      label = 9; break;
    case 9: 
      var $74=$a;
      var $75=(($74+20)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=HEAP32[(($len)>>2)];
      var $78=(($76+((($77)*(12))&-1))|0);
      var $79=$a;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$a;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      _value_move640($78, $81, $84);
      label = 10; break;
    case 10: 
      var $86=$a;
      var $87=(($86+20)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=HEAP32[(($vals)>>2)];
      var $90=HEAP32[(($len)>>2)];
      _array_copy($88, $89, $90);
      var $91=HEAP32[(($len)>>2)];
      var $92=$a;
      var $93=(($92+12)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=((($94)+($91))|0);
      HEAP32[(($93)>>2)]=$95;
      var $96=$1;
      var $97=$a;
      var $98=$97;
      _mrb_write_barrier($96, $98);
      var $99=$agg_result;
      var $100=$self;
      assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($100)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($100)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($100)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_ref($agg_result, $mrb, $ary, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a;
      $1=$mrb;
      $2=$n;
      var $3=(($ary)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $a=$6;
      var $7=$2;
      var $8=(($7)|(0)) < 0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$a;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$2;
      var $14=((($13)+($12))|0);
      $2=$14;
      label = 3; break;
    case 3: 
      var $16=$2;
      var $17=(($16)|(0)) < 0;
      if ($17) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $19=$a;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$2;
      var $23=(($21)|(0)) <= (($22)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value632($agg_result);
      label = 7; break;
    case 6: 
      var $26=$2;
      var $27=$a;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+((($26)*(12))&-1))|0);
      var $31=$agg_result;
      var $32=$30;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_set($mrb, $ary, $n, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $a;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$n;
      var $4=(($ary)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $a=$7;
      var $8=$1;
      var $9=$a;
      _ary_modify($8, $9);
      var $10=$2;
      var $11=(($10)|(0)) < 0;
      if ($11) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $13=$a;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=((($16)+($15))|0);
      $2=$17;
      var $18=$2;
      var $19=(($18)|(0)) < 0;
      if ($19) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $21=$1;
      var $22=$1;
      var $23=_mrb_class_get($22, ((94388)|0));
      var $24=$2;
      var $25=$a;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($24)-($27))|0);
      _mrb_fixnum_value633($3, $28);
      _mrb_raisef($21, $23, ((93488)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $31=$a;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$2;
      var $35=(($33)|(0)) <= (($34)|(0));
      if ($35) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $37=$a;
      var $38=(($37+16)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=$2;
      var $42=(($40)|(0)) <= (($41)|(0));
      if ($42) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $44=$1;
      var $45=$a;
      var $46=$2;
      var $47=((($46)+(1))|0);
      _ary_expand_capa($44, $45, $47);
      label = 8; break;
    case 8: 
      var $49=$a;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$a;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($51+((($54)*(12))&-1))|0);
      var $56=$2;
      var $57=((($56)+(1))|0);
      var $58=$a;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($57)-($60))|0);
      _ary_fill_with_nil($55, $61);
      var $62=$2;
      var $63=((($62)+(1))|0);
      var $64=$a;
      var $65=(($64+12)|0);
      HEAP32[(($65)>>2)]=$63;
      label = 9; break;
    case 9: 
      var $67=$2;
      var $68=$a;
      var $69=(($68+20)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+((($67)*(12))&-1))|0);
      var $72=$71;
      var $73=$val;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      var $74=$1;
      var $75=$a;
      var $76=$75;
      _mrb_write_barrier($74, $76);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_fill_with_nil($ptr, $size) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nil=__stackBase__;
      $1=$ptr;
      $2=$size;
      _mrb_nil_value632($nil);
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=((($4)-(1))|0);
      $2=$5;
      var $6=(($4)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+12)|0);
      $1=$9;
      var $10=$8;
      var $11=$nil;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      label = 2; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_splice($agg_result, $mrb, $ary, $head, $len, $rpl) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $rpl; $rpl = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($rpl)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($rpl)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($rpl)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $a;
      var $tail;
      var $size;
      var $argv;
      var $i;
      var $argc;
      $1=$mrb;
      $2=$head;
      $3=$len;
      var $4=(($ary)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $a=$7;
      var $8=$1;
      var $9=$a;
      _ary_modify($8, $9);
      var $10=$2;
      var $11=(($10)|(0)) < 0;
      if ($11) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $13=$a;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$2;
      var $17=((($16)+($15))|0);
      $2=$17;
      var $18=$2;
      var $19=(($18)|(0)) < 0;
      if ($19) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $21=$1;
      var $22=$1;
      var $23=_mrb_class_get($22, ((94388)|0));
      _mrb_raise($21, $23, ((113584)|0));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $26=$a;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$3;
      var $30=(($28)|(0)) < (($29)|(0));
      if ($30) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $32=$a;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=$2;
      var $36=$3;
      var $37=((($35)+($36))|0);
      var $38=(($34)|(0)) < (($37)|(0));
      if ($38) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $40=$a;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$2;
      var $44=((($42)-($43))|0);
      $3=$44;
      label = 8; break;
    case 8: 
      var $46=$2;
      var $47=$3;
      var $48=((($46)+($47))|0);
      $tail=$48;
      var $49=(($rpl+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|(0))==14;
      if ($51) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $53=(($rpl)|0);
      var $54=$53;
      var $55=HEAP32[(($54)>>2)];
      var $56=$55;
      var $57=(($56+12)|0);
      var $58=HEAP32[(($57)>>2)];
      $argc=$58;
      var $59=(($rpl)|0);
      var $60=$59;
      var $61=HEAP32[(($60)>>2)];
      var $62=$61;
      var $63=(($62+20)|0);
      var $64=HEAP32[(($63)>>2)];
      $argv=$64;
      label = 11; break;
    case 10: 
      $argc=1;
      $argv=$rpl;
      label = 11; break;
    case 11: 
      var $67=$2;
      var $68=$argc;
      var $69=((($67)+($68))|0);
      $size=$69;
      var $70=$tail;
      var $71=$a;
      var $72=(($71+12)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70)|(0)) < (($73)|(0));
      if ($74) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $76=$a;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$tail;
      var $80=((($78)-($79))|0);
      var $81=$size;
      var $82=((($81)+($80))|0);
      $size=$82;
      label = 13; break;
    case 13: 
      var $84=$size;
      var $85=$a;
      var $86=(($85+16)|0);
      var $87=$86;
      var $88=HEAP32[(($87)>>2)];
      var $89=(($84)|(0)) > (($88)|(0));
      if ($89) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $91=$1;
      var $92=$a;
      var $93=$size;
      _ary_expand_capa($91, $92, $93);
      label = 15; break;
    case 15: 
      var $95=$2;
      var $96=$a;
      var $97=(($96+12)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($95)|(0)) > (($98)|(0));
      if ($99) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $101=$a;
      var $102=(($101+20)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$a;
      var $105=(($104+12)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($103+((($106)*(12))&-1))|0);
      var $108=$2;
      var $109=$a;
      var $110=(($109+12)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($108)-($111))|0);
      _ary_fill_with_nil($107, $112);
      label = 20; break;
    case 17: 
      var $114=$2;
      var $115=$a;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($114)|(0)) < (($117)|(0));
      if ($118) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $120=$a;
      var $121=(($120+20)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=$2;
      var $124=(($122+((($123)*(12))&-1))|0);
      var $125=$argc;
      var $126=(($124+((($125)*(12))&-1))|0);
      var $127=$a;
      var $128=(($127+20)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$tail;
      var $131=(($129+((($130)*(12))&-1))|0);
      var $132=$a;
      var $133=(($132+12)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$tail;
      var $136=((($134)-($135))|0);
      _value_move640($126, $131, $136);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $i=0;
      label = 21; break;
    case 21: 
      var $140=$i;
      var $141=$argc;
      var $142=(($140)|(0)) < (($141)|(0));
      if ($142) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $144=$a;
      var $145=(($144+20)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$2;
      var $148=(($146+((($147)*(12))&-1))|0);
      var $149=$i;
      var $150=(($148+((($149)*(12))&-1))|0);
      var $151=$argv;
      var $152=$i;
      var $153=(($151+((($152)*(12))&-1))|0);
      var $154=$150;
      var $155=$153;
      assert(12 % 1 === 0);HEAP32[(($154)>>2)]=HEAP32[(($155)>>2)];HEAP32[((($154)+(4))>>2)]=HEAP32[((($155)+(4))>>2)];HEAP32[((($154)+(8))>>2)]=HEAP32[((($155)+(8))>>2)];
      label = 23; break;
    case 23: 
      var $157=$i;
      var $158=((($157)+(1))|0);
      $i=$158;
      label = 21; break;
    case 24: 
      var $160=$size;
      var $161=$a;
      var $162=(($161+12)|0);
      HEAP32[(($162)>>2)]=$160;
      var $163=$agg_result;
      var $164=$ary;
      assert(12 % 1 === 0);HEAP32[(($163)>>2)]=HEAP32[(($164)>>2)];HEAP32[((($163)+(4))>>2)]=HEAP32[((($164)+(4))>>2)];HEAP32[((($163)+(8))>>2)]=HEAP32[((($164)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_decref($mrb, $shared) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$shared;
      var $3=$2;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=((($5)-(1))|0);
      HEAP32[(($4)>>2)]=$6;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      _mrb_free($12, $16);
      var $17=$1;
      var $18=$2;
      var $19=$18;
      _mrb_free($17, $19);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_aget($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $index=__stackBase__;
      var $len;
      var $argv=(__stackBase__)+(4);
      var $size=(__stackBase__)+(8);
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((112884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$index,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$size,tempInt));
      var $8=HEAP32[(($size)>>2)];
      if ((($8)|(0))==0) {
        label = 2; break;
      }
      else if ((($8)|(0))==1) {
        label = 3; break;
      }
      else {
      label = 17; break;
      }
    case 2: 
      var $10=$1;
      var $11=HEAP32[(($index)>>2)];
      _mrb_ary_ref($agg_result, $10, $self, $11);
      label = 19; break;
    case 3: 
      var $13=HEAP32[(($argv)>>2)];
      var $14=(($13)|0);
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=3;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$1;
      var $21=_mrb_class_get($20, ((112104)|0));
      _mrb_raise($19, $21, ((111532)|0));
      label = 5; break;
    case 5: 
      var $23=HEAP32[(($index)>>2)];
      var $24=(($23)|(0)) < 0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$a;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=HEAP32[(($index)>>2)];
      var $30=((($29)+($28))|0);
      HEAP32[(($index)>>2)]=$30;
      label = 7; break;
    case 7: 
      var $32=HEAP32[(($index)>>2)];
      var $33=(($32)|(0)) < 0;
      if ($33) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $35=$a;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=HEAP32[(($index)>>2)];
      var $39=(($37)|(0)) < (($38)|(0));
      if ($39) { label = 9; break; } else { label = 10; break; }
    case 9: 
      _mrb_nil_value632($agg_result);
      label = 19; break;
    case 10: 
      var $42=HEAP32[(($argv)>>2)];
      var $43=(($42)|0);
      var $44=(($43)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      $len=$46;
      var $47=$len;
      var $48=(($47)|(0)) < 0;
      if ($48) { label = 11; break; } else { label = 12; break; }
    case 11: 
      _mrb_nil_value632($agg_result);
      label = 19; break;
    case 12: 
      var $51=$a;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=HEAP32[(($index)>>2)];
      var $55=(($53)|(0))==(($54)|(0));
      if ($55) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $57=$1;
      _mrb_ary_new($agg_result, $57);
      label = 19; break;
    case 14: 
      var $59=$len;
      var $60=$a;
      var $61=(($60+12)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=HEAP32[(($index)>>2)];
      var $64=((($62)-($63))|0);
      var $65=(($59)|(0)) > (($64)|(0));
      if ($65) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $67=$a;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=HEAP32[(($index)>>2)];
      var $71=((($69)-($70))|0);
      $len=$71;
      label = 16; break;
    case 16: 
      var $73=$1;
      var $74=$a;
      var $75=HEAP32[(($index)>>2)];
      var $76=$len;
      _ary_subseq($agg_result, $73, $74, $75, $76);
      label = 19; break;
    case 17: 
      var $78=$1;
      var $79=$1;
      var $80=_mrb_class_get($79, ((96392)|0));
      _mrb_raise($78, $80, ((111080)|0));
      label = 18; break;
    case 18: 
      _mrb_nil_value632($agg_result);
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_subseq($agg_result, $mrb, $a, $beg, $len) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $b;
  $1=$mrb;
  $2=$a;
  $3=$beg;
  $4=$len;
  var $5=$1;
  var $6=$2;
  _ary_make_shared($5, $6);
  var $7=$1;
  var $8=$1;
  var $9=(($8+64)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=_mrb_obj_alloc($7, 14, $10);
  var $12=$11;
  $b=$12;
  var $13=$2;
  var $14=(($13+20)|0);
  var $15=HEAP32[(($14)>>2)];
  var $16=$3;
  var $17=(($15+((($16)*(12))&-1))|0);
  var $18=$b;
  var $19=(($18+20)|0);
  HEAP32[(($19)>>2)]=$17;
  var $20=$4;
  var $21=$b;
  var $22=(($21+12)|0);
  HEAP32[(($22)>>2)]=$20;
  var $23=$2;
  var $24=(($23+16)|0);
  var $25=$24;
  var $26=HEAP32[(($25)>>2)];
  var $27=$b;
  var $28=(($27+16)|0);
  var $29=$28;
  HEAP32[(($29)>>2)]=$26;
  var $30=$b;
  var $31=(($30+16)|0);
  var $32=$31;
  var $33=HEAP32[(($32)>>2)];
  var $34=(($33)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=((($35)+(1))|0);
  HEAP32[(($34)>>2)]=$36;
  var $37=$b;
  var $38=$37;
  var $39=HEAP32[(($38)>>2)];
  var $40=$39 >>> 11;
  var $41=$40 & 2097151;
  var $42=$41 | 256;
  var $43=$42 & 2097151;
  var $44=$37;
  var $45=$43 & 2097151;
  var $46=$45 << 11;
  var $47=HEAP32[(($44)>>2)];
  var $48=$47 & 2047;
  var $49=$48 | $46;
  HEAP32[(($44)>>2)]=$49;
  var $50=$b;
  var $51=$50;
  _mrb_obj_value625($agg_result, $51);
  return;
}
function _mrb_ary_aset($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $2=(__stackBase__)+(8);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((97568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $5=HEAP32[(($argc)>>2)];
      if ((($5)|(0))==2) {
        label = 2; break;
      }
      else if ((($5)|(0))==3) {
        label = 5; break;
      }
      else {
      label = 6; break;
      }
    case 2: 
      var $7=HEAP32[(($argv)>>2)];
      var $8=(($7)|0);
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==3;
      if ($11) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((112104)|0));
      _mrb_raise($13, $15, ((110588)|0));
      label = 4; break;
    case 4: 
      var $17=$1;
      var $18=HEAP32[(($argv)>>2)];
      var $19=(($18)|0);
      var $20=(($19)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=HEAP32[(($argv)>>2)];
      var $24=(($23+12)|0);
      _mrb_ary_set($17, $self, $22, $24);
      var $25=HEAP32[(($argv)>>2)];
      var $26=(($25+12)|0);
      var $27=$agg_result;
      var $28=$26;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 7; break;
    case 5: 
      var $30=$1;
      var $31=HEAP32[(($argv)>>2)];
      var $32=(($31)|0);
      var $33=(($32)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=HEAP32[(($argv)>>2)];
      var $37=(($36+12)|0);
      var $38=(($37)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=HEAP32[(($argv)>>2)];
      var $42=(($41+24)|0);
      _mrb_ary_splice($2, $30, $self, $35, $40, $42);
      var $43=HEAP32[(($argv)>>2)];
      var $44=(($43+24)|0);
      var $45=$agg_result;
      var $46=$44;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      label = 7; break;
    case 6: 
      var $48=$1;
      var $49=$1;
      var $50=_mrb_class_get($49, ((96392)|0));
      _mrb_raise($48, $50, ((111080)|0));
      _mrb_nil_value632($agg_result);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_delete_at($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $index=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $ptr;
      var $len;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((97844)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$index,tempInt));
      var $8=HEAP32[(($index)>>2)];
      var $9=(($8)|(0)) < 0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$a;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=HEAP32[(($index)>>2)];
      var $15=((($14)+($13))|0);
      HEAP32[(($index)>>2)]=$15;
      label = 3; break;
    case 3: 
      var $17=HEAP32[(($index)>>2)];
      var $18=(($17)|(0)) < 0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=$a;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=HEAP32[(($index)>>2)];
      var $24=(($22)|(0)) <= (($23)|(0));
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value632($agg_result);
      label = 10; break;
    case 6: 
      var $27=$1;
      var $28=$a;
      _ary_modify($27, $28);
      var $29=HEAP32[(($index)>>2)];
      var $30=$a;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+((($29)*(12))&-1))|0);
      var $34=$val;
      var $35=$33;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      var $36=$a;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=HEAP32[(($index)>>2)];
      var $40=(($38+((($39)*(12))&-1))|0);
      $ptr=$40;
      var $41=$a;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=HEAP32[(($index)>>2)];
      var $45=((($43)-($44))|0);
      $len=$45;
      label = 7; break;
    case 7: 
      var $47=$len;
      var $48=((($47)-(1))|0);
      $len=$48;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $51=$ptr;
      var $52=$ptr;
      var $53=(($52+12)|0);
      var $54=$51;
      var $55=$53;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      var $56=$ptr;
      var $57=(($56+12)|0);
      $ptr=$57;
      label = 7; break;
    case 9: 
      var $59=$a;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=((($61)-(1))|0);
      HEAP32[(($60)>>2)]=$62;
      var $63=$1;
      var $64=$a;
      _ary_shrink_capa($63, $64);
      var $65=$agg_result;
      var $66=$val;
      assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _ary_shrink_capa($mrb, $a) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $capa;
      $1=$mrb;
      $2=$a;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      $capa=$6;
      var $7=$capa;
      var $8=(($7)|(0)) < 8;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 13; break;
    case 3: 
      var $11=$capa;
      var $12=$2;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)*(5))&-1);
      var $16=(($11)|(0)) <= (($15)|(0));
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 13; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $20=$capa;
      var $21=((((($20)|(0)))/(2))&-1);
      $capa=$21;
      var $22=$capa;
      var $23=(($22)|(0)) < 4;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $capa=4;
      label = 10; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $27=$capa;
      var $28=$2;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($30)*(5))&-1);
      var $32=(($27)|(0)) > (($31)|(0));
      if ($32) { label = 6; break; } else { label = 10; break; }
    case 10: 
      var $34=$capa;
      var $35=$2;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|(0)) > (($37)|(0));
      if ($38) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $40=$capa;
      var $41=$2;
      var $42=(($41+16)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=(($40)|(0)) < (($44)|(0));
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $47=$capa;
      var $48=$2;
      var $49=(($48+16)|0);
      var $50=$49;
      HEAP32[(($50)>>2)]=$47;
      var $51=$1;
      var $52=$2;
      var $53=(($52+20)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=$capa;
      var $57=((($56)*(12))&-1);
      var $58=_mrb_realloc($51, $55, $57);
      var $59=$58;
      var $60=$2;
      var $61=(($60+20)|0);
      HEAP32[(($61)>>2)]=$59;
      label = 13; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_first($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $size=__stackBase__;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((110196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$size,tempInt));
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $10=$a;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0)) > 0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$a;
      var $16=(($15+20)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0);
      var $19=$agg_result;
      var $20=$18;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      label = 5; break;
    case 4: 
      _mrb_nil_value632($agg_result);
      label = 5; break;
    case 5: 
      label = 13; break;
    case 6: 
      var $24=HEAP32[(($size)>>2)];
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$1;
      var $28=$1;
      var $29=_mrb_class_get($28, ((96392)|0));
      _mrb_raise($27, $29, ((109812)|0));
      label = 8; break;
    case 8: 
      var $31=HEAP32[(($size)>>2)];
      var $32=$a;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)|(0)) > (($34)|(0));
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $37=$a;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      HEAP32[(($size)>>2)]=$39;
      label = 10; break;
    case 10: 
      var $41=$a;
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 >>> 11;
      var $45=$44 & 2097151;
      var $46=$45 & 256;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $49=$1;
      var $50=$a;
      var $51=HEAP32[(($size)>>2)];
      _ary_subseq($agg_result, $49, $50, 0, $51);
      label = 13; break;
    case 12: 
      var $53=$1;
      var $54=HEAP32[(($size)>>2)];
      var $55=$a;
      var $56=(($55+20)|0);
      var $57=HEAP32[(($56)>>2)];
      _mrb_ary_new_from_values($agg_result, $53, $54, $57);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_last($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $size;
      var $vals=__stackBase__;
      var $len=(__stackBase__)+(4);
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $a=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((97568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$vals,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $8=HEAP32[(($len)>>2)];
      var $9=(($8)|(0)) > 1;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_get($12, ((96392)|0));
      _mrb_raise($11, $13, ((111080)|0));
      label = 3; break;
    case 3: 
      var $15=HEAP32[(($len)>>2)];
      var $16=(($15)|(0))==0;
      if ($16) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $18=$a;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0)) > 0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$a;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      var $27=$a;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+((($26)*(12))&-1))|0);
      var $31=$agg_result;
      var $32=$30;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 7; break;
    case 6: 
      _mrb_nil_value632($agg_result);
      label = 7; break;
    case 7: 
      label = 16; break;
    case 8: 
      var $36=HEAP32[(($vals)>>2)];
      var $37=(($36)|0);
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      $size=$39;
      var $40=$size;
      var $41=(($40)|(0)) < 0;
      if ($41) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $43=$1;
      var $44=$1;
      var $45=_mrb_class_get($44, ((96392)|0));
      _mrb_raise($43, $45, ((109812)|0));
      label = 10; break;
    case 10: 
      var $47=$size;
      var $48=$a;
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($47)|(0)) > (($50)|(0));
      if ($51) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $53=$a;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      $size=$55;
      label = 12; break;
    case 12: 
      var $57=$a;
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 >>> 11;
      var $61=$60 & 2097151;
      var $62=$61 & 256;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $65=$size;
      var $66=(($65)|(0)) > 4;
      if ($66) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $68=$1;
      var $69=$a;
      var $70=$a;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$size;
      var $74=((($72)-($73))|0);
      var $75=$size;
      _ary_subseq($agg_result, $68, $69, $74, $75);
      label = 16; break;
    case 15: 
      var $77=$1;
      var $78=$size;
      var $79=$a;
      var $80=(($79+20)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$a;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($81+((($84)*(12))&-1))|0);
      var $86=$size;
      var $87=(((-$86))|0);
      var $88=(($85+((($87)*(12))&-1))|0);
      _mrb_ary_new_from_values($agg_result, $77, $78, $88);
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_index_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj=__stackBase__;
      var $i;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((106296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($self)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($5)|(0)) < (($11)|(0));
      if ($12) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $14=$1;
      var $15=$i;
      var $16=(($self)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+((($15)*(12))&-1))|0);
      var $23=_mrb_equal($14, $22, $obj);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=$i;
      _mrb_fixnum_value633($agg_result, $26);
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      label = 2; break;
    case 7: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_rindex_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj=__stackBase__;
      var $i;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((106296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $4=(($self)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=(($7+12)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=((($9)-(1))|0);
      $i=$10;
      label = 2; break;
    case 2: 
      var $12=$i;
      var $13=(($12)|(0)) >= 0;
      if ($13) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $15=$1;
      var $16=$i;
      var $17=(($self)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($16)*(12))&-1))|0);
      var $24=_mrb_equal($15, $23, $obj);
      var $25=(($24)|(0))!=0;
      if ($25) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $27=$i;
      _mrb_fixnum_value633($agg_result, $27);
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $30=$i;
      var $31=((($30)-(1))|0);
      $i=$31;
      label = 2; break;
    case 7: 
      _mrb_nil_value632($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_splat($agg_result, $mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($v+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==14;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $9=$1;
      _mrb_ary_new_from_values($agg_result, $9, 1, $v);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_clear($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $a=$5;
  var $6=$1;
  var $7=$a;
  _ary_modify($6, $7);
  var $8=$a;
  var $9=(($8+12)|0);
  HEAP32[(($9)>>2)]=0;
  var $10=$a;
  var $11=(($10+16)|0);
  var $12=$11;
  HEAP32[(($12)>>2)]=0;
  var $13=$1;
  var $14=$a;
  var $15=(($14+20)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=$16;
  _mrb_free($13, $17);
  var $18=$a;
  var $19=(($18+20)|0);
  HEAP32[(($19)>>2)]=0;
  var $20=$agg_result;
  var $21=$self;
  assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $a=$5;
  var $6=$a;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|(0))==0;
  var $10=(($9)&(1));
  var $11=(($10) & 255);
  _mrb_bool_value647($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value647($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_array_type($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_check_convert_type($agg_result, $2, $ary, 14, ((109332)|0), ((108788)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_entry($agg_result, $ary, $offset) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$offset;
      var $2=$1;
      var $3=(($2)|(0)) < 0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=(($ary)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=((($11)+($10))|0);
      $1=$12;
      label = 3; break;
    case 3: 
      var $14=$1;
      _ary_elt($agg_result, $ary, $14);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_join($agg_result, $mrb, $ary, $sep) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  var $3=(__stackBase__)+(12);
  $1=$mrb;
  var $4=$1;
  _mrb_obj_as_string($2, $4, $sep);
  var $5=$sep;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  var $8=$1;
  _mrb_ary_new($3, $8);
  _join_ary($agg_result, $7, $ary, $sep, $3);
  STACKTOP = __stackBase__;
  return;
}
function _join_ary($agg_result, $mrb, $ary, $sep, $list) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $sep; $sep = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($sep)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($sep)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($sep)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $result=__stackBase__;
      var $val=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $2=(__stackBase__)+(36);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(60);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(84);
      var $7=(__stackBase__)+(96);
      var $8=(__stackBase__)+(108);
      var $9=(__stackBase__)+(120);
      $1=$mrb;
      $i=0;
      label = 2; break;
    case 2: 
      var $11=$i;
      var $12=(($list)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($11)|(0)) < (($17)|(0));
      if ($18) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $20=$1;
      var $21=$i;
      var $22=(($list)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+((($21)*(12))&-1))|0);
      var $29=_mrb_obj_equal($20, $ary, $28);
      var $30=(($29)|(0))!=0;
      if ($30) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $32=$1;
      var $33=$1;
      var $34=_mrb_class_get($33, ((96392)|0));
      _mrb_raise($32, $34, ((98904)|0));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $37=$i;
      var $38=((($37)+(1))|0);
      $i=$38;
      label = 2; break;
    case 7: 
      var $40=$1;
      _mrb_ary_push($40, $list, $ary);
      var $41=$1;
      _mrb_str_buf_new($2, $41, 64);
      var $42=$result;
      var $43=$2;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      $i=0;
      label = 8; break;
    case 8: 
      var $45=$i;
      var $46=(($ary)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=(($49+12)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($45)|(0)) < (($51)|(0));
      if ($52) { label = 9; break; } else { label = 27; break; }
    case 9: 
      var $54=$i;
      var $55=(($54)|(0)) > 0;
      if ($55) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $57=(($sep+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|(0))==0;
      if ($59) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $61=(($sep)|0);
      var $62=$61;
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $66=$1;
      var $67=(($sep)|0);
      var $68=$67;
      var $69=HEAP32[(($68)>>2)];
      var $70=$69;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($sep)|0);
      var $74=$73;
      var $75=HEAP32[(($74)>>2)];
      var $76=$75;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      _mrb_str_buf_cat($3, $66, $result, $72, $78);
      label = 13; break;
    case 13: 
      var $80=$i;
      var $81=(($ary)|0);
      var $82=$81;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      var $85=(($84+20)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($80)*(12))&-1))|0);
      var $88=$val;
      var $89=$87;
      assert(12 % 1 === 0);HEAP32[(($88)>>2)]=HEAP32[(($89)>>2)];HEAP32[((($88)+(4))>>2)]=HEAP32[((($89)+(4))>>2)];HEAP32[((($88)+(8))>>2)]=HEAP32[((($89)+(8))>>2)];
      var $90=(($val+8)|0);
      var $91=HEAP32[(($90)>>2)];
      if ((($91)|(0))==14) {
        label = 14; break;
      }
      else if ((($91)|(0))==16) {
        label = 16; break;
      }
      else {
      label = 18; break;
      }
    case 14: 
      label = 15; break;
    case 15: 
      var $94=$1;
      _join_ary($4, $94, $val, $sep, $list);
      var $95=$val;
      var $96=$4;
      assert(12 % 1 === 0);HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($95)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $99=$1;
      var $100=(($val)|0);
      var $101=$100;
      var $102=HEAP32[(($101)>>2)];
      var $103=$102;
      var $104=(($103+20)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($val)|0);
      var $107=$106;
      var $108=HEAP32[(($107)>>2)];
      var $109=$108;
      var $110=(($109+12)|0);
      var $111=HEAP32[(($110)>>2)];
      _mrb_str_buf_cat($5, $99, $result, $105, $111);
      label = 25; break;
    case 18: 
      var $113=$1;
      _mrb_check_string_type($6, $113, $val);
      var $114=$tmp;
      var $115=$6;
      assert(12 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];HEAP32[((($114)+(8))>>2)]=HEAP32[((($115)+(8))>>2)];
      var $116=(($tmp+8)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|(0))==0;
      if ($118) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $120=(($tmp)|0);
      var $121=$120;
      var $122=HEAP32[(($121)>>2)];
      var $123=(($122)|(0))!=0;
      if ($123) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $125=$val;
      var $126=$tmp;
      assert(12 % 1 === 0);HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($126)+(4))>>2)];HEAP32[((($125)+(8))>>2)]=HEAP32[((($126)+(8))>>2)];
      label = 17; break;
    case 21: 
      var $128=$1;
      _mrb_check_convert_type($7, $128, $val, 14, ((109332)|0), ((108788)|0));
      var $129=$tmp;
      var $130=$7;
      assert(12 % 1 === 0);HEAP32[(($129)>>2)]=HEAP32[(($130)>>2)];HEAP32[((($129)+(4))>>2)]=HEAP32[((($130)+(4))>>2)];HEAP32[((($129)+(8))>>2)]=HEAP32[((($130)+(8))>>2)];
      var $131=(($tmp+8)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=(($132)|(0))==0;
      if ($133) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $135=(($tmp)|0);
      var $136=$135;
      var $137=HEAP32[(($136)>>2)];
      var $138=(($137)|(0))!=0;
      if ($138) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $140=$val;
      var $141=$tmp;
      assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
      label = 15; break;
    case 24: 
      var $143=$1;
      _mrb_obj_as_string($8, $143, $val);
      var $144=$val;
      var $145=$8;
      assert(12 % 1 === 0);HEAP32[(($144)>>2)]=HEAP32[(($145)>>2)];HEAP32[((($144)+(4))>>2)]=HEAP32[((($145)+(4))>>2)];HEAP32[((($144)+(8))>>2)]=HEAP32[((($145)+(8))>>2)];
      label = 17; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $148=$i;
      var $149=((($148)+(1))|0);
      $i=$149;
      label = 8; break;
    case 27: 
      var $151=$1;
      _mrb_ary_pop($9, $151, $list);
      var $152=$agg_result;
      var $153=$result;
      assert(12 % 1 === 0);HEAP32[(($152)>>2)]=HEAP32[(($153)>>2)];HEAP32[((($152)+(4))>>2)]=HEAP32[((($153)+(4))>>2)];HEAP32[((($152)+(8))>>2)]=HEAP32[((($153)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_array($mrb) {
  var label = 0;
  var $1;
  var $a;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((109332)|0), $5);
  var $7=$1;
  var $8=(($7+64)|0);
  HEAP32[(($8)>>2)]=$6;
  $a=$6;
  var $9=$a;
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11 >>> 11;
  var $13=$12 & 2097151;
  var $14=$13 & -256;
  var $15=$14 | 14;
  var $16=$a;
  var $17=$15 & 2097151;
  var $18=$16;
  var $19=$17 & 2097151;
  var $20=$19 << 11;
  var $21=HEAP32[(($18)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | $20;
  HEAP32[(($18)>>2)]=$23;
  var $24=$1;
  var $25=$a;
  var $26=$1;
  var $27=_mrb_class_get($26, ((108396)|0));
  _mrb_include_module($24, $25, $27);
  var $28=$1;
  var $29=$a;
  _mrb_define_class_method($28, $29, ((107904)|0), 536, 4096);
  var $30=$1;
  var $31=$a;
  _mrb_define_method($30, $31, ((97568)|0), 70, 262144);
  var $32=$1;
  var $33=$a;
  _mrb_define_method($32, $33, ((107512)|0), 358, 262144);
  var $34=$1;
  var $35=$a;
  _mrb_define_method($34, $35, ((107240)|0), 350, 262144);
  var $36=$1;
  var $37=$a;
  _mrb_define_method($36, $37, ((107904)|0), 530, 4096);
  var $38=$1;
  var $39=$a;
  _mrb_define_method($38, $39, ((106716)|0), 686, 4096);
  var $40=$1;
  var $41=$a;
  _mrb_define_method($40, $41, ((106340)|0), 602, 0);
  var $42=$1;
  var $43=$a;
  _mrb_define_method($42, $43, ((105980)|0), 448, 262144);
  var $44=$1;
  var $45=$a;
  _mrb_define_method($44, $45, ((105684)|0), 100, 262144);
  var $46=$1;
  var $47=$a;
  _mrb_define_method($46, $47, ((105364)|0), 80, 0);
  var $48=$1;
  var $49=$a;
  _mrb_define_method($48, $49, ((105096)|0), 716, 8192);
  var $50=$1;
  var $51=$a;
  _mrb_define_method($50, $51, ((104768)|0), 506, 262144);
  var $52=$1;
  var $53=$a;
  _mrb_define_method($52, $53, ((104324)|0), 518, 262144);
  var $54=$1;
  var $55=$a;
  _mrb_define_method($54, $55, ((103900)|0), 272, 4096);
  var $56=$1;
  var $57=$a;
  _mrb_define_method($56, $57, ((103720)|0), 668, 4096);
  var $58=$1;
  var $59=$a;
  _mrb_define_method($58, $59, ((103496)|0), 202, 0);
  var $60=$1;
  var $61=$a;
  _mrb_define_method($60, $61, ((103284)|0), 482, 0);
  var $62=$1;
  var $63=$a;
  _mrb_define_method($62, $63, ((102976)|0), 350, 4096);
  var $64=$1;
  var $65=$a;
  _mrb_define_method($64, $65, ((102804)|0), 518, 262144);
  var $66=$1;
  var $67=$a;
  _mrb_define_method($66, $67, ((102568)|0), 450, 0);
  var $68=$1;
  var $69=$a;
  _mrb_define_method($68, $69, ((102204)|0), 52, 0);
  var $70=$1;
  var $71=$a;
  _mrb_define_method($70, $71, ((101968)|0), 160, 262144);
  var $72=$1;
  var $73=$a;
  _mrb_define_method($72, $73, ((101588)|0), 438, 0);
  var $74=$1;
  var $75=$a;
  _mrb_define_method($74, $75, ((101148)|0), 202, 0);
  var $76=$1;
  var $77=$a;
  _mrb_define_method($76, $77, ((100856)|0), 530, 4096);
  var $78=$1;
  var $79=$a;
  _mrb_define_method($78, $79, ((100632)|0), 548, 4096);
  var $80=$1;
  var $81=$a;
  _mrb_define_method($80, $81, ((100384)|0), 40, 0);
  var $82=$1;
  var $83=$a;
  _mrb_define_alias($82, $83, ((100180)|0), ((100384)|0));
  var $84=$1;
  var $85=$a;
  _mrb_define_method($84, $85, ((100020)|0), 30, 262144);
  var $86=$1;
  var $87=$a;
  _mrb_define_method($86, $87, ((99808)|0), 102, 262144);
  var $88=$1;
  var $89=$a;
  _mrb_define_method($88, $89, ((103268)|0), 4, 262144);
  return;
}
function _mrb_ary_join_m($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $sep=__stackBase__;
  $1=$mrb;
  _mrb_nil_value632($sep);
  var $2=$1;
  var $3=_mrb_get_args($2, ((99336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sep,tempInt));
  var $4=$1;
  _mrb_ary_join($agg_result, $4, $ary, $sep);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_size($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $a;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $a=$5;
  var $6=$a;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  _mrb_fixnum_value633($agg_result, $8);
  STACKTOP = __stackBase__;
  return;
}
function _kh_fill_flags751($p, $c, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$c;
      $3=$len;
      label = 2; break;
    case 2: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)>>>(0)) > 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=$1;
      var $11=(($10+1)|0);
      $1=$11;
      HEAP8[($10)]=$9;
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_mt($h, $key) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $k;
      $2=$h;
      $3=$key;
      var $4=$3;
      var $5=(($4 << 16) >> 16);
      var $6=$3;
      var $7=(($6 << 16) >> 16);
      var $8=$7 << 2;
      var $9=$5 ^ $8;
      var $10=$3;
      var $11=(($10 << 16) >> 16);
      var $12=$11 >> 2;
      var $13=$9 ^ $12;
      var $14=$2;
      var $15=(($14+32)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$13 & $16;
      $k=$17;
      label = 2; break;
    case 2: 
      var $19=$k;
      var $20=Math.floor(((($19)>>>(0)))/(8));
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+$20)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&(255));
      var $27=$k;
      var $28=((($27)>>>(0)))%(8);
      var $29=((114620+$28)|0);
      var $30=HEAP8[($29)];
      var $31=(($30)&(255));
      var $32=$26 & $31;
      var $33=(($32)|(0))!=0;
      var $34=$33 ^ 1;
      if ($34) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $36=$k;
      var $37=Math.floor(((($36)>>>(0)))/(8));
      var $38=$2;
      var $39=(($38+20)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+$37)|0);
      var $42=HEAP8[($41)];
      var $43=(($42)&(255));
      var $44=$k;
      var $45=((($44)>>>(0)))%(8);
      var $46=((114620+$45)|0);
      var $47=HEAP8[($46)];
      var $48=(($47)&(255));
      var $49=$43 & $48;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $52=$k;
      var $53=$2;
      var $54=(($53+24)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<1))|0);
      var $57=HEAP16[(($56)>>1)];
      var $58=(($57 << 16) >> 16);
      var $59=$3;
      var $60=(($59 << 16) >> 16);
      var $61=(($58)|(0))==(($60)|(0));
      if ($61) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $63=$k;
      $1=$63;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $66=$k;
      var $67=$2;
      var $68=(($67+36)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($66)+($69))|0);
      var $71=$2;
      var $72=(($71+32)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$70 & $73;
      $k=$74;
      label = 2; break;
    case 8: 
      var $76=$2;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      $1=$78;
      label = 9; break;
    case 9: 
      var $80=$1;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_inspect($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=(($ary)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      _mrb_str_new($agg_result, $11, ((107904)|0), 2);
      label = 4; break;
    case 3: 
      var $13=$1;
      var $14=$1;
      _mrb_ary_new($2, $14);
      _inspect_ary($agg_result, $13, $ary, $2);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_equal($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary2=__stackBase__;
      var $equal_p;
      var $i;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((106296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $6=$1;
      var $7=_mrb_obj_equal($6, $ary1, $ary2);
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $equal_p=1;
      label = 22; break;
    case 3: 
      var $11=(($ary2+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)>>>(0)) <= 7;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $equal_p=0;
      label = 21; break;
    case 5: 
      var $16=(($ary2+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==14;
      if ($18) { label = 10; break; } else { label = 6; break; }
    case 6: 
      var $20=$1;
      var $21=$1;
      var $22=_mrb_intern2($21, ((108788)|0), 6);
      var $23=_mrb_respond_to($20, $ary2, $22);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 8; break; } else { label = 7; break; }
    case 7: 
      $equal_p=0;
      label = 9; break;
    case 8: 
      var $27=$1;
      var $28=_mrb_equal($27, $ary2, $ary1);
      var $29=(($28) & 255);
      $equal_p=$29;
      label = 9; break;
    case 9: 
      label = 20; break;
    case 10: 
      var $32=(($ary1)|0);
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($ary2)|0);
      var $39=$38;
      var $40=HEAP32[(($39)>>2)];
      var $41=$40;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($37)|(0))!=(($43)|(0));
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $equal_p=0;
      label = 19; break;
    case 12: 
      $equal_p=1;
      $i=0;
      label = 13; break;
    case 13: 
      var $48=$i;
      var $49=(($ary1)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($48)|(0)) < (($54)|(0));
      if ($55) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $57=$1;
      var $58=$i;
      _ary_elt($2, $ary1, $58);
      var $59=$i;
      _ary_elt($3, $ary2, $59);
      var $60=_mrb_equal($57, $2, $3);
      var $61=(($60)|(0))!=0;
      if ($61) { label = 16; break; } else { label = 15; break; }
    case 15: 
      $equal_p=0;
      label = 18; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $65=$i;
      var $66=((($65)+(1))|0);
      $i=$66;
      label = 13; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $72=$equal_p;
      _mrb_bool_value647($agg_result, $72);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_eql($agg_result, $mrb, $ary1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary1; $ary1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ary2=__stackBase__;
      var $eql_p;
      var $i;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((106296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary2,tempInt));
      var $6=$1;
      var $7=_mrb_obj_equal($6, $ary1, $ary2);
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $eql_p=1;
      label = 16; break;
    case 3: 
      var $11=(($ary2+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==14;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $eql_p=0;
      label = 15; break;
    case 5: 
      var $16=(($ary1)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($ary2)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($21)|(0))!=(($27)|(0));
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $eql_p=0;
      label = 14; break;
    case 7: 
      $eql_p=1;
      $i=0;
      label = 8; break;
    case 8: 
      var $32=$i;
      var $33=(($ary1)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($32)|(0)) < (($38)|(0));
      if ($39) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $41=$1;
      var $42=$i;
      _ary_elt($2, $ary1, $42);
      var $43=$i;
      _ary_elt($3, $ary2, $43);
      var $44=_mrb_eql($41, $2, $3);
      var $45=(($44)|(0))!=0;
      if ($45) { label = 11; break; } else { label = 10; break; }
    case 10: 
      $eql_p=0;
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      label = 8; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $55=$eql_p;
      _mrb_bool_value647($agg_result, $55);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_ary($agg_result, $mrb, $ary, $list) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $list; $list = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($list)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($list)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($list)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $s=__stackBase__;
      var $arystr=(__stackBase__)+(12);
      var $head=(__stackBase__)+(24);
      var $sep=(__stackBase__)+(28);
      var $tail=(__stackBase__)+(32);
      var $2=(__stackBase__)+(36);
      var $3=(__stackBase__)+(48);
      var $ai;
      var $4=(__stackBase__)+(60);
      var $5=(__stackBase__)+(72);
      var $6=(__stackBase__)+(84);
      var $7=(__stackBase__)+(96);
      var $8=(__stackBase__)+(108);
      var $9=(__stackBase__)+(120);
      $1=$mrb;
      var $10=$head;
      assert(1 % 1 === 0);HEAP8[($10)]=HEAP8[((((80436)|0))|0)];
      var $11=$sep;
      assert(2 % 1 === 0);HEAP8[($11)]=HEAP8[((((80432)|0))|0)];HEAP8[((($11)+(1))|0)]=HEAP8[(((((80432)|0))+(1))|0)];
      var $12=$tail;
      assert(1 % 1 === 0);HEAP8[($12)]=HEAP8[((((80428)|0))|0)];
      $i=0;
      label = 2; break;
    case 2: 
      var $14=$i;
      var $15=(($list)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($14)|(0)) < (($20)|(0));
      if ($21) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $23=$1;
      var $24=$i;
      var $25=(($list)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+20)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+((($24)*(12))&-1))|0);
      var $32=_mrb_obj_equal($23, $ary, $31);
      var $33=(($32)|(0))!=0;
      if ($33) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $35=$1;
      _mrb_str_new($agg_result, $35, ((99576)|0), 5);
      label = 17; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $38=$i;
      var $39=((($38)+(1))|0);
      $i=$39;
      label = 2; break;
    case 7: 
      var $41=$1;
      _mrb_ary_push($41, $list, $ary);
      var $42=$1;
      _mrb_str_buf_new($2, $42, 64);
      var $43=$arystr;
      var $44=$2;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$1;
      var $46=(($head)|0);
      _mrb_str_buf_cat($3, $45, $arystr, $46, 1);
      $i=0;
      label = 8; break;
    case 8: 
      var $48=$i;
      var $49=(($ary)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($48)|(0)) < (($54)|(0));
      if ($55) { label = 9; break; } else { label = 16; break; }
    case 9: 
      var $57=$1;
      var $58=_mrb_gc_arena_save($57);
      $ai=$58;
      var $59=$i;
      var $60=(($59)|(0)) > 0;
      if ($60) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $62=$1;
      var $63=(($sep)|0);
      _mrb_str_buf_cat($4, $62, $arystr, $63, 2);
      label = 11; break;
    case 11: 
      var $65=$i;
      var $66=(($ary)|0);
      var $67=$66;
      var $68=HEAP32[(($67)>>2)];
      var $69=$68;
      var $70=(($69+20)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+((($65)*(12))&-1))|0);
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|(0))==14;
      if ($75) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $77=$1;
      var $78=$i;
      var $79=(($ary)|0);
      var $80=$79;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=(($82+20)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+((($78)*(12))&-1))|0);
      _inspect_ary($5, $77, $85, $list);
      var $86=$s;
      var $87=$5;
      assert(12 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
      label = 14; break;
    case 13: 
      var $89=$1;
      var $90=$i;
      var $91=(($ary)|0);
      var $92=$91;
      var $93=HEAP32[(($92)>>2)];
      var $94=$93;
      var $95=(($94+20)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96+((($90)*(12))&-1))|0);
      _mrb_inspect($6, $89, $97);
      var $98=$s;
      var $99=$6;
      assert(12 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($99)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($99)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($99)+(8))>>2)];
      label = 14; break;
    case 14: 
      var $101=$1;
      var $102=(($s)|0);
      var $103=$102;
      var $104=HEAP32[(($103)>>2)];
      var $105=$104;
      var $106=(($105+20)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($s)|0);
      var $109=$108;
      var $110=HEAP32[(($109)>>2)];
      var $111=$110;
      var $112=(($111+12)|0);
      var $113=HEAP32[(($112)>>2)];
      _mrb_str_buf_cat($7, $101, $arystr, $107, $113);
      var $114=$1;
      var $115=$ai;
      _mrb_gc_arena_restore($114, $115);
      label = 15; break;
    case 15: 
      var $117=$i;
      var $118=((($117)+(1))|0);
      $i=$118;
      label = 8; break;
    case 16: 
      var $120=$1;
      var $121=(($tail)|0);
      _mrb_str_buf_cat($8, $120, $arystr, $121, 1);
      var $122=$1;
      _mrb_ary_pop($9, $122, $list);
      var $123=$agg_result;
      var $124=$arystr;
      assert(12 % 1 === 0);HEAP32[(($123)>>2)]=HEAP32[(($124)>>2)];HEAP32[((($123)+(4))>>2)]=HEAP32[((($124)+(4))>>2)];HEAP32[((($123)+(8))>>2)]=HEAP32[((($124)+(8))>>2)];
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_mt($h) {
  var label = 0;
  var $1;
  var $sz;
  $1=$h;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $sz=$4;
  var $5=$1;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=$1;
  var $8=(($7+4)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=$sz;
  var $10=$9 >>> 2;
  var $11=$sz;
  var $12=$11 >>> 1;
  var $13=$10 | $12;
  var $14=$1;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$1;
  var $17=(($16+40)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$sz;
  var $20=$19;
  var $21=Math.floor(((($20)>>>(0)))/(4));
  var $22=_mrb_malloc($18, $21);
  var $23=$1;
  var $24=(($23+16)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+16)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$sz;
  var $29=Math.floor(((($28)>>>(0)))/(8));
  var $30=(($27+$29)|0);
  var $31=$1;
  var $32=(($31+20)|0);
  HEAP32[(($32)>>2)]=$30;
  var $33=$1;
  var $34=(($33+16)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$sz;
  var $37=Math.floor(((($36)>>>(0)))/(8));
  _kh_fill_flags751($35, -1, $37);
  var $38=$1;
  var $39=(($38+20)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=$sz;
  var $42=Math.floor(((($41)>>>(0)))/(8));
  _kh_fill_flags751($40, 0, $42);
  var $43=$1;
  var $44=(($43+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$sz;
  var $47=($46<<1);
  var $48=_mrb_malloc($45, $47);
  var $49=$48;
  var $50=$1;
  var $51=(($50+24)|0);
  HEAP32[(($51)>>2)]=$49;
  var $52=$1;
  var $53=(($52+40)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$sz;
  var $56=($55<<2);
  var $57=_mrb_malloc($54, $56);
  var $58=$57;
  var $59=$1;
  var $60=(($59+28)|0);
  HEAP32[(($60)>>2)]=$58;
  var $61=$sz;
  var $62=((($61)-(1))|0);
  var $63=$1;
  var $64=(($63+32)|0);
  HEAP32[(($64)>>2)]=$62;
  var $65=$sz;
  var $66=Math.floor(((($65)>>>(0)))/(2));
  var $67=((($66)-(1))|0);
  var $68=$1;
  var $69=(($68+36)|0);
  HEAP32[(($69)>>2)]=$67;
  return;
}
function _kh_init_mt_size($mrb, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h;
      $1=$mrb;
      $2=$size;
      var $3=$1;
      var $4=_mrb_calloc($3, 1, 44);
      var $5=$4;
      $h=$5;
      var $6=$2;
      var $7=(($6)>>>(0)) < 8;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=((($11)-(1))|0);
      $2=$12;
      var $13=$2;
      var $14=$13 >>> 1;
      var $15=$2;
      var $16=$15 | $14;
      $2=$16;
      var $17=$2;
      var $18=$17 >>> 2;
      var $19=$2;
      var $20=$19 | $18;
      $2=$20;
      var $21=$2;
      var $22=$21 >>> 4;
      var $23=$2;
      var $24=$23 | $22;
      $2=$24;
      var $25=$2;
      var $26=$25 >>> 8;
      var $27=$2;
      var $28=$27 | $26;
      $2=$28;
      var $29=$2;
      var $30=$29 >>> 16;
      var $31=$2;
      var $32=$31 | $30;
      $2=$32;
      var $33=$2;
      var $34=((($33)+(1))|0);
      $2=$34;
      label = 5; break;
    case 5: 
      var $36=$2;
      var $37=$h;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$1;
      var $40=$h;
      var $41=(($40+40)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$h;
      _kh_alloc_mt($42);
      var $43=$h;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_mt($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_mt_size($2, 32);
  return $3;
}
function _kh_destroy_mt($h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$h;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _mrb_free($7, $11);
      var $12=$1;
      var $13=(($12+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_free($14, $18);
      var $19=$1;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      _mrb_free($21, $24);
      var $25=$1;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=$28;
      _mrb_free($27, $29);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_mt($h, $new_n_buckets) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $1=$h;
      $2=$new_n_buckets;
      var $3=$2;
      var $4=(($3)>>>(0)) < 8;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$2;
      var $9=((($8)-(1))|0);
      $2=$9;
      var $10=$2;
      var $11=$10 >>> 1;
      var $12=$2;
      var $13=$12 | $11;
      $2=$13;
      var $14=$2;
      var $15=$14 >>> 2;
      var $16=$2;
      var $17=$16 | $15;
      $2=$17;
      var $18=$2;
      var $19=$18 >>> 4;
      var $20=$2;
      var $21=$20 | $19;
      $2=$21;
      var $22=$2;
      var $23=$22 >>> 8;
      var $24=$2;
      var $25=$24 | $23;
      $2=$25;
      var $26=$2;
      var $27=$26 >>> 16;
      var $28=$2;
      var $29=$28 | $27;
      $2=$29;
      var $30=$2;
      var $31=((($30)+(1))|0);
      $2=$31;
      label = 5; break;
    case 5: 
      var $33=$1;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      $old_e_flags=$35;
      var $36=$1;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      $old_keys=$38;
      var $39=$1;
      var $40=(($39+28)|0);
      var $41=HEAP32[(($40)>>2)];
      $old_vals=$41;
      var $42=$1;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      $old_n_buckets=$44;
      var $45=$2;
      var $46=$1;
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$1;
      _kh_alloc_mt($48);
      $i=0;
      label = 6; break;
    case 6: 
      var $50=$i;
      var $51=$old_n_buckets;
      var $52=(($50)>>>(0)) < (($51)>>>(0));
      if ($52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $54=$i;
      var $55=Math.floor(((($54)>>>(0)))/(8));
      var $56=$old_e_flags;
      var $57=(($56+$55)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&(255));
      var $60=$i;
      var $61=((($60)>>>(0)))%(8);
      var $62=((114620+$61)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&(255));
      var $65=$59 & $64;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$1;
      var $69=$i;
      var $70=$old_keys;
      var $71=(($70+($69<<1))|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=_kh_put_mt($68, $72);
      $k=$73;
      var $74=$i;
      var $75=$old_vals;
      var $76=(($75+($74<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$k;
      var $79=$1;
      var $80=(($79+28)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+($78<<2))|0);
      HEAP32[(($82)>>2)]=$77;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $85=$i;
      var $86=((($85)+(1))|0);
      $i=$86;
      label = 6; break;
    case 11: 
      var $88=$1;
      var $89=(($88+40)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$old_e_flags;
      _mrb_free($90, $91);
      var $92=$1;
      var $93=(($92+40)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$old_keys;
      var $96=$95;
      _mrb_free($94, $96);
      var $97=$1;
      var $98=(($97+40)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$old_vals;
      var $101=$100;
      _mrb_free($99, $101);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_del_mt($h, $x) {
  var label = 0;
  var $1;
  var $2;
  $1=$h;
  $2=$x;
  var $3=$2;
  var $4=((($3)>>>(0)))%(8);
  var $5=((114620+$4)|0);
  var $6=HEAP8[($5)];
  var $7=(($6)&(255));
  var $8=$2;
  var $9=Math.floor(((($8)>>>(0)))/(8));
  var $10=$1;
  var $11=(($10+20)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+$9)|0);
  var $14=HEAP8[($13)];
  var $15=(($14)&(255));
  var $16=$15 | $7;
  var $17=(($16) & 255);
  HEAP8[($13)]=$17;
  var $18=$1;
  var $19=(($18+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20)-(1))|0);
  HEAP32[(($19)>>2)]=$21;
  return;
}
function _mrb_gc_mark_mt_size($mrb, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $h;
      $2=$mrb;
      $3=$c;
      var $4=$3;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $h=$6;
      var $7=$h;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $11=$h;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_mt($h, $key) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $k;
      $1=$h;
      $2=$key;
      var $3=$1;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>(0)) >= (($8)>>>(0));
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=($14<<1);
      _kh_resize_mt($11, $15);
      label = 3; break;
    case 3: 
      var $17=$2;
      var $18=(($17 << 16) >> 16);
      var $19=$2;
      var $20=(($19 << 16) >> 16);
      var $21=$20 << 2;
      var $22=$18 ^ $21;
      var $23=$2;
      var $24=(($23 << 16) >> 16);
      var $25=$24 >> 2;
      var $26=$22 ^ $25;
      var $27=$1;
      var $28=(($27+32)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$26 & $29;
      $k=$30;
      label = 4; break;
    case 4: 
      var $32=$k;
      var $33=Math.floor(((($32)>>>(0)))/(8));
      var $34=$1;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+$33)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255));
      var $40=$k;
      var $41=((($40)>>>(0)))%(8);
      var $42=((114620+$41)|0);
      var $43=HEAP8[($42)];
      var $44=(($43)&(255));
      var $45=$39 & $44;
      var $46=(($45)|(0))!=0;
      if ($46) { var $64 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $48=$k;
      var $49=Math.floor(((($48)>>>(0)))/(8));
      var $50=$1;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+$49)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=$k;
      var $57=((($56)>>>(0)))%(8);
      var $58=((114620+$57)|0);
      var $59=HEAP8[($58)];
      var $60=(($59)&(255));
      var $61=$55 & $60;
      var $62=(($61)|(0))!=0;
      var $64 = $62;label = 6; break;
    case 6: 
      var $64;
      var $65=$64 ^ 1;
      if ($65) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $67=$k;
      var $68=$1;
      var $69=(($68+24)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70+($67<<1))|0);
      var $72=HEAP16[(($71)>>1)];
      var $73=(($72 << 16) >> 16);
      var $74=$2;
      var $75=(($74 << 16) >> 16);
      var $76=(($73)|(0))==(($75)|(0));
      if ($76) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $79=$k;
      var $80=$1;
      var $81=(($80+36)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=((($79)+($82))|0);
      var $84=$1;
      var $85=(($84+32)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$83 & $86;
      $k=$87;
      label = 4; break;
    case 10: 
      var $89=$k;
      var $90=Math.floor(((($89)>>>(0)))/(8));
      var $91=$1;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+$90)|0);
      var $95=HEAP8[($94)];
      var $96=(($95)&(255));
      var $97=$k;
      var $98=((($97)>>>(0)))%(8);
      var $99=((114620+$98)|0);
      var $100=HEAP8[($99)];
      var $101=(($100)&(255));
      var $102=$96 & $101;
      var $103=(($102)|(0))!=0;
      if ($103) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $105=$2;
      var $106=$k;
      var $107=$1;
      var $108=(($107+24)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+($106<<1))|0);
      HEAP16[(($110)>>1)]=$105;
      var $111=$k;
      var $112=((($111)>>>(0)))%(8);
      var $113=((114620+$112)|0);
      var $114=HEAP8[($113)];
      var $115=(($114)&(255));
      var $116=$115 ^ -1;
      var $117=$k;
      var $118=Math.floor(((($117)>>>(0)))/(8));
      var $119=$1;
      var $120=(($119+16)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+$118)|0);
      var $123=HEAP8[($122)];
      var $124=(($123)&(255));
      var $125=$124 & $116;
      var $126=(($125) & 255);
      HEAP8[($122)]=$126;
      var $127=$1;
      var $128=(($127+4)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=$1;
      var $132=(($131+8)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($133)+(1))|0);
      HEAP32[(($132)>>2)]=$134;
      label = 15; break;
    case 12: 
      var $136=$k;
      var $137=Math.floor(((($136)>>>(0)))/(8));
      var $138=$1;
      var $139=(($138+20)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140+$137)|0);
      var $142=HEAP8[($141)];
      var $143=(($142)&(255));
      var $144=$k;
      var $145=((($144)>>>(0)))%(8);
      var $146=((114620+$145)|0);
      var $147=HEAP8[($146)];
      var $148=(($147)&(255));
      var $149=$143 & $148;
      var $150=(($149)|(0))!=0;
      if ($150) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $152=$2;
      var $153=$k;
      var $154=$1;
      var $155=(($154+24)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+($153<<1))|0);
      HEAP16[(($157)>>1)]=$152;
      var $158=$k;
      var $159=((($158)>>>(0)))%(8);
      var $160=((114620+$159)|0);
      var $161=HEAP8[($160)];
      var $162=(($161)&(255));
      var $163=$162 ^ -1;
      var $164=$k;
      var $165=Math.floor(((($164)>>>(0)))/(8));
      var $166=$1;
      var $167=(($166+20)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($168+$165)|0);
      var $170=HEAP8[($169)];
      var $171=(($170)&(255));
      var $172=$171 & $163;
      var $173=(($172) & 255);
      HEAP8[($169)]=$173;
      var $174=$1;
      var $175=(($174+4)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=((($176)+(1))|0);
      HEAP32[(($175)>>2)]=$177;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $180=$k;
      return $180;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_copy_mt($mrb, $h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h2;
      var $k;
      var $k2;
      $1=$mrb;
      $2=$h;
      var $3=$1;
      var $4=_kh_init_mt($3);
      $h2=$4;
      $k=0;
      label = 2; break;
    case 2: 
      var $6=$k;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0))!=(($9)|(0));
      if ($10) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $12=$k;
      var $13=Math.floor(((($12)>>>(0)))/(8));
      var $14=$2;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$13)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=$k;
      var $21=((($20)>>>(0)))%(8);
      var $22=((114620+$21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$19 & $24;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $28=$k;
      var $29=Math.floor(((($28)>>>(0)))/(8));
      var $30=$2;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+$29)|0);
      var $34=HEAP8[($33)];
      var $35=(($34)&(255));
      var $36=$k;
      var $37=((($36)>>>(0)))%(8);
      var $38=((114620+$37)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$35 & $40;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $44=$h2;
      var $45=$k;
      var $46=$2;
      var $47=(($46+24)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+($45<<1))|0);
      var $50=HEAP16[(($49)>>1)];
      var $51=_kh_put_mt($44, $50);
      $k2=$51;
      var $52=$k;
      var $53=$2;
      var $54=(($53+28)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+($52<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$k2;
      var $59=$h2;
      var $60=(($59+28)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61+($58<<2))|0);
      HEAP32[(($62)>>2)]=$57;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $65=$k;
      var $66=((($65)+(1))|0);
      $k=$66;
      label = 2; break;
    case 8: 
      var $68=$h2;
      return $68;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_mt($mrb, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $k;
      var $h;
      var $m;
      $1=$mrb;
      $2=$c;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $h=$5;
      var $6=$h;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 12; break;
    case 3: 
      $k=0;
      label = 4; break;
    case 4: 
      var $11=$k;
      var $12=$h;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|(0))!=(($14)|(0));
      if ($15) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $17=$k;
      var $18=Math.floor(((($17)>>>(0)))/(8));
      var $19=$h;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+$18)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$k;
      var $26=((($25)>>>(0)))%(8);
      var $27=((114620+$26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28)&(255));
      var $30=$24 & $29;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 10; break; } else { label = 6; break; }
    case 6: 
      var $33=$k;
      var $34=Math.floor(((($33)>>>(0)))/(8));
      var $35=$h;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$k;
      var $42=((($41)>>>(0)))%(8);
      var $43=((114620+$42)|0);
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $46=$40 & $45;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 10; break; } else { label = 7; break; }
    case 7: 
      var $49=$k;
      var $50=$h;
      var $51=(($50+28)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      $m=$54;
      var $55=$m;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $58=$1;
      var $59=$m;
      var $60=$59;
      _mrb_gc_mark($58, $60);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $64=$k;
      var $65=((($64)+(1))|0);
      $k=$65;
      label = 4; break;
    case 12: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_mt($mrb, $c) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$c;
  var $3=$2;
  var $4=(($3+16)|0);
  var $5=HEAP32[(($4)>>2)];
  _kh_destroy_mt($5);
  return;
}
function _mrb_name_class($mrb, $c, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$c;
  $3=$name;
  var $5=$1;
  var $6=$2;
  var $7=$6;
  var $8=$1;
  var $9=_mrb_intern2($8, ((96448)|0), 11);
  var $10=$3;
  _mrb_symbol_value752($4, $10);
  _mrb_obj_iv_set($5, $7, $9, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value752($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_module_id($mrb, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $m;
  var $3=__stackBase__;
  $1=$mrb;
  $2=$name;
  var $4=$1;
  var $5=_mrb_module_new($4);
  $m=$5;
  var $6=$1;
  var $7=$1;
  var $8=(($7+44)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=$2;
  var $12=$m;
  var $13=$12;
  _mrb_obj_value753($3, $13);
  _mrb_obj_iv_set($6, $10, $11, $3);
  var $14=$1;
  var $15=$m;
  var $16=$2;
  _mrb_name_class($14, $15, $16);
  var $17=$m;
  STACKTOP = __stackBase__;
  return $17;
}
function _mrb_module_new($mrb) {
  var label = 0;
  var $1;
  var $m;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+52)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_obj_alloc($2, 10, $5);
  var $7=$6;
  $m=$7;
  var $8=$1;
  var $9=_kh_init_mt($8);
  var $10=$m;
  var $11=(($10+16)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$m;
  return $12;
}
function _mrb_obj_value753($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_module($mrb, $name) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$name;
  var $3=$1;
  var $4=$1;
  var $5=$2;
  var $6=_mrb_intern754($4, $5);
  var $7=_mrb_define_module_id($3, $6);
  return $7;
}
function _mrb_intern754($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_class_outer_module($mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $outer=__stackBase__;
      var $4=(__stackBase__)+(12);
      $2=$mrb;
      $3=$c;
      var $5=$2;
      var $6=$3;
      var $7=$6;
      var $8=$2;
      var $9=_mrb_intern2($8, ((110200)|0), 9);
      _mrb_obj_iv_get($4, $5, $7, $9);
      var $10=$outer;
      var $11=$4;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($outer+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==0;
      if ($14) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $16=(($outer)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 3; break; }
    case 3: 
      $1=0;
      label = 5; break;
    case 4: 
      var $22=(($outer)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      $1=$25;
      label = 5; break;
    case 5: 
      var $27=$1;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_define_module($mrb, $outer, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $v=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      $2=$id;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_const_defined($4, $outer, $5);
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=$2;
      _mrb_const_get($3, $9, $outer, $10);
      var $11=$v;
      var $12=$3;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($v)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      $c=$16;
      label = 4; break;
    case 3: 
      var $18=$1;
      var $19=_mrb_module_new($18);
      $c=$19;
      var $20=$1;
      var $21=$c;
      var $22=$2;
      _setup_class($20, $outer, $21, $22);
      label = 4; break;
    case 4: 
      var $24=$c;
      STACKTOP = __stackBase__;
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
function _setup_class($mrb, $outer, $c, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$c;
  $3=$id;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  _mrb_name_class($5, $6, $7);
  var $8=$1;
  var $9=$3;
  var $10=$2;
  var $11=$10;
  _mrb_obj_value753($4, $11);
  _mrb_const_set($8, $outer, $9, $4);
  var $12=$1;
  var $13=$2;
  var $14=$13;
  var $15=$1;
  var $16=_mrb_intern2($15, ((110200)|0), 9);
  _mrb_obj_iv_set($12, $14, $16, $outer);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_class_id($mrb, $name, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $c;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$name;
  $3=$super;
  var $5=$1;
  var $6=$3;
  var $7=_mrb_class_new($5, $6);
  $c=$7;
  var $8=$1;
  var $9=$1;
  var $10=(($9+44)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  var $13=$2;
  var $14=$c;
  var $15=$14;
  _mrb_obj_value753($4, $15);
  _mrb_obj_iv_set($8, $12, $13, $4);
  var $16=$1;
  var $17=$c;
  var $18=$2;
  _mrb_name_class($16, $17, $18);
  var $19=$c;
  STACKTOP = __stackBase__;
  return $19;
}
function _mrb_class_new($mrb, $super) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$mrb;
      $2=$super;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$2;
      _mrb_check_inheritable($6, $7);
      label = 3; break;
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=_boot_defclass($9, $10);
      $c=$11;
      var $12=$2;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$c;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 >>> 11;
      var $19=$18 & 2097151;
      var $20=$19 & -256;
      var $21=$2;
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 >>> 11;
      var $25=$24 & 2097151;
      var $26=$25 & 255;
      var $27=(($26) & 255);
      var $28=(($27 << 24) >> 24);
      var $29=$20 | $28;
      var $30=$c;
      var $31=$29 & 2097151;
      var $32=$30;
      var $33=$31 & 2097151;
      var $34=$33 << 11;
      var $35=HEAP32[(($32)>>2)];
      var $36=$35 & 2047;
      var $37=$36 | $34;
      HEAP32[(($32)>>2)]=$37;
      label = 5; break;
    case 5: 
      var $39=$1;
      var $40=$c;
      var $41=$40;
      _prepare_singleton_class($39, $41);
      var $42=$c;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_class($mrb, $name, $super) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $c;
  $1=$mrb;
  $2=$name;
  $3=$super;
  var $4=$1;
  var $5=$1;
  var $6=$2;
  var $7=_mrb_intern754($5, $6);
  var $8=$3;
  var $9=_mrb_define_class_id($4, $7, $8);
  $c=$9;
  var $10=$c;
  return $10;
}
function _mrb_class_real($cl) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$cl;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 & 255;
      var $7=(($6)|(0))==12;
      if ($7) { var $15 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $9=$1;
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 255;
      var $13=(($12)|(0))==11;
      var $15 = $13;label = 4; break;
    case 4: 
      var $15;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$1;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      $1=$19;
      label = 2; break;
    case 6: 
      var $21=$1;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_vm_define_class($mrb, $outer, $super, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $outer; $outer = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($outer)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($outer)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($outer)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $super; $super = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($super)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($super)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($super)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $s;
      var $v=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      var $7=(__stackBase__)+(48);
      $2=$mrb;
      $3=$id;
      var $8=$2;
      var $9=$3;
      var $10=_mrb_const_defined($8, $outer, $9);
      var $11=(($10 << 24) >> 24)!=0;
      if ($11) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $13=$2;
      var $14=$3;
      _mrb_const_get($v, $13, $outer, $14);
      var $15=$2;
      _mrb_check_type($15, $v, 9);
      var $16=(($v)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      $c=$19;
      var $20=(($super+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==0;
      if ($22) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $24=(($super)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $29=(($super+8)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))!=9;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$2;
      var $34=$2;
      var $35=_mrb_class_get($34, ((105988)|0));
      _mrb_raisef($33, $35, ((103000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $37=$c;
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))!=0;
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=(($super)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=$c;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=_mrb_class_real($48);
      var $50=(($45)|(0))!=(($49)|(0));
      if ($50) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $52=$2;
      var $53=$2;
      var $54=_mrb_class_get($53, ((105988)|0));
      var $55=$2;
      var $56=$3;
      _mrb_sym2str($4, $55, $56);
      _mrb_raisef($52, $54, ((100196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $59=$c;
      $1=$59;
      label = 18; break;
    case 11: 
      var $61=(($super+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))==0;
      if ($63) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $65=(($super)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))!=0;
      if ($68) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $70=(($super+8)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|(0))!=9;
      if ($72) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $74=$2;
      var $75=$2;
      var $76=_mrb_class_get($75, ((105988)|0));
      _mrb_raisef($74, $76, ((103000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($super)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($super)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($super)+(8))>>2)],tempInt));
      label = 15; break;
    case 15: 
      var $78=(($super)|0);
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      $s=$81;
      label = 17; break;
    case 16: 
      var $83=$2;
      var $84=(($83+44)|0);
      var $85=HEAP32[(($84)>>2)];
      $s=$85;
      label = 17; break;
    case 17: 
      var $87=$2;
      var $88=$s;
      var $89=_mrb_class_new($87, $88);
      $c=$89;
      var $90=$2;
      var $91=$c;
      var $92=$3;
      _setup_class($90, $outer, $91, $92);
      var $93=$2;
      var $94=$s;
      var $95=$94;
      _mrb_obj_value753($5, $95);
      var $96=$c;
      var $97=$96;
      _mrb_obj_value753($6, $97);
      _mrb_funcall($7, $93, $5, ((97596)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
      var $98=$c;
      $1=$98;
      label = 18; break;
    case 18: 
      var $100=$1;
      STACKTOP = __stackBase__;
      return $100;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_get($mrb, $name) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$name;
  var $3=$1;
  var $4=$1;
  var $5=(($4+44)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=$2;
  var $9=_mrb_intern754($7, $8);
  var $10=_class_from_sym($3, $6, $9);
  return $10;
}
function _class_from_sym($mrb, $klass, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $c=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      $1=$mrb;
      $2=$klass;
      $3=$id;
      var $6=$1;
      var $7=$2;
      var $8=$7;
      _mrb_obj_value753($4, $8);
      var $9=$3;
      _mrb_const_get($c, $6, $4, $9);
      var $10=(($c+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=10;
      if ($12) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $14=(($c+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=9;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((105988)|0));
      var $21=$1;
      var $22=$3;
      _mrb_sym2str($5, $21, $22);
      _mrb_raisef($18, $20, ((113740)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $24=(($c)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      STACKTOP = __stackBase__;
      return $27;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_class_under($mrb, $outer, $name, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $c;
      var $id;
      var $6=__stackBase__;
      $2=$mrb;
      $3=$outer;
      $4=$name;
      $5=$super;
      var $7=$2;
      var $8=$4;
      var $9=_mrb_intern754($7, $8);
      $id=$9;
      var $10=$2;
      var $11=$3;
      var $12=$id;
      var $13=_mrb_const_defined_at($10, $11, $12);
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $16=$2;
      var $17=$3;
      var $18=$id;
      var $19=_class_from_sym($16, $17, $18);
      $c=$19;
      var $20=$c;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=_mrb_class_real($22);
      var $24=$5;
      var $25=(($23)|(0))!=(($24)|(0));
      if ($25) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $27=$2;
      var $28=$id;
      var $29=$4;
      _mrb_name_error($27, $28, ((96328)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$29,tempInt));
      label = 4; break;
    case 4: 
      var $31=$c;
      $1=$31;
      label = 8; break;
    case 5: 
      var $33=$5;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $36=$2;
      var $37=$3;
      var $38=$4;
      _mrb_warn($36, ((95176)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$38,tempInt));
      label = 7; break;
    case 7: 
      var $40=$2;
      var $41=$5;
      var $42=_mrb_class_new($40, $41);
      $c=$42;
      var $43=$2;
      var $44=$3;
      var $45=$44;
      _mrb_obj_value753($6, $45);
      var $46=$c;
      var $47=$id;
      _setup_class($43, $6, $46, $47);
      var $48=$c;
      $1=$48;
      label = 8; break;
    case 8: 
      var $50=$1;
      STACKTOP = __stackBase__;
      return $50;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_method_raw($mrb, $c, $mid, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $h;
      var $k;
      $1=$mrb;
      $2=$c;
      $3=$mid;
      $4=$p;
      var $5=$2;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=_kh_init_mt($11);
      var $13=$2;
      var $14=(($13+16)|0);
      HEAP32[(($14)>>2)]=$12;
      $h=$12;
      label = 3; break;
    case 3: 
      var $16=$h;
      var $17=$3;
      var $18=_kh_put_mt($16, $17);
      $k=$18;
      var $19=$4;
      var $20=$k;
      var $21=$h;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+($20<<2))|0);
      HEAP32[(($24)>>2)]=$19;
      var $25=$4;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$1;
      var $29=$2;
      var $30=$29;
      var $31=$4;
      var $32=$31;
      _mrb_field_write_barrier($28, $30, $32);
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_method_id($mrb, $c, $mid, $func, $aspec) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $p;
  var $ai;
  $1=$mrb;
  $2=$c;
  $3=$mid;
  $4=$func;
  $5=$aspec;
  var $6=$1;
  var $7=_mrb_gc_arena_save($6);
  $ai=$7;
  var $8=$1;
  var $9=$4;
  var $10=_mrb_proc_new_cfunc($8, $9);
  $p=$10;
  var $11=$2;
  var $12=$p;
  var $13=(($12+16)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=$1;
  var $15=$2;
  var $16=$3;
  var $17=$p;
  _mrb_define_method_raw($14, $15, $16, $17);
  var $18=$1;
  var $19=$ai;
  _mrb_gc_arena_restore($18, $19);
  return;
}
function _mrb_define_method($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$mrb;
  $2=$c;
  $3=$name;
  $4=$func;
  $5=$aspec;
  var $6=$1;
  var $7=$2;
  var $8=$1;
  var $9=$3;
  var $10=_mrb_intern754($8, $9);
  var $11=$4;
  var $12=$5;
  _mrb_define_method_id($6, $7, $10, $11, $12);
  return;
}
function _mrb_define_method_vm($mrb, $c, $name, $body) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $body; $body = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($body)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($body)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($body)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $h;
      var $k;
      var $p;
      $1=$mrb;
      $2=$c;
      $3=$name;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $h=$6;
      var $7=$h;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$1;
      var $11=_kh_init_mt($10);
      var $12=$2;
      var $13=(($12+16)|0);
      HEAP32[(($13)>>2)]=$11;
      $h=$11;
      label = 3; break;
    case 3: 
      var $15=$h;
      var $16=$3;
      var $17=_kh_put_mt($15, $16);
      $k=$17;
      var $18=(($body)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      $p=$21;
      var $22=$p;
      var $23=$k;
      var $24=$h;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($23<<2))|0);
      HEAP32[(($27)>>2)]=$22;
      var $28=$p;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $31=$1;
      var $32=$2;
      var $33=$32;
      var $34=$p;
      var $35=$34;
      _mrb_field_write_barrier($31, $33, $35);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_get_args($mrb, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 224)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c=__stackBase__;
      var $i;
      var $sp;
      var $ap=(__stackBase__)+(4);
      var $argc;
      var $opt;
      var $a;
      var $p;
      var $p1;
      var $3=(__stackBase__)+(8);
      var $p2;
      var $4=(__stackBase__)+(20);
      var $p3;
      var $5=(__stackBase__)+(32);
      var $ss=(__stackBase__)+(44);
      var $s;
      var $ps;
      var $pl;
      var $6=(__stackBase__)+(56);
      var $ss4=(__stackBase__)+(68);
      var $s5;
      var $ps6;
      var $7=(__stackBase__)+(80);
      var $aa=(__stackBase__)+(92);
      var $a7;
      var $pb;
      var $pl8;
      var $8=(__stackBase__)+(104);
      var $p9;
      var $tmp=(__stackBase__)+(116);
      var $9=(__stackBase__)+(128);
      var $p10;
      var $f;
      var $tmp11=(__stackBase__)+(140);
      var $10=(__stackBase__)+(152);
      var $boolp;
      var $b=(__stackBase__)+(164);
      var $symp;
      var $ss12=(__stackBase__)+(176);
      var $11=(__stackBase__)+(188);
      var $obj=(__stackBase__)+(200);
      var $p13;
      var $bp;
      var $var;
      var $pl14;
      var $12=(__stackBase__)+(212);
      $1=$mrb;
      $2=$format;
      $i=0;
      var $13=$1;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+12)|0);
      $sp=$18;
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+16)|0);
      var $25=HEAP32[(($24)>>2)];
      $argc=$25;
      $opt=0;
      var $26=$ap;
      HEAP32[(($26)>>2)]=varrp;
      var $27=$argc;
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $30=$1;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+4)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+12)|0);
      var $36=(($35)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      $a=$39;
      var $40=$a;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      $argc=$42;
      var $43=$a;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      $sp=$45;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $48=$2;
      var $49=(($48+1)|0);
      $2=$49;
      var $50=HEAP8[($48)];
      HEAP8[($c)]=$50;
      var $51=(($50 << 24) >> 24)!=0;
      if ($51) { label = 5; break; } else { label = 79; break; }
    case 5: 
      var $53=HEAP8[($c)];
      var $54=(($53 << 24) >> 24);
      if ((($54)|(0))==124 | (($54)|(0))==42 | (($54)|(0))==38) {
        label = 6; break;
      }
      else {
      label = 7; break;
      }
    case 6: 
      label = 11; break;
    case 7: 
      var $57=$argc;
      var $58=$i;
      var $59=(($57)|(0)) <= (($58)|(0));
      if ($59) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $61=$opt;
      var $62=(($61)|(0))!=0;
      if ($62) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $64=$1;
      var $65=$1;
      var $66=_mrb_class_get($65, ((94344)|0));
      _mrb_raise($64, $66, ((93412)|0));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $69=HEAP8[($c)];
      var $70=(($69 << 24) >> 24);
      if ((($70)|(0))==111) {
        label = 12; break;
      }
      else if ((($70)|(0))==83) {
        label = 15; break;
      }
      else if ((($70)|(0))==65) {
        label = 18; break;
      }
      else if ((($70)|(0))==72) {
        label = 21; break;
      }
      else if ((($70)|(0))==115) {
        label = 24; break;
      }
      else if ((($70)|(0))==122) {
        label = 27; break;
      }
      else if ((($70)|(0))==97) {
        label = 32; break;
      }
      else if ((($70)|(0))==102) {
        label = 35; break;
      }
      else if ((($70)|(0))==105) {
        label = 43; break;
      }
      else if ((($70)|(0))==98) {
        label = 54; break;
      }
      else if ((($70)|(0))==110) {
        label = 57; break;
      }
      else if ((($70)|(0))==38) {
        label = 66; break;
      }
      else if ((($70)|(0))==124) {
        label = 70; break;
      }
      else if ((($70)|(0))==42) {
        label = 71; break;
      }
      else {
      label = 77; break;
      }
    case 12: 
      var $72=HEAP32[(($ap)>>2)];
      var $73=$72;
      var $74=(($72+4)|0);
      HEAP32[(($ap)>>2)]=$74;
      var $75=HEAP32[(($73)>>2)];
      $p=$75;
      var $76=$i;
      var $77=$argc;
      var $78=(($76)|(0)) < (($77)|(0));
      if ($78) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $80=$p;
      var $81=$sp;
      var $82=(($81+12)|0);
      $sp=$82;
      var $83=$80;
      var $84=$81;
      assert(12 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];HEAP32[((($83)+(8))>>2)]=HEAP32[((($84)+(8))>>2)];
      var $85=$i;
      var $86=((($85)+(1))|0);
      $i=$86;
      label = 14; break;
    case 14: 
      label = 78; break;
    case 15: 
      var $89=HEAP32[(($ap)>>2)];
      var $90=$89;
      var $91=(($89+4)|0);
      HEAP32[(($ap)>>2)]=$91;
      var $92=HEAP32[(($90)>>2)];
      $p1=$92;
      var $93=$i;
      var $94=$argc;
      var $95=(($93)|(0)) < (($94)|(0));
      if ($95) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $97=$p1;
      var $98=$1;
      var $99=$sp;
      var $100=(($99+12)|0);
      $sp=$100;
      _to_str($3, $98, $99);
      var $101=$97;
      var $102=$3;
      assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
      var $103=$i;
      var $104=((($103)+(1))|0);
      $i=$104;
      label = 17; break;
    case 17: 
      label = 78; break;
    case 18: 
      var $107=HEAP32[(($ap)>>2)];
      var $108=$107;
      var $109=(($107+4)|0);
      HEAP32[(($ap)>>2)]=$109;
      var $110=HEAP32[(($108)>>2)];
      $p2=$110;
      var $111=$i;
      var $112=$argc;
      var $113=(($111)|(0)) < (($112)|(0));
      if ($113) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $115=$p2;
      var $116=$1;
      var $117=$sp;
      var $118=(($117+12)|0);
      $sp=$118;
      _to_ary($4, $116, $117);
      var $119=$115;
      var $120=$4;
      assert(12 % 1 === 0);HEAP32[(($119)>>2)]=HEAP32[(($120)>>2)];HEAP32[((($119)+(4))>>2)]=HEAP32[((($120)+(4))>>2)];HEAP32[((($119)+(8))>>2)]=HEAP32[((($120)+(8))>>2)];
      var $121=$i;
      var $122=((($121)+(1))|0);
      $i=$122;
      label = 20; break;
    case 20: 
      label = 78; break;
    case 21: 
      var $125=HEAP32[(($ap)>>2)];
      var $126=$125;
      var $127=(($125+4)|0);
      HEAP32[(($ap)>>2)]=$127;
      var $128=HEAP32[(($126)>>2)];
      $p3=$128;
      var $129=$i;
      var $130=$argc;
      var $131=(($129)|(0)) < (($130)|(0));
      if ($131) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $133=$p3;
      var $134=$1;
      var $135=$sp;
      var $136=(($135+12)|0);
      $sp=$136;
      _to_hash($5, $134, $135);
      var $137=$133;
      var $138=$5;
      assert(12 % 1 === 0);HEAP32[(($137)>>2)]=HEAP32[(($138)>>2)];HEAP32[((($137)+(4))>>2)]=HEAP32[((($138)+(4))>>2)];HEAP32[((($137)+(8))>>2)]=HEAP32[((($138)+(8))>>2)];
      var $139=$i;
      var $140=((($139)+(1))|0);
      $i=$140;
      label = 23; break;
    case 23: 
      label = 78; break;
    case 24: 
      $ps=0;
      $pl=0;
      var $143=HEAP32[(($ap)>>2)];
      var $144=$143;
      var $145=(($143+4)|0);
      HEAP32[(($ap)>>2)]=$145;
      var $146=HEAP32[(($144)>>2)];
      $ps=$146;
      var $147=HEAP32[(($ap)>>2)];
      var $148=$147;
      var $149=(($147+4)|0);
      HEAP32[(($ap)>>2)]=$149;
      var $150=HEAP32[(($148)>>2)];
      $pl=$150;
      var $151=$i;
      var $152=$argc;
      var $153=(($151)|(0)) < (($152)|(0));
      if ($153) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $155=$1;
      var $156=$sp;
      var $157=(($156+12)|0);
      $sp=$157;
      _to_str($6, $155, $156);
      var $158=$ss;
      var $159=$6;
      assert(12 % 1 === 0);HEAP32[(($158)>>2)]=HEAP32[(($159)>>2)];HEAP32[((($158)+(4))>>2)]=HEAP32[((($159)+(4))>>2)];HEAP32[((($158)+(8))>>2)]=HEAP32[((($159)+(8))>>2)];
      var $160=(($ss)|0);
      var $161=$160;
      var $162=HEAP32[(($161)>>2)];
      var $163=$162;
      $s=$163;
      var $164=$s;
      var $165=(($164+20)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$ps;
      HEAP32[(($167)>>2)]=$166;
      var $168=$s;
      var $169=(($168+12)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$pl;
      HEAP32[(($171)>>2)]=$170;
      var $172=$i;
      var $173=((($172)+(1))|0);
      $i=$173;
      label = 26; break;
    case 26: 
      label = 78; break;
    case 27: 
      var $176=HEAP32[(($ap)>>2)];
      var $177=$176;
      var $178=(($176+4)|0);
      HEAP32[(($ap)>>2)]=$178;
      var $179=HEAP32[(($177)>>2)];
      $ps6=$179;
      var $180=$i;
      var $181=$argc;
      var $182=(($180)|(0)) < (($181)|(0));
      if ($182) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $184=$1;
      var $185=$sp;
      var $186=(($185+12)|0);
      $sp=$186;
      _to_str($7, $184, $185);
      var $187=$ss4;
      var $188=$7;
      assert(12 % 1 === 0);HEAP32[(($187)>>2)]=HEAP32[(($188)>>2)];HEAP32[((($187)+(4))>>2)]=HEAP32[((($188)+(4))>>2)];HEAP32[((($187)+(8))>>2)]=HEAP32[((($188)+(8))>>2)];
      var $189=(($ss4)|0);
      var $190=$189;
      var $191=HEAP32[(($190)>>2)];
      var $192=$191;
      $s5=$192;
      var $193=$s5;
      var $194=(($193+20)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=_strlen($195);
      var $197=$s5;
      var $198=(($197+12)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($196)|(0))!=(($199)|(0));
      if ($200) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $202=$1;
      var $203=$1;
      var $204=_mrb_class_get($203, ((94344)|0));
      _mrb_raise($202, $204, ((113548)|0));
      label = 30; break;
    case 30: 
      var $206=$s5;
      var $207=(($206+20)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$ps6;
      HEAP32[(($209)>>2)]=$208;
      var $210=$i;
      var $211=((($210)+(1))|0);
      $i=$211;
      label = 31; break;
    case 31: 
      label = 78; break;
    case 32: 
      var $214=HEAP32[(($ap)>>2)];
      var $215=$214;
      var $216=(($214+4)|0);
      HEAP32[(($ap)>>2)]=$216;
      var $217=HEAP32[(($215)>>2)];
      $pb=$217;
      var $218=HEAP32[(($ap)>>2)];
      var $219=$218;
      var $220=(($218+4)|0);
      HEAP32[(($ap)>>2)]=$220;
      var $221=HEAP32[(($219)>>2)];
      $pl8=$221;
      var $222=$i;
      var $223=$argc;
      var $224=(($222)|(0)) < (($223)|(0));
      if ($224) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $226=$1;
      var $227=$sp;
      var $228=(($227+12)|0);
      $sp=$228;
      _to_ary($8, $226, $227);
      var $229=$aa;
      var $230=$8;
      assert(12 % 1 === 0);HEAP32[(($229)>>2)]=HEAP32[(($230)>>2)];HEAP32[((($229)+(4))>>2)]=HEAP32[((($230)+(4))>>2)];HEAP32[((($229)+(8))>>2)]=HEAP32[((($230)+(8))>>2)];
      var $231=(($aa)|0);
      var $232=$231;
      var $233=HEAP32[(($232)>>2)];
      var $234=$233;
      $a7=$234;
      var $235=$a7;
      var $236=(($235+20)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=$pb;
      HEAP32[(($238)>>2)]=$237;
      var $239=$a7;
      var $240=(($239+12)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$pl8;
      HEAP32[(($242)>>2)]=$241;
      var $243=$i;
      var $244=((($243)+(1))|0);
      $i=$244;
      label = 34; break;
    case 34: 
      label = 78; break;
    case 35: 
      var $247=HEAP32[(($ap)>>2)];
      var $248=$247;
      var $249=(($247+4)|0);
      HEAP32[(($ap)>>2)]=$249;
      var $250=HEAP32[(($248)>>2)];
      $p9=$250;
      var $251=$i;
      var $252=$argc;
      var $253=(($251)|(0)) < (($252)|(0));
      if ($253) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $255=$sp;
      var $256=(($255+8)|0);
      var $257=HEAP32[(($256)>>2)];
      if ((($257)|(0))==6) {
        label = 37; break;
      }
      else if ((($257)|(0))==3) {
        label = 38; break;
      }
      else if ((($257)|(0))==16) {
        label = 39; break;
      }
      else {
      label = 40; break;
      }
    case 37: 
      var $259=$sp;
      var $260=(($259)|0);
      var $261=$260;
      var $262=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($261)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($261)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $263=$p9;
      (HEAPF64[(tempDoublePtr)>>3]=$262,HEAP32[(($263)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($263)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 41; break;
    case 38: 
      var $265=$sp;
      var $266=(($265)|0);
      var $267=$266;
      var $268=HEAP32[(($267)>>2)];
      var $269=(($268)|(0));
      var $270=$p9;
      (HEAPF64[(tempDoublePtr)>>3]=$269,HEAP32[(($270)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($270)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 41; break;
    case 39: 
      var $272=$1;
      var $273=$1;
      var $274=_mrb_class_get($273, ((105988)|0));
      _mrb_raise($272, $274, ((112828)|0));
      label = 41; break;
    case 40: 
      var $276=$1;
      var $277=$sp;
      _mrb_convert_type($9, $276, $277, 6, ((112080)|0), ((111504)|0));
      var $278=$tmp;
      var $279=$9;
      assert(12 % 1 === 0);HEAP32[(($278)>>2)]=HEAP32[(($279)>>2)];HEAP32[((($278)+(4))>>2)]=HEAP32[((($279)+(4))>>2)];HEAP32[((($278)+(8))>>2)]=HEAP32[((($279)+(8))>>2)];
      var $280=(($tmp)|0);
      var $281=$280;
      var $282=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($281)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($281)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $283=$p9;
      (HEAPF64[(tempDoublePtr)>>3]=$282,HEAP32[(($283)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($283)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 41; break;
    case 41: 
      var $285=$sp;
      var $286=(($285+12)|0);
      $sp=$286;
      var $287=$i;
      var $288=((($287)+(1))|0);
      $i=$288;
      label = 42; break;
    case 42: 
      label = 78; break;
    case 43: 
      var $291=HEAP32[(($ap)>>2)];
      var $292=$291;
      var $293=(($291+4)|0);
      HEAP32[(($ap)>>2)]=$293;
      var $294=HEAP32[(($292)>>2)];
      $p10=$294;
      var $295=$i;
      var $296=$argc;
      var $297=(($295)|(0)) < (($296)|(0));
      if ($297) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $299=$sp;
      var $300=(($299+8)|0);
      var $301=HEAP32[(($300)>>2)];
      if ((($301)|(0))==3) {
        label = 45; break;
      }
      else if ((($301)|(0))==6) {
        label = 46; break;
      }
      else if ((($301)|(0))==0) {
        label = 50; break;
      }
      else {
      label = 51; break;
      }
    case 45: 
      var $303=$sp;
      var $304=(($303)|0);
      var $305=$304;
      var $306=HEAP32[(($305)>>2)];
      var $307=$p10;
      HEAP32[(($307)>>2)]=$306;
      label = 52; break;
    case 46: 
      var $309=$sp;
      var $310=(($309)|0);
      var $311=$310;
      var $312=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($311)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($311)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $f=$312;
      var $313=$f;
      var $314=$313 <= 2147483647;
      if ($314) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $316=$f;
      var $317=$316 >= -2147483648;
      if ($317) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $319=$1;
      var $320=$1;
      var $321=_mrb_class_get($320, ((111056)|0));
      _mrb_raise($319, $321, ((110532)|0));
      label = 49; break;
    case 49: 
      var $323=$f;
      var $324=(($323)&-1);
      var $325=$p10;
      HEAP32[(($325)>>2)]=$324;
      label = 52; break;
    case 50: 
      var $327=$p10;
      HEAP32[(($327)>>2)]=0;
      label = 52; break;
    case 51: 
      var $329=$1;
      var $330=$sp;
      _mrb_convert_type($10, $329, $330, 3, ((110184)|0), ((109796)|0));
      var $331=$tmp11;
      var $332=$10;
      assert(12 % 1 === 0);HEAP32[(($331)>>2)]=HEAP32[(($332)>>2)];HEAP32[((($331)+(4))>>2)]=HEAP32[((($332)+(4))>>2)];HEAP32[((($331)+(8))>>2)]=HEAP32[((($332)+(8))>>2)];
      var $333=(($tmp11)|0);
      var $334=$333;
      var $335=HEAP32[(($334)>>2)];
      var $336=$p10;
      HEAP32[(($336)>>2)]=$335;
      label = 52; break;
    case 52: 
      var $338=$sp;
      var $339=(($338+12)|0);
      $sp=$339;
      var $340=$i;
      var $341=((($340)+(1))|0);
      $i=$341;
      label = 53; break;
    case 53: 
      label = 78; break;
    case 54: 
      var $344=HEAP32[(($ap)>>2)];
      var $345=$344;
      var $346=(($344+4)|0);
      HEAP32[(($ap)>>2)]=$346;
      var $347=HEAP32[(($345)>>2)];
      $boolp=$347;
      var $348=$i;
      var $349=$argc;
      var $350=(($348)|(0)) < (($349)|(0));
      if ($350) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $352=$sp;
      var $353=(($352+12)|0);
      $sp=$353;
      var $354=$b;
      var $355=$352;
      assert(12 % 1 === 0);HEAP32[(($354)>>2)]=HEAP32[(($355)>>2)];HEAP32[((($354)+(4))>>2)]=HEAP32[((($355)+(4))>>2)];HEAP32[((($354)+(8))>>2)]=HEAP32[((($355)+(8))>>2)];
      var $356=(($b+8)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($357)|(0))!=0;
      var $359=(($358)&(1));
      var $360=(($359) & 255);
      var $361=$boolp;
      HEAP8[($361)]=$360;
      var $362=$i;
      var $363=((($362)+(1))|0);
      $i=$363;
      label = 56; break;
    case 56: 
      label = 78; break;
    case 57: 
      var $366=HEAP32[(($ap)>>2)];
      var $367=$366;
      var $368=(($366+4)|0);
      HEAP32[(($ap)>>2)]=$368;
      var $369=HEAP32[(($367)>>2)];
      $symp=$369;
      var $370=$i;
      var $371=$argc;
      var $372=(($370)|(0)) < (($371)|(0));
      if ($372) { label = 58; break; } else { label = 65; break; }
    case 58: 
      var $374=$sp;
      var $375=(($374+12)|0);
      $sp=$375;
      var $376=$ss12;
      var $377=$374;
      assert(12 % 1 === 0);HEAP32[(($376)>>2)]=HEAP32[(($377)>>2)];HEAP32[((($376)+(4))>>2)]=HEAP32[((($377)+(4))>>2)];HEAP32[((($376)+(8))>>2)]=HEAP32[((($377)+(8))>>2)];
      var $378=(($ss12+8)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($379)|(0))==4;
      if ($380) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $382=(($ss12)|0);
      var $383=$382;
      var $384=HEAP16[(($383)>>1)];
      var $385=$symp;
      HEAP16[(($385)>>1)]=$384;
      label = 64; break;
    case 60: 
      var $387=(($ss12+8)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($388)|(0))==16;
      if ($389) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $391=$1;
      var $392=$1;
      _to_str($11, $392, $ss12);
      var $393=_mrb_intern_str($391, $11);
      var $394=$symp;
      HEAP16[(($394)>>1)]=$393;
      label = 63; break;
    case 62: 
      var $396=$1;
      _mrb_funcall($obj, $396, $ss12, ((109320)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $397=$1;
      var $398=$1;
      var $399=_mrb_class_get($398, ((105988)|0));
      _mrb_raisef($397, $399, ((108704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $402=$i;
      var $403=((($402)+(1))|0);
      $i=$403;
      label = 65; break;
    case 65: 
      label = 78; break;
    case 66: 
      var $406=HEAP32[(($ap)>>2)];
      var $407=$406;
      var $408=(($406+4)|0);
      HEAP32[(($ap)>>2)]=$408;
      var $409=HEAP32[(($407)>>2)];
      $p13=$409;
      var $410=$1;
      var $411=(($410+8)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($412+16)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=(($414+16)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|(0)) < 0;
      if ($417) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $419=$1;
      var $420=(($419+8)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=(($421+4)|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=(($423+24)|0);
      $bp=$424;
      label = 69; break;
    case 68: 
      var $426=$1;
      var $427=(($426+8)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=(($428+4)|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=$1;
      var $432=(($431+8)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($433+16)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=(($435+16)|0);
      var $437=HEAP32[(($436)>>2)];
      var $438=(($430+((($437)*(12))&-1))|0);
      var $439=(($438+12)|0);
      $bp=$439;
      label = 69; break;
    case 69: 
      var $441=$p13;
      var $442=$bp;
      var $443=$441;
      var $444=$442;
      assert(12 % 1 === 0);HEAP32[(($443)>>2)]=HEAP32[(($444)>>2)];HEAP32[((($443)+(4))>>2)]=HEAP32[((($444)+(4))>>2)];HEAP32[((($443)+(8))>>2)]=HEAP32[((($444)+(8))>>2)];
      label = 78; break;
    case 70: 
      $opt=1;
      label = 78; break;
    case 71: 
      var $447=HEAP32[(($ap)>>2)];
      var $448=$447;
      var $449=(($447+4)|0);
      HEAP32[(($ap)>>2)]=$449;
      var $450=HEAP32[(($448)>>2)];
      $var=$450;
      var $451=HEAP32[(($ap)>>2)];
      var $452=$451;
      var $453=(($451+4)|0);
      HEAP32[(($ap)>>2)]=$453;
      var $454=HEAP32[(($452)>>2)];
      $pl14=$454;
      var $455=$argc;
      var $456=$i;
      var $457=(($455)|(0)) > (($456)|(0));
      if ($457) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $459=$argc;
      var $460=$i;
      var $461=((($459)-($460))|0);
      var $462=$pl14;
      HEAP32[(($462)>>2)]=$461;
      var $463=$pl14;
      var $464=HEAP32[(($463)>>2)];
      var $465=(($464)|(0)) > 0;
      if ($465) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $467=$sp;
      var $468=$var;
      HEAP32[(($468)>>2)]=$467;
      label = 74; break;
    case 74: 
      var $470=$argc;
      $i=$470;
      var $471=$pl14;
      var $472=HEAP32[(($471)>>2)];
      var $473=$sp;
      var $474=(($473+((($472)*(12))&-1))|0);
      $sp=$474;
      label = 76; break;
    case 75: 
      var $476=$pl14;
      HEAP32[(($476)>>2)]=0;
      var $477=$var;
      HEAP32[(($477)>>2)]=0;
      label = 76; break;
    case 76: 
      label = 78; break;
    case 77: 
      var $480=$1;
      var $481=$1;
      var $482=_mrb_class_get($481, ((94344)|0));
      var $483=$1;
      _mrb_str_new($12, $483, $c, 1);
      _mrb_raisef($480, $482, ((108356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($12)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($12)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($12)+(8))>>2)],tempInt));
      label = 78; break;
    case 78: 
      label = 4; break;
    case 79: 
      var $486=HEAP8[($c)];
      var $487=(($486 << 24) >> 24)!=0;
      if ($487) { label = 82; break; } else { label = 80; break; }
    case 80: 
      var $489=$argc;
      var $490=$i;
      var $491=(($489)|(0)) > (($490)|(0));
      if ($491) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $493=$1;
      var $494=$1;
      var $495=_mrb_class_get($494, ((94344)|0));
      _mrb_raise($493, $495, ((93412)|0));
      label = 82; break;
    case 82: 
      var $497=$ap;
      var $498=$i;
      STACKTOP = __stackBase__;
      return $498;
    default: assert(0, "bad label: " + label);
  }
}
function _to_str($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _check_type($agg_result, $2, $val, 16, ((93252)|0), ((114092)|0));
  STACKTOP = __stackBase__;
  return;
}
function _to_ary($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _check_type($agg_result, $2, $val, 14, ((93356)|0), ((93304)|0));
  STACKTOP = __stackBase__;
  return;
}
function _to_hash($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _check_type($agg_result, $2, $val, 15, ((93544)|0), ((93512)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_include_module($mrb, $c, $m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ins_pos;
      var $p;
      var $ic;
      var $superclass_seen;
      $1=$mrb;
      $2=$c;
      $3=$m;
      var $4=$2;
      $ins_pos=$4;
      label = 2; break;
    case 2: 
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 22; break; }
    case 3: 
      var $9=$2;
      $p=$9;
      $superclass_seen=0;
      var $10=$2;
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$3;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0))==(($15)|(0));
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((94344)|0));
      _mrb_raise($18, $20, ((107872)|0));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$p;
      var $24=(($23)|(0))!=0;
      if ($24) { label = 7; break; } else { label = 17; break; }
    case 7: 
      var $26=$2;
      var $27=$p;
      var $28=(($26)|(0))!=(($27)|(0));
      if ($28) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $30=$p;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & 255;
      var $34=(($33)|(0))==9;
      if ($34) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $superclass_seen=1;
      label = 16; break;
    case 10: 
      var $37=$p;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$3;
      var $41=(($40+16)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($39)|(0))==(($42)|(0));
      if ($43) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $45=$p;
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 & 255;
      var $49=(($48)|(0))==11;
      if ($49) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $51=$superclass_seen;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $54=$p;
      $ins_pos=$54;
      label = 14; break;
    case 14: 
      label = 21; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $58=$p;
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      $p=$60;
      label = 6; break;
    case 17: 
      var $62=$1;
      var $63=$1;
      var $64=(($63+48)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=_mrb_obj_alloc($62, 11, $65);
      var $67=$66;
      $ic=$67;
      var $68=$3;
      var $69=$68;
      var $70=HEAP32[(($69)>>2)];
      var $71=$70 & 255;
      var $72=(($71)|(0))==11;
      if ($72) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $74=$3;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$ic;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 20; break;
    case 19: 
      var $80=$3;
      var $81=$ic;
      var $82=(($81+4)|0);
      HEAP32[(($82)>>2)]=$80;
      label = 20; break;
    case 20: 
      var $84=$3;
      var $85=(($84+16)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$ic;
      var $88=(($87+16)|0);
      HEAP32[(($88)>>2)]=$86;
      var $89=$3;
      var $90=(($89+12)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$ic;
      var $93=(($92+12)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$ins_pos;
      var $95=(($94+20)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$ic;
      var $98=(($97+20)|0);
      HEAP32[(($98)>>2)]=$96;
      var $99=$ic;
      var $100=$ins_pos;
      var $101=(($100+20)|0);
      HEAP32[(($101)>>2)]=$99;
      var $102=$1;
      var $103=$ins_pos;
      var $104=$103;
      var $105=$ic;
      var $106=$105;
      _mrb_field_write_barrier($102, $104, $106);
      var $107=$ic;
      $ins_pos=$107;
      label = 21; break;
    case 21: 
      var $109=$3;
      var $110=(($109+20)|0);
      var $111=HEAP32[(($110)>>2)];
      $3=$111;
      label = 2; break;
    case 22: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_module_eval($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(12);
      var $c;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((107500)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
      var $4=(($3)|(0))==1;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$1;
      var $8=_mrb_class_get($7, ((107212)|0));
      _mrb_raise($6, $8, ((106660)|0));
      label = 3; break;
    case 3: 
      var $10=(($mod)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      $c=$13;
      var $14=$1;
      var $15=$c;
      _mrb_yield_internal($agg_result, $14, $b, 0, 0, $mod, $15);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_singleton_class($agg_result, $mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj;
      $1=$mrb;
      var $2=(($v+8)|0);
      var $3=HEAP32[(($2)>>2)];
      if ((($3)|(0))==0) {
        label = 2; break;
      }
      else if ((($3)|(0))==2) {
        label = 6; break;
      }
      else if ((($3)|(0))==7) {
        label = 7; break;
      }
      else if ((($3)|(0))==4 | (($3)|(0))==3 | (($3)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $5=(($v+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $9=(($v)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+88)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      _mrb_obj_value753($agg_result, $17);
      label = 11; break;
    case 5: 
      var $19=$1;
      var $20=(($19+84)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      _mrb_obj_value753($agg_result, $22);
      label = 11; break;
    case 6: 
      var $24=$1;
      var $25=(($24+80)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      _mrb_obj_value753($agg_result, $27);
      label = 11; break;
    case 7: 
      var $29=$1;
      var $30=(($29+44)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      _mrb_obj_value753($agg_result, $32);
      label = 11; break;
    case 8: 
      var $34=$1;
      var $35=$1;
      var $36=_mrb_class_get($35, ((105988)|0));
      _mrb_raise($34, $36, ((106308)|0));
      _mrb_nil_value777($agg_result);
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $39=(($v)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      $obj=$42;
      var $43=$1;
      var $44=$obj;
      _prepare_singleton_class($43, $44);
      var $45=$obj;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      _mrb_obj_value753($agg_result, $48);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value777($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepare_singleton_class($mrb, $o) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $sc;
      var $c;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$o;
      var $4=$2;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 255;
      var $10=(($9)|(0))==12;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 13; break;
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=_mrb_obj_alloc($13, 12, $16);
      var $18=$17;
      $sc=$18;
      var $19=$sc;
      var $20=(($19+16)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$sc;
      var $22=(($21+12)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$2;
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & 255;
      var $27=(($26)|(0))==9;
      if ($27) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $29=$2;
      var $30=$29;
      $c=$30;
      var $31=$c;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $36=$1;
      var $37=(($36+48)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$sc;
      var $40=(($39+20)|0);
      HEAP32[(($40)>>2)]=$38;
      label = 7; break;
    case 6: 
      var $42=$c;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$sc;
      var $48=(($47+20)|0);
      HEAP32[(($48)>>2)]=$46;
      label = 7; break;
    case 7: 
      label = 12; break;
    case 8: 
      var $51=$2;
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53 & 255;
      var $55=(($54)|(0))==12;
      if ($55) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $57=$2;
      var $58=$57;
      $c=$58;
      var $59=$1;
      var $60=$c;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62;
      _prepare_singleton_class($59, $63);
      var $64=$c;
      var $65=(($64+20)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+4)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$sc;
      var $70=(($69+20)|0);
      HEAP32[(($70)>>2)]=$68;
      label = 11; break;
    case 10: 
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=$sc;
      var $76=(($75+20)|0);
      HEAP32[(($76)>>2)]=$74;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $79=$sc;
      var $80=$2;
      var $81=(($80+4)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$1;
      var $83=$2;
      var $84=$sc;
      var $85=$84;
      _mrb_field_write_barrier($82, $83, $85);
      var $86=$1;
      var $87=$sc;
      var $88=$87;
      var $89=$2;
      _mrb_field_write_barrier($86, $88, $89);
      var $90=$1;
      var $91=$sc;
      var $92=$91;
      var $93=$1;
      var $94=_mrb_intern2($93, ((94508)|0), 12);
      var $95=$2;
      var $96=$95;
      _mrb_obj_value753($3, $96);
      _mrb_obj_iv_set($90, $92, $94, $3);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_define_singleton_method($mrb, $o, $name, $func, $aspec) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$mrb;
  $2=$o;
  $3=$name;
  $4=$func;
  $5=$aspec;
  var $6=$1;
  var $7=$2;
  var $8=$7;
  _prepare_singleton_class($6, $8);
  var $9=$1;
  var $10=$2;
  var $11=(($10+4)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=$1;
  var $14=$3;
  var $15=_mrb_intern754($13, $14);
  var $16=$4;
  var $17=$5;
  _mrb_define_method_id($9, $12, $15, $16, $17);
  return;
}
function _mrb_define_class_method($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$mrb;
  $2=$c;
  $3=$name;
  $4=$func;
  $5=$aspec;
  var $6=$1;
  var $7=$2;
  var $8=$7;
  var $9=$3;
  var $10=$4;
  var $11=$5;
  _mrb_define_singleton_method($6, $8, $9, $10, $11);
  return;
}
function _mrb_define_module_function($mrb, $c, $name, $func, $aspec) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$mrb;
  $2=$c;
  $3=$name;
  $4=$func;
  $5=$aspec;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=$5;
  _mrb_define_class_method($6, $7, $8, $9, $10);
  var $11=$1;
  var $12=$2;
  var $13=$3;
  var $14=$4;
  var $15=$5;
  _mrb_define_method($11, $12, $13, $14, $15);
  return;
}
function _mrb_method_search_vm($mrb, $cp, $mid) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $k;
      var $m;
      var $c;
      var $h;
      $2=$mrb;
      $3=$cp;
      $4=$mid;
      var $5=$3;
      var $6=HEAP32[(($5)>>2)];
      $c=$6;
      label = 2; break;
    case 2: 
      var $8=$c;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $11=$c;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      $h=$13;
      var $14=$h;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $17=$h;
      var $18=$4;
      var $19=_kh_get_mt($17, $18);
      $k=$19;
      var $20=$k;
      var $21=$h;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($20)|(0))!=(($23)|(0));
      if ($24) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $26=$k;
      var $27=$h;
      var $28=(($27+28)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+($26<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      $m=$31;
      var $32=$m;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 7; break; } else { label = 6; break; }
    case 6: 
      label = 10; break;
    case 7: 
      var $36=$c;
      var $37=$3;
      HEAP32[(($37)>>2)]=$36;
      var $38=$m;
      $1=$38;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $41=$c;
      var $42=(($41+20)|0);
      var $43=HEAP32[(($42)>>2)];
      $c=$43;
      label = 2; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $46=$1;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_method_search($mrb, $c, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 64)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      var $3;
      var $m;
      var $inspect=(__stackBase__)+(4);
      var $4=(__stackBase__)+(16);
      var $5=(__stackBase__)+(28);
      var $6=(__stackBase__)+(40);
      var $7=(__stackBase__)+(52);
      $1=$mrb;
      HEAP32[(($2)>>2)]=$c;
      $3=$mid;
      var $8=$1;
      var $9=$3;
      var $10=_mrb_method_search_vm($8, $2, $9);
      $m=$10;
      var $11=$m;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $14=$1;
      var $15=HEAP32[(($2)>>2)];
      var $16=$15;
      _mrb_obj_value753($4, $16);
      _mrb_funcall($inspect, $14, $4, ((109320)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $17=(($inspect)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0)) > 64;
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$1;
      var $26=HEAP32[(($2)>>2)];
      var $27=$26;
      _mrb_obj_value753($5, $27);
      _mrb_any_to_s($6, $25, $5);
      var $28=$inspect;
      var $29=$6;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $31=$1;
      var $32=$3;
      var $33=$1;
      var $34=$3;
      _mrb_sym2str($7, $33, $34);
      _mrb_name_error($31, $32, ((105932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($7)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($7)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $36=$m;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_call_init($mrb, $obj, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$argc;
  $3=$argv;
  var $5=$1;
  var $6=$1;
  var $7=(($6+36)|0);
  var $8=HEAP16[(($7)>>1)];
  var $9=$2;
  var $10=$3;
  _mrb_funcall_argv($4, $5, $obj, $8, $9, $10);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_class_new_instance($agg_result, $mrb, $argc, $argv, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $obj=__stackBase__;
  var $c;
  var $5=(__stackBase__)+(12);
  $1=$mrb;
  $2=$argc;
  $3=$argv;
  $4=$klass;
  var $6=$1;
  var $7=$4;
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9 & 255;
  var $11=$4;
  var $12=_mrb_obj_alloc($6, $10, $11);
  var $13=$12;
  $c=$13;
  var $14=$4;
  var $15=$c;
  var $16=(($15+20)|0);
  HEAP32[(($16)>>2)]=$14;
  var $17=$c;
  var $18=$17;
  _mrb_obj_value753($5, $18);
  var $19=$obj;
  var $20=$5;
  assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
  var $21=$1;
  var $22=$2;
  var $23=$3;
  _mrb_obj_call_init($21, $obj, $22, $23);
  var $24=$agg_result;
  var $25=$obj;
  assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_instance_new($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 56)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $o;
      var $ttype;
      var $obj=__stackBase__;
      var $blk=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(24);
      var $argc=(__stackBase__)+(28);
      var $2=(__stackBase__)+(32);
      var $3=(__stackBase__)+(44);
      $1=$mrb;
      var $4=(($cv)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $c=$7;
      var $8=$c;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $12=$11 & 2097151;
      var $13=$12 & 255;
      $ttype=$13;
      var $14=$ttype;
      var $15=(($14)|(0))==0;
      if ($15) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ttype=8;
      label = 3; break;
    case 3: 
      var $18=$1;
      var $19=$ttype;
      var $20=$c;
      var $21=_mrb_obj_alloc($18, $19, $20);
      var $22=$21;
      $o=$22;
      var $23=$o;
      var $24=$23;
      _mrb_obj_value753($2, $24);
      var $25=$obj;
      var $26=$2;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$1;
      var $28=_mrb_get_args($27, ((105660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$blk,tempInt));
      var $29=$1;
      var $30=$1;
      var $31=(($30+36)|0);
      var $32=HEAP16[(($31)>>1)];
      var $33=HEAP32[(($argc)>>2)];
      var $34=HEAP32[(($argv)>>2)];
      _mrb_funcall_with_block($3, $29, $obj, $32, $33, $34, $blk);
      var $35=$agg_result;
      var $36=$obj;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_new_class($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $super=__stackBase__;
      var $new_class;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((105344)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$super,tempInt));
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+44)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      _mrb_obj_value753($2, $10);
      var $11=$super;
      var $12=$2;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $14=$1;
      var $15=(($super)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=_mrb_class_new($14, $18);
      $new_class=$19;
      var $20=$new_class;
      var $21=$20;
      _mrb_obj_value753($agg_result, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_superclass($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      $1=$mrb;
      var $2=(($klass)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $c=$5;
      var $6=$c;
      var $7=(($6+20)|0);
      var $8=HEAP32[(($7)>>2)];
      $c=$8;
      label = 2; break;
    case 2: 
      var $10=$c;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
    case 3: 
      var $13=$c;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 255;
      var $17=(($16)|(0))==11;
      var $19 = $17;label = 4; break;
    case 4: 
      var $19;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$c;
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      $c=$23;
      label = 2; break;
    case 6: 
      var $25=$c;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 7; break; }
    case 7: 
      _mrb_nil_value777($agg_result);
      label = 9; break;
    case 8: 
      var $29=$c;
      var $30=$29;
      _mrb_obj_value753($agg_result, $30);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_respond_to($c, $mid) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $k;
      var $h;
      $2=$c;
      $3=$mid;
      label = 2; break;
    case 2: 
      var $5=$2;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      $h=$10;
      var $11=$h;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $14=$h;
      var $15=$3;
      var $16=_kh_get_mt($14, $15);
      $k=$16;
      var $17=$k;
      var $18=$h;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|(0))!=(($20)|(0));
      if ($21) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $23=$k;
      var $24=$h;
      var $25=(($24+28)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($23<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=1;
      label = 11; break;
    case 7: 
      $1=0;
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $34=$2;
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];
      $2=$36;
      label = 2; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_respond_to($mrb, $obj, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$mid;
  var $3=$1;
  var $4=_mrb_class786($3, $obj);
  var $5=$2;
  var $6=_mrb_obj_respond_to($4, $5);
  STACKTOP = __stackBase__;
  return $6;
}
function _mrb_class786($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($v+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==0) {
        label = 2; break;
      }
      else if ((($4)|(0))==2) {
        label = 5; break;
      }
      else if ((($4)|(0))==4) {
        label = 6; break;
      }
      else if ((($4)|(0))==3) {
        label = 7; break;
      }
      else if ((($4)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $6=(($v)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 10; break;
    case 4: 
      var $15=$2;
      var $16=(($15+88)|0);
      var $17=HEAP32[(($16)>>2)];
      $1=$17;
      label = 10; break;
    case 5: 
      var $19=$2;
      var $20=(($19+80)|0);
      var $21=HEAP32[(($20)>>2)];
      $1=$21;
      label = 10; break;
    case 6: 
      var $23=$2;
      var $24=(($23+92)|0);
      var $25=HEAP32[(($24)>>2)];
      $1=$25;
      label = 10; break;
    case 7: 
      var $27=$2;
      var $28=(($27+76)|0);
      var $29=HEAP32[(($28)>>2)];
      $1=$29;
      label = 10; break;
    case 8: 
      var $31=$2;
      var $32=(($31+72)|0);
      var $33=HEAP32[(($32)>>2)];
      $1=$33;
      label = 10; break;
    case 9: 
      var $35=(($v)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      $1=$40;
      label = 10; break;
    case 10: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_path($agg_result, $mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 88)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $path=__stackBase__;
      var $name;
      var $len=(__stackBase__)+(12);
      var $classpath;
      var $3=(__stackBase__)+(16);
      var $outer;
      var $sym;
      var $base=(__stackBase__)+(28);
      var $4=(__stackBase__)+(40);
      var $5=(__stackBase__)+(52);
      var $6=(__stackBase__)+(64);
      var $7=(__stackBase__)+(76);
      $1=$mrb;
      $2=$c;
      var $8=$1;
      var $9=_mrb_intern2($8, ((105064)|0), 13);
      $classpath=$9;
      var $10=$1;
      var $11=$2;
      var $12=$11;
      var $13=$classpath;
      _mrb_obj_iv_get($3, $10, $12, $13);
      var $14=$path;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=(($path+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==0;
      if ($18) { label = 2; break; } else { label = 11; break; }
    case 2: 
      var $20=(($path)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 11; break; } else { label = 3; break; }
    case 3: 
      var $25=$1;
      var $26=$2;
      var $27=_mrb_class_outer_module($25, $26);
      $outer=$27;
      var $28=$1;
      var $29=$2;
      var $30=$outer;
      var $31=_mrb_class_sym($28, $29, $30);
      $sym=$31;
      var $32=$sym;
      var $33=(($32 << 16) >> 16);
      var $34=(($33)|(0))==0;
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_nil_value777($agg_result);
      label = 12; break;
    case 5: 
      var $37=$outer;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $40=$outer;
      var $41=$1;
      var $42=(($41+44)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($40)|(0))!=(($43)|(0));
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$1;
      var $47=$outer;
      _mrb_class_path($base, $46, $47);
      var $48=$1;
      var $49=$1;
      _mrb_str_new($4, $49, ((104744)|0), 2);
      _mrb_str_plus($5, $48, $base, $4);
      var $50=$path;
      var $51=$5;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      var $52=$1;
      var $53=$sym;
      var $54=_mrb_sym2name_len($52, $53, $len);
      $name=$54;
      var $55=$1;
      var $56=$1;
      var $57=$name;
      var $58=HEAP32[(($len)>>2)];
      _mrb_str_new($6, $56, $57, $58);
      _mrb_str_concat($55, $path, $6);
      label = 9; break;
    case 8: 
      var $60=$1;
      var $61=$sym;
      var $62=_mrb_sym2name_len($60, $61, $len);
      $name=$62;
      var $63=$1;
      var $64=$name;
      var $65=HEAP32[(($len)>>2)];
      _mrb_str_new($7, $63, $64, $65);
      var $66=$path;
      var $67=$7;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $70=$1;
      var $71=$2;
      var $72=$71;
      var $73=$classpath;
      _mrb_obj_iv_set($70, $72, $73, $path);
      label = 11; break;
    case 11: 
      var $75=$agg_result;
      var $76=$path;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class_name($mrb, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $path=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      $1=$mrb;
      $2=$c;
      var $6=$1;
      var $7=$2;
      _mrb_class_path($path, $6, $7);
      var $8=(($path+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=(($path)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $17=$1;
      _mrb_str_new($3, $17, ((104300)|0), 8);
      var $18=$path;
      var $19=$3;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      var $20=$1;
      var $21=$1;
      var $22=$2;
      var $23=$22;
      _mrb_ptr_to_str($4, $21, $23);
      _mrb_str_concat($20, $path, $4);
      var $24=$1;
      _mrb_str_cat($5, $24, $path, ((103896)|0), 1);
      label = 4; break;
    case 4: 
      var $26=(($path)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=(($29+20)|0);
      var $31=HEAP32[(($30)>>2)];
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_classname($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=_mrb_obj_class($3, $obj);
  var $5=_mrb_class_name($2, $4);
  STACKTOP = __stackBase__;
  return $5;
}
function _mrb_obj_class($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_class786($2, $obj);
  var $4=_mrb_class_real($3);
  STACKTOP = __stackBase__;
  return $4;
}
function _mrb_check_inheritable($mrb, $super) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$super;
      var $4=$2;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 & 255;
      var $8=(($7)|(0))!=9;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$1;
      var $12=_mrb_class_get($11, ((105988)|0));
      var $13=$2;
      var $14=$13;
      _mrb_obj_value753($3, $14);
      _mrb_raisef($10, $12, ((103000)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $16=$2;
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18 & 255;
      var $20=(($19)|(0))==12;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $22=$1;
      var $23=$1;
      var $24=_mrb_class_get($23, ((105988)|0));
      _mrb_raise($22, $24, ((103680)|0));
      label = 5; break;
    case 5: 
      var $26=$2;
      var $27=$1;
      var $28=(($27+48)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($26)|(0))==(($29)|(0));
      if ($30) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $32=$1;
      var $33=$1;
      var $34=_mrb_class_get($33, ((105988)|0));
      _mrb_raise($32, $34, ((103464)|0));
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _boot_defclass($mrb, $super) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$mrb;
      $2=$super;
      var $3=$1;
      var $4=$1;
      var $5=(($4+48)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_mrb_obj_alloc($3, 9, $6);
      var $8=$7;
      $c=$8;
      var $9=$2;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$2;
      var $18 = $12;label = 4; break;
    case 3: 
      var $14=$1;
      var $15=(($14+44)|0);
      var $16=HEAP32[(($15)>>2)];
      var $18 = $16;label = 4; break;
    case 4: 
      var $18;
      var $19=$c;
      var $20=(($19+20)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$1;
      var $22=$c;
      var $23=$22;
      var $24=$2;
      var $25=$24;
      _mrb_field_write_barrier($21, $23, $25);
      var $26=$1;
      var $27=_kh_init_mt($26);
      var $28=$c;
      var $29=(($28+16)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$c;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_alias_method($mrb, $c, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $m;
  var $5=__stackBase__;
  $1=$mrb;
  $2=$c;
  $3=$a;
  $4=$b;
  var $6=$1;
  var $7=$2;
  var $8=$4;
  var $9=_mrb_method_search($6, $7, $8);
  $m=$9;
  var $10=$1;
  var $11=$2;
  var $12=$3;
  var $13=$m;
  var $14=$13;
  _mrb_obj_value753($5, $14);
  _mrb_define_method_vm($10, $11, $12, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_define_alias($mrb, $klass, $name1, $name2) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  $1=$mrb;
  $2=$klass;
  $3=$name1;
  $4=$name2;
  var $5=$1;
  var $6=$2;
  var $7=$1;
  var $8=$3;
  var $9=_mrb_intern754($7, $8);
  var $10=$1;
  var $11=$4;
  var $12=_mrb_intern754($10, $11);
  _mrb_alias_method($5, $6, $9, $12);
  return;
}
function _mrb_mod_alias($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $c;
  var $new_value=__stackBase__;
  var $old_value=(__stackBase__)+(12);
  $1=$mrb;
  var $2=(($mod)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $c=$5;
  var $6=$1;
  var $7=_mrb_get_args($6, ((103280)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$new_value,HEAP32[(((tempInt)+(4))>>2)]=$old_value,tempInt));
  var $8=$1;
  var $9=$c;
  var $10=(($new_value)|0);
  var $11=$10;
  var $12=HEAP16[(($11)>>1)];
  var $13=(($old_value)|0);
  var $14=$13;
  var $15=HEAP16[(($14)>>1)];
  _mrb_alias_method($8, $9, $12, $15);
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_undef_method($mrb, $c, $name) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$c;
  $3=$name;
  var $4=$1;
  var $5=$2;
  var $6=$1;
  var $7=$3;
  var $8=_mrb_intern754($6, $7);
  _undef_method($4, $5, $8);
  return;
}
function _undef_method($mrb, $c, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $m=__stackBase__;
      $1=$mrb;
      $2=$c;
      $3=$a;
      label = 2; break;
    case 2: 
      var $5=(($m+8)|0);
      HEAP32[(($5)>>2)]=13;
      var $6=(($m)|0);
      var $7=$6;
      HEAP32[(($7)>>2)]=0;
      label = 3; break;
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=$3;
      _mrb_define_method_vm($9, $10, $11, $m);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_class_method($mrb, $c, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  var $5=(__stackBase__)+(12);
  $1=$mrb;
  $2=$c;
  $3=$name;
  var $6=$1;
  var $7=$1;
  var $8=$2;
  var $9=$8;
  _mrb_obj_value753($4, $9);
  _mrb_singleton_class($5, $7, $4);
  var $10=(($5)|0);
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=$12;
  var $14=$3;
  _mrb_undef_method($6, $13, $14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_undef($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $1=$mrb;
      var $2=(($mod)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $c=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((102972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      label = 2; break;
    case 2: 
      var $9=HEAP32[(($argc)>>2)];
      var $10=((($9)-(1))|0);
      HEAP32[(($argc)>>2)]=$10;
      var $11=(($9)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$1;
      var $14=$c;
      var $15=HEAP32[(($argv)>>2)];
      var $16=(($15)|0);
      var $17=$16;
      var $18=HEAP16[(($17)>>1)];
      _undef_method($13, $14, $18);
      var $19=HEAP32[(($argv)>>2)];
      var $20=(($19+12)|0);
      HEAP32[(($argv)>>2)]=$20;
      label = 2; break;
    case 4: 
      _mrb_nil_value777($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_remove_cvar($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $val=__stackBase__;
      var $id=(__stackBase__)+(12);
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      var $4=(__stackBase__)+(40);
      $1=$mrb;
      var $5=$1;
      var $6=_mrb_get_args($5, ((102800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
      var $7=$1;
      var $8=HEAP16[(($id)>>1)];
      _check_cv_name_sym($7, $8);
      var $9=$1;
      var $10=HEAP16[(($id)>>1)];
      _mrb_iv_remove($2, $9, $mod, $10);
      var $11=$val;
      var $12=$2;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($val+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==5;
      if ($15) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $17=$agg_result;
      var $18=$val;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $20=$1;
      var $21=HEAP16[(($id)>>1)];
      var $22=_mrb_cv_defined($20, $mod, $21);
      var $23=(($22 << 24) >> 24)!=0;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$1;
      var $26=HEAP16[(($id)>>1)];
      var $27=$1;
      var $28=HEAP16[(($id)>>1)];
      _mrb_sym2str($3, $27, $28);
      _mrb_name_error($25, $26, ((102544)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $30=$1;
      var $31=HEAP16[(($id)>>1)];
      var $32=$1;
      var $33=HEAP16[(($id)>>1)];
      _mrb_sym2str($4, $32, $33);
      _mrb_name_error($30, $31, ((102156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_cv_name_sym($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $len=__stackBase__;
      var $3=(__stackBase__)+(4);
      $1=$mrb;
      $2=$id;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_sym2name_len($4, $5, $len);
      $s=$6;
      var $7=HEAP32[(($len)>>2)];
      var $8=(($7)>>>(0)) < 3;
      if ($8) { label = 4; break; } else { label = 2; break; }
    case 2: 
      var $10=$s;
      var $11=(($10)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|(0))==64;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$s;
      var $17=(($16+1)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|(0))==64;
      if ($20) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $22=$1;
      var $23=$2;
      var $24=$1;
      var $25=$2;
      _mrb_sym2str($3, $24, $25);
      _mrb_name_error($22, $23, ((94260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_remove_method($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((102972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      label = 2; break;
    case 2: 
      var $5=HEAP32[(($argc)>>2)];
      var $6=((($5)-(1))|0);
      HEAP32[(($argc)>>2)]=$6;
      var $7=(($5)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$1;
      var $10=HEAP32[(($argv)>>2)];
      var $11=(($10)|0);
      var $12=$11;
      var $13=HEAP16[(($12)>>1)];
      _remove_method($9, $mod, $13);
      var $14=HEAP32[(($argv)>>2)];
      var $15=(($14+12)|0);
      HEAP32[(($argv)>>2)]=$15;
      label = 2; break;
    case 4: 
      var $17=$agg_result;
      var $18=$mod;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _remove_method($mrb, $mod, $mid) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $h;
      var $k;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$mid;
      var $4=(($mod)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $c=$7;
      var $8=$c;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      $h=$10;
      var $11=$h;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $14=$h;
      var $15=$2;
      var $16=_kh_get_mt($14, $15);
      $k=$16;
      var $17=$k;
      var $18=$h;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($17)|(0))!=(($20)|(0));
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$h;
      var $24=$k;
      _kh_del_mt($23, $24);
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $27=$1;
      var $28=$2;
      var $29=$1;
      var $30=$2;
      _mrb_sym2str($3, $29, $30);
      _mrb_name_error($27, $28, ((93612)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($mod)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($mod)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_const_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $id=__stackBase__;
      var $const_defined_p;
      var $2=(__stackBase__)+(12);
      var $sym=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=$1;
      _get_sym_or_str_arg($2, $4);
      var $5=$id;
      var $6=$2;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=(($id+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==4;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($id)|0);
      var $13=$12;
      var $14=HEAP16[(($13)>>1)];
      _check_const_name_sym($11, $14);
      var $15=$1;
      var $16=(($id)|0);
      var $17=$16;
      var $18=HEAP16[(($17)>>1)];
      var $19=_mrb_const_defined($15, $mod, $18);
      $const_defined_p=$19;
      label = 8; break;
    case 3: 
      var $21=$1;
      _check_const_name_str($21, $id);
      var $22=$1;
      _mrb_check_intern_str($3, $22, $id);
      var $23=$sym;
      var $24=$3;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=(($sym+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==0;
      if ($27) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $29=(($sym)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $const_defined_p=0;
      label = 7; break;
    case 6: 
      var $35=$1;
      var $36=(($sym)|0);
      var $37=$36;
      var $38=HEAP16[(($37)>>1)];
      var $39=_mrb_const_defined($35, $mod, $38);
      $const_defined_p=$39;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $42=$const_defined_p;
      _mrb_bool_value793($agg_result, $42);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _get_sym_or_str_arg($agg_result, $mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $sym_or_str=__stackBase__;
      var $obj=(__stackBase__)+(12);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym_or_str,tempInt));
      var $4=(($sym_or_str+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==4;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=(($sym_or_str+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==16;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$agg_result;
      var $13=$sym_or_str;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 5; break;
    case 4: 
      var $15=$1;
      _mrb_funcall($obj, $15, $sym_or_str, ((109320)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $16=$1;
      var $17=$1;
      var $18=_mrb_class_get($17, ((105988)|0));
      _mrb_raisef($16, $18, ((108704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_const_name_sym($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $len=__stackBase__;
      var $3=(__stackBase__)+(4);
      $1=$mrb;
      $2=$id;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_sym2name_len($4, $5, $len);
      $s=$6;
      var $7=HEAP32[(($len)>>2)];
      var $8=(($7)>>>(0)) < 1;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$s;
      var $11=HEAP8[($10)];
      var $12=(($11)&(255));
      var $13=_isupper($12);
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $16=$1;
      var $17=$2;
      var $18=$1;
      var $19=$2;
      _mrb_sym2str($3, $18, $19);
      _mrb_name_error($16, $17, ((93668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_const_name_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0)) < 1;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=(($str)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13+20)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=HEAP8[($15)];
      var $17=(($16)&(255));
      var $18=_isupper($17);
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $21=$1;
      var $22=$1;
      var $23=_mrb_intern_str($22, $str);
      _mrb_name_error($21, $23, ((93668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value793($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_const_get($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((102800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_const_name_sym($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_const_get($agg_result, $6, $mod, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_const_set($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id=__stackBase__;
  var $value=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_const_name_sym($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_const_set($6, $mod, $7, $value);
  var $8=$agg_result;
  var $9=$value;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_remove_const($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $id=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((102800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
      var $6=$1;
      var $7=HEAP16[(($id)>>1)];
      _check_const_name_sym($6, $7);
      var $8=$1;
      var $9=HEAP16[(($id)>>1)];
      _mrb_iv_remove($2, $8, $mod, $9);
      var $10=$val;
      var $11=$2;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($val+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==5;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$1;
      var $17=HEAP16[(($id)>>1)];
      var $18=$1;
      var $19=HEAP16[(($id)>>1)];
      _mrb_sym2str($3, $18, $19);
      _mrb_name_error($16, $17, ((101556)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $21=$agg_result;
      var $22=$val;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_class($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $bob;
  var $obj;
  var $mod;
  var $cls;
  var $2=__stackBase__;
  var $3=(__stackBase__)+(12);
  var $4=(__stackBase__)+(24);
  var $5=(__stackBase__)+(36);
  var $6=(__stackBase__)+(48);
  $1=$mrb;
  var $7=$1;
  var $8=_boot_defclass($7, 0);
  $bob=$8;
  var $9=$1;
  var $10=$bob;
  var $11=_boot_defclass($9, $10);
  $obj=$11;
  var $12=$obj;
  var $13=$1;
  var $14=(($13+44)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=$1;
  var $16=$obj;
  var $17=_boot_defclass($15, $16);
  $mod=$17;
  var $18=$mod;
  var $19=$1;
  var $20=(($19+52)|0);
  HEAP32[(($20)>>2)]=$18;
  var $21=$1;
  var $22=$mod;
  var $23=_boot_defclass($21, $22);
  $cls=$23;
  var $24=$cls;
  var $25=$1;
  var $26=(($25+48)|0);
  HEAP32[(($26)>>2)]=$24;
  var $27=$cls;
  var $28=$cls;
  var $29=(($28+4)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$mod;
  var $31=(($30+4)|0);
  HEAP32[(($31)>>2)]=$27;
  var $32=$obj;
  var $33=(($32+4)|0);
  HEAP32[(($33)>>2)]=$27;
  var $34=$bob;
  var $35=(($34+4)|0);
  HEAP32[(($35)>>2)]=$27;
  var $36=$1;
  var $37=$bob;
  var $38=$37;
  _prepare_singleton_class($36, $38);
  var $39=$1;
  var $40=$obj;
  var $41=$40;
  _prepare_singleton_class($39, $41);
  var $42=$1;
  var $43=$mod;
  var $44=$43;
  _prepare_singleton_class($42, $44);
  var $45=$1;
  var $46=$cls;
  var $47=$46;
  _prepare_singleton_class($45, $47);
  var $48=$1;
  var $49=$bob;
  var $50=$bob;
  var $51=$50;
  _mrb_obj_value753($2, $51);
  _mrb_define_const($48, $49, ((101136)|0), $2);
  var $52=$1;
  var $53=$obj;
  var $54=$bob;
  var $55=$54;
  _mrb_obj_value753($3, $55);
  _mrb_define_const($52, $53, ((101136)|0), $3);
  var $56=$1;
  var $57=$obj;
  var $58=$obj;
  var $59=$58;
  _mrb_obj_value753($4, $59);
  _mrb_define_const($56, $57, ((100848)|0), $4);
  var $60=$1;
  var $61=$obj;
  var $62=$mod;
  var $63=$62;
  _mrb_obj_value753($5, $63);
  _mrb_define_const($60, $61, ((100624)|0), $5);
  var $64=$1;
  var $65=$obj;
  var $66=$cls;
  var $67=$66;
  _mrb_obj_value753($6, $67);
  _mrb_define_const($64, $65, ((100376)|0), $6);
  var $68=$1;
  var $69=$bob;
  var $70=$1;
  var $71=_mrb_intern754($70, ((101136)|0));
  _mrb_name_class($68, $69, $71);
  var $72=$1;
  var $73=$obj;
  var $74=$1;
  var $75=_mrb_intern754($74, ((100848)|0));
  _mrb_name_class($72, $73, $75);
  var $76=$1;
  var $77=$mod;
  var $78=$1;
  var $79=_mrb_intern754($78, ((100624)|0));
  _mrb_name_class($76, $77, $79);
  var $80=$1;
  var $81=$cls;
  var $82=$1;
  var $83=_mrb_intern754($82, ((100376)|0));
  _mrb_name_class($80, $81, $83);
  var $84=$1;
  var $85=$mod;
  _mrb_undef_method($84, $85, ((100176)|0));
  var $86=$cls;
  var $87=$86;
  var $88=HEAP32[(($87)>>2)];
  var $89=$88 >>> 11;
  var $90=$89 & 2097151;
  var $91=$90 & -256;
  var $92=$91 | 9;
  var $93=$cls;
  var $94=$92 & 2097151;
  var $95=$93;
  var $96=$94 & 2097151;
  var $97=$96 << 11;
  var $98=HEAP32[(($95)>>2)];
  var $99=$98 & 2047;
  var $100=$99 | $97;
  HEAP32[(($95)>>2)]=$100;
  var $101=$1;
  var $102=$bob;
  _mrb_define_method($101, $102, ((100008)|0), 416, 0);
  var $103=$1;
  var $104=$bob;
  _mrb_define_method($103, $104, ((99804)|0), 392, 0);
  var $105=$1;
  var $106=$bob;
  _mrb_define_method($105, $106, ((99552)|0), 8, 4096);
  var $107=$1;
  var $108=$cls;
  _mrb_define_class_method($107, $108, ((100176)|0), 540, 4096);
  var $109=$1;
  var $110=$cls;
  _mrb_define_method($109, $110, ((99324)|0), 498, 0);
  var $111=$1;
  var $112=$cls;
  _mrb_define_method($111, $112, ((100176)|0), 608, 4096);
  var $113=$1;
  var $114=$cls;
  _mrb_define_method($113, $114, ((97596)|0), 416, 262144);
  var $115=$mod;
  var $116=$115;
  var $117=HEAP32[(($116)>>2)];
  var $118=$117 >>> 11;
  var $119=$118 & 2097151;
  var $120=$119 & -256;
  var $121=$120 | 10;
  var $122=$mod;
  var $123=$121 & 2097151;
  var $124=$122;
  var $125=$123 & 2097151;
  var $126=$125 << 11;
  var $127=HEAP32[(($124)>>2)];
  var $128=$127 & 2047;
  var $129=$128 | $126;
  HEAP32[(($124)>>2)]=$129;
  var $130=$1;
  var $131=$mod;
  _mrb_define_method($130, $131, ((98864)|0), 486, 262144);
  var $132=$1;
  var $133=$mod;
  _mrb_define_method($132, $133, ((98532)|0), 444, 262144);
  var $134=$1;
  var $135=$mod;
  _mrb_define_method($134, $135, ((98268)|0), 504, 524288);
  var $136=$1;
  var $137=$mod;
  _mrb_define_method($136, $137, ((98024)|0), 644, 262144);
  var $138=$1;
  var $139=$mod;
  _mrb_define_method($138, $139, ((97848)|0), 416, 262144);
  var $140=$1;
  var $141=$mod;
  _mrb_define_method($140, $141, ((97572)|0), 588, 4096);
  var $142=$1;
  var $143=$mod;
  _mrb_define_method($142, $143, ((97440)|0), 50, 262144);
  var $144=$1;
  var $145=$mod;
  _mrb_define_method($144, $145, ((97300)|0), 240, 262144);
  var $146=$1;
  var $147=$mod;
  _mrb_define_method($146, $147, ((97224)|0), 224, 4096);
  var $148=$1;
  var $149=$mod;
  _mrb_define_method($148, $149, ((97100)|0), 416, 262144);
  var $150=$1;
  var $151=$mod;
  _mrb_define_method($150, $151, ((96856)|0), 90, 0);
  var $152=$1;
  var $153=$mod;
  _mrb_define_method($152, $153, ((96652)|0), 170, 4096);
  var $154=$1;
  var $155=$mod;
  _mrb_define_method($154, $155, ((96560)|0), 290, 262144);
  var $156=$1;
  var $157=$mod;
  _mrb_define_method($156, $157, ((96484)|0), 224, 4096);
  var $158=$1;
  var $159=$mod;
  _mrb_define_method($158, $159, ((96408)|0), 12, 262144);
  var $160=$1;
  var $161=$mod;
  _mrb_define_method($160, $161, ((96312)|0), 260, 4096);
  var $162=$1;
  var $163=$mod;
  _mrb_define_method($162, $163, ((96220)|0), 554, 0);
  var $164=$1;
  var $165=$mod;
  _mrb_define_method($164, $165, ((109320)|0), 554, 0);
  var $166=$1;
  var $167=$mod;
  _mrb_define_method($166, $167, ((96128)|0), 596, 4096);
  var $168=$1;
  var $169=$mod;
  _mrb_define_method($168, $169, ((96016)|0), 372, 0);
  var $170=$1;
  var $171=$mod;
  _mrb_define_method($170, $171, ((95960)|0), 2, 4096);
  var $172=$1;
  var $173=$mod;
  _mrb_define_method($172, $173, ((95648)|0), 626, 262144);
  var $174=$1;
  var $175=$mod;
  _mrb_define_method($174, $175, ((95460)|0), 674, 262144);
  var $176=$1;
  var $177=$mod;
  _mrb_define_method($176, $177, ((95376)|0), 402, 524288);
  var $178=$1;
  var $179=$mod;
  _mrb_define_method($178, $179, ((95316)|0), 112, 0);
  var $180=$1;
  var $181=$mod;
  _mrb_define_method($180, $181, ((95264)|0), 184, 262144);
  var $182=$1;
  var $183=$mod;
  _mrb_define_method($182, $183, ((95160)|0), 200, 262144);
  var $184=$1;
  var $185=$mod;
  _mrb_define_method($184, $185, ((95112)|0), 712, 0);
  var $186=$1;
  var $187=$mod;
  _mrb_define_method($186, $187, ((95040)|0), 390, 262144);
  var $188=$1;
  var $189=$mod;
  _mrb_define_class_method($188, $189, ((95316)|0), 634, 4096);
  var $190=$1;
  var $191=$cls;
  _mrb_undef_method($190, $191, ((97300)|0));
  var $192=$1;
  var $193=$cls;
  _mrb_undef_method($192, $193, ((98024)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_init($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_not($agg_result, $mrb, $cv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $cv; $cv = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($cv)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($cv)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($cv)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($cv+8)|0);
  var $3=HEAP32[(($2)>>2)];
  var $4=(($3)|(0))!=0;
  var $5=$4 ^ 1;
  var $6=(($5)&(1));
  var $7=(($6) & 255);
  _mrb_bool_value793($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bob_missing($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 80)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $name=__stackBase__;
      var $a=(__stackBase__)+(12);
      var $alen=(__stackBase__)+(16);
      var $inspect=(__stackBase__)+(20);
      var $2=(__stackBase__)+(32);
      var $3=(__stackBase__)+(44);
      var $4=(__stackBase__)+(56);
      var $5=(__stackBase__)+(68);
      $1=$mrb;
      var $6=$1;
      var $7=_mrb_get_args($6, ((94212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$a,HEAP32[(((tempInt)+(8))>>2)]=$alen,tempInt));
      var $8=(($name+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==4;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_get($13, ((105988)|0));
      _mrb_raise($12, $14, ((94112)|0));
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_intern2($17, ((109320)|0), 7);
      var $19=_mrb_respond_to($16, $mod, $18);
      var $20=(($19)|(0))!=0;
      if ($20) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $22=$1;
      _mrb_funcall($2, $22, $mod, ((109320)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $23=$inspect;
      var $24=$2;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=(($inspect)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0)) > 64;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$1;
      _mrb_any_to_s($3, $33, $mod);
      var $34=$inspect;
      var $35=$3;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 8; break;
    case 7: 
      var $38=$1;
      _mrb_any_to_s($4, $38, $mod);
      var $39=$inspect;
      var $40=$4;
      assert(12 % 1 === 0);HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $42=$1;
      var $43=$1;
      var $44=_mrb_class_get($43, ((94056)|0));
      var $45=$1;
      var $46=(($name)|0);
      var $47=$46;
      var $48=HEAP16[(($47)>>1)];
      _mrb_sym2str($5, $45, $48);
      _mrb_raisef($42, $44, ((93756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($inspect)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($inspect)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($inspect)+(8))>>2)],tempInt));
      _mrb_nil_value777($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cvar_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $id=__stackBase__;
      var $defined_p;
      var $2=(__stackBase__)+(12);
      var $sym=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=$1;
      _get_sym_or_str_arg($2, $4);
      var $5=$id;
      var $6=$2;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=(($id+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==4;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=(($id)|0);
      var $13=$12;
      var $14=HEAP16[(($13)>>1)];
      _check_cv_name_sym($11, $14);
      var $15=$1;
      var $16=(($id)|0);
      var $17=$16;
      var $18=HEAP16[(($17)>>1)];
      var $19=_mrb_cv_defined($15, $mod, $18);
      $defined_p=$19;
      label = 8; break;
    case 3: 
      var $21=$1;
      _check_cv_name_str($21, $id);
      var $22=$1;
      _mrb_check_intern_str($3, $22, $id);
      var $23=$sym;
      var $24=$3;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=(($sym+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))==0;
      if ($27) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $29=(($sym)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))!=0;
      if ($32) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $defined_p=0;
      label = 7; break;
    case 6: 
      var $35=$1;
      var $36=(($sym)|0);
      var $37=$36;
      var $38=HEAP16[(($37)>>1)];
      var $39=_mrb_cv_defined($35, $mod, $38);
      $defined_p=$39;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $42=$defined_p;
      _mrb_bool_value793($agg_result, $42);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_cvar_get($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((102800)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_cv_name_sym($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_cv_get($agg_result, $6, $mod, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_cvar_set($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $value=__stackBase__;
  var $id=(__stackBase__)+(12);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$value,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_cv_name_sym($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_cv_set($6, $mod, $7, $value);
  var $8=$agg_result;
  var $9=$value;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_extend_object($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj=__stackBase__;
  var $2=(__stackBase__)+(12);
  $1=$mrb;
  var $3=$1;
  _mrb_check_type($3, $mod, 10);
  var $4=$1;
  var $5=_mrb_get_args($4, ((94876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
  var $6=$1;
  var $7=$1;
  _mrb_singleton_class($2, $7, $obj);
  var $8=(($2)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=(($mod)|0);
  var $13=$12;
  var $14=HEAP32[(($13)>>2)];
  var $15=$14;
  _mrb_include_module($6, $11, $15);
  var $16=$agg_result;
  var $17=$mod;
  assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_include($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $2=(__stackBase__)+(8);
      var $3=(__stackBase__)+(20);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((102972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $7=$i;
      var $8=HEAP32[(($argc)>>2)];
      var $9=(($7)|(0)) < (($8)|(0));
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$1;
      var $12=$i;
      var $13=HEAP32[(($argv)>>2)];
      var $14=(($13+((($12)*(12))&-1))|0);
      _mrb_check_type($11, $14, 10);
      label = 4; break;
    case 4: 
      var $16=$i;
      var $17=((($16)+(1))|0);
      $i=$17;
      label = 2; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $20=HEAP32[(($argc)>>2)];
      var $21=((($20)-(1))|0);
      HEAP32[(($argc)>>2)]=$21;
      var $22=(($20)|(0))!=0;
      if ($22) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $24=$1;
      var $25=HEAP32[(($argc)>>2)];
      var $26=HEAP32[(($argv)>>2)];
      var $27=(($26+((($25)*(12))&-1))|0);
      _mrb_funcall($2, $24, $27, ((97300)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
      var $28=$1;
      var $29=HEAP32[(($argc)>>2)];
      var $30=HEAP32[(($argv)>>2)];
      var $31=(($30+((($29)*(12))&-1))|0);
      _mrb_funcall($3, $28, $31, ((97100)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($klass)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($klass)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($klass)+(8))>>2)],tempInt));
      label = 6; break;
    case 8: 
      var $33=$agg_result;
      var $34=$klass;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_include_p($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mod2=__stackBase__;
      var $c;
      $1=$mrb;
      var $2=(($mod)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $c=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((94876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mod2,tempInt));
      var $8=$1;
      _mrb_check_type($8, $mod2, 10);
      label = 2; break;
    case 2: 
      var $10=$c;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $13=$c;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 255;
      var $17=(($16)|(0))==11;
      if ($17) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $19=$c;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($mod2)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($21)|(0))==(($25)|(0));
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_true_value($agg_result);
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$c;
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      $c=$32;
      label = 2; break;
    case 8: 
      _mrb_false_value($agg_result);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_append_features($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $klass=__stackBase__;
  $1=$mrb;
  var $2=$1;
  _mrb_check_type($2, $mod, 10);
  var $3=$1;
  var $4=_mrb_get_args($3, ((94876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$klass,tempInt));
  var $5=$1;
  var $6=(($klass)|0);
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=$8;
  var $10=(($mod)|0);
  var $11=$10;
  var $12=HEAP32[(($11)>>2)];
  var $13=$12;
  _mrb_include_module($5, $9, $13);
  var $14=$agg_result;
  var $15=$mod;
  assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_included_modules($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $result=__stackBase__;
      var $c;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      $1=$mrb;
      var $4=(($self)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $c=$7;
      var $8=$1;
      _mrb_ary_new($2, $8);
      var $9=$result;
      var $10=$2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 2; break;
    case 2: 
      var $12=$c;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $15=$c;
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17 & 255;
      var $19=(($18)|(0))==11;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$1;
      var $22=$c;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      _mrb_obj_value753($3, $25);
      _mrb_ary_push($21, $result, $3);
      label = 5; break;
    case 5: 
      var $27=$c;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      $c=$29;
      label = 2; break;
    case 6: 
      var $31=$agg_result;
      var $32=$result;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_instance_methods($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $c;
  var $recur=__stackBase__;
  $1=$mrb;
  var $2=(($mod)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $c=$5;
  HEAP8[($recur)]=1;
  var $6=$1;
  var $7=_mrb_get_args($6, ((94340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $8=$1;
  var $9=HEAP8[($recur)];
  var $10=$c;
  _class_instance_method_list($agg_result, $8, $9, $10, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_method_defined($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $id=__stackBase__;
      var $method_defined_p;
      var $2=(__stackBase__)+(12);
      var $sym=(__stackBase__)+(24);
      $1=$mrb;
      var $3=$1;
      _get_sym_or_str_arg($2, $3);
      var $4=$id;
      var $5=$2;
      assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($5)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($5)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($5)+(8))>>2)];
      var $6=(($id+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==4;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=(($mod)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($id)|0);
      var $15=$14;
      var $16=HEAP16[(($15)>>1)];
      var $17=_mrb_obj_respond_to($13, $16);
      var $18=(($17) & 255);
      $method_defined_p=$18;
      label = 8; break;
    case 3: 
      var $20=$1;
      _mrb_check_intern_str($sym, $20, $id);
      var $21=(($sym+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))==0;
      if ($23) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $25=(($sym)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))!=0;
      if ($28) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $method_defined_p=0;
      label = 7; break;
    case 6: 
      var $31=(($mod)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      var $35=(($sym)|0);
      var $36=$35;
      var $37=HEAP16[(($36)>>1)];
      var $38=_mrb_obj_respond_to($34, $37);
      var $39=(($38) & 255);
      $method_defined_p=$39;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $42=$method_defined_p;
      _mrb_bool_value793($agg_result, $42);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_to_s($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 192)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str=__stackBase__;
      var $v=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(60);
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(84);
      var $c;
      var $path=(__stackBase__)+(96);
      var $8=(__stackBase__)+(108);
      var $9=(__stackBase__)+(120);
      var $10=(__stackBase__)+(132);
      var $11=(__stackBase__)+(144);
      var $12=(__stackBase__)+(156);
      var $13=(__stackBase__)+(168);
      var $14=(__stackBase__)+(180);
      $1=$mrb;
      var $15=(($klass+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))==12;
      if ($17) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $19=$1;
      var $20=$1;
      var $21=_mrb_intern2($20, ((94508)|0), 12);
      _mrb_iv_get($v, $19, $klass, $21);
      var $22=$1;
      _mrb_str_new($2, $22, ((104300)|0), 8);
      var $23=$str;
      var $24=$2;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=(($v+8)|0);
      var $26=HEAP32[(($25)>>2)];
      if ((($26)|(0))==9 | (($26)|(0))==10 | (($26)|(0))==12) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 3: 
      var $28=$1;
      var $29=$1;
      _mrb_inspect($3, $29, $v);
      _mrb_str_append($4, $28, $str, $3);
      label = 5; break;
    case 4: 
      var $31=$1;
      var $32=$1;
      _mrb_any_to_s($5, $32, $v);
      _mrb_str_append($6, $31, $str, $5);
      label = 5; break;
    case 5: 
      var $34=$1;
      _mrb_str_cat($7, $34, $str, ((103896)|0), 1);
      label = 15; break;
    case 6: 
      var $36=$1;
      _mrb_str_buf_new($8, $36, 32);
      var $37=$str;
      var $38=$8;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      var $39=(($klass)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      $c=$42;
      var $43=$1;
      var $44=$c;
      _mrb_class_path($9, $43, $44);
      var $45=$path;
      var $46=$9;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      var $47=(($path+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))==0;
      if ($49) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $51=(($path)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))!=0;
      if ($54) { label = 13; break; } else { label = 8; break; }
    case 8: 
      var $56=(($klass+8)|0);
      var $57=HEAP32[(($56)>>2)];
      if ((($57)|(0))==9) {
        label = 9; break;
      }
      else if ((($57)|(0))==10) {
        label = 10; break;
      }
      else {
      label = 11; break;
      }
    case 9: 
      var $59=$1;
      _mrb_str_cat($10, $59, $str, ((104300)|0), 8);
      label = 12; break;
    case 10: 
      var $61=$1;
      _mrb_str_cat($11, $61, $str, ((94444)|0), 9);
      label = 12; break;
    case 11: 
      var $63=$1;
      _mrb_str_cat($12, $63, $str, ((94400)|0), 9);
      label = 12; break;
    case 12: 
      var $65=$1;
      var $66=$1;
      var $67=$c;
      var $68=$67;
      _mrb_ptr_to_str($13, $66, $68);
      _mrb_str_concat($65, $str, $13);
      var $69=$1;
      _mrb_str_cat($14, $69, $str, ((103896)|0), 1);
      label = 14; break;
    case 13: 
      var $71=$str;
      var $72=$path;
      assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $75=$agg_result;
      var $76=$str;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_ancestors($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $result=__stackBase__;
      var $c;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      $1=$mrb;
      var $6=(($self)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $c=$9;
      var $10=$1;
      _mrb_ary_new($2, $10);
      var $11=$result;
      var $12=$2;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=$1;
      var $14=$c;
      var $15=$14;
      _mrb_obj_value753($3, $15);
      _mrb_ary_push($13, $result, $3);
      var $16=$c;
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      $c=$18;
      label = 2; break;
    case 2: 
      var $20=$c;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $23=$c;
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 & 255;
      var $27=(($26)|(0))==11;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$1;
      var $30=$c;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      _mrb_obj_value753($4, $33);
      _mrb_ary_push($29, $result, $4);
      label = 8; break;
    case 5: 
      var $35=$c;
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37 & 255;
      var $39=(($38)|(0))!=12;
      if ($39) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $41=$1;
      var $42=$c;
      var $43=$42;
      _mrb_obj_value753($5, $43);
      _mrb_ary_push($41, $result, $5);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $46=$c;
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      $c=$48;
      label = 2; break;
    case 9: 
      var $50=$agg_result;
      var $51=$result;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mod_define_method($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $p;
      var $mid=__stackBase__;
      var $blk=(__stackBase__)+(4);
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $c=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((94688)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mid,HEAP32[(((tempInt)+(4))>>2)]=$blk,tempInt));
      var $8=(($blk+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=(($blk)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((94344)|0));
      _mrb_raise($17, $19, ((94556)|0));
      label = 4; break;
    case 4: 
      var $21=$1;
      var $22=$1;
      var $23=(($22+56)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=_mrb_obj_alloc($21, 13, $24);
      var $26=$25;
      $p=$26;
      var $27=$p;
      var $28=(($blk)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      _mrb_proc_copy($27, $31);
      var $32=$1;
      var $33=$c;
      var $34=HEAP16[(($mid)>>1)];
      var $35=$p;
      _mrb_define_method_raw($32, $33, $34, $35);
      var $36=$agg_result;
      var $37=$blk;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mod_eqq($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj=__stackBase__;
  var $eqq;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((94876)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
  var $4=$1;
  var $5=(($mod)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=_mrb_obj_is_kind_of($4, $obj, $8);
  var $10=(($9) & 255);
  $eqq=$10;
  var $11=$eqq;
  _mrb_bool_value793($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mod_s_constants($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=_mrb_class_get($3, ((107212)|0));
  _mrb_raise($2, $4, ((94928)|0));
  _mrb_nil_value777($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_true_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_cv_name_str($mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s;
      var $len;
      $1=$mrb;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      $s=$7;
      var $8=(($str)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      $len=$13;
      var $14=$len;
      var $15=(($14)>>>(0)) < 3;
      if ($15) { label = 4; break; } else { label = 2; break; }
    case 2: 
      var $17=$s;
      var $18=(($17)|0);
      var $19=HEAP8[($18)];
      var $20=(($19 << 24) >> 24);
      var $21=(($20)|(0))==64;
      if ($21) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $23=$s;
      var $24=(($23+1)|0);
      var $25=HEAP8[($24)];
      var $26=(($25 << 24) >> 24);
      var $27=(($26)|(0))==64;
      if ($27) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $29=$1;
      var $30=$1;
      var $31=_mrb_intern_str($30, $str);
      _mrb_name_error($29, $31, ((94260)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _check_type($agg_result, $mrb, $val, $t, $c, $m) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tmp=__stackBase__;
      var $5=(__stackBase__)+(12);
      var $6=(__stackBase__)+(24);
      $1=$mrb;
      $2=$t;
      $3=$c;
      $4=$m;
      var $7=$1;
      var $8=$2;
      var $9=$3;
      var $10=$4;
      _mrb_check_convert_type($5, $7, $val, $8, $9, $10);
      var $11=$tmp;
      var $12=$5;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      var $13=(($tmp+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))==0;
      if ($15) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $17=(($tmp)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))!=0;
      if ($20) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $22=$1;
      var $23=$1;
      var $24=_mrb_class_get($23, ((105988)|0));
      var $25=$1;
      var $26=$3;
      _mrb_str_new_cstr($6, $25, $26);
      _mrb_raisef($22, $24, ((93400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $28=$agg_result;
      var $29=$tmp;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_malloc($s, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $p;
      $1=$s;
      $2=$len;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=_mrb_malloc($5, $6);
      $p=$7;
      var $8=$p;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      _codegen_error($11, ((94980)|0));
      label = 3; break;
    case 3: 
      var $13=$p;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_realloc($s, $p, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$s;
      $2=$p;
      $3=$len;
      var $4=$1;
      var $5=(($4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=$3;
      var $9=_mrb_realloc($6, $7, $8);
      $2=$9;
      var $10=$2;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 2; break; }
    case 2: 
      var $13=$3;
      var $14=(($13)>>>(0)) > 0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$1;
      _codegen_error($16, ((109672)|0));
      label = 4; break;
    case 4: 
      var $18=$2;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _codedump_all($mrb, $start) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      $1=$mrb;
      $2=$start;
      var $3=$2;
      $i=$3;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$1;
      var $7=(($6+28)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)>>>(0)) < (($8)>>>(0));
      if ($9) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $11=$1;
      var $12=$i;
      _codedump($11, $12);
      label = 4; break;
    case 4: 
      var $14=$i;
      var $15=((($14)+(1))|0);
      $i=$15;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_error($s, $message) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$s;
      $2=$message;
      var $3=$1;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 2; break; }
    case 2: 
      STACKTOP = __stackBase__;
      return;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$1;
      var $9=(($8+48)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$1;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      _mrb_pool_close($15);
      var $16=$1;
      var $17=(($16+48)|0);
      var $18=HEAP32[(($17)>>2)];
      $1=$18;
      label = 4; break;
    case 6: 
      var $20=$1;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      _mrb_pool_close($22);
      var $23=$1;
      var $24=(($23+80)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $28=$1;
      var $29=(($28+84)|0);
      var $30=HEAP16[(($29)>>1)];
      var $31=(($30 << 16) >> 16);
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $34=HEAP32[((_stderr)>>2)];
      var $35=$1;
      var $36=(($35+80)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$1;
      var $39=(($38+84)|0);
      var $40=HEAP16[(($39)>>1)];
      var $41=(($40 << 16) >> 16);
      var $42=$2;
      var $43=_fprintf($34, ((114064)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$41,HEAP32[(((tempInt)+(8))>>2)]=$42,tempInt));
      label = 10; break;
    case 9: 
      var $45=HEAP32[((_stderr)>>2)];
      var $46=$2;
      var $47=_fprintf($45, ((113680)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$46,tempInt));
      label = 10; break;
    case 10: 
      var $49=$1;
      var $50=(($49+8)|0);
      var $51=(($50)|0);
      _longjmp($51, 1);
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
function _codedump($mrb, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $irep;
      var $i;
      var $ai;
      var $c;
      var $s=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      $2=$n;
      var $4=$2;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+($4<<2))|0);
      var $9=HEAP32[(($8)>>2)];
      $irep=$9;
      var $10=$irep;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 83; break;
    case 3: 
      var $14=$2;
      var $15=$irep;
      var $16=(($15+6)|0);
      var $17=HEAP16[(($16)>>1)];
      var $18=(($17)&(65535));
      var $19=$irep;
      var $20=(($19+4)|0);
      var $21=HEAP16[(($20)>>1)];
      var $22=(($21)&(65535));
      var $23=$irep;
      var $24=(($23+36)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$irep;
      var $27=(($26+40)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=_printf(((106236)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$22,HEAP32[(((tempInt)+(12))>>2)]=$25,HEAP32[(((tempInt)+(16))>>2)]=$28,tempInt));
      $i=0;
      label = 4; break;
    case 4: 
      var $31=$i;
      var $32=$irep;
      var $33=(($32+32)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($31)>>>(0)) < (($34)>>>(0));
      if ($35) { label = 5; break; } else { label = 82; break; }
    case 5: 
      var $37=$1;
      var $38=_mrb_gc_arena_save($37);
      $ai=$38;
      var $39=$i;
      var $40=_printf(((105896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$39,tempInt));
      var $41=$i;
      var $42=$irep;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+($41<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      $c=$46;
      var $47=$c;
      var $48=$47 & 127;
      if ((($48)|(0))==0) {
        label = 6; break;
      }
      else if ((($48)|(0))==1) {
        label = 7; break;
      }
      else if ((($48)|(0))==2) {
        label = 8; break;
      }
      else if ((($48)|(0))==3) {
        label = 9; break;
      }
      else if ((($48)|(0))==4) {
        label = 10; break;
      }
      else if ((($48)|(0))==5) {
        label = 11; break;
      }
      else if ((($48)|(0))==6) {
        label = 12; break;
      }
      else if ((($48)|(0))==7) {
        label = 13; break;
      }
      else if ((($48)|(0))==8) {
        label = 14; break;
      }
      else if ((($48)|(0))==9) {
        label = 15; break;
      }
      else if ((($48)|(0))==10) {
        label = 16; break;
      }
      else if ((($48)|(0))==17) {
        label = 17; break;
      }
      else if ((($48)|(0))==18) {
        label = 18; break;
      }
      else if ((($48)|(0))==19) {
        label = 19; break;
      }
      else if ((($48)|(0))==20) {
        label = 20; break;
      }
      else if ((($48)|(0))==13) {
        label = 21; break;
      }
      else if ((($48)|(0))==14) {
        label = 22; break;
      }
      else if ((($48)|(0))==21) {
        label = 23; break;
      }
      else if ((($48)|(0))==22) {
        label = 24; break;
      }
      else if ((($48)|(0))==15) {
        label = 25; break;
      }
      else if ((($48)|(0))==16) {
        label = 26; break;
      }
      else if ((($48)|(0))==23) {
        label = 27; break;
      }
      else if ((($48)|(0))==24) {
        label = 28; break;
      }
      else if ((($48)|(0))==25) {
        label = 29; break;
      }
      else if ((($48)|(0))==32) {
        label = 30; break;
      }
      else if ((($48)|(0))==33) {
        label = 31; break;
      }
      else if ((($48)|(0))==42) {
        label = 32; break;
      }
      else if ((($48)|(0))==36) {
        label = 33; break;
      }
      else if ((($48)|(0))==37) {
        label = 34; break;
      }
      else if ((($48)|(0))==38) {
        label = 35; break;
      }
      else if ((($48)|(0))==41) {
        label = 36; break;
      }
      else if ((($48)|(0))==43) {
        label = 42; break;
      }
      else if ((($48)|(0))==64) {
        label = 43; break;
      }
      else if ((($48)|(0))==65) {
        label = 44; break;
      }
      else if ((($48)|(0))==70) {
        label = 45; break;
      }
      else if ((($48)|(0))==44) {
        label = 46; break;
      }
      else if ((($48)|(0))==45) {
        label = 47; break;
      }
      else if ((($48)|(0))==46) {
        label = 48; break;
      }
      else if ((($48)|(0))==47) {
        label = 49; break;
      }
      else if ((($48)|(0))==48) {
        label = 50; break;
      }
      else if ((($48)|(0))==49) {
        label = 51; break;
      }
      else if ((($48)|(0))==51) {
        label = 52; break;
      }
      else if ((($48)|(0))==52) {
        label = 53; break;
      }
      else if ((($48)|(0))==53) {
        label = 54; break;
      }
      else if ((($48)|(0))==54) {
        label = 55; break;
      }
      else if ((($48)|(0))==50) {
        label = 56; break;
      }
      else if ((($48)|(0))==74) {
        label = 57; break;
      }
      else if ((($48)|(0))==55) {
        label = 58; break;
      }
      else if ((($48)|(0))==56) {
        label = 59; break;
      }
      else if ((($48)|(0))==57) {
        label = 60; break;
      }
      else if ((($48)|(0))==58) {
        label = 61; break;
      }
      else if ((($48)|(0))==60) {
        label = 62; break;
      }
      else if ((($48)|(0))==61) {
        label = 63; break;
      }
      else if ((($48)|(0))==62) {
        label = 64; break;
      }
      else if ((($48)|(0))==63) {
        label = 65; break;
      }
      else if ((($48)|(0))==66) {
        label = 66; break;
      }
      else if ((($48)|(0))==67) {
        label = 67; break;
      }
      else if ((($48)|(0))==68) {
        label = 68; break;
      }
      else if ((($48)|(0))==69) {
        label = 69; break;
      }
      else if ((($48)|(0))==71) {
        label = 70; break;
      }
      else if ((($48)|(0))==72) {
        label = 71; break;
      }
      else if ((($48)|(0))==75) {
        label = 72; break;
      }
      else if ((($48)|(0))==30) {
        label = 73; break;
      }
      else if ((($48)|(0))==26) {
        label = 74; break;
      }
      else if ((($48)|(0))==27) {
        label = 75; break;
      }
      else if ((($48)|(0))==29) {
        label = 76; break;
      }
      else if ((($48)|(0))==28) {
        label = 77; break;
      }
      else if ((($48)|(0))==31) {
        label = 78; break;
      }
      else {
      label = 79; break;
      }
    case 6: 
      var $50=_printf(((105620)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 80; break;
    case 7: 
      var $52=$c;
      var $53=$52 >>> 23;
      var $54=$53 & 511;
      var $55=$c;
      var $56=$55 >>> 14;
      var $57=$56 & 511;
      var $58=_printf(((105292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$54,HEAP32[(((tempInt)+(4))>>2)]=$57,tempInt));
      label = 80; break;
    case 8: 
      var $60=$c;
      var $61=$60 >>> 23;
      var $62=$61 & 511;
      var $63=$c;
      var $64=$63 >>> 7;
      var $65=$64 & 65535;
      var $66=_printf(((105012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$62,HEAP32[(((tempInt)+(4))>>2)]=$65,tempInt));
      label = 80; break;
    case 9: 
      var $68=$c;
      var $69=$68 >>> 23;
      var $70=$69 & 511;
      var $71=$c;
      var $72=$71 >>> 7;
      var $73=$72 & 65535;
      var $74=((($73)-(32767))|0);
      var $75=_printf(((104704)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$70,HEAP32[(((tempInt)+(4))>>2)]=$74,tempInt));
      label = 80; break;
    case 10: 
      var $77=$c;
      var $78=$77 >>> 23;
      var $79=$78 & 511;
      var $80=$1;
      var $81=$c;
      var $82=$81 >>> 7;
      var $83=$82 & 65535;
      var $84=$irep;
      var $85=(($84+20)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+($83<<1))|0);
      var $88=HEAP16[(($87)>>1)];
      var $89=_mrb_sym2name($80, $88);
      var $90=_printf(((104196)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$79,HEAP32[(((tempInt)+(4))>>2)]=$89,tempInt));
      label = 80; break;
    case 11: 
      var $92=$c;
      var $93=$92 >>> 23;
      var $94=$93 & 511;
      var $95=_printf(((103864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$94,tempInt));
      label = 80; break;
    case 12: 
      var $97=$c;
      var $98=$97 >>> 23;
      var $99=$98 & 511;
      var $100=_printf(((103644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$99,tempInt));
      label = 80; break;
    case 13: 
      var $102=$c;
      var $103=$102 >>> 23;
      var $104=$103 & 511;
      var $105=_printf(((103432)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$104,tempInt));
      label = 80; break;
    case 14: 
      var $107=$c;
      var $108=$107 >>> 23;
      var $109=$108 & 511;
      var $110=_printf(((103240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$109,tempInt));
      label = 80; break;
    case 15: 
      var $112=$c;
      var $113=$112 >>> 23;
      var $114=$113 & 511;
      var $115=$1;
      var $116=$c;
      var $117=$116 >>> 7;
      var $118=$117 & 65535;
      var $119=$irep;
      var $120=(($119+20)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+($118<<1))|0);
      var $123=HEAP16[(($122)>>1)];
      var $124=_mrb_sym2name($115, $123);
      var $125=_printf(((102924)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$114,HEAP32[(((tempInt)+(4))>>2)]=$124,tempInt));
      label = 80; break;
    case 16: 
      var $127=$1;
      var $128=$c;
      var $129=$128 >>> 7;
      var $130=$129 & 65535;
      var $131=$irep;
      var $132=(($131+20)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+($130<<1))|0);
      var $135=HEAP16[(($134)>>1)];
      var $136=_mrb_sym2name($127, $135);
      var $137=$c;
      var $138=$137 >>> 23;
      var $139=$138 & 511;
      var $140=_printf(((102760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$136,HEAP32[(((tempInt)+(4))>>2)]=$139,tempInt));
      label = 80; break;
    case 17: 
      var $142=$c;
      var $143=$142 >>> 23;
      var $144=$143 & 511;
      var $145=$1;
      var $146=$c;
      var $147=$146 >>> 7;
      var $148=$147 & 65535;
      var $149=$irep;
      var $150=(($149+20)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($151+($148<<1))|0);
      var $153=HEAP16[(($152)>>1)];
      var $154=_mrb_sym2name($145, $153);
      var $155=_printf(((102504)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$144,HEAP32[(((tempInt)+(4))>>2)]=$154,tempInt));
      label = 80; break;
    case 18: 
      var $157=$1;
      var $158=$c;
      var $159=$158 >>> 7;
      var $160=$159 & 65535;
      var $161=$irep;
      var $162=(($161+20)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+($160<<1))|0);
      var $165=HEAP16[(($164)>>1)];
      var $166=_mrb_sym2name($157, $165);
      var $167=$c;
      var $168=$167 >>> 23;
      var $169=$168 & 511;
      var $170=_printf(((102124)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$166,HEAP32[(((tempInt)+(4))>>2)]=$169,tempInt));
      label = 80; break;
    case 19: 
      var $172=$c;
      var $173=$172 >>> 23;
      var $174=$173 & 511;
      var $175=$c;
      var $176=$175 >>> 23;
      var $177=$176 & 511;
      var $178=$1;
      var $179=$c;
      var $180=$179 >>> 7;
      var $181=$180 & 65535;
      var $182=$irep;
      var $183=(($182+20)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184+($181<<1))|0);
      var $186=HEAP16[(($185)>>1)];
      var $187=_mrb_sym2name($178, $186);
      var $188=_printf(((101920)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$174,HEAP32[(((tempInt)+(4))>>2)]=$177,HEAP32[(((tempInt)+(8))>>2)]=$187,tempInt));
      label = 80; break;
    case 20: 
      var $190=$c;
      var $191=$190 >>> 23;
      var $192=$191 & 511;
      var $193=((($192)+(1))|0);
      var $194=$1;
      var $195=$c;
      var $196=$195 >>> 7;
      var $197=$196 & 65535;
      var $198=$irep;
      var $199=(($198+20)|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=(($200+($197<<1))|0);
      var $202=HEAP16[(($201)>>1)];
      var $203=_mrb_sym2name($194, $202);
      var $204=$c;
      var $205=$204 >>> 23;
      var $206=$205 & 511;
      var $207=_printf(((101468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$193,HEAP32[(((tempInt)+(4))>>2)]=$203,HEAP32[(((tempInt)+(8))>>2)]=$206,tempInt));
      label = 80; break;
    case 21: 
      var $209=$c;
      var $210=$209 >>> 23;
      var $211=$210 & 511;
      var $212=$1;
      var $213=$c;
      var $214=$213 >>> 7;
      var $215=$214 & 65535;
      var $216=$irep;
      var $217=(($216+20)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=(($218+($215<<1))|0);
      var $220=HEAP16[(($219)>>1)];
      var $221=_mrb_sym2name($212, $220);
      var $222=_printf(((101096)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$211,HEAP32[(((tempInt)+(4))>>2)]=$221,tempInt));
      label = 80; break;
    case 22: 
      var $224=$1;
      var $225=$c;
      var $226=$225 >>> 7;
      var $227=$226 & 65535;
      var $228=$irep;
      var $229=(($228+20)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($230+($227<<1))|0);
      var $232=HEAP16[(($231)>>1)];
      var $233=_mrb_sym2name($224, $232);
      var $234=$c;
      var $235=$234 >>> 23;
      var $236=$235 & 511;
      var $237=_printf(((100812)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$233,HEAP32[(((tempInt)+(4))>>2)]=$236,tempInt));
      label = 80; break;
    case 23: 
      var $239=$c;
      var $240=$239 >>> 23;
      var $241=$240 & 511;
      var $242=$c;
      var $243=$242 >>> 14;
      var $244=$243 & 511;
      var $245=$c;
      var $246=$245 >>> 7;
      var $247=$246 & 127;
      var $248=_printf(((100568)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$241,HEAP32[(((tempInt)+(4))>>2)]=$244,HEAP32[(((tempInt)+(8))>>2)]=$247,tempInt));
      label = 80; break;
    case 24: 
      var $250=$c;
      var $251=$250 >>> 23;
      var $252=$251 & 511;
      var $253=$c;
      var $254=$253 >>> 14;
      var $255=$254 & 511;
      var $256=$c;
      var $257=$256 >>> 7;
      var $258=$257 & 127;
      var $259=_printf(((100340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$252,HEAP32[(((tempInt)+(4))>>2)]=$255,HEAP32[(((tempInt)+(8))>>2)]=$258,tempInt));
      label = 80; break;
    case 25: 
      var $261=$c;
      var $262=$261 >>> 23;
      var $263=$262 & 511;
      var $264=$1;
      var $265=$c;
      var $266=$265 >>> 7;
      var $267=$266 & 65535;
      var $268=$irep;
      var $269=(($268+20)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=(($270+($267<<1))|0);
      var $272=HEAP16[(($271)>>1)];
      var $273=_mrb_sym2name($264, $272);
      var $274=_printf(((100148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$263,HEAP32[(((tempInt)+(4))>>2)]=$273,tempInt));
      label = 80; break;
    case 26: 
      var $276=$1;
      var $277=$c;
      var $278=$277 >>> 7;
      var $279=$278 & 65535;
      var $280=$irep;
      var $281=(($280+20)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=(($282+($279<<1))|0);
      var $284=HEAP16[(($283)>>1)];
      var $285=_mrb_sym2name($276, $284);
      var $286=$c;
      var $287=$286 >>> 23;
      var $288=$287 & 511;
      var $289=_printf(((99964)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$285,HEAP32[(((tempInt)+(4))>>2)]=$288,tempInt));
      label = 80; break;
    case 27: 
      var $291=$i;
      var $292=$c;
      var $293=$292 >>> 7;
      var $294=$293 & 65535;
      var $295=((($294)-(32767))|0);
      var $296=((($291)+($295))|0);
      var $297=_printf(((99764)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$296,tempInt));
      label = 80; break;
    case 28: 
      var $299=$c;
      var $300=$299 >>> 23;
      var $301=$300 & 511;
      var $302=$i;
      var $303=$c;
      var $304=$303 >>> 7;
      var $305=$304 & 65535;
      var $306=((($305)-(32767))|0);
      var $307=((($302)+($306))|0);
      var $308=_printf(((99512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$301,HEAP32[(((tempInt)+(4))>>2)]=$307,tempInt));
      label = 80; break;
    case 29: 
      var $310=$c;
      var $311=$310 >>> 23;
      var $312=$311 & 511;
      var $313=$i;
      var $314=$c;
      var $315=$314 >>> 7;
      var $316=$315 & 65535;
      var $317=((($316)-(32767))|0);
      var $318=((($313)+($317))|0);
      var $319=_printf(((99288)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$312,HEAP32[(((tempInt)+(4))>>2)]=$318,tempInt));
      label = 80; break;
    case 30: 
      var $321=$c;
      var $322=$321 >>> 23;
      var $323=$322 & 511;
      var $324=$1;
      var $325=$c;
      var $326=$325 >>> 14;
      var $327=$326 & 511;
      var $328=$irep;
      var $329=(($328+20)|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330+($327<<1))|0);
      var $332=HEAP16[(($331)>>1)];
      var $333=_mrb_sym2name($324, $332);
      var $334=$c;
      var $335=$334 >>> 7;
      var $336=$335 & 127;
      var $337=_printf(((98760)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$323,HEAP32[(((tempInt)+(4))>>2)]=$333,HEAP32[(((tempInt)+(8))>>2)]=$336,tempInt));
      label = 80; break;
    case 31: 
      var $339=$c;
      var $340=$339 >>> 23;
      var $341=$340 & 511;
      var $342=$1;
      var $343=$c;
      var $344=$343 >>> 14;
      var $345=$344 & 511;
      var $346=$irep;
      var $347=(($346+20)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=(($348+($345<<1))|0);
      var $350=HEAP16[(($349)>>1)];
      var $351=_mrb_sym2name($342, $350);
      var $352=$c;
      var $353=$352 >>> 7;
      var $354=$353 & 127;
      var $355=_printf(((98496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$341,HEAP32[(((tempInt)+(4))>>2)]=$351,HEAP32[(((tempInt)+(8))>>2)]=$354,tempInt));
      label = 80; break;
    case 32: 
      var $357=$c;
      var $358=$357 >>> 23;
      var $359=$358 & 511;
      var $360=$1;
      var $361=$c;
      var $362=$361 >>> 14;
      var $363=$362 & 511;
      var $364=$irep;
      var $365=(($364+20)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=(($366+($363<<1))|0);
      var $368=HEAP16[(($367)>>1)];
      var $369=_mrb_sym2name($360, $368);
      var $370=$c;
      var $371=$370 >>> 7;
      var $372=$371 & 127;
      var $373=_printf(((98232)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$359,HEAP32[(((tempInt)+(4))>>2)]=$369,HEAP32[(((tempInt)+(8))>>2)]=$372,tempInt));
      label = 80; break;
    case 33: 
      var $375=$c;
      var $376=$375 >>> 23;
      var $377=$376 & 511;
      var $378=$c;
      var $379=$378 >>> 7;
      var $380=$379 & 127;
      var $381=_printf(((97988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$377,HEAP32[(((tempInt)+(4))>>2)]=$380,tempInt));
      label = 80; break;
    case 34: 
      var $383=$c;
      var $384=$383 >>> 23;
      var $385=$384 & 511;
      var $386=$c;
      var $387=$386 >>> 7;
      var $388=$387 & 65535;
      var $389=$388 >> 10;
      var $390=$389 & 63;
      var $391=$c;
      var $392=$391 >>> 7;
      var $393=$392 & 65535;
      var $394=$393 >> 9;
      var $395=$394 & 1;
      var $396=$c;
      var $397=$396 >>> 7;
      var $398=$397 & 65535;
      var $399=$398 >> 4;
      var $400=$399 & 31;
      var $401=$c;
      var $402=$401 >>> 7;
      var $403=$402 & 65535;
      var $404=$403 >> 0;
      var $405=$404 & 15;
      var $406=_printf(((97808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$385,HEAP32[(((tempInt)+(4))>>2)]=$390,HEAP32[(((tempInt)+(8))>>2)]=$395,HEAP32[(((tempInt)+(12))>>2)]=$400,HEAP32[(((tempInt)+(16))>>2)]=$405,tempInt));
      label = 80; break;
    case 35: 
      var $408=$c;
      var $409=$408 >>> 7;
      var $410=$409 & 33554431;
      var $411=$410 >> 18;
      var $412=$411 & 31;
      var $413=$c;
      var $414=$413 >>> 7;
      var $415=$414 & 33554431;
      var $416=$415 >> 13;
      var $417=$416 & 31;
      var $418=$c;
      var $419=$418 >>> 7;
      var $420=$419 & 33554431;
      var $421=$420 >> 12;
      var $422=$421 & 1;
      var $423=$c;
      var $424=$423 >>> 7;
      var $425=$424 & 33554431;
      var $426=$425 >> 7;
      var $427=$426 & 31;
      var $428=$c;
      var $429=$428 >>> 7;
      var $430=$429 & 33554431;
      var $431=$430 >> 2;
      var $432=$431 & 31;
      var $433=$c;
      var $434=$433 >>> 7;
      var $435=$434 & 33554431;
      var $436=$435 >> 1;
      var $437=$436 & 1;
      var $438=$c;
      var $439=$438 >>> 7;
      var $440=$439 & 33554431;
      var $441=$440 & 1;
      var $442=_printf(((97536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$412,HEAP32[(((tempInt)+(4))>>2)]=$417,HEAP32[(((tempInt)+(8))>>2)]=$422,HEAP32[(((tempInt)+(12))>>2)]=$427,HEAP32[(((tempInt)+(16))>>2)]=$432,HEAP32[(((tempInt)+(20))>>2)]=$437,HEAP32[(((tempInt)+(24))>>2)]=$441,tempInt));
      label = 80; break;
    case 36: 
      var $444=$c;
      var $445=$444 >>> 23;
      var $446=$445 & 511;
      var $447=_printf(((97424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$446,tempInt));
      var $448=$c;
      var $449=$448 >>> 14;
      var $450=$449 & 511;
      if ((($450)|(0))==0) {
        label = 37; break;
      }
      else if ((($450)|(0))==2) {
        label = 38; break;
      }
      else if ((($450)|(0))==1) {
        label = 39; break;
      }
      else {
      label = 40; break;
      }
    case 37: 
      var $452=_printf(((97296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 41; break;
    case 38: 
      var $454=_printf(((97212)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 41; break;
    case 39: 
      var $456=_printf(((97092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 41; break;
    case 40: 
      var $458=_printf(((96792)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 41; break;
    case 41: 
      label = 80; break;
    case 42: 
      var $461=$c;
      var $462=$461 >>> 23;
      var $463=$462 & 511;
      var $464=$c;
      var $465=$464 >>> 7;
      var $466=$465 & 65535;
      var $467=$466 >> 10;
      var $468=$467 & 63;
      var $469=$c;
      var $470=$469 >>> 7;
      var $471=$470 & 65535;
      var $472=$471 >> 9;
      var $473=$472 & 1;
      var $474=$c;
      var $475=$474 >>> 7;
      var $476=$475 & 65535;
      var $477=$476 >> 4;
      var $478=$477 & 31;
      var $479=$c;
      var $480=$479 >>> 7;
      var $481=$480 & 65535;
      var $482=$481 >> 0;
      var $483=$482 & 15;
      var $484=_printf(((96624)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 20)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$463,HEAP32[(((tempInt)+(4))>>2)]=$468,HEAP32[(((tempInt)+(8))>>2)]=$473,HEAP32[(((tempInt)+(12))>>2)]=$478,HEAP32[(((tempInt)+(16))>>2)]=$483,tempInt));
      label = 80; break;
    case 43: 
      var $486=$c;
      var $487=$486 >>> 23;
      var $488=$487 & 511;
      var $489=$c;
      var $490=$489 >>> 9;
      var $491=$490 & 16383;
      var $492=$c;
      var $493=$492 >>> 7;
      var $494=$493 & 3;
      var $495=_printf(((96532)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$488,HEAP32[(((tempInt)+(4))>>2)]=$491,HEAP32[(((tempInt)+(8))>>2)]=$494,tempInt));
      label = 80; break;
    case 44: 
      var $497=$c;
      var $498=$497 >>> 23;
      var $499=$498 & 511;
      var $500=$c;
      var $501=$500 >>> 14;
      var $502=$501 & 511;
      var $503=$c;
      var $504=$503 >>> 7;
      var $505=$504 & 127;
      var $506=_printf(((96460)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$499,HEAP32[(((tempInt)+(4))>>2)]=$502,HEAP32[(((tempInt)+(8))>>2)]=$505,tempInt));
      label = 80; break;
    case 45: 
      var $508=$c;
      var $509=$508 >>> 23;
      var $510=$509 & 511;
      var $511=$1;
      var $512=$c;
      var $513=$512 >>> 14;
      var $514=$513 & 511;
      var $515=$irep;
      var $516=(($515+20)|0);
      var $517=HEAP32[(($516)>>2)];
      var $518=(($517+($514<<1))|0);
      var $519=HEAP16[(($518)>>1)];
      var $520=_mrb_sym2name($511, $519);
      var $521=_printf(((96372)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$510,HEAP32[(((tempInt)+(4))>>2)]=$520,tempInt));
      label = 80; break;
    case 46: 
      var $523=$c;
      var $524=$523 >>> 23;
      var $525=$524 & 511;
      var $526=$1;
      var $527=$c;
      var $528=$527 >>> 14;
      var $529=$528 & 511;
      var $530=$irep;
      var $531=(($530+20)|0);
      var $532=HEAP32[(($531)>>2)];
      var $533=(($532+($529<<1))|0);
      var $534=HEAP16[(($533)>>1)];
      var $535=_mrb_sym2name($526, $534);
      var $536=$c;
      var $537=$536 >>> 7;
      var $538=$537 & 127;
      var $539=_printf(((96292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$525,HEAP32[(((tempInt)+(4))>>2)]=$535,HEAP32[(((tempInt)+(8))>>2)]=$538,tempInt));
      label = 80; break;
    case 47: 
      var $541=$c;
      var $542=$541 >>> 23;
      var $543=$542 & 511;
      var $544=$1;
      var $545=$c;
      var $546=$545 >>> 14;
      var $547=$546 & 511;
      var $548=$irep;
      var $549=(($548+20)|0);
      var $550=HEAP32[(($549)>>2)];
      var $551=(($550+($547<<1))|0);
      var $552=HEAP16[(($551)>>1)];
      var $553=_mrb_sym2name($544, $552);
      var $554=$c;
      var $555=$554 >>> 7;
      var $556=$555 & 127;
      var $557=_printf(((96200)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$543,HEAP32[(((tempInt)+(4))>>2)]=$553,HEAP32[(((tempInt)+(8))>>2)]=$556,tempInt));
      label = 80; break;
    case 48: 
      var $559=$c;
      var $560=$559 >>> 23;
      var $561=$560 & 511;
      var $562=$1;
      var $563=$c;
      var $564=$563 >>> 14;
      var $565=$564 & 511;
      var $566=$irep;
      var $567=(($566+20)|0);
      var $568=HEAP32[(($567)>>2)];
      var $569=(($568+($565<<1))|0);
      var $570=HEAP16[(($569)>>1)];
      var $571=_mrb_sym2name($562, $570);
      var $572=$c;
      var $573=$572 >>> 7;
      var $574=$573 & 127;
      var $575=_printf(((96108)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$561,HEAP32[(((tempInt)+(4))>>2)]=$571,HEAP32[(((tempInt)+(8))>>2)]=$574,tempInt));
      label = 80; break;
    case 49: 
      var $577=$c;
      var $578=$577 >>> 23;
      var $579=$578 & 511;
      var $580=$1;
      var $581=$c;
      var $582=$581 >>> 14;
      var $583=$582 & 511;
      var $584=$irep;
      var $585=(($584+20)|0);
      var $586=HEAP32[(($585)>>2)];
      var $587=(($586+($583<<1))|0);
      var $588=HEAP16[(($587)>>1)];
      var $589=_mrb_sym2name($580, $588);
      var $590=$c;
      var $591=$590 >>> 7;
      var $592=$591 & 127;
      var $593=_printf(((95996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$579,HEAP32[(((tempInt)+(4))>>2)]=$589,HEAP32[(((tempInt)+(8))>>2)]=$592,tempInt));
      label = 80; break;
    case 50: 
      var $595=$c;
      var $596=$595 >>> 23;
      var $597=$596 & 511;
      var $598=$1;
      var $599=$c;
      var $600=$599 >>> 14;
      var $601=$600 & 511;
      var $602=$irep;
      var $603=(($602+20)|0);
      var $604=HEAP32[(($603)>>2)];
      var $605=(($604+($601<<1))|0);
      var $606=HEAP16[(($605)>>1)];
      var $607=_mrb_sym2name($598, $606);
      var $608=$c;
      var $609=$608 >>> 7;
      var $610=$609 & 127;
      var $611=_printf(((95940)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$597,HEAP32[(((tempInt)+(4))>>2)]=$607,HEAP32[(((tempInt)+(8))>>2)]=$610,tempInt));
      label = 80; break;
    case 51: 
      var $613=$c;
      var $614=$613 >>> 23;
      var $615=$614 & 511;
      var $616=$1;
      var $617=$c;
      var $618=$617 >>> 14;
      var $619=$618 & 511;
      var $620=$irep;
      var $621=(($620+20)|0);
      var $622=HEAP32[(($621)>>2)];
      var $623=(($622+($619<<1))|0);
      var $624=HEAP16[(($623)>>1)];
      var $625=_mrb_sym2name($616, $624);
      var $626=$c;
      var $627=$626 >>> 7;
      var $628=$627 & 127;
      var $629=_printf(((95584)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$615,HEAP32[(((tempInt)+(4))>>2)]=$625,HEAP32[(((tempInt)+(8))>>2)]=$628,tempInt));
      label = 80; break;
    case 52: 
      var $631=$c;
      var $632=$631 >>> 23;
      var $633=$632 & 511;
      var $634=$1;
      var $635=$c;
      var $636=$635 >>> 14;
      var $637=$636 & 511;
      var $638=$irep;
      var $639=(($638+20)|0);
      var $640=HEAP32[(($639)>>2)];
      var $641=(($640+($637<<1))|0);
      var $642=HEAP16[(($641)>>1)];
      var $643=_mrb_sym2name($634, $642);
      var $644=$c;
      var $645=$644 >>> 7;
      var $646=$645 & 127;
      var $647=_printf(((95440)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$633,HEAP32[(((tempInt)+(4))>>2)]=$643,HEAP32[(((tempInt)+(8))>>2)]=$646,tempInt));
      label = 80; break;
    case 53: 
      var $649=$c;
      var $650=$649 >>> 23;
      var $651=$650 & 511;
      var $652=$1;
      var $653=$c;
      var $654=$653 >>> 14;
      var $655=$654 & 511;
      var $656=$irep;
      var $657=(($656+20)|0);
      var $658=HEAP32[(($657)>>2)];
      var $659=(($658+($655<<1))|0);
      var $660=HEAP16[(($659)>>1)];
      var $661=_mrb_sym2name($652, $660);
      var $662=$c;
      var $663=$662 >>> 7;
      var $664=$663 & 127;
      var $665=_printf(((95356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$651,HEAP32[(((tempInt)+(4))>>2)]=$661,HEAP32[(((tempInt)+(8))>>2)]=$664,tempInt));
      label = 80; break;
    case 54: 
      var $667=$c;
      var $668=$667 >>> 23;
      var $669=$668 & 511;
      var $670=$1;
      var $671=$c;
      var $672=$671 >>> 14;
      var $673=$672 & 511;
      var $674=$irep;
      var $675=(($674+20)|0);
      var $676=HEAP32[(($675)>>2)];
      var $677=(($676+($673<<1))|0);
      var $678=HEAP16[(($677)>>1)];
      var $679=_mrb_sym2name($670, $678);
      var $680=$c;
      var $681=$680 >>> 7;
      var $682=$681 & 127;
      var $683=_printf(((95296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$669,HEAP32[(((tempInt)+(4))>>2)]=$679,HEAP32[(((tempInt)+(8))>>2)]=$682,tempInt));
      label = 80; break;
    case 55: 
      var $685=$c;
      var $686=$685 >>> 23;
      var $687=$686 & 511;
      var $688=$1;
      var $689=$c;
      var $690=$689 >>> 14;
      var $691=$690 & 511;
      var $692=$irep;
      var $693=(($692+20)|0);
      var $694=HEAP32[(($693)>>2)];
      var $695=(($694+($691<<1))|0);
      var $696=HEAP16[(($695)>>1)];
      var $697=_mrb_sym2name($688, $696);
      var $698=$c;
      var $699=$698 >>> 7;
      var $700=$699 & 127;
      var $701=_printf(((95224)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$687,HEAP32[(((tempInt)+(4))>>2)]=$697,HEAP32[(((tempInt)+(8))>>2)]=$700,tempInt));
      label = 80; break;
    case 56: 
      var $703=$c;
      var $704=$703 >>> 23;
      var $705=$704 & 511;
      var $706=$1;
      var $707=$c;
      var $708=$707 >>> 14;
      var $709=$708 & 511;
      var $710=$irep;
      var $711=(($710+20)|0);
      var $712=HEAP32[(($711)>>2)];
      var $713=(($712+($709<<1))|0);
      var $714=HEAP16[(($713)>>1)];
      var $715=_mrb_sym2name($706, $714);
      var $716=$c;
      var $717=$716 >>> 7;
      var $718=$717 & 127;
      var $719=_printf(((95140)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$705,HEAP32[(((tempInt)+(4))>>2)]=$715,HEAP32[(((tempInt)+(8))>>2)]=$718,tempInt));
      label = 80; break;
    case 57: 
      var $721=_printf(((95100)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 80; break;
    case 58: 
      var $723=$c;
      var $724=$723 >>> 23;
      var $725=$724 & 511;
      var $726=$c;
      var $727=$726 >>> 14;
      var $728=$727 & 511;
      var $729=$c;
      var $730=$729 >>> 7;
      var $731=$730 & 127;
      var $732=_printf(((95016)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$725,HEAP32[(((tempInt)+(4))>>2)]=$728,HEAP32[(((tempInt)+(8))>>2)]=$731,tempInt));
      label = 80; break;
    case 59: 
      var $734=$c;
      var $735=$734 >>> 23;
      var $736=$735 & 511;
      var $737=$c;
      var $738=$737 >>> 14;
      var $739=$738 & 511;
      var $740=_printf(((94908)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$736,HEAP32[(((tempInt)+(4))>>2)]=$739,tempInt));
      label = 80; break;
    case 60: 
      var $742=$c;
      var $743=$742 >>> 23;
      var $744=$743 & 511;
      var $745=$c;
      var $746=$745 >>> 14;
      var $747=$746 & 511;
      var $748=_printf(((94856)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$744,HEAP32[(((tempInt)+(4))>>2)]=$747,tempInt));
      label = 80; break;
    case 61: 
      var $750=$c;
      var $751=$750 >>> 23;
      var $752=$751 & 511;
      var $753=$c;
      var $754=$753 >>> 14;
      var $755=$754 & 511;
      var $756=$c;
      var $757=$756 >>> 7;
      var $758=$757 & 127;
      var $759=_printf(((94604)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$752,HEAP32[(((tempInt)+(4))>>2)]=$755,HEAP32[(((tempInt)+(8))>>2)]=$758,tempInt));
      label = 80; break;
    case 62: 
      var $761=$c;
      var $762=$761 >>> 23;
      var $763=$762 & 511;
      var $764=$c;
      var $765=$764 >>> 14;
      var $766=$765 & 511;
      var $767=$c;
      var $768=$767 >>> 7;
      var $769=$768 & 127;
      var $770=_printf(((94536)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$763,HEAP32[(((tempInt)+(4))>>2)]=$766,HEAP32[(((tempInt)+(8))>>2)]=$769,tempInt));
      label = 80; break;
    case 63: 
      var $772=$c;
      var $773=$772 >>> 7;
      var $774=$773 & 65535;
      var $775=$irep;
      var $776=(($775+16)|0);
      var $777=HEAP32[(($776)>>2)];
      var $778=(($777+((($774)*(12))&-1))|0);
      var $779=$s;
      var $780=$778;
      assert(12 % 1 === 0);HEAP32[(($779)>>2)]=HEAP32[(($780)>>2)];HEAP32[((($779)+(4))>>2)]=HEAP32[((($780)+(4))>>2)];HEAP32[((($779)+(8))>>2)]=HEAP32[((($780)+(8))>>2)];
      var $781=$1;
      _mrb_str_dump($3, $781, $s);
      var $782=$s;
      var $783=$3;
      assert(12 % 1 === 0);HEAP32[(($782)>>2)]=HEAP32[(($783)>>2)];HEAP32[((($782)+(4))>>2)]=HEAP32[((($783)+(4))>>2)];HEAP32[((($782)+(8))>>2)]=HEAP32[((($783)+(8))>>2)];
      var $784=$c;
      var $785=$784 >>> 23;
      var $786=$785 & 511;
      var $787=(($s)|0);
      var $788=$787;
      var $789=HEAP32[(($788)>>2)];
      var $790=$789;
      var $791=(($790+20)|0);
      var $792=HEAP32[(($791)>>2)];
      var $793=_printf(((94468)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$786,HEAP32[(((tempInt)+(4))>>2)]=$792,tempInt));
      label = 80; break;
    case 64: 
      var $795=$c;
      var $796=$795 >>> 23;
      var $797=$796 & 511;
      var $798=$c;
      var $799=$798 >>> 14;
      var $800=$799 & 511;
      var $801=_printf(((94424)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$797,HEAP32[(((tempInt)+(4))>>2)]=$800,tempInt));
      label = 80; break;
    case 65: 
      var $803=$c;
      var $804=$803 >>> 23;
      var $805=$804 & 511;
      var $806=$c;
      var $807=$806 >>> 14;
      var $808=$807 & 511;
      var $809=$c;
      var $810=$809 >>> 7;
      var $811=$810 & 127;
      var $812=_printf(((94368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$805,HEAP32[(((tempInt)+(4))>>2)]=$808,HEAP32[(((tempInt)+(8))>>2)]=$811,tempInt));
      label = 80; break;
    case 66: 
      var $814=$c;
      var $815=$814 >>> 23;
      var $816=$815 & 511;
      var $817=_printf(((94324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$816,tempInt));
      label = 80; break;
    case 67: 
      var $819=$c;
      var $820=$819 >>> 23;
      var $821=$820 & 511;
      var $822=$1;
      var $823=$c;
      var $824=$823 >>> 14;
      var $825=$824 & 511;
      var $826=$irep;
      var $827=(($826+20)|0);
      var $828=HEAP32[(($827)>>2)];
      var $829=(($828+($825<<1))|0);
      var $830=HEAP16[(($829)>>1)];
      var $831=_mrb_sym2name($822, $830);
      var $832=_printf(((94240)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$821,HEAP32[(((tempInt)+(4))>>2)]=$831,tempInt));
      label = 80; break;
    case 68: 
      var $834=$c;
      var $835=$834 >>> 23;
      var $836=$835 & 511;
      var $837=$1;
      var $838=$c;
      var $839=$838 >>> 14;
      var $840=$839 & 511;
      var $841=$irep;
      var $842=(($841+20)|0);
      var $843=HEAP32[(($842)>>2)];
      var $844=(($843+($840<<1))|0);
      var $845=HEAP16[(($844)>>1)];
      var $846=_mrb_sym2name($837, $845);
      var $847=_printf(((94192)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$836,HEAP32[(((tempInt)+(4))>>2)]=$846,tempInt));
      label = 80; break;
    case 69: 
      var $849=$c;
      var $850=$849 >>> 23;
      var $851=$850 & 511;
      var $852=$2;
      var $853=$c;
      var $854=$853 >>> 7;
      var $855=$854 & 65535;
      var $856=((($852)+($855))|0);
      var $857=_printf(((94092)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$851,HEAP32[(((tempInt)+(4))>>2)]=$856,tempInt));
      label = 80; break;
    case 70: 
      var $859=$c;
      var $860=$859 >>> 23;
      var $861=$860 & 511;
      var $862=$c;
      var $863=$862 >>> 14;
      var $864=$863 & 511;
      var $865=_printf(((94036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$861,HEAP32[(((tempInt)+(4))>>2)]=$864,tempInt));
      label = 80; break;
    case 71: 
      var $867=$c;
      var $868=$867 >>> 23;
      var $869=$868 & 511;
      var $870=_printf(((93700)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$869,tempInt));
      label = 80; break;
    case 72: 
      var $872=$c;
      var $873=$872 >>> 7;
      var $874=$873 & 65535;
      var $875=_printf(((93652)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$874,tempInt));
      label = 80; break;
    case 73: 
      var $877=$2;
      var $878=$c;
      var $879=$878 >>> 7;
      var $880=$879 & 65535;
      var $881=((($877)+($880))|0);
      var $882=_printf(((93592)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$881,tempInt));
      label = 80; break;
    case 74: 
      var $884=$i;
      var $885=$c;
      var $886=$885 >>> 7;
      var $887=$886 & 65535;
      var $888=((($887)-(32767))|0);
      var $889=((($884)+($888))|0);
      var $890=_printf(((93528)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$889,tempInt));
      label = 80; break;
    case 75: 
      var $892=$c;
      var $893=$892 >>> 23;
      var $894=$893 & 511;
      var $895=_printf(((93472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$894,tempInt));
      label = 80; break;
    case 76: 
      var $897=$c;
      var $898=$897 >>> 23;
      var $899=$898 & 511;
      var $900=_printf(((93384)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$899,tempInt));
      label = 80; break;
    case 77: 
      var $902=$c;
      var $903=$902 >>> 23;
      var $904=$903 & 511;
      var $905=_printf(((93340)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$904,tempInt));
      label = 80; break;
    case 78: 
      var $907=$c;
      var $908=$907 >>> 23;
      var $909=$908 & 511;
      var $910=_printf(((93292)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$909,tempInt));
      label = 80; break;
    case 79: 
      var $912=$c;
      var $913=$912 & 127;
      var $914=$c;
      var $915=$914 >>> 23;
      var $916=$915 & 511;
      var $917=$c;
      var $918=$917 >>> 14;
      var $919=$918 & 511;
      var $920=$c;
      var $921=$920 >>> 7;
      var $922=$921 & 127;
      var $923=_printf(((93228)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$913,HEAP32[(((tempInt)+(4))>>2)]=$916,HEAP32[(((tempInt)+(8))>>2)]=$919,HEAP32[(((tempInt)+(12))>>2)]=$922,tempInt));
      label = 80; break;
    case 80: 
      var $925=$1;
      var $926=$ai;
      _mrb_gc_arena_restore($925, $926);
      label = 81; break;
    case 81: 
      var $928=$i;
      var $929=((($928)+(1))|0);
      $i=$929;
      label = 4; break;
    case 82: 
      var $931=_printf(((97296)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      label = 83; break;
    case 83: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_generate_code($mrb, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $start;
      var $n;
      $2=$mrb;
      $3=$p;
      var $4=$2;
      var $5=(($4+28)|0);
      var $6=HEAP32[(($5)>>2)];
      $start=$6;
      var $7=$2;
      var $8=$3;
      var $9=_codegen_start($7, $8);
      $n=$9;
      var $10=$n;
      var $11=(($10)|(0)) < 0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$n;
      $1=$13;
      label = 4; break;
    case 3: 
      var $15=$start;
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen_start($mrb, $p) {
  var label = 0;
  label = 1; 
  var mySetjmpIds = {};
  var setjmpTable = {"5": function(value) { label = 9; $27 = value },dummy: 0};
  while(1) try { switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $scope;
      $2=$mrb;
      $3=$p;
      var $4=$2;
      var $5=_scope_new($4, 0, 0);
      $scope=$5;
      var $6=$scope;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=-1;
      label = 8; break;
    case 3: 
      var $10=$2;
      var $11=$scope;
      var $12=(($11)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$3;
      var $14=(($13+28)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$3;
      var $19=(($18+28)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$scope;
      var $22=(($21+80)|0);
      HEAP32[(($22)>>2)]=$20;
      label = 5; break;
    case 5: 
      var $24=$scope;
      var $25=(($24+8)|0);
      var $26=(($25)|0);
      var $27=(tempInt = setjmpId++, mySetjmpIds[tempInt] = 1, setjmpLabels[tempInt] = label,HEAP32[(($26)>>2)]=tempInt, 0);
      label = 9; break;
    case 9: 
      var $28=(($27)|(0))!=0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=-1;
      label = 8; break;
    case 7: 
      var $31=$scope;
      var $32=$3;
      var $33=(($32+1136)|0);
      var $34=HEAP32[(($33)>>2)];
      _codegen($31, $34, 0);
      var $35=$scope;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      _mrb_pool_close($37);
      $1=0;
      label = 8; break;
    case 8: 
      var $39=$1;
      return $39;
    default: assert(0, "bad label: " + label);
  }
 } catch(e) { if (!e.longjmp || !(e.id in mySetjmpIds)) throw(e); setjmpTable[setjmpLabels[e.id]](e.value) }
}
function _scope_new($mrb, $prev, $lv) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pool;
      var $p;
      $2=$mrb;
      $3=$prev;
      $4=$lv;
      var $5=$2;
      var $6=_mrb_pool_open($5);
      $pool=$6;
      var $7=$pool;
      var $8=_mrb_pool_alloc($7, 128);
      var $9=$8;
      $p=$9;
      var $10=$p;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 8; break;
    case 3: 
      var $14=$p;
      var $15=$14;
      assert(128 % 1 === 0);_memcpy($15, 58888, 128);
      var $16=$2;
      var $17=$p;
      var $18=(($17)|0);
      HEAP32[(($18)>>2)]=$16;
      var $19=$pool;
      var $20=$p;
      var $21=(($20+4)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$3;
      var $23=(($22)|(0))!=0;
      if ($23) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $25=$p;
      $1=$25;
      label = 8; break;
    case 5: 
      var $27=$3;
      var $28=$p;
      var $29=(($28+48)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$p;
      var $31=$30;
      var $32=(($31+68)|0);
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 & -32768;
      var $36=$35 | 32767;
      HEAP32[(($33)>>2)]=$36;
      var $37=$p;
      var $38=$37;
      var $39=(($38+69)|0);
      var $40=HEAP8[($39)];
      var $41=$40 & 127;
      HEAP8[($39)]=$41;
      var $42=$2;
      var $43=_mrb_add_irep($42);
      var $44=$p;
      var $45=(($44+100)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$p;
      var $47=(($46+100)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$p;
      var $52=(($51+124)|0);
      HEAP32[(($52)>>2)]=$50;
      var $53=$p;
      var $54=(($53+96)|0);
      HEAP32[(($54)>>2)]=1024;
      var $55=$2;
      var $56=$p;
      var $57=(($56+96)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=($58<<2);
      var $60=_mrb_malloc($55, $59);
      var $61=$60;
      var $62=$p;
      var $63=(($62+88)|0);
      HEAP32[(($63)>>2)]=$61;
      var $64=$p;
      var $65=(($64+104)|0);
      HEAP32[(($65)>>2)]=32;
      var $66=$2;
      var $67=$p;
      var $68=(($67+104)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)*(12))&-1);
      var $71=_mrb_malloc($66, $70);
      var $72=$71;
      var $73=$p;
      var $74=(($73+100)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+16)|0);
      HEAP32[(($76)>>2)]=$72;
      var $77=$p;
      var $78=(($77+100)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+36)|0);
      HEAP32[(($80)>>2)]=0;
      var $81=$p;
      var $82=(($81+108)|0);
      HEAP32[(($82)>>2)]=256;
      var $83=$2;
      var $84=_mrb_malloc($83, 512);
      var $85=$84;
      var $86=$p;
      var $87=(($86+100)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+20)|0);
      HEAP32[(($89)>>2)]=$85;
      var $90=$p;
      var $91=(($90+100)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+40)|0);
      HEAP32[(($93)>>2)]=0;
      var $94=$4;
      var $95=$p;
      var $96=(($95+52)|0);
      HEAP32[(($96)>>2)]=$94;
      var $97=$4;
      var $98=_node_len($97);
      var $99=((($98)+(1))|0);
      var $100=$p;
      var $101=(($100+56)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)+($99))|0);
      HEAP32[(($101)>>2)]=$103;
      var $104=$p;
      var $105=(($104+56)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$p;
      var $108=(($107+112)|0);
      HEAP32[(($108)>>2)]=$106;
      var $109=$2;
      var $110=_mrb_gc_arena_save($109);
      var $111=$p;
      var $112=(($111+120)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$3;
      var $114=(($113+80)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$p;
      var $117=(($116+80)|0);
      HEAP32[(($117)>>2)]=$115;
      var $118=$p;
      var $119=(($118+80)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=(($120)|(0))!=0;
      if ($121) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $123=$2;
      var $124=$p;
      var $125=(($124+96)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=($126<<1);
      var $128=_mrb_malloc($123, $127);
      var $129=$128;
      var $130=$p;
      var $131=(($130+92)|0);
      HEAP32[(($131)>>2)]=$129;
      label = 7; break;
    case 7: 
      var $133=$3;
      var $134=(($133+84)|0);
      var $135=HEAP16[(($134)>>1)];
      var $136=$p;
      var $137=(($136+84)|0);
      HEAP16[(($137)>>1)]=$135;
      var $138=$p;
      $1=$138;
      label = 8; break;
    case 8: 
      var $140=$1;
      return $140;
    default: assert(0, "bad label: " + label);
  }
}
function _codegen($s, $tree, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 244)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $nt;
      var $onerr;
      var $noexc;
      var $exend;
      var $pos1;
      var $pos2;
      var $tmp;
      var $lp;
      var $n2;
      var $exc;
      var $n3;
      var $n4;
      var $idx;
      var $epush;
      var $idx1;
      var $idx2;
      var $pos13;
      var $pos24;
      var $e;
      var $pos;
      var $pos5;
      var $lp6;
      var $lp7;
      var $head;
      var $pos18;
      var $pos29;
      var $pos3;
      var $tmp10;
      var $n;
      var $sym;
      var $sym11;
      var $n12;
      var $len;
      var $len13;
      var $n14;
      var $post;
      var $t;
      var $p;
      var $rhs;
      var $rn;
      var $sym15;
      var $len16=__stackBase__;
      var $name;
      var $idx17;
      var $pos19;
      var $n20;
      var $noop;
      var $sendv;
      var $args;
      var $s2;
      var $lv;
      var $ainfo;
      var $s221;
      var $lv22;
      var $ainfo23;
      var $n24;
      var $sendv25;
      var $msg;
      var $lp26;
      var $n27;
      var $idx28;
      var $lv29;
      var $up;
      var $sym30;
      var $sym31;
      var $sym32;
      var $sym33;
      var $buf=(__stackBase__)+(4);
      var $str=(__stackBase__)+(8);
      var $sym34;
      var $4=(__stackBase__)+(20);
      var $sym35;
      var $mrb;
      var $fix=(__stackBase__)+(32);
      var $str36=(__stackBase__)+(44);
      var $5=(__stackBase__)+(56);
      var $6=(__stackBase__)+(68);
      var $7=(__stackBase__)+(80);
      var $p37;
      var $base;
      var $i;
      var $co;
      var $overflow=(__stackBase__)+(92);
      var $f;
      var $off;
      var $8=(__stackBase__)+(96);
      var $off38;
      var $9=(__stackBase__)+(108);
      var $p39;
      var $f40;
      var $off41;
      var $10=(__stackBase__)+(120);
      var $p42;
      var $f43;
      var $off44;
      var $11=(__stackBase__)+(132);
      var $p45;
      var $base46;
      var $i47;
      var $co48;
      var $overflow49=(__stackBase__)+(144);
      var $f50;
      var $off51;
      var $12=(__stackBase__)+(148);
      var $off52;
      var $13=(__stackBase__)+(160);
      var $sym53;
      var $p54;
      var $len55;
      var $ai;
      var $off56;
      var $14=(__stackBase__)+(172);
      var $n57;
      var $n58;
      var $p59;
      var $len60;
      var $ai61;
      var $sym62;
      var $off63;
      var $15=(__stackBase__)+(184);
      var $p1;
      var $p2;
      var $ai64;
      var $sym65;
      var $off66;
      var $16=(__stackBase__)+(196);
      var $argc;
      var $17=(__stackBase__)+(208);
      var $n67;
      var $ai68;
      var $sym69;
      var $argc70;
      var $off71;
      var $p72;
      var $18=(__stackBase__)+(220);
      var $p273;
      var $off74;
      var $19=(__stackBase__)+(232);
      var $n75;
      var $sym76;
      var $a;
      var $b;
      var $c;
      var $undef;
      var $num;
      var $t77;
      var $symbol;
      var $idx78;
      var $idx79;
      var $idx80;
      var $sym81;
      var $idx82;
      var $recv;
      var $sym83;
      var $idx84;
      $1=$s;
      $2=$tree;
      $3=$val;
      var $20=$2;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 437; break;
    case 3: 
      var $24=$2;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      $nt=$27;
      var $28=$2;
      var $29=(($28+8)|0);
      var $30=HEAP16[(($29)>>1)];
      var $31=$1;
      var $32=(($31+84)|0);
      HEAP16[(($32)>>1)]=$30;
      var $33=$2;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      $2=$35;
      var $36=$nt;
      if ((($36)|(0))==17) {
        label = 4; break;
      }
      else if ((($36)|(0))==18) {
        label = 14; break;
      }
      else if ((($36)|(0))==19) {
        label = 47; break;
      }
      else if ((($36)|(0))==53) {
        label = 48; break;
      }
      else if ((($36)|(0))==4) {
        label = 49; break;
      }
      else if ((($36)|(0))==5) {
        label = 50; break;
      }
      else if ((($36)|(0))==20) {
        label = 62; break;
      }
      else if ((($36)|(0))==21) {
        label = 63; break;
      }
      else if ((($36)|(0))==9) {
        label = 64; break;
      }
      else if ((($36)|(0))==10) {
        label = 65; break;
      }
      else if ((($36)|(0))==12) {
        label = 66; break;
      }
      else if ((($36)|(0))==6) {
        label = 69; break;
      }
      else if ((($36)|(0))==3) {
        label = 91; break;
      }
      else if ((($36)|(0))==30 | (($36)|(0))==29) {
        label = 92; break;
      }
      else if ((($36)|(0))==80) {
        label = 93; break;
      }
      else if ((($36)|(0))==81) {
        label = 96; break;
      }
      else if ((($36)|(0))==77) {
        label = 99; break;
      }
      else if ((($36)|(0))==78) {
        label = 102; break;
      }
      else if ((($36)|(0))==34) {
        label = 105; break;
      }
      else if ((($36)|(0))==36) {
        label = 113; break;
      }
      else if ((($36)|(0))==66) {
        label = 119; break;
      }
      else if ((($36)|(0))==24) {
        label = 120; break;
      }
      else if ((($36)|(0))==23) {
        label = 121; break;
      }
      else if ((($36)|(0))==28) {
        label = 153; break;
      }
      else if ((($36)|(0))==32) {
        label = 194; break;
      }
      else if ((($36)|(0))==33) {
        label = 209; break;
      }
      else if ((($36)|(0))==37) {
        label = 222; break;
      }
      else if ((($36)|(0))==38) {
        label = 231; break;
      }
      else if ((($36)|(0))==13) {
        label = 247; break;
      }
      else if ((($36)|(0))==14) {
        label = 250; break;
      }
      else if ((($36)|(0))==15) {
        label = 264; break;
      }
      else if ((($36)|(0))==16) {
        label = 270; break;
      }
      else if ((($36)|(0))==39) {
        label = 291; break;
      }
      else if ((($36)|(0))==41) {
        label = 302; break;
      }
      else if ((($36)|(0))==42) {
        label = 303; break;
      }
      else if ((($36)|(0))==44) {
        label = 304; break;
      }
      else if ((($36)|(0))==43) {
        label = 305; break;
      }
      else if ((($36)|(0))==89) {
        label = 306; break;
      }
      else if ((($36)|(0))==46) {
        label = 307; break;
      }
      else if ((($36)|(0))==45) {
        label = 308; break;
      }
      else if ((($36)|(0))==63) {
        label = 309; break;
      }
      else if ((($36)|(0))==69) {
        label = 310; break;
      }
      else if ((($36)|(0))==50) {
        label = 311; break;
      }
      else if ((($36)|(0))==51) {
        label = 321; break;
      }
      else if ((($36)|(0))==52) {
        label = 324; break;
      }
      else if ((($36)|(0))==55) {
        label = 336; break;
      }
      else if ((($36)|(0))==99) {
        label = 339; break;
      }
      else if ((($36)|(0))==56) {
        label = 340; break;
      }
      else if ((($36)|(0))==101) {
        label = 352; break;
      }
      else if ((($36)|(0))==102) {
        label = 353; break;
      }
      else if ((($36)|(0))==57) {
        label = 354; break;
      }
      else if ((($36)|(0))==59) {
        label = 357; break;
      }
      else if ((($36)|(0))==60) {
        label = 362; break;
      }
      else if ((($36)|(0))==54) {
        label = 378; break;
      }
      else if ((($36)|(0))==97) {
        label = 381; break;
      }
      else if ((($36)|(0))==85) {
        label = 384; break;
      }
      else if ((($36)|(0))==86) {
        label = 387; break;
      }
      else if ((($36)|(0))==87) {
        label = 390; break;
      }
      else if ((($36)|(0))==88) {
        label = 393; break;
      }
      else if ((($36)|(0))==72) {
        label = 396; break;
      }
      else if ((($36)|(0))==73) {
        label = 399; break;
      }
      else if ((($36)|(0))==74) {
        label = 405; break;
      }
      else if ((($36)|(0))==75) {
        label = 417; break;
      }
      else if ((($36)|(0))==76) {
        label = 426; break;
      }
      else if ((($36)|(0))==70) {
        label = 429; break;
      }
      else if ((($36)|(0))==71) {
        label = 432; break;
      }
      else if ((($36)|(0))==91) {
        label = 435; break;
      }
      else {
      label = 436; break;
      }
    case 4: 
      var $38=$3;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $41=$2;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $44=$1;
      var $45=$1;
      var $46=(($45+56)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$47 & 511;
      var $49=$48 << 23;
      var $50=5 | $49;
      _genop($44, $50);
      var $51=$1;
      _push_($51);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $54=$2;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $57=$1;
      var $58=$2;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$2;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $69 = 0;label = 12; break;
    case 11: 
      var $67=$3;
      var $69 = $67;label = 12; break;
    case 12: 
      var $69;
      _codegen($57, $60, $69);
      var $70=$2;
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      $2=$72;
      label = 8; break;
    case 13: 
      label = 437; break;
    case 14: 
      var $75=$1;
      var $76=_new_label($75);
      $onerr=$76;
      var $77=$1;
      _genop($77, 26);
      var $78=$1;
      var $79=_loop_push($78, 3);
      $lp=$79;
      var $80=$onerr;
      var $81=$lp;
      var $82=(($81+4)|0);
      HEAP32[(($82)>>2)]=$80;
      var $83=$2;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)|(0))!=0;
      if ($86) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $88=$1;
      var $89=$2;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$3;
      _codegen($88, $91, $92);
      var $93=$3;
      var $94=(($93)|(0))!=0;
      if ($94) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $96=$1;
      var $97=(($96+56)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=((($98)-(1))|0);
      HEAP32[(($97)>>2)]=$99;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $102=$lp;
      var $103=(($102)|0);
      HEAP32[(($103)>>2)]=4;
      var $104=$1;
      var $105=_new_label($104);
      $noexc=$105;
      var $106=$1;
      _genop($106, 23);
      var $107=$1;
      var $108=$onerr;
      _dispatch($107, $108);
      var $109=$2;
      var $110=(($109+4)|0);
      var $111=HEAP32[(($110)>>2)];
      $2=$111;
      $exend=0;
      $pos1=0;
      var $112=$2;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114)|(0))!=0;
      if ($115) { label = 19; break; } else { label = 41; break; }
    case 19: 
      var $117=$2;
      var $118=(($117)|0);
      var $119=HEAP32[(($118)>>2)];
      $n2=$119;
      var $120=$1;
      var $121=(($120+56)|0);
      var $122=HEAP32[(($121)>>2)];
      $exc=$122;
      var $123=$1;
      var $124=$exc;
      var $125=$124 & 511;
      var $126=$125 << 23;
      var $127=27 | $126;
      _genop($123, $127);
      var $128=$1;
      _push_($128);
      label = 20; break;
    case 20: 
      var $130=$n2;
      var $131=(($130)|(0))!=0;
      if ($131) { label = 21; break; } else { label = 38; break; }
    case 21: 
      var $133=$n2;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      $n3=$135;
      var $136=$n3;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      $n4=$138;
      var $139=$pos1;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $142=$1;
      var $143=$pos1;
      _dispatch($142, $143);
      label = 23; break;
    case 23: 
      $pos2=0;
      label = 24; break;
    case 24: 
      var $146=$n4;
      var $147=(($146)|(0))!=0;
      if ($147) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $149=$1;
      var $150=$n4;
      var $151=(($150)|0);
      var $152=HEAP32[(($151)>>2)];
      _codegen($149, $152, 1);
      label = 27; break;
    case 26: 
      var $154=$1;
      var $155=$1;
      var $156=(($155+56)|0);
      var $157=HEAP32[(($156)>>2)];
      var $158=$157 & 511;
      var $159=$158 << 23;
      var $160=17 | $159;
      var $161=$1;
      var $162=$1;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=_mrb_intern2($164, ((105584)|0), 13);
      var $166=_new_msym($161, $165);
      var $167=$166 & 65535;
      var $168=$167 << 7;
      var $169=$160 | $168;
      _genop($154, $169);
      var $170=$1;
      _push_($170);
      label = 27; break;
    case 27: 
      var $172=$1;
      var $173=$1;
      var $174=(($173+56)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$175 & 511;
      var $177=$176 << 23;
      var $178=1 | $177;
      var $179=$exc;
      var $180=$179 & 511;
      var $181=$180 << 14;
      var $182=$178 | $181;
      _genop($172, $182);
      var $183=$1;
      var $184=(($183+56)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=((($185)-(1))|0);
      HEAP32[(($184)>>2)]=$186;
      var $187=$1;
      var $188=$1;
      var $189=(($188+56)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190 & 511;
      var $192=$191 << 23;
      var $193=32 | $192;
      var $194=$1;
      var $195=$1;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=_mrb_intern2($197, ((102752)|0), 3);
      var $199=_new_msym($194, $198);
      var $200=$199 & 511;
      var $201=$200 << 14;
      var $202=$193 | $201;
      var $203=$202 | 128;
      _genop($187, $203);
      var $204=$1;
      var $205=_new_label($204);
      $tmp=$205;
      var $206=$1;
      var $207=$1;
      var $208=(($207+56)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 & 511;
      var $211=$210 << 23;
      var $212=24 | $211;
      var $213=$pos2;
      var $214=((($213)+(32767))|0);
      var $215=$214 & 65535;
      var $216=$215 << 7;
      var $217=$212 | $216;
      _genop($206, $217);
      var $218=$tmp;
      $pos2=$218;
      var $219=$n4;
      var $220=(($219)|(0))!=0;
      if ($220) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $222=$n4;
      var $223=(($222+4)|0);
      var $224=HEAP32[(($223)>>2)];
      $n4=$224;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $227=$n4;
      var $228=(($227)|(0))!=0;
      if ($228) { label = 24; break; } else { label = 31; break; }
    case 31: 
      var $230=$1;
      var $231=_new_label($230);
      $pos1=$231;
      var $232=$1;
      _genop($232, 4194199);
      var $233=$1;
      var $234=$pos2;
      _dispatch_linked($233, $234);
      var $235=$1;
      var $236=(($235+56)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=((($237)-(1))|0);
      HEAP32[(($236)>>2)]=$238;
      var $239=$n3;
      var $240=(($239+4)|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=(($241)|0);
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243)|(0))!=0;
      if ($244) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $246=$1;
      var $247=$n3;
      var $248=(($247+4)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=$exc;
      _gen_assignment($246, $251, $252, 0);
      label = 33; break;
    case 33: 
      var $254=$n3;
      var $255=(($254+4)|0);
      var $256=HEAP32[(($255)>>2)];
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|(0))!=0;
      if ($261) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $263=$1;
      var $264=$n3;
      var $265=(($264+4)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=(($266+4)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=(($268)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=$3;
      _codegen($263, $270, $271);
      var $272=$3;
      var $273=(($272)|(0))!=0;
      if ($273) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $275=$1;
      var $276=(($275+56)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=((($277)-(1))|0);
      HEAP32[(($276)>>2)]=$278;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $281=$1;
      var $282=_new_label($281);
      $tmp=$282;
      var $283=$1;
      var $284=$exend;
      var $285=((($284)+(32767))|0);
      var $286=$285 & 65535;
      var $287=$286 << 7;
      var $288=23 | $287;
      _genop($283, $288);
      var $289=$tmp;
      $exend=$289;
      var $290=$n2;
      var $291=(($290+4)|0);
      var $292=HEAP32[(($291)>>2)];
      $n2=$292;
      var $293=$1;
      _push_($293);
      label = 20; break;
    case 38: 
      var $295=$pos1;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $298=$1;
      var $299=$pos1;
      _dispatch($298, $299);
      var $300=$1;
      var $301=$exc;
      var $302=$301 & 511;
      var $303=$302 << 23;
      var $304=29 | $303;
      _genop($300, $304);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $307=$1;
      var $308=(($307+56)|0);
      var $309=HEAP32[(($308)>>2)];
      var $310=((($309)-(1))|0);
      HEAP32[(($308)>>2)]=$310;
      var $311=$2;
      var $312=(($311+4)|0);
      var $313=HEAP32[(($312)>>2)];
      $2=$313;
      var $314=$1;
      var $315=$noexc;
      _dispatch($314, $315);
      var $316=$1;
      _genop($316, 8388636);
      var $317=$2;
      var $318=(($317)|0);
      var $319=HEAP32[(($318)>>2)];
      var $320=(($319)|(0))!=0;
      if ($320) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $322=$1;
      var $323=$2;
      var $324=(($323)|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=$3;
      _codegen($322, $325, $326);
      label = 46; break;
    case 43: 
      var $328=$3;
      var $329=(($328)|(0))!=0;
      if ($329) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $331=$1;
      _push_($331);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $334=$1;
      var $335=$exend;
      _dispatch_linked($334, $335);
      var $336=$1;
      _loop_pop($336, 0);
      label = 437; break;
    case 47: 
      var $338=$1;
      var $339=(($338+60)|0);
      var $340=HEAP32[(($339)>>2)];
      $epush=$340;
      var $341=$1;
      _genop($341, 30);
      var $342=$1;
      var $343=(($342+76)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=((($344)+(1))|0);
      HEAP32[(($343)>>2)]=$345;
      var $346=$1;
      var $347=$2;
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$3;
      _codegen($346, $349, $350);
      var $351=$1;
      var $352=$2;
      var $353=(($352+4)|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=_scope_body($351, $354);
      $idx=$355;
      var $356=$idx;
      var $357=$356 & 65535;
      var $358=$357 << 7;
      var $359=30 | $358;
      var $360=$epush;
      var $361=$1;
      var $362=(($361+88)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=(($363+($360<<2))|0);
      HEAP32[(($364)>>2)]=$359;
      var $365=$1;
      var $366=(($365+76)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=((($367)-(1))|0);
      HEAP32[(($366)>>2)]=$368;
      var $369=$1;
      _genop_peep($369, 8388639, 0);
      label = 437; break;
    case 48: 
      var $371=$1;
      var $372=$2;
      var $373=_lambda_body($371, $372, 1);
      $idx1=$373;
      var $374=$1;
      var $375=$1;
      var $376=(($375+56)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$377 & 511;
      var $379=$378 << 23;
      var $380=64 | $379;
      var $381=$idx1;
      var $382=$381 & 16383;
      var $383=$382 << 9;
      var $384=$383 | 384;
      var $385=$380 | $384;
      _genop($374, $385);
      var $386=$1;
      _push_($386);
      label = 437; break;
    case 49: 
      var $388=$1;
      var $389=$2;
      var $390=_lambda_body($388, $389, 1);
      $idx2=$390;
      var $391=$1;
      var $392=$1;
      var $393=(($392+56)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=$394 & 511;
      var $396=$395 << 23;
      var $397=64 | $396;
      var $398=$idx2;
      var $399=$398 & 16383;
      var $400=$399 << 9;
      var $401=$400 | 256;
      var $402=$397 | $401;
      _genop($391, $402);
      var $403=$1;
      _push_($403);
      label = 437; break;
    case 50: 
      var $405=$2;
      var $406=(($405+4)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409)|0);
      var $411=HEAP32[(($410)>>2)];
      $e=$411;
      var $412=$1;
      var $413=$2;
      var $414=(($413)|0);
      var $415=HEAP32[(($414)>>2)];
      _codegen($412, $415, 1);
      var $416=$1;
      var $417=(($416+56)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=((($418)-(1))|0);
      HEAP32[(($417)>>2)]=$419;
      var $420=$1;
      var $421=_new_label($420);
      $pos13=$421;
      var $422=$1;
      var $423=$1;
      var $424=(($423+56)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$425 & 511;
      var $427=$426 << 23;
      var $428=25 | $427;
      var $429=$428 | 4194176;
      _genop($422, $429);
      var $430=$1;
      var $431=$2;
      var $432=(($431+4)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=(($433)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$3;
      _codegen($430, $435, $436);
      var $437=$3;
      var $438=(($437)|(0))!=0;
      if ($438) { label = 51; break; } else { label = 53; break; }
    case 51: 
      var $440=$2;
      var $441=(($440+4)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=(($442)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=(($444)|(0))!=0;
      if ($445) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $447=$1;
      var $448=$1;
      var $449=(($448+56)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$450 & 511;
      var $452=$451 << 23;
      var $453=5 | $452;
      _genop($447, $453);
      var $454=$1;
      _push_($454);
      label = 53; break;
    case 53: 
      var $456=$e;
      var $457=(($456)|(0))!=0;
      if ($457) { label = 54; break; } else { label = 57; break; }
    case 54: 
      var $459=$3;
      var $460=(($459)|(0))!=0;
      if ($460) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $462=$1;
      var $463=(($462+56)|0);
      var $464=HEAP32[(($463)>>2)];
      var $465=((($464)-(1))|0);
      HEAP32[(($463)>>2)]=$465;
      label = 56; break;
    case 56: 
      var $467=$1;
      var $468=_new_label($467);
      $pos24=$468;
      var $469=$1;
      _genop($469, 4194199);
      var $470=$1;
      var $471=$pos13;
      _dispatch($470, $471);
      var $472=$1;
      var $473=$e;
      var $474=$3;
      _codegen($472, $473, $474);
      var $475=$1;
      var $476=$pos24;
      _dispatch($475, $476);
      label = 61; break;
    case 57: 
      var $478=$3;
      var $479=(($478)|(0))!=0;
      if ($479) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $481=$1;
      var $482=(($481+56)|0);
      var $483=HEAP32[(($482)>>2)];
      var $484=((($483)-(1))|0);
      HEAP32[(($482)>>2)]=$484;
      var $485=$1;
      var $486=_new_label($485);
      $pos24=$486;
      var $487=$1;
      _genop($487, 4194199);
      var $488=$1;
      var $489=$pos13;
      _dispatch($488, $489);
      var $490=$1;
      var $491=$1;
      var $492=(($491+56)|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=$493 & 511;
      var $495=$494 << 23;
      var $496=5 | $495;
      _genop($490, $496);
      var $497=$1;
      var $498=$pos24;
      _dispatch($497, $498);
      var $499=$1;
      _push_($499);
      label = 60; break;
    case 59: 
      var $501=$1;
      var $502=$pos13;
      _dispatch($501, $502);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 437; break;
    case 62: 
      var $506=$1;
      var $507=$2;
      var $508=(($507)|0);
      var $509=HEAP32[(($508)>>2)];
      _codegen($506, $509, 1);
      var $510=$1;
      var $511=_new_label($510);
      $pos=$511;
      var $512=$1;
      var $513=(($512+56)|0);
      var $514=HEAP32[(($513)>>2)];
      var $515=((($514)-(1))|0);
      HEAP32[(($513)>>2)]=$515;
      var $516=$1;
      var $517=$1;
      var $518=(($517+56)|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=$519 & 511;
      var $521=$520 << 23;
      var $522=25 | $521;
      var $523=$522 | 4194176;
      _genop($516, $523);
      var $524=$1;
      var $525=$2;
      var $526=(($525+4)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=$3;
      _codegen($524, $527, $528);
      var $529=$1;
      var $530=$pos;
      _dispatch($529, $530);
      label = 437; break;
    case 63: 
      var $532=$1;
      var $533=$2;
      var $534=(($533)|0);
      var $535=HEAP32[(($534)>>2)];
      _codegen($532, $535, 1);
      var $536=$1;
      var $537=_new_label($536);
      $pos5=$537;
      var $538=$1;
      var $539=(($538+56)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=((($540)-(1))|0);
      HEAP32[(($539)>>2)]=$541;
      var $542=$1;
      var $543=$1;
      var $544=(($543+56)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$545 & 511;
      var $547=$546 << 23;
      var $548=24 | $547;
      var $549=$548 | 4194176;
      _genop($542, $549);
      var $550=$1;
      var $551=$2;
      var $552=(($551+4)|0);
      var $553=HEAP32[(($552)>>2)];
      var $554=$3;
      _codegen($550, $553, $554);
      var $555=$1;
      var $556=$pos5;
      _dispatch($555, $556);
      label = 437; break;
    case 64: 
      var $558=$1;
      var $559=_loop_push($558, 0);
      $lp6=$559;
      var $560=$1;
      var $561=_new_label($560);
      var $562=$lp6;
      var $563=(($562+4)|0);
      HEAP32[(($563)>>2)]=$561;
      var $564=$1;
      _genop($564, 4194199);
      var $565=$1;
      var $566=_new_label($565);
      var $567=$lp6;
      var $568=(($567+8)|0);
      HEAP32[(($568)>>2)]=$566;
      var $569=$1;
      var $570=$2;
      var $571=(($570+4)|0);
      var $572=HEAP32[(($571)>>2)];
      _codegen($569, $572, 0);
      var $573=$1;
      var $574=$lp6;
      var $575=(($574+4)|0);
      var $576=HEAP32[(($575)>>2)];
      _dispatch($573, $576);
      var $577=$1;
      var $578=$2;
      var $579=(($578)|0);
      var $580=HEAP32[(($579)>>2)];
      _codegen($577, $580, 1);
      var $581=$1;
      var $582=(($581+56)|0);
      var $583=HEAP32[(($582)>>2)];
      var $584=((($583)-(1))|0);
      HEAP32[(($582)>>2)]=$584;
      var $585=$1;
      var $586=$1;
      var $587=(($586+56)|0);
      var $588=HEAP32[(($587)>>2)];
      var $589=$588 & 511;
      var $590=$589 << 23;
      var $591=24 | $590;
      var $592=$lp6;
      var $593=(($592+8)|0);
      var $594=HEAP32[(($593)>>2)];
      var $595=$1;
      var $596=(($595+60)|0);
      var $597=HEAP32[(($596)>>2)];
      var $598=((($594)-($597))|0);
      var $599=((($598)+(32767))|0);
      var $600=$599 & 65535;
      var $601=$600 << 7;
      var $602=$591 | $601;
      _genop($585, $602);
      var $603=$1;
      var $604=$3;
      _loop_pop($603, $604);
      label = 437; break;
    case 65: 
      var $606=$1;
      var $607=_loop_push($606, 0);
      $lp7=$607;
      var $608=$1;
      var $609=_new_label($608);
      var $610=$lp7;
      var $611=(($610+4)|0);
      HEAP32[(($611)>>2)]=$609;
      var $612=$1;
      _genop($612, 4194199);
      var $613=$1;
      var $614=_new_label($613);
      var $615=$lp7;
      var $616=(($615+8)|0);
      HEAP32[(($616)>>2)]=$614;
      var $617=$1;
      var $618=$2;
      var $619=(($618+4)|0);
      var $620=HEAP32[(($619)>>2)];
      _codegen($617, $620, 0);
      var $621=$1;
      var $622=$lp7;
      var $623=(($622+4)|0);
      var $624=HEAP32[(($623)>>2)];
      _dispatch($621, $624);
      var $625=$1;
      var $626=$2;
      var $627=(($626)|0);
      var $628=HEAP32[(($627)>>2)];
      _codegen($625, $628, 1);
      var $629=$1;
      var $630=(($629+56)|0);
      var $631=HEAP32[(($630)>>2)];
      var $632=((($631)-(1))|0);
      HEAP32[(($630)>>2)]=$632;
      var $633=$1;
      var $634=$1;
      var $635=(($634+56)|0);
      var $636=HEAP32[(($635)>>2)];
      var $637=$636 & 511;
      var $638=$637 << 23;
      var $639=25 | $638;
      var $640=$lp7;
      var $641=(($640+8)|0);
      var $642=HEAP32[(($641)>>2)];
      var $643=$1;
      var $644=(($643+60)|0);
      var $645=HEAP32[(($644)>>2)];
      var $646=((($642)-($645))|0);
      var $647=((($646)+(32767))|0);
      var $648=$647 & 65535;
      var $649=$648 << 7;
      var $650=$639 | $649;
      _genop($633, $650);
      var $651=$1;
      var $652=$3;
      _loop_pop($651, $652);
      label = 437; break;
    case 66: 
      var $654=$1;
      var $655=$2;
      _for_body($654, $655);
      var $656=$3;
      var $657=(($656)|(0))!=0;
      if ($657) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $659=$1;
      _push_($659);
      label = 68; break;
    case 68: 
      label = 437; break;
    case 69: 
      $head=0;
      $pos3=0;
      var $662=$2;
      var $663=(($662)|0);
      var $664=HEAP32[(($663)>>2)];
      var $665=(($664)|(0))!=0;
      if ($665) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $667=$1;
      var $668=(($667+56)|0);
      var $669=HEAP32[(($668)>>2)];
      $head=$669;
      var $670=$1;
      var $671=$2;
      var $672=(($671)|0);
      var $673=HEAP32[(($672)>>2)];
      _codegen($670, $673, 1);
      label = 71; break;
    case 71: 
      var $675=$2;
      var $676=(($675+4)|0);
      var $677=HEAP32[(($676)>>2)];
      $2=$677;
      label = 72; break;
    case 72: 
      var $679=$2;
      var $680=(($679)|(0))!=0;
      if ($680) { label = 73; break; } else { label = 86; break; }
    case 73: 
      var $682=$2;
      var $683=(($682)|0);
      var $684=HEAP32[(($683)>>2)];
      var $685=(($684)|0);
      var $686=HEAP32[(($685)>>2)];
      $n=$686;
      $pos29=0;
      $pos18=0;
      label = 74; break;
    case 74: 
      var $688=$n;
      var $689=(($688)|(0))!=0;
      if ($689) { label = 75; break; } else { label = 79; break; }
    case 75: 
      var $691=$1;
      var $692=$n;
      var $693=(($692)|0);
      var $694=HEAP32[(($693)>>2)];
      _codegen($691, $694, 1);
      var $695=$head;
      var $696=(($695)|(0))!=0;
      if ($696) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $698=$1;
      var $699=$1;
      var $700=(($699+56)|0);
      var $701=HEAP32[(($700)>>2)];
      var $702=$701 & 511;
      var $703=$702 << 23;
      var $704=1 | $703;
      var $705=$head;
      var $706=$705 & 511;
      var $707=$706 << 14;
      var $708=$704 | $707;
      _genop($698, $708);
      var $709=$1;
      var $710=(($709+56)|0);
      var $711=HEAP32[(($710)>>2)];
      var $712=((($711)-(1))|0);
      HEAP32[(($710)>>2)]=$712;
      var $713=$1;
      var $714=$1;
      var $715=(($714+56)|0);
      var $716=HEAP32[(($715)>>2)];
      var $717=$716 & 511;
      var $718=$717 << 23;
      var $719=32 | $718;
      var $720=$1;
      var $721=$1;
      var $722=(($721)|0);
      var $723=HEAP32[(($722)>>2)];
      var $724=_mrb_intern2($723, ((102752)|0), 3);
      var $725=_new_msym($720, $724);
      var $726=$725 & 511;
      var $727=$726 << 14;
      var $728=$719 | $727;
      var $729=$728 | 128;
      _genop($713, $729);
      label = 78; break;
    case 77: 
      var $731=$1;
      var $732=(($731+56)|0);
      var $733=HEAP32[(($732)>>2)];
      var $734=((($733)-(1))|0);
      HEAP32[(($732)>>2)]=$734;
      label = 78; break;
    case 78: 
      var $736=$1;
      var $737=_new_label($736);
      $tmp10=$737;
      var $738=$1;
      var $739=$1;
      var $740=(($739+56)|0);
      var $741=HEAP32[(($740)>>2)];
      var $742=$741 & 511;
      var $743=$742 << 23;
      var $744=24 | $743;
      var $745=$pos29;
      var $746=((($745)+(32767))|0);
      var $747=$746 & 65535;
      var $748=$747 << 7;
      var $749=$744 | $748;
      _genop($738, $749);
      var $750=$tmp10;
      $pos29=$750;
      var $751=$n;
      var $752=(($751+4)|0);
      var $753=HEAP32[(($752)>>2)];
      $n=$753;
      label = 74; break;
    case 79: 
      var $755=$2;
      var $756=(($755)|0);
      var $757=HEAP32[(($756)>>2)];
      var $758=(($757)|0);
      var $759=HEAP32[(($758)>>2)];
      var $760=(($759)|(0))!=0;
      if ($760) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $762=$1;
      var $763=_new_label($762);
      $pos18=$763;
      var $764=$1;
      _genop($764, 4194199);
      var $765=$1;
      var $766=$pos29;
      _dispatch_linked($765, $766);
      label = 81; break;
    case 81: 
      var $768=$1;
      var $769=$2;
      var $770=(($769)|0);
      var $771=HEAP32[(($770)>>2)];
      var $772=(($771+4)|0);
      var $773=HEAP32[(($772)>>2)];
      var $774=$3;
      _codegen($768, $773, $774);
      var $775=$3;
      var $776=(($775)|(0))!=0;
      if ($776) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $778=$1;
      var $779=(($778+56)|0);
      var $780=HEAP32[(($779)>>2)];
      var $781=((($780)-(1))|0);
      HEAP32[(($779)>>2)]=$781;
      label = 83; break;
    case 83: 
      var $783=$1;
      var $784=_new_label($783);
      $tmp10=$784;
      var $785=$1;
      var $786=$pos3;
      var $787=((($786)+(32767))|0);
      var $788=$787 & 65535;
      var $789=$788 << 7;
      var $790=23 | $789;
      _genop($785, $790);
      var $791=$tmp10;
      $pos3=$791;
      var $792=$pos18;
      var $793=(($792)|(0))!=0;
      if ($793) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $795=$1;
      var $796=$pos18;
      _dispatch($795, $796);
      label = 85; break;
    case 85: 
      var $798=$2;
      var $799=(($798+4)|0);
      var $800=HEAP32[(($799)>>2)];
      $2=$800;
      label = 72; break;
    case 86: 
      var $802=$3;
      var $803=(($802)|(0))!=0;
      if ($803) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $805=$1;
      var $806=$1;
      var $807=(($806+56)|0);
      var $808=HEAP32[(($807)>>2)];
      var $809=$808 & 511;
      var $810=$809 << 23;
      var $811=5 | $810;
      _genop($805, $811);
      var $812=$1;
      _push_($812);
      label = 88; break;
    case 88: 
      var $814=$pos3;
      var $815=(($814)|(0))!=0;
      if ($815) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $817=$1;
      var $818=$pos3;
      _dispatch_linked($817, $818);
      label = 90; break;
    case 90: 
      label = 437; break;
    case 91: 
      var $821=$1;
      var $822=$2;
      var $823=_scope_body($821, $822);
      label = 437; break;
    case 92: 
      var $825=$1;
      var $826=$2;
      var $827=$3;
      _gen_call($825, $826, 0, 0, $827);
      label = 437; break;
    case 93: 
      var $829=$1;
      var $830=$2;
      var $831=(($830)|0);
      var $832=HEAP32[(($831)>>2)];
      var $833=$3;
      _codegen($829, $832, $833);
      var $834=$1;
      var $835=$2;
      var $836=(($835+4)|0);
      var $837=HEAP32[(($836)>>2)];
      var $838=$3;
      _codegen($834, $837, $838);
      var $839=$3;
      var $840=(($839)|(0))!=0;
      if ($840) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $842=$1;
      var $843=(($842+56)|0);
      var $844=HEAP32[(($843)>>2)];
      var $845=((($844)-(1))|0);
      HEAP32[(($843)>>2)]=$845;
      var $846=$1;
      var $847=(($846+56)|0);
      var $848=HEAP32[(($847)>>2)];
      var $849=((($848)-(1))|0);
      HEAP32[(($847)>>2)]=$849;
      var $850=$1;
      var $851=$1;
      var $852=(($851+56)|0);
      var $853=HEAP32[(($852)>>2)];
      var $854=$853 & 511;
      var $855=$854 << 23;
      var $856=65 | $855;
      var $857=$1;
      var $858=(($857+56)|0);
      var $859=HEAP32[(($858)>>2)];
      var $860=$859 & 511;
      var $861=$860 << 14;
      var $862=$856 | $861;
      _genop($850, $862);
      var $863=$1;
      _push_($863);
      label = 95; break;
    case 95: 
      label = 437; break;
    case 96: 
      var $866=$1;
      var $867=$2;
      var $868=(($867)|0);
      var $869=HEAP32[(($868)>>2)];
      var $870=$3;
      _codegen($866, $869, $870);
      var $871=$1;
      var $872=$2;
      var $873=(($872+4)|0);
      var $874=HEAP32[(($873)>>2)];
      var $875=$3;
      _codegen($871, $874, $875);
      var $876=$3;
      var $877=(($876)|(0))!=0;
      if ($877) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $879=$1;
      var $880=(($879+56)|0);
      var $881=HEAP32[(($880)>>2)];
      var $882=((($881)-(1))|0);
      HEAP32[(($880)>>2)]=$882;
      var $883=$1;
      var $884=(($883+56)|0);
      var $885=HEAP32[(($884)>>2)];
      var $886=((($885)-(1))|0);
      HEAP32[(($884)>>2)]=$886;
      var $887=$1;
      var $888=$1;
      var $889=(($888+56)|0);
      var $890=HEAP32[(($889)>>2)];
      var $891=$890 & 511;
      var $892=$891 << 23;
      var $893=65 | $892;
      var $894=$1;
      var $895=(($894+56)|0);
      var $896=HEAP32[(($895)>>2)];
      var $897=$896 & 511;
      var $898=$897 << 14;
      var $899=$893 | $898;
      var $900=$899 | 128;
      _genop($887, $900);
      var $901=$1;
      _push_($901);
      label = 98; break;
    case 98: 
      label = 437; break;
    case 99: 
      var $904=$1;
      var $905=$2;
      var $906=(($905+4)|0);
      var $907=HEAP32[(($906)>>2)];
      var $908=$907;
      var $909=(($908) & 65535);
      var $910=_new_sym900($904, $909);
      $sym=$910;
      var $911=$1;
      var $912=$2;
      var $913=(($912)|0);
      var $914=HEAP32[(($913)>>2)];
      _codegen($911, $914, 1);
      var $915=$1;
      var $916=(($915+56)|0);
      var $917=HEAP32[(($916)>>2)];
      var $918=((($917)-(1))|0);
      HEAP32[(($916)>>2)]=$918;
      var $919=$1;
      var $920=$1;
      var $921=(($920+56)|0);
      var $922=HEAP32[(($921)>>2)];
      var $923=$922 & 511;
      var $924=$923 << 23;
      var $925=19 | $924;
      var $926=$sym;
      var $927=$926 & 65535;
      var $928=$927 << 7;
      var $929=$925 | $928;
      _genop($919, $929);
      var $930=$3;
      var $931=(($930)|(0))!=0;
      if ($931) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $933=$1;
      _push_($933);
      label = 101; break;
    case 101: 
      label = 437; break;
    case 102: 
      var $936=$1;
      var $937=$2;
      var $938=$937;
      var $939=(($938) & 65535);
      var $940=_new_sym900($936, $939);
      $sym11=$940;
      var $941=$1;
      var $942=$1;
      var $943=(($942+56)|0);
      var $944=HEAP32[(($943)>>2)];
      var $945=$944 & 511;
      var $946=$945 << 23;
      var $947=66 | $946;
      _genop($941, $947);
      var $948=$1;
      var $949=$1;
      var $950=(($949+56)|0);
      var $951=HEAP32[(($950)>>2)];
      var $952=$951 & 511;
      var $953=$952 << 23;
      var $954=19 | $953;
      var $955=$sym11;
      var $956=$955 & 65535;
      var $957=$956 << 7;
      var $958=$954 | $957;
      _genop($948, $958);
      var $959=$3;
      var $960=(($959)|(0))!=0;
      if ($960) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $962=$1;
      _push_($962);
      label = 104; break;
    case 104: 
      label = 437; break;
    case 105: 
      var $965=$1;
      var $966=$2;
      var $967=$3;
      var $968=_gen_values($965, $966, $967);
      $n12=$968;
      var $969=$n12;
      var $970=(($969)|(0)) >= 0;
      if ($970) { label = 106; break; } else { label = 109; break; }
    case 106: 
      var $972=$3;
      var $973=(($972)|(0))!=0;
      if ($973) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $975=$n12;
      var $976=$1;
      var $977=(($976+56)|0);
      var $978=HEAP32[(($977)>>2)];
      var $979=((($978)-($975))|0);
      HEAP32[(($977)>>2)]=$979;
      var $980=$1;
      var $981=$1;
      var $982=(($981+56)|0);
      var $983=HEAP32[(($982)>>2)];
      var $984=$983 & 511;
      var $985=$984 << 23;
      var $986=55 | $985;
      var $987=$1;
      var $988=(($987+56)|0);
      var $989=HEAP32[(($988)>>2)];
      var $990=$989 & 511;
      var $991=$990 << 14;
      var $992=$986 | $991;
      var $993=$n12;
      var $994=$993 & 127;
      var $995=$994 << 7;
      var $996=$992 | $995;
      _genop($980, $996);
      var $997=$1;
      _push_($997);
      label = 108; break;
    case 108: 
      label = 112; break;
    case 109: 
      var $1000=$3;
      var $1001=(($1000)|(0))!=0;
      if ($1001) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $1003=$1;
      _push_($1003);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 437; break;
    case 113: 
      $len=0;
      label = 114; break;
    case 114: 
      var $1008=$2;
      var $1009=(($1008)|(0))!=0;
      if ($1009) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $1011=$1;
      var $1012=$2;
      var $1013=(($1012)|0);
      var $1014=HEAP32[(($1013)>>2)];
      var $1015=(($1014)|0);
      var $1016=HEAP32[(($1015)>>2)];
      var $1017=$3;
      _codegen($1011, $1016, $1017);
      var $1018=$1;
      var $1019=$2;
      var $1020=(($1019)|0);
      var $1021=HEAP32[(($1020)>>2)];
      var $1022=(($1021+4)|0);
      var $1023=HEAP32[(($1022)>>2)];
      var $1024=$3;
      _codegen($1018, $1023, $1024);
      var $1025=$len;
      var $1026=((($1025)+(1))|0);
      $len=$1026;
      var $1027=$2;
      var $1028=(($1027+4)|0);
      var $1029=HEAP32[(($1028)>>2)];
      $2=$1029;
      label = 114; break;
    case 116: 
      var $1031=$3;
      var $1032=(($1031)|(0))!=0;
      if ($1032) { label = 117; break; } else { label = 118; break; }
    case 117: 
      var $1034=$len;
      var $1035=($1034<<1);
      var $1036=$1;
      var $1037=(($1036+56)|0);
      var $1038=HEAP32[(($1037)>>2)];
      var $1039=((($1038)-($1035))|0);
      HEAP32[(($1037)>>2)]=$1039;
      var $1040=$1;
      var $1041=$1;
      var $1042=(($1041+56)|0);
      var $1043=HEAP32[(($1042)>>2)];
      var $1044=$1043 & 511;
      var $1045=$1044 << 23;
      var $1046=63 | $1045;
      var $1047=$1;
      var $1048=(($1047+56)|0);
      var $1049=HEAP32[(($1048)>>2)];
      var $1050=$1049 & 511;
      var $1051=$1050 << 14;
      var $1052=$1046 | $1051;
      var $1053=$len;
      var $1054=$1053 & 127;
      var $1055=$1054 << 7;
      var $1056=$1052 | $1055;
      _genop($1040, $1056);
      var $1057=$1;
      _push_($1057);
      label = 118; break;
    case 118: 
      label = 437; break;
    case 119: 
      var $1060=$1;
      var $1061=$2;
      _codegen($1060, $1061, 1);
      label = 437; break;
    case 120: 
      var $1063=$1;
      var $1064=$2;
      var $1065=(($1064+4)|0);
      var $1066=HEAP32[(($1065)>>2)];
      _codegen($1063, $1066, 1);
      var $1067=$1;
      var $1068=(($1067+56)|0);
      var $1069=HEAP32[(($1068)>>2)];
      var $1070=((($1069)-(1))|0);
      HEAP32[(($1068)>>2)]=$1070;
      var $1071=$1;
      var $1072=$2;
      var $1073=(($1072)|0);
      var $1074=HEAP32[(($1073)>>2)];
      var $1075=$1;
      var $1076=(($1075+56)|0);
      var $1077=HEAP32[(($1076)>>2)];
      var $1078=$3;
      _gen_assignment($1071, $1074, $1077, $1078);
      label = 437; break;
    case 121: 
      $len13=0;
      $n14=0;
      $post=0;
      var $1080=$2;
      var $1081=(($1080+4)|0);
      var $1082=HEAP32[(($1081)>>2)];
      $t=$1082;
      var $1083=$1;
      var $1084=(($1083+56)|0);
      var $1085=HEAP32[(($1084)>>2)];
      $rhs=$1085;
      var $1086=$t;
      var $1087=(($1086)|0);
      var $1088=HEAP32[(($1087)>>2)];
      var $1089=$1088;
      var $1090=(($1089)|(0))==34;
      if ($1090) { label = 122; break; } else { label = 149; break; }
    case 122: 
      var $1092=$t;
      var $1093=(($1092+4)|0);
      var $1094=HEAP32[(($1093)>>2)];
      var $1095=_nosplat($1094);
      var $1096=(($1095)|(0))!=0;
      if ($1096) { label = 123; break; } else { label = 149; break; }
    case 123: 
      var $1098=$t;
      var $1099=(($1098+4)|0);
      var $1100=HEAP32[(($1099)>>2)];
      $t=$1100;
      label = 124; break;
    case 124: 
      var $1102=$t;
      var $1103=(($1102)|(0))!=0;
      if ($1103) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $1105=$1;
      var $1106=$t;
      var $1107=(($1106)|0);
      var $1108=HEAP32[(($1107)>>2)];
      _codegen($1105, $1108, 1);
      var $1109=$len13;
      var $1110=((($1109)+(1))|0);
      $len13=$1110;
      var $1111=$t;
      var $1112=(($1111+4)|0);
      var $1113=HEAP32[(($1112)>>2)];
      $t=$1113;
      label = 124; break;
    case 126: 
      var $1115=$2;
      var $1116=(($1115)|0);
      var $1117=HEAP32[(($1116)>>2)];
      $2=$1117;
      var $1118=$2;
      var $1119=(($1118)|0);
      var $1120=HEAP32[(($1119)>>2)];
      var $1121=(($1120)|(0))!=0;
      if ($1121) { label = 127; break; } else { label = 131; break; }
    case 127: 
      var $1123=$2;
      var $1124=(($1123)|0);
      var $1125=HEAP32[(($1124)>>2)];
      $t=$1125;
      $n14=0;
      label = 128; break;
    case 128: 
      var $1127=$t;
      var $1128=(($1127)|(0))!=0;
      if ($1128) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $1130=$1;
      var $1131=$t;
      var $1132=(($1131)|0);
      var $1133=HEAP32[(($1132)>>2)];
      var $1134=$rhs;
      var $1135=$n14;
      var $1136=((($1134)+($1135))|0);
      _gen_assignment($1130, $1133, $1136, 0);
      var $1137=$n14;
      var $1138=((($1137)+(1))|0);
      $n14=$1138;
      var $1139=$t;
      var $1140=(($1139+4)|0);
      var $1141=HEAP32[(($1140)>>2)];
      $t=$1141;
      label = 128; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $1144=$2;
      var $1145=(($1144+4)|0);
      var $1146=HEAP32[(($1145)>>2)];
      $t=$1146;
      var $1147=$t;
      var $1148=(($1147)|(0))!=0;
      if ($1148) { label = 132; break; } else { label = 146; break; }
    case 132: 
      var $1150=$t;
      var $1151=(($1150+4)|0);
      var $1152=HEAP32[(($1151)>>2)];
      var $1153=(($1152)|(0))!=0;
      if ($1153) { label = 133; break; } else { label = 137; break; }
    case 133: 
      var $1155=$t;
      var $1156=(($1155+4)|0);
      var $1157=HEAP32[(($1156)>>2)];
      var $1158=(($1157)|0);
      var $1159=HEAP32[(($1158)>>2)];
      $p=$1159;
      label = 134; break;
    case 134: 
      var $1161=$p;
      var $1162=(($1161)|(0))!=0;
      if ($1162) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $1164=$post;
      var $1165=((($1164)+(1))|0);
      $post=$1165;
      var $1166=$p;
      var $1167=(($1166+4)|0);
      var $1168=HEAP32[(($1167)>>2)];
      $p=$1168;
      label = 134; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $1171=$t;
      var $1172=(($1171)|0);
      var $1173=HEAP32[(($1172)>>2)];
      var $1174=(($1173)|(0))!=0;
      if ($1174) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $1176=$len13;
      var $1177=$post;
      var $1178=((($1176)-($1177))|0);
      var $1179=$n14;
      var $1180=((($1178)-($1179))|0);
      $rn=$1180;
      var $1181=$1;
      var $1182=$1;
      var $1183=(($1182+56)|0);
      var $1184=HEAP32[(($1183)>>2)];
      var $1185=$1184 & 511;
      var $1186=$1185 << 23;
      var $1187=55 | $1186;
      var $1188=$rhs;
      var $1189=$n14;
      var $1190=((($1188)+($1189))|0);
      var $1191=$1190 & 511;
      var $1192=$1191 << 14;
      var $1193=$1187 | $1192;
      var $1194=$rn;
      var $1195=$1194 & 127;
      var $1196=$1195 << 7;
      var $1197=$1193 | $1196;
      _genop($1181, $1197);
      var $1198=$1;
      var $1199=$t;
      var $1200=(($1199)|0);
      var $1201=HEAP32[(($1200)>>2)];
      var $1202=$1;
      var $1203=(($1202+56)|0);
      var $1204=HEAP32[(($1203)>>2)];
      _gen_assignment($1198, $1201, $1204, 0);
      var $1205=$rn;
      var $1206=$n14;
      var $1207=((($1206)+($1205))|0);
      $n14=$1207;
      label = 139; break;
    case 139: 
      var $1209=$t;
      var $1210=(($1209+4)|0);
      var $1211=HEAP32[(($1210)>>2)];
      var $1212=(($1211)|(0))!=0;
      if ($1212) { label = 140; break; } else { label = 145; break; }
    case 140: 
      var $1214=$t;
      var $1215=(($1214+4)|0);
      var $1216=HEAP32[(($1215)>>2)];
      var $1217=(($1216)|0);
      var $1218=HEAP32[(($1217)>>2)];
      var $1219=(($1218)|(0))!=0;
      if ($1219) { label = 141; break; } else { label = 145; break; }
    case 141: 
      var $1221=$t;
      var $1222=(($1221+4)|0);
      var $1223=HEAP32[(($1222)>>2)];
      var $1224=(($1223)|0);
      var $1225=HEAP32[(($1224)>>2)];
      $t=$1225;
      label = 142; break;
    case 142: 
      var $1227=$n14;
      var $1228=$len13;
      var $1229=(($1227)|(0)) < (($1228)|(0));
      if ($1229) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $1231=$1;
      var $1232=$t;
      var $1233=(($1232)|0);
      var $1234=HEAP32[(($1233)>>2)];
      var $1235=$rhs;
      var $1236=$n14;
      var $1237=((($1235)+($1236))|0);
      _gen_assignment($1231, $1234, $1237, 0);
      var $1238=$t;
      var $1239=(($1238+4)|0);
      var $1240=HEAP32[(($1239)>>2)];
      $t=$1240;
      var $1241=$n14;
      var $1242=((($1241)+(1))|0);
      $n14=$1242;
      label = 142; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $1246=$len13;
      var $1247=$1;
      var $1248=(($1247+56)|0);
      var $1249=HEAP32[(($1248)>>2)];
      var $1250=((($1249)-($1246))|0);
      HEAP32[(($1248)>>2)]=$1250;
      var $1251=$3;
      var $1252=(($1251)|(0))!=0;
      if ($1252) { label = 147; break; } else { label = 148; break; }
    case 147: 
      var $1254=$1;
      var $1255=$rhs;
      var $1256=$1255 & 511;
      var $1257=$1256 << 23;
      var $1258=55 | $1257;
      var $1259=$rhs;
      var $1260=$1259 & 511;
      var $1261=$1260 << 14;
      var $1262=$1258 | $1261;
      var $1263=$len13;
      var $1264=$1263 & 127;
      var $1265=$1264 << 7;
      var $1266=$1262 | $1265;
      _genop($1254, $1266);
      var $1267=$1;
      _push_($1267);
      label = 148; break;
    case 148: 
      label = 152; break;
    case 149: 
      var $1270=$1;
      var $1271=$t;
      _codegen($1270, $1271, 1);
      var $1272=$1;
      var $1273=$2;
      var $1274=(($1273)|0);
      var $1275=HEAP32[(($1274)>>2)];
      var $1276=$rhs;
      var $1277=$3;
      _gen_vmassignment($1272, $1275, $1276, $1277);
      var $1278=$3;
      var $1279=(($1278)|(0))!=0;
      if ($1279) { label = 151; break; } else { label = 150; break; }
    case 150: 
      var $1281=$1;
      var $1282=(($1281+56)|0);
      var $1283=HEAP32[(($1282)>>2)];
      var $1284=((($1283)-(1))|0);
      HEAP32[(($1282)>>2)]=$1284;
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 437; break;
    case 153: 
      var $1288=$2;
      var $1289=(($1288+4)|0);
      var $1290=HEAP32[(($1289)>>2)];
      var $1291=(($1290)|0);
      var $1292=HEAP32[(($1291)>>2)];
      var $1293=$1292;
      var $1294=(($1293) & 65535);
      $sym15=$1294;
      var $1295=$1;
      var $1296=(($1295)|0);
      var $1297=HEAP32[(($1296)>>2)];
      var $1298=$sym15;
      var $1299=_mrb_sym2name_len($1297, $1298, $len16);
      $name=$1299;
      var $1300=$1;
      var $1301=$2;
      var $1302=(($1301)|0);
      var $1303=HEAP32[(($1302)>>2)];
      _codegen($1300, $1303, 1);
      var $1304=HEAP32[(($len16)>>2)];
      var $1305=(($1304)|(0))==2;
      if ($1305) { label = 154; break; } else { label = 159; break; }
    case 154: 
      var $1307=$name;
      var $1308=(($1307)|0);
      var $1309=HEAP8[($1308)];
      var $1310=(($1309 << 24) >> 24);
      var $1311=(($1310)|(0))==124;
      if ($1311) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $1313=$name;
      var $1314=(($1313+1)|0);
      var $1315=HEAP8[($1314)];
      var $1316=(($1315 << 24) >> 24);
      var $1317=(($1316)|(0))==124;
      if ($1317) { label = 158; break; } else { label = 156; break; }
    case 156: 
      var $1319=$name;
      var $1320=(($1319)|0);
      var $1321=HEAP8[($1320)];
      var $1322=(($1321 << 24) >> 24);
      var $1323=(($1322)|(0))==38;
      if ($1323) { label = 157; break; } else { label = 159; break; }
    case 157: 
      var $1325=$name;
      var $1326=(($1325+1)|0);
      var $1327=HEAP8[($1326)];
      var $1328=(($1327 << 24) >> 24);
      var $1329=(($1328)|(0))==38;
      if ($1329) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $1331=$1;
      var $1332=(($1331+56)|0);
      var $1333=HEAP32[(($1332)>>2)];
      var $1334=((($1333)-(1))|0);
      HEAP32[(($1332)>>2)]=$1334;
      var $1335=$1;
      var $1336=_new_label($1335);
      $pos19=$1336;
      var $1337=$1;
      var $1338=$name;
      var $1339=(($1338)|0);
      var $1340=HEAP8[($1339)];
      var $1341=(($1340 << 24) >> 24);
      var $1342=(($1341)|(0))==124;
      var $1343=$1342 ? 24 : 25;
      var $1344=$1343 & 127;
      var $1345=$1;
      var $1346=(($1345+56)|0);
      var $1347=HEAP32[(($1346)>>2)];
      var $1348=$1347 & 511;
      var $1349=$1348 << 23;
      var $1350=$1344 | $1349;
      var $1351=$1350 | 4194176;
      _genop($1337, $1351);
      var $1352=$1;
      var $1353=$2;
      var $1354=(($1353+4)|0);
      var $1355=HEAP32[(($1354)>>2)];
      var $1356=(($1355+4)|0);
      var $1357=HEAP32[(($1356)>>2)];
      var $1358=(($1357)|0);
      var $1359=HEAP32[(($1358)>>2)];
      _codegen($1352, $1359, 1);
      var $1360=$1;
      var $1361=(($1360+56)|0);
      var $1362=HEAP32[(($1361)>>2)];
      var $1363=((($1362)-(1))|0);
      HEAP32[(($1361)>>2)]=$1363;
      var $1364=$1;
      var $1365=$2;
      var $1366=(($1365)|0);
      var $1367=HEAP32[(($1366)>>2)];
      var $1368=$1;
      var $1369=(($1368+56)|0);
      var $1370=HEAP32[(($1369)>>2)];
      var $1371=$3;
      _gen_assignment($1364, $1367, $1370, $1371);
      var $1372=$1;
      var $1373=$pos19;
      _dispatch($1372, $1373);
      label = 437; break;
    case 159: 
      var $1375=$1;
      var $1376=$2;
      var $1377=(($1376+4)|0);
      var $1378=HEAP32[(($1377)>>2)];
      var $1379=(($1378+4)|0);
      var $1380=HEAP32[(($1379)>>2)];
      var $1381=(($1380)|0);
      var $1382=HEAP32[(($1381)>>2)];
      _codegen($1375, $1382, 1);
      var $1383=$1;
      var $1384=(($1383+56)|0);
      var $1385=HEAP32[(($1384)>>2)];
      var $1386=((($1385)-(1))|0);
      HEAP32[(($1384)>>2)]=$1386;
      var $1387=$1;
      var $1388=(($1387+56)|0);
      var $1389=HEAP32[(($1388)>>2)];
      var $1390=((($1389)-(1))|0);
      HEAP32[(($1388)>>2)]=$1390;
      var $1391=$1;
      var $1392=$sym15;
      var $1393=_new_msym($1391, $1392);
      $idx17=$1393;
      var $1394=HEAP32[(($len16)>>2)];
      var $1395=(($1394)|(0))==1;
      if ($1395) { label = 160; break; } else { label = 162; break; }
    case 160: 
      var $1397=$name;
      var $1398=(($1397)|0);
      var $1399=HEAP8[($1398)];
      var $1400=(($1399 << 24) >> 24);
      var $1401=(($1400)|(0))==43;
      if ($1401) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $1403=$1;
      var $1404=$1;
      var $1405=(($1404+56)|0);
      var $1406=HEAP32[(($1405)>>2)];
      var $1407=$1406 & 511;
      var $1408=$1407 << 23;
      var $1409=44 | $1408;
      var $1410=$idx17;
      var $1411=$1410 & 511;
      var $1412=$1411 << 14;
      var $1413=$1409 | $1412;
      var $1414=$1413 | 128;
      var $1415=$3;
      _genop_peep($1403, $1414, $1415);
      label = 193; break;
    case 162: 
      var $1417=HEAP32[(($len16)>>2)];
      var $1418=(($1417)|(0))==1;
      if ($1418) { label = 163; break; } else { label = 165; break; }
    case 163: 
      var $1420=$name;
      var $1421=(($1420)|0);
      var $1422=HEAP8[($1421)];
      var $1423=(($1422 << 24) >> 24);
      var $1424=(($1423)|(0))==45;
      if ($1424) { label = 164; break; } else { label = 165; break; }
    case 164: 
      var $1426=$1;
      var $1427=$1;
      var $1428=(($1427+56)|0);
      var $1429=HEAP32[(($1428)>>2)];
      var $1430=$1429 & 511;
      var $1431=$1430 << 23;
      var $1432=46 | $1431;
      var $1433=$idx17;
      var $1434=$1433 & 511;
      var $1435=$1434 << 14;
      var $1436=$1432 | $1435;
      var $1437=$1436 | 128;
      var $1438=$3;
      _genop_peep($1426, $1437, $1438);
      label = 192; break;
    case 165: 
      var $1440=HEAP32[(($len16)>>2)];
      var $1441=(($1440)|(0))==1;
      if ($1441) { label = 166; break; } else { label = 168; break; }
    case 166: 
      var $1443=$name;
      var $1444=(($1443)|0);
      var $1445=HEAP8[($1444)];
      var $1446=(($1445 << 24) >> 24);
      var $1447=(($1446)|(0))==42;
      if ($1447) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $1449=$1;
      var $1450=$1;
      var $1451=(($1450+56)|0);
      var $1452=HEAP32[(($1451)>>2)];
      var $1453=$1452 & 511;
      var $1454=$1453 << 23;
      var $1455=48 | $1454;
      var $1456=$idx17;
      var $1457=$1456 & 511;
      var $1458=$1457 << 14;
      var $1459=$1455 | $1458;
      var $1460=$1459 | 128;
      _genop($1449, $1460);
      label = 191; break;
    case 168: 
      var $1462=HEAP32[(($len16)>>2)];
      var $1463=(($1462)|(0))==1;
      if ($1463) { label = 169; break; } else { label = 171; break; }
    case 169: 
      var $1465=$name;
      var $1466=(($1465)|0);
      var $1467=HEAP8[($1466)];
      var $1468=(($1467 << 24) >> 24);
      var $1469=(($1468)|(0))==47;
      if ($1469) { label = 170; break; } else { label = 171; break; }
    case 170: 
      var $1471=$1;
      var $1472=$1;
      var $1473=(($1472+56)|0);
      var $1474=HEAP32[(($1473)>>2)];
      var $1475=$1474 & 511;
      var $1476=$1475 << 23;
      var $1477=49 | $1476;
      var $1478=$idx17;
      var $1479=$1478 & 511;
      var $1480=$1479 << 14;
      var $1481=$1477 | $1480;
      var $1482=$1481 | 128;
      _genop($1471, $1482);
      label = 190; break;
    case 171: 
      var $1484=HEAP32[(($len16)>>2)];
      var $1485=(($1484)|(0))==1;
      if ($1485) { label = 172; break; } else { label = 174; break; }
    case 172: 
      var $1487=$name;
      var $1488=(($1487)|0);
      var $1489=HEAP8[($1488)];
      var $1490=(($1489 << 24) >> 24);
      var $1491=(($1490)|(0))==60;
      if ($1491) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $1493=$1;
      var $1494=$1;
      var $1495=(($1494+56)|0);
      var $1496=HEAP32[(($1495)>>2)];
      var $1497=$1496 & 511;
      var $1498=$1497 << 23;
      var $1499=51 | $1498;
      var $1500=$idx17;
      var $1501=$1500 & 511;
      var $1502=$1501 << 14;
      var $1503=$1499 | $1502;
      var $1504=$1503 | 128;
      _genop($1493, $1504);
      label = 189; break;
    case 174: 
      var $1506=HEAP32[(($len16)>>2)];
      var $1507=(($1506)|(0))==2;
      if ($1507) { label = 175; break; } else { label = 178; break; }
    case 175: 
      var $1509=$name;
      var $1510=(($1509)|0);
      var $1511=HEAP8[($1510)];
      var $1512=(($1511 << 24) >> 24);
      var $1513=(($1512)|(0))==60;
      if ($1513) { label = 176; break; } else { label = 178; break; }
    case 176: 
      var $1515=$name;
      var $1516=(($1515+1)|0);
      var $1517=HEAP8[($1516)];
      var $1518=(($1517 << 24) >> 24);
      var $1519=(($1518)|(0))==61;
      if ($1519) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $1521=$1;
      var $1522=$1;
      var $1523=(($1522+56)|0);
      var $1524=HEAP32[(($1523)>>2)];
      var $1525=$1524 & 511;
      var $1526=$1525 << 23;
      var $1527=52 | $1526;
      var $1528=$idx17;
      var $1529=$1528 & 511;
      var $1530=$1529 << 14;
      var $1531=$1527 | $1530;
      var $1532=$1531 | 128;
      _genop($1521, $1532);
      label = 188; break;
    case 178: 
      var $1534=HEAP32[(($len16)>>2)];
      var $1535=(($1534)|(0))==1;
      if ($1535) { label = 179; break; } else { label = 181; break; }
    case 179: 
      var $1537=$name;
      var $1538=(($1537)|0);
      var $1539=HEAP8[($1538)];
      var $1540=(($1539 << 24) >> 24);
      var $1541=(($1540)|(0))==62;
      if ($1541) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $1543=$1;
      var $1544=$1;
      var $1545=(($1544+56)|0);
      var $1546=HEAP32[(($1545)>>2)];
      var $1547=$1546 & 511;
      var $1548=$1547 << 23;
      var $1549=53 | $1548;
      var $1550=$idx17;
      var $1551=$1550 & 511;
      var $1552=$1551 << 14;
      var $1553=$1549 | $1552;
      var $1554=$1553 | 128;
      _genop($1543, $1554);
      label = 187; break;
    case 181: 
      var $1556=HEAP32[(($len16)>>2)];
      var $1557=(($1556)|(0))==2;
      if ($1557) { label = 182; break; } else { label = 185; break; }
    case 182: 
      var $1559=$name;
      var $1560=(($1559)|0);
      var $1561=HEAP8[($1560)];
      var $1562=(($1561 << 24) >> 24);
      var $1563=(($1562)|(0))==62;
      if ($1563) { label = 183; break; } else { label = 185; break; }
    case 183: 
      var $1565=$name;
      var $1566=(($1565+1)|0);
      var $1567=HEAP8[($1566)];
      var $1568=(($1567 << 24) >> 24);
      var $1569=(($1568)|(0))==61;
      if ($1569) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $1571=$1;
      var $1572=$1;
      var $1573=(($1572+56)|0);
      var $1574=HEAP32[(($1573)>>2)];
      var $1575=$1574 & 511;
      var $1576=$1575 << 23;
      var $1577=54 | $1576;
      var $1578=$idx17;
      var $1579=$1578 & 511;
      var $1580=$1579 << 14;
      var $1581=$1577 | $1580;
      var $1582=$1581 | 128;
      _genop($1571, $1582);
      label = 186; break;
    case 185: 
      var $1584=$1;
      var $1585=$1;
      var $1586=(($1585+56)|0);
      var $1587=HEAP32[(($1586)>>2)];
      var $1588=$1587 & 511;
      var $1589=$1588 << 23;
      var $1590=32 | $1589;
      var $1591=$idx17;
      var $1592=$1591 & 511;
      var $1593=$1592 << 14;
      var $1594=$1590 | $1593;
      var $1595=$1594 | 128;
      _genop($1584, $1595);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 188; break;
    case 188: 
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      var $1604=$1;
      var $1605=$2;
      var $1606=(($1605)|0);
      var $1607=HEAP32[(($1606)>>2)];
      var $1608=$1;
      var $1609=(($1608+56)|0);
      var $1610=HEAP32[(($1609)>>2)];
      var $1611=$3;
      _gen_assignment($1604, $1607, $1610, $1611);
      label = 437; break;
    case 194: 
      $n20=0;
      $noop=0;
      $sendv=0;
      var $1613=$1;
      _push_($1613);
      var $1614=$2;
      var $1615=(($1614)|(0))!=0;
      if ($1615) { label = 195; break; } else { label = 200; break; }
    case 195: 
      var $1617=$2;
      var $1618=(($1617)|0);
      var $1619=HEAP32[(($1618)>>2)];
      $args=$1619;
      var $1620=$args;
      var $1621=(($1620)|(0))!=0;
      if ($1621) { label = 196; break; } else { label = 199; break; }
    case 196: 
      var $1623=$1;
      var $1624=$args;
      var $1625=_gen_values($1623, $1624, 1);
      $n20=$1625;
      var $1626=$n20;
      var $1627=(($1626)|(0)) < 0;
      if ($1627) { label = 197; break; } else { label = 198; break; }
    case 197: 
      $sendv=1;
      $noop=1;
      $n20=1;
      var $1629=$1;
      _push_($1629);
      label = 198; break;
    case 198: 
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $1633=$2;
      var $1634=(($1633)|(0))!=0;
      if ($1634) { label = 201; break; } else { label = 203; break; }
    case 201: 
      var $1636=$2;
      var $1637=(($1636+4)|0);
      var $1638=HEAP32[(($1637)>>2)];
      var $1639=(($1638)|(0))!=0;
      if ($1639) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $1641=$1;
      var $1642=$2;
      var $1643=(($1642+4)|0);
      var $1644=HEAP32[(($1643)>>2)];
      _codegen($1641, $1644, 1);
      var $1645=$1;
      var $1646=(($1645+56)|0);
      var $1647=HEAP32[(($1646)>>2)];
      var $1648=((($1647)-(1))|0);
      HEAP32[(($1646)>>2)]=$1648;
      label = 204; break;
    case 203: 
      var $1650=$1;
      var $1651=$1;
      var $1652=(($1651+56)|0);
      var $1653=HEAP32[(($1652)>>2)];
      var $1654=$1653 & 511;
      var $1655=$1654 << 23;
      var $1656=5 | $1655;
      _genop($1650, $1656);
      label = 204; break;
    case 204: 
      var $1658=$n20;
      var $1659=((($1658)+(1))|0);
      var $1660=$1;
      var $1661=(($1660+56)|0);
      var $1662=HEAP32[(($1661)>>2)];
      var $1663=((($1662)-($1659))|0);
      HEAP32[(($1661)>>2)]=$1663;
      var $1664=$sendv;
      var $1665=(($1664)|(0))!=0;
      if ($1665) { label = 205; break; } else { label = 206; break; }
    case 205: 
      $n20=127;
      label = 206; break;
    case 206: 
      var $1668=$1;
      var $1669=$1;
      var $1670=(($1669+56)|0);
      var $1671=HEAP32[(($1670)>>2)];
      var $1672=$1671 & 511;
      var $1673=$1672 << 23;
      var $1674=36 | $1673;
      var $1675=$n20;
      var $1676=$1675 & 127;
      var $1677=$1676 << 7;
      var $1678=$1674 | $1677;
      _genop($1668, $1678);
      var $1679=$3;
      var $1680=(($1679)|(0))!=0;
      if ($1680) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $1682=$1;
      _push_($1682);
      label = 208; break;
    case 208: 
      label = 437; break;
    case 209: 
      var $1685=$1;
      $s2=$1685;
      $lv=0;
      $ainfo=0;
      var $1686=$1;
      _push_($1686);
      label = 210; break;
    case 210: 
      var $1688=$s2;
      var $1689=$1688;
      var $1690=(($1689+69)|0);
      var $1691=HEAP8[($1690)];
      var $1692=(($1691)&(255)) >>> 7;
      var $1693=$1692 & 1;
      var $1694=(($1693 << 24) >> 24)!=0;
      var $1695=$1694 ^ 1;
      if ($1695) { label = 211; break; } else { label = 214; break; }
    case 211: 
      var $1697=$lv;
      var $1698=((($1697)+(1))|0);
      $lv=$1698;
      var $1699=$s2;
      var $1700=(($1699+48)|0);
      var $1701=HEAP32[(($1700)>>2)];
      $s2=$1701;
      var $1702=$s2;
      var $1703=(($1702)|(0))!=0;
      if ($1703) { label = 213; break; } else { label = 212; break; }
    case 212: 
      label = 214; break;
    case 213: 
      label = 210; break;
    case 214: 
      var $1707=$s2;
      var $1708=(($1707)|(0))!=0;
      if ($1708) { label = 215; break; } else { label = 216; break; }
    case 215: 
      var $1710=$s2;
      var $1711=$1710;
      var $1712=(($1711+68)|0);
      var $1713=$1712;
      var $1714=HEAP32[(($1713)>>2)];
      var $1715=$1714 & 32767;
      var $1716=$1715 << 17;
      var $1717=$1716 >> 17;
      $ainfo=$1717;
      label = 216; break;
    case 216: 
      var $1719=$1;
      var $1720=$1;
      var $1721=(($1720+56)|0);
      var $1722=HEAP32[(($1721)>>2)];
      var $1723=$1722 & 511;
      var $1724=$1723 << 23;
      var $1725=37 | $1724;
      var $1726=$ainfo;
      var $1727=$1726 << 4;
      var $1728=$lv;
      var $1729=$1728 & 15;
      var $1730=$1727 | $1729;
      var $1731=$1730 & 65535;
      var $1732=$1731 << 7;
      var $1733=$1725 | $1732;
      _genop($1719, $1733);
      var $1734=$2;
      var $1735=(($1734)|(0))!=0;
      if ($1735) { label = 217; break; } else { label = 219; break; }
    case 217: 
      var $1737=$2;
      var $1738=(($1737+4)|0);
      var $1739=HEAP32[(($1738)>>2)];
      var $1740=(($1739)|(0))!=0;
      if ($1740) { label = 218; break; } else { label = 219; break; }
    case 218: 
      var $1742=$1;
      _push_($1742);
      var $1743=$1;
      var $1744=$2;
      var $1745=(($1744+4)|0);
      var $1746=HEAP32[(($1745)>>2)];
      _codegen($1743, $1746, 1);
      var $1747=$1;
      var $1748=(($1747+56)|0);
      var $1749=HEAP32[(($1748)>>2)];
      var $1750=((($1749)-(2))|0);
      HEAP32[(($1748)>>2)]=$1750;
      label = 219; break;
    case 219: 
      var $1752=$1;
      var $1753=(($1752+56)|0);
      var $1754=HEAP32[(($1753)>>2)];
      var $1755=((($1754)-(1))|0);
      HEAP32[(($1753)>>2)]=$1755;
      var $1756=$1;
      var $1757=$1;
      var $1758=(($1757+56)|0);
      var $1759=HEAP32[(($1758)>>2)];
      var $1760=$1759 & 511;
      var $1761=$1760 << 23;
      var $1762=36 | $1761;
      var $1763=$1762 | 16256;
      _genop($1756, $1763);
      var $1764=$3;
      var $1765=(($1764)|(0))!=0;
      if ($1765) { label = 220; break; } else { label = 221; break; }
    case 220: 
      var $1767=$1;
      _push_($1767);
      label = 221; break;
    case 221: 
      label = 437; break;
    case 222: 
      var $1770=$2;
      var $1771=(($1770)|(0))!=0;
      if ($1771) { label = 223; break; } else { label = 224; break; }
    case 223: 
      var $1773=$1;
      var $1774=$2;
      _codegen($1773, $1774, 1);
      var $1775=$1;
      var $1776=(($1775+56)|0);
      var $1777=HEAP32[(($1776)>>2)];
      var $1778=((($1777)-(1))|0);
      HEAP32[(($1776)>>2)]=$1778;
      label = 225; break;
    case 224: 
      var $1780=$1;
      var $1781=$1;
      var $1782=(($1781+56)|0);
      var $1783=HEAP32[(($1782)>>2)];
      var $1784=$1783 & 511;
      var $1785=$1784 << 23;
      var $1786=5 | $1785;
      _genop($1780, $1786);
      label = 225; break;
    case 225: 
      var $1788=$1;
      var $1789=(($1788+72)|0);
      var $1790=HEAP32[(($1789)>>2)];
      var $1791=(($1790)|(0))!=0;
      if ($1791) { label = 226; break; } else { label = 227; break; }
    case 226: 
      var $1793=$1;
      var $1794=$1;
      var $1795=(($1794+56)|0);
      var $1796=HEAP32[(($1795)>>2)];
      var $1797=$1796 & 511;
      var $1798=$1797 << 23;
      var $1799=41 | $1798;
      var $1800=$1799 | 32768;
      _genop($1793, $1800);
      label = 228; break;
    case 227: 
      var $1802=$1;
      var $1803=$1;
      var $1804=(($1803+56)|0);
      var $1805=HEAP32[(($1804)>>2)];
      var $1806=$1805 & 511;
      var $1807=$1806 << 23;
      var $1808=41 | $1807;
      _genop_peep($1802, $1808, 0);
      label = 228; break;
    case 228: 
      var $1810=$3;
      var $1811=(($1810)|(0))!=0;
      if ($1811) { label = 229; break; } else { label = 230; break; }
    case 229: 
      var $1813=$1;
      _push_($1813);
      label = 230; break;
    case 230: 
      label = 437; break;
    case 231: 
      var $1816=$1;
      $s221=$1816;
      $lv22=0;
      $ainfo23=0;
      $n24=0;
      $sendv25=0;
      label = 232; break;
    case 232: 
      var $1818=$s221;
      var $1819=$1818;
      var $1820=(($1819+69)|0);
      var $1821=HEAP8[($1820)];
      var $1822=(($1821)&(255)) >>> 7;
      var $1823=$1822 & 1;
      var $1824=(($1823 << 24) >> 24)!=0;
      var $1825=$1824 ^ 1;
      if ($1825) { label = 233; break; } else { label = 236; break; }
    case 233: 
      var $1827=$lv22;
      var $1828=((($1827)+(1))|0);
      $lv22=$1828;
      var $1829=$s221;
      var $1830=(($1829+48)|0);
      var $1831=HEAP32[(($1830)>>2)];
      $s221=$1831;
      var $1832=$s221;
      var $1833=(($1832)|(0))!=0;
      if ($1833) { label = 235; break; } else { label = 234; break; }
    case 234: 
      label = 236; break;
    case 235: 
      label = 232; break;
    case 236: 
      var $1837=$s221;
      var $1838=(($1837)|(0))!=0;
      if ($1838) { label = 237; break; } else { label = 238; break; }
    case 237: 
      var $1840=$s221;
      var $1841=$1840;
      var $1842=(($1841+68)|0);
      var $1843=$1842;
      var $1844=HEAP32[(($1843)>>2)];
      var $1845=$1844 & 32767;
      var $1846=$1845 << 17;
      var $1847=$1846 >> 17;
      $ainfo23=$1847;
      label = 238; break;
    case 238: 
      var $1849=$1;
      var $1850=$1;
      var $1851=(($1850+56)|0);
      var $1852=HEAP32[(($1851)>>2)];
      var $1853=$1852 & 511;
      var $1854=$1853 << 23;
      var $1855=43 | $1854;
      var $1856=$ainfo23;
      var $1857=$1856 << 4;
      var $1858=$lv22;
      var $1859=$1858 & 15;
      var $1860=$1857 | $1859;
      var $1861=$1860 & 65535;
      var $1862=$1861 << 7;
      var $1863=$1855 | $1862;
      _genop($1849, $1863);
      var $1864=$1;
      _push_($1864);
      var $1865=$2;
      var $1866=(($1865)|(0))!=0;
      if ($1866) { label = 239; break; } else { label = 242; break; }
    case 239: 
      var $1868=$1;
      var $1869=$2;
      var $1870=_gen_values($1868, $1869, 1);
      $n24=$1870;
      var $1871=$n24;
      var $1872=(($1871)|(0)) < 0;
      if ($1872) { label = 240; break; } else { label = 241; break; }
    case 240: 
      $sendv25=1;
      $n24=1;
      var $1874=$1;
      _push_($1874);
      label = 241; break;
    case 241: 
      label = 242; break;
    case 242: 
      var $1877=$n24;
      var $1878=((($1877)+(1))|0);
      var $1879=$1;
      var $1880=(($1879+56)|0);
      var $1881=HEAP32[(($1880)>>2)];
      var $1882=((($1881)-($1878))|0);
      HEAP32[(($1880)>>2)]=$1882;
      var $1883=$sendv25;
      var $1884=(($1883)|(0))!=0;
      if ($1884) { label = 243; break; } else { label = 244; break; }
    case 243: 
      $n24=127;
      label = 244; break;
    case 244: 
      var $1887=$1;
      var $1888=$1;
      var $1889=(($1888+56)|0);
      var $1890=HEAP32[(($1889)>>2)];
      var $1891=$1890 & 511;
      var $1892=$1891 << 23;
      var $1893=32 | $1892;
      var $1894=$1;
      var $1895=$1;
      var $1896=(($1895)|0);
      var $1897=HEAP32[(($1896)>>2)];
      var $1898=_mrb_intern2($1897, ((99944)|0), 4);
      var $1899=_new_msym($1894, $1898);
      var $1900=$1899 & 511;
      var $1901=$1900 << 14;
      var $1902=$1893 | $1901;
      var $1903=$n24;
      var $1904=$1903 & 127;
      var $1905=$1904 << 7;
      var $1906=$1902 | $1905;
      _genop($1887, $1906);
      var $1907=$3;
      var $1908=(($1907)|(0))!=0;
      if ($1908) { label = 245; break; } else { label = 246; break; }
    case 245: 
      var $1910=$1;
      _push_($1910);
      label = 246; break;
    case 246: 
      label = 437; break;
    case 247: 
      var $1913=$1;
      var $1914=$2;
      _loop_break($1913, $1914);
      var $1915=$3;
      var $1916=(($1915)|(0))!=0;
      if ($1916) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $1918=$1;
      _push_($1918);
      label = 249; break;
    case 249: 
      label = 437; break;
    case 250: 
      var $1921=$1;
      var $1922=(($1921+72)|0);
      var $1923=HEAP32[(($1922)>>2)];
      var $1924=(($1923)|(0))!=0;
      if ($1924) { label = 252; break; } else { label = 251; break; }
    case 251: 
      var $1926=$1;
      _raise_error($1926, ((97400)|0));
      label = 261; break;
    case 252: 
      var $1928=$1;
      var $1929=(($1928+72)|0);
      var $1930=HEAP32[(($1929)>>2)];
      var $1931=(($1930)|0);
      var $1932=HEAP32[(($1931)>>2)];
      var $1933=(($1932)|(0))==0;
      if ($1933) { label = 253; break; } else { label = 256; break; }
    case 253: 
      var $1935=$1;
      var $1936=(($1935+76)|0);
      var $1937=HEAP32[(($1936)>>2)];
      var $1938=$1;
      var $1939=(($1938+72)|0);
      var $1940=HEAP32[(($1939)>>2)];
      var $1941=(($1940+20)|0);
      var $1942=HEAP32[(($1941)>>2)];
      var $1943=(($1937)|(0)) > (($1942)|(0));
      if ($1943) { label = 254; break; } else { label = 255; break; }
    case 254: 
      var $1945=$1;
      var $1946=$1;
      var $1947=(($1946+76)|0);
      var $1948=HEAP32[(($1947)>>2)];
      var $1949=$1;
      var $1950=(($1949+72)|0);
      var $1951=HEAP32[(($1950)>>2)];
      var $1952=(($1951+20)|0);
      var $1953=HEAP32[(($1952)>>2)];
      var $1954=((($1948)-($1953))|0);
      var $1955=$1954 & 511;
      var $1956=$1955 << 23;
      var $1957=31 | $1956;
      _genop_peep($1945, $1957, 0);
      label = 255; break;
    case 255: 
      var $1959=$1;
      var $1960=$2;
      _codegen($1959, $1960, 0);
      var $1961=$1;
      var $1962=$1;
      var $1963=(($1962+72)|0);
      var $1964=HEAP32[(($1963)>>2)];
      var $1965=(($1964+4)|0);
      var $1966=HEAP32[(($1965)>>2)];
      var $1967=$1;
      var $1968=(($1967+60)|0);
      var $1969=HEAP32[(($1968)>>2)];
      var $1970=((($1966)-($1969))|0);
      var $1971=((($1970)+(32767))|0);
      var $1972=$1971 & 65535;
      var $1973=$1972 << 7;
      var $1974=23 | $1973;
      _genop($1961, $1974);
      label = 260; break;
    case 256: 
      var $1976=$2;
      var $1977=(($1976)|(0))!=0;
      if ($1977) { label = 257; break; } else { label = 258; break; }
    case 257: 
      var $1979=$1;
      var $1980=$2;
      _codegen($1979, $1980, 1);
      var $1981=$1;
      var $1982=(($1981+56)|0);
      var $1983=HEAP32[(($1982)>>2)];
      var $1984=((($1983)-(1))|0);
      HEAP32[(($1982)>>2)]=$1984;
      label = 259; break;
    case 258: 
      var $1986=$1;
      var $1987=$1;
      var $1988=(($1987+56)|0);
      var $1989=HEAP32[(($1988)>>2)];
      var $1990=$1989 & 511;
      var $1991=$1990 << 23;
      var $1992=5 | $1991;
      _genop($1986, $1992);
      label = 259; break;
    case 259: 
      var $1994=$1;
      var $1995=$1;
      var $1996=(($1995+56)|0);
      var $1997=HEAP32[(($1996)>>2)];
      var $1998=$1997 & 511;
      var $1999=$1998 << 23;
      var $2000=41 | $1999;
      _genop_peep($1994, $2000, 0);
      label = 260; break;
    case 260: 
      label = 261; break;
    case 261: 
      var $2003=$3;
      var $2004=(($2003)|(0))!=0;
      if ($2004) { label = 262; break; } else { label = 263; break; }
    case 262: 
      var $2006=$1;
      _push_($2006);
      label = 263; break;
    case 263: 
      label = 437; break;
    case 264: 
      var $2009=$1;
      var $2010=(($2009+72)|0);
      var $2011=HEAP32[(($2010)>>2)];
      var $2012=(($2011)|(0))!=0;
      if ($2012) { label = 266; break; } else { label = 265; break; }
    case 265: 
      var $2014=$1;
      _raise_error($2014, ((96160)|0));
      label = 269; break;
    case 266: 
      var $2016=$1;
      var $2017=(($2016+76)|0);
      var $2018=HEAP32[(($2017)>>2)];
      var $2019=$1;
      var $2020=(($2019+72)|0);
      var $2021=HEAP32[(($2020)>>2)];
      var $2022=(($2021+20)|0);
      var $2023=HEAP32[(($2022)>>2)];
      var $2024=(($2018)|(0)) > (($2023)|(0));
      if ($2024) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $2026=$1;
      var $2027=$1;
      var $2028=(($2027+76)|0);
      var $2029=HEAP32[(($2028)>>2)];
      var $2030=$1;
      var $2031=(($2030+72)|0);
      var $2032=HEAP32[(($2031)>>2)];
      var $2033=(($2032+20)|0);
      var $2034=HEAP32[(($2033)>>2)];
      var $2035=((($2029)-($2034))|0);
      var $2036=$2035 & 511;
      var $2037=$2036 << 23;
      var $2038=31 | $2037;
      _genop_peep($2026, $2038, 0);
      label = 268; break;
    case 268: 
      var $2040=$1;
      var $2041=$1;
      var $2042=(($2041+72)|0);
      var $2043=HEAP32[(($2042)>>2)];
      var $2044=(($2043+8)|0);
      var $2045=HEAP32[(($2044)>>2)];
      var $2046=$1;
      var $2047=(($2046+60)|0);
      var $2048=HEAP32[(($2047)>>2)];
      var $2049=((($2045)-($2048))|0);
      var $2050=((($2049)+(32767))|0);
      var $2051=$2050 & 65535;
      var $2052=$2051 << 7;
      var $2053=23 | $2052;
      _genop($2040, $2053);
      label = 269; break;
    case 269: 
      label = 437; break;
    case 270: 
      $msg=((95056)|0);
      var $2056=$1;
      var $2057=(($2056+72)|0);
      var $2058=HEAP32[(($2057)>>2)];
      var $2059=(($2058)|(0))!=0;
      if ($2059) { label = 272; break; } else { label = 271; break; }
    case 271: 
      var $2061=$1;
      var $2062=$msg;
      _raise_error($2061, $2062);
      label = 290; break;
    case 272: 
      var $2064=$1;
      var $2065=(($2064+72)|0);
      var $2066=HEAP32[(($2065)>>2)];
      $lp26=$2066;
      $n27=0;
      label = 273; break;
    case 273: 
      var $2068=$lp26;
      var $2069=(($2068)|(0))!=0;
      if ($2069) { label = 274; break; } else { var $2076 = 0;label = 275; break; }
    case 274: 
      var $2071=$lp26;
      var $2072=(($2071)|0);
      var $2073=HEAP32[(($2072)>>2)];
      var $2074=(($2073)|(0))!=4;
      var $2076 = $2074;label = 275; break;
    case 275: 
      var $2076;
      if ($2076) { label = 276; break; } else { label = 279; break; }
    case 276: 
      var $2078=$lp26;
      var $2079=(($2078)|0);
      var $2080=HEAP32[(($2079)>>2)];
      var $2081=(($2080)|(0))==3;
      if ($2081) { label = 277; break; } else { label = 278; break; }
    case 277: 
      var $2083=$n27;
      var $2084=((($2083)+(1))|0);
      $n27=$2084;
      label = 278; break;
    case 278: 
      var $2086=$lp26;
      var $2087=(($2086+24)|0);
      var $2088=HEAP32[(($2087)>>2)];
      $lp26=$2088;
      label = 273; break;
    case 279: 
      var $2090=$lp26;
      var $2091=(($2090)|(0))!=0;
      if ($2091) { label = 281; break; } else { label = 280; break; }
    case 280: 
      var $2093=$1;
      var $2094=$msg;
      _raise_error($2093, $2094);
      label = 289; break;
    case 281: 
      var $2096=$n27;
      var $2097=(($2096)|(0)) > 0;
      if ($2097) { label = 282; break; } else { label = 286; break; }
    case 282: 
      label = 283; break;
    case 283: 
      var $2100=$n27;
      var $2101=((($2100)-(1))|0);
      $n27=$2101;
      var $2102=(($2100)|(0))!=0;
      if ($2102) { label = 284; break; } else { label = 285; break; }
    case 284: 
      var $2104=$1;
      _genop_peep($2104, 8388636, 0);
      label = 283; break;
    case 285: 
      label = 286; break;
    case 286: 
      var $2107=$1;
      var $2108=(($2107+76)|0);
      var $2109=HEAP32[(($2108)>>2)];
      var $2110=$lp26;
      var $2111=(($2110+20)|0);
      var $2112=HEAP32[(($2111)>>2)];
      var $2113=(($2109)|(0)) > (($2112)|(0));
      if ($2113) { label = 287; break; } else { label = 288; break; }
    case 287: 
      var $2115=$1;
      var $2116=$1;
      var $2117=(($2116+76)|0);
      var $2118=HEAP32[(($2117)>>2)];
      var $2119=$lp26;
      var $2120=(($2119+20)|0);
      var $2121=HEAP32[(($2120)>>2)];
      var $2122=((($2118)-($2121))|0);
      var $2123=$2122 & 511;
      var $2124=$2123 << 23;
      var $2125=31 | $2124;
      _genop_peep($2115, $2125, 0);
      label = 288; break;
    case 288: 
      var $2127=$1;
      var $2128=$lp26;
      var $2129=(($2128+4)|0);
      var $2130=HEAP32[(($2129)>>2)];
      var $2131=$1;
      var $2132=(($2131+60)|0);
      var $2133=HEAP32[(($2132)>>2)];
      var $2134=((($2130)-($2133))|0);
      var $2135=((($2134)+(32767))|0);
      var $2136=$2135 & 65535;
      var $2137=$2136 << 7;
      var $2138=23 | $2137;
      _genop($2127, $2138);
      label = 289; break;
    case 289: 
      label = 290; break;
    case 290: 
      label = 437; break;
    case 291: 
      var $2142=$3;
      var $2143=(($2142)|(0))!=0;
      if ($2143) { label = 292; break; } else { label = 301; break; }
    case 292: 
      var $2145=$1;
      var $2146=$2;
      var $2147=$2146;
      var $2148=(($2147) & 65535);
      var $2149=_lv_idx($2145, $2148);
      $idx28=$2149;
      var $2150=$idx28;
      var $2151=(($2150)|(0)) > 0;
      if ($2151) { label = 293; break; } else { label = 294; break; }
    case 293: 
      var $2153=$1;
      var $2154=$1;
      var $2155=(($2154+56)|0);
      var $2156=HEAP32[(($2155)>>2)];
      var $2157=$2156 & 511;
      var $2158=$2157 << 23;
      var $2159=1 | $2158;
      var $2160=$idx28;
      var $2161=$2160 & 511;
      var $2162=$2161 << 14;
      var $2163=$2159 | $2162;
      _genop($2153, $2163);
      label = 300; break;
    case 294: 
      $lv29=0;
      var $2165=$1;
      var $2166=(($2165+48)|0);
      var $2167=HEAP32[(($2166)>>2)];
      $up=$2167;
      label = 295; break;
    case 295: 
      var $2169=$up;
      var $2170=(($2169)|(0))!=0;
      if ($2170) { label = 296; break; } else { label = 299; break; }
    case 296: 
      var $2172=$up;
      var $2173=$2;
      var $2174=$2173;
      var $2175=(($2174) & 65535);
      var $2176=_lv_idx($2172, $2175);
      $idx28=$2176;
      var $2177=$idx28;
      var $2178=(($2177)|(0)) > 0;
      if ($2178) { label = 297; break; } else { label = 298; break; }
    case 297: 
      var $2180=$1;
      var $2181=$1;
      var $2182=(($2181+56)|0);
      var $2183=HEAP32[(($2182)>>2)];
      var $2184=$2183 & 511;
      var $2185=$2184 << 23;
      var $2186=21 | $2185;
      var $2187=$idx28;
      var $2188=$2187 & 511;
      var $2189=$2188 << 14;
      var $2190=$2186 | $2189;
      var $2191=$lv29;
      var $2192=$2191 & 127;
      var $2193=$2192 << 7;
      var $2194=$2190 | $2193;
      _genop($2180, $2194);
      label = 299; break;
    case 298: 
      var $2196=$lv29;
      var $2197=((($2196)+(1))|0);
      $lv29=$2197;
      var $2198=$up;
      var $2199=(($2198+48)|0);
      var $2200=HEAP32[(($2199)>>2)];
      $up=$2200;
      label = 295; break;
    case 299: 
      label = 300; break;
    case 300: 
      var $2203=$1;
      _push_($2203);
      label = 301; break;
    case 301: 
      label = 437; break;
    case 302: 
      var $2206=$1;
      var $2207=$2;
      var $2208=$2207;
      var $2209=(($2208) & 65535);
      var $2210=_new_sym900($2206, $2209);
      $sym30=$2210;
      var $2211=$1;
      var $2212=$1;
      var $2213=(($2212+56)|0);
      var $2214=HEAP32[(($2213)>>2)];
      var $2215=$2214 & 511;
      var $2216=$2215 << 23;
      var $2217=9 | $2216;
      var $2218=$sym30;
      var $2219=$2218 & 65535;
      var $2220=$2219 << 7;
      var $2221=$2217 | $2220;
      _genop($2211, $2221);
      var $2222=$1;
      _push_($2222);
      label = 437; break;
    case 303: 
      var $2224=$1;
      var $2225=$2;
      var $2226=$2225;
      var $2227=(($2226) & 65535);
      var $2228=_new_sym900($2224, $2227);
      $sym31=$2228;
      var $2229=$1;
      var $2230=$1;
      var $2231=(($2230+56)|0);
      var $2232=HEAP32[(($2231)>>2)];
      var $2233=$2232 & 511;
      var $2234=$2233 << 23;
      var $2235=13 | $2234;
      var $2236=$sym31;
      var $2237=$2236 & 65535;
      var $2238=$2237 << 7;
      var $2239=$2235 | $2238;
      _genop($2229, $2239);
      var $2240=$1;
      _push_($2240);
      label = 437; break;
    case 304: 
      var $2242=$1;
      var $2243=$2;
      var $2244=$2243;
      var $2245=(($2244) & 65535);
      var $2246=_new_sym900($2242, $2245);
      $sym32=$2246;
      var $2247=$1;
      var $2248=$1;
      var $2249=(($2248+56)|0);
      var $2250=HEAP32[(($2249)>>2)];
      var $2251=$2250 & 511;
      var $2252=$2251 << 23;
      var $2253=15 | $2252;
      var $2254=$sym32;
      var $2255=$2254 & 65535;
      var $2256=$2255 << 7;
      var $2257=$2253 | $2256;
      _genop($2247, $2257);
      var $2258=$1;
      _push_($2258);
      label = 437; break;
    case 305: 
      var $2260=$1;
      var $2261=$2;
      var $2262=$2261;
      var $2263=(($2262) & 65535);
      var $2264=_new_sym900($2260, $2263);
      $sym33=$2264;
      var $2265=$1;
      var $2266=$1;
      var $2267=(($2266+56)|0);
      var $2268=HEAP32[(($2267)>>2)];
      var $2269=$2268 & 511;
      var $2270=$2269 << 23;
      var $2271=17 | $2270;
      var $2272=$sym33;
      var $2273=$2272 & 65535;
      var $2274=$2273 << 7;
      var $2275=$2271 | $2274;
      _genop($2265, $2275);
      var $2276=$1;
      _push_($2276);
      label = 437; break;
    case 306: 
      var $2278=$1;
      var $2279=$2;
      _codegen($2278, $2279, 1);
      label = 437; break;
    case 307: 
      var $2281=$buf;
      assert(2 % 1 === 0);HEAP8[($2281)]=HEAP8[((((92924)|0))|0)];HEAP8[((($2281)+(1))|0)]=HEAP8[(((((92924)|0))+(1))|0)];
      var $2282=$2;
      var $2283=$2282;
      var $2284=(($2283) & 255);
      var $2285=(($buf+1)|0);
      HEAP8[($2285)]=$2284;
      var $2286=$1;
      var $2287=(($2286)|0);
      var $2288=HEAP32[(($2287)>>2)];
      var $2289=(($buf)|0);
      _mrb_str_new($4, $2288, $2289, 2);
      var $2290=$str;
      var $2291=$4;
      assert(12 % 1 === 0);HEAP32[(($2290)>>2)]=HEAP32[(($2291)>>2)];HEAP32[((($2290)+(4))>>2)]=HEAP32[((($2291)+(4))>>2)];HEAP32[((($2290)+(8))>>2)]=HEAP32[((($2291)+(8))>>2)];
      var $2292=$1;
      var $2293=$1;
      var $2294=(($2293)|0);
      var $2295=HEAP32[(($2294)>>2)];
      var $2296=_mrb_intern_str($2295, $str);
      var $2297=_new_sym900($2292, $2296);
      $sym34=$2297;
      var $2298=$1;
      var $2299=$1;
      var $2300=(($2299+56)|0);
      var $2301=HEAP32[(($2300)>>2)];
      var $2302=$2301 & 511;
      var $2303=$2302 << 23;
      var $2304=9 | $2303;
      var $2305=$sym34;
      var $2306=$2305 & 65535;
      var $2307=$2306 << 7;
      var $2308=$2304 | $2307;
      _genop($2298, $2308);
      var $2309=$1;
      _push_($2309);
      label = 437; break;
    case 308: 
      var $2311=$1;
      var $2312=(($2311)|0);
      var $2313=HEAP32[(($2312)>>2)];
      $mrb=$2313;
      var $2314=$2;
      var $2315=$2314;
      _mrb_fixnum_value901($fix, $2315);
      var $2316=$mrb;
      _mrb_str_buf_new($str36, $2316, 4);
      var $2317=$mrb;
      _mrb_str_buf_cat($5, $2317, $str36, ((94220)|0), 1);
      var $2318=$mrb;
      var $2319=$mrb;
      _mrb_fixnum_to_str($6, $2319, $fix, 10);
      _mrb_str_buf_append($7, $2318, $str36, $6);
      var $2320=$1;
      var $2321=$mrb;
      var $2322=_mrb_intern_str($2321, $str36);
      var $2323=_new_sym900($2320, $2322);
      $sym35=$2323;
      var $2324=$1;
      var $2325=$1;
      var $2326=(($2325+56)|0);
      var $2327=HEAP32[(($2326)>>2)];
      var $2328=$2327 & 511;
      var $2329=$2328 << 23;
      var $2330=9 | $2329;
      var $2331=$sym35;
      var $2332=$2331 & 65535;
      var $2333=$2332 << 7;
      var $2334=$2330 | $2333;
      _genop($2324, $2334);
      var $2335=$1;
      _push_($2335);
      label = 437; break;
    case 309: 
      label = 437; break;
    case 310: 
      var $2338=$1;
      var $2339=$2;
      _codegen($2338, $2339, 1);
      label = 437; break;
    case 311: 
      var $2341=$3;
      var $2342=(($2341)|(0))!=0;
      if ($2342) { label = 312; break; } else { label = 320; break; }
    case 312: 
      var $2344=$2;
      var $2345=(($2344)|0);
      var $2346=HEAP32[(($2345)>>2)];
      var $2347=$2346;
      $p37=$2347;
      var $2348=$2;
      var $2349=(($2348+4)|0);
      var $2350=HEAP32[(($2349)>>2)];
      var $2351=(($2350)|0);
      var $2352=HEAP32[(($2351)>>2)];
      var $2353=$2352;
      $base=$2353;
      var $2354=$1;
      var $2355=$p37;
      var $2356=$base;
      var $2357=_readint_mrb_int($2354, $2355, $2356, 0, $overflow);
      $i=$2357;
      var $2358=HEAP32[(($overflow)>>2)];
      var $2359=(($2358)|(0))!=0;
      if ($2359) { label = 313; break; } else { label = 314; break; }
    case 313: 
      var $2361=$1;
      var $2362=$p37;
      var $2363=$base;
      var $2364=_readint_float($2361, $2362, $2363);
      $f=$2364;
      var $2365=$1;
      var $2366=$f;
      _mrb_float_value902($8, $2366);
      var $2367=_new_lit($2365, $8);
      $off=$2367;
      var $2368=$1;
      var $2369=$1;
      var $2370=(($2369+56)|0);
      var $2371=HEAP32[(($2370)>>2)];
      var $2372=$2371 & 511;
      var $2373=$2372 << 23;
      var $2374=2 | $2373;
      var $2375=$off;
      var $2376=$2375 & 65535;
      var $2377=$2376 << 7;
      var $2378=$2374 | $2377;
      _genop($2368, $2378);
      label = 319; break;
    case 314: 
      var $2380=$i;
      var $2381=(($2380)|(0)) < 32767;
      if ($2381) { label = 315; break; } else { label = 317; break; }
    case 315: 
      var $2383=$i;
      var $2384=(($2383)|(0)) > -32767;
      if ($2384) { label = 316; break; } else { label = 317; break; }
    case 316: 
      var $2386=$1;
      var $2387=(($2386+56)|0);
      var $2388=HEAP32[(($2387)>>2)];
      var $2389=$2388 & 511;
      var $2390=$2389 << 23;
      var $2391=3 | $2390;
      var $2392=$i;
      var $2393=((($2392)+(32767))|0);
      var $2394=$2393 & 65535;
      var $2395=$2394 << 7;
      var $2396=$2391 | $2395;
      $co=$2396;
      label = 318; break;
    case 317: 
      var $2398=$1;
      var $2399=$i;
      _mrb_fixnum_value901($9, $2399);
      var $2400=_new_lit($2398, $9);
      $off38=$2400;
      var $2401=$1;
      var $2402=(($2401+56)|0);
      var $2403=HEAP32[(($2402)>>2)];
      var $2404=$2403 & 511;
      var $2405=$2404 << 23;
      var $2406=2 | $2405;
      var $2407=$off38;
      var $2408=$2407 & 65535;
      var $2409=$2408 << 7;
      var $2410=$2406 | $2409;
      $co=$2410;
      label = 318; break;
    case 318: 
      var $2412=$1;
      var $2413=$co;
      _genop($2412, $2413);
      label = 319; break;
    case 319: 
      var $2415=$1;
      _push_($2415);
      label = 320; break;
    case 320: 
      label = 437; break;
    case 321: 
      var $2418=$3;
      var $2419=(($2418)|(0))!=0;
      if ($2419) { label = 322; break; } else { label = 323; break; }
    case 322: 
      var $2421=$2;
      var $2422=$2421;
      $p39=$2422;
      var $2423=$p39;
      var $2424=_strtod($2423, 0);
      $f40=$2424;
      var $2425=$1;
      var $2426=$f40;
      _mrb_float_value902($10, $2426);
      var $2427=_new_lit($2425, $10);
      $off41=$2427;
      var $2428=$1;
      var $2429=$1;
      var $2430=(($2429+56)|0);
      var $2431=HEAP32[(($2430)>>2)];
      var $2432=$2431 & 511;
      var $2433=$2432 << 23;
      var $2434=2 | $2433;
      var $2435=$off41;
      var $2436=$2435 & 65535;
      var $2437=$2436 << 7;
      var $2438=$2434 | $2437;
      _genop($2428, $2438);
      var $2439=$1;
      _push_($2439);
      label = 323; break;
    case 323: 
      label = 437; break;
    case 324: 
      var $2442=$2;
      var $2443=(($2442)|0);
      var $2444=HEAP32[(($2443)>>2)];
      var $2445=$2444;
      $nt=$2445;
      var $2446=$2;
      var $2447=(($2446+4)|0);
      var $2448=HEAP32[(($2447)>>2)];
      $2=$2448;
      var $2449=$nt;
      if ((($2449)|(0))==51) {
        label = 325; break;
      }
      else if ((($2449)|(0))==50) {
        label = 326; break;
      }
      else {
      label = 334; break;
      }
    case 325: 
      var $2451=$2;
      var $2452=$2451;
      $p42=$2452;
      var $2453=$p42;
      var $2454=_strtod($2453, 0);
      $f43=$2454;
      var $2455=$1;
      var $2456=$f43;
      var $2457=(-$2456);
      _mrb_float_value902($11, $2457);
      var $2458=_new_lit($2455, $11);
      $off44=$2458;
      var $2459=$1;
      var $2460=$1;
      var $2461=(($2460+56)|0);
      var $2462=HEAP32[(($2461)>>2)];
      var $2463=$2462 & 511;
      var $2464=$2463 << 23;
      var $2465=2 | $2464;
      var $2466=$off44;
      var $2467=$2466 & 65535;
      var $2468=$2467 << 7;
      var $2469=$2465 | $2468;
      _genop($2459, $2469);
      var $2470=$1;
      _push_($2470);
      label = 335; break;
    case 326: 
      var $2472=$2;
      var $2473=(($2472)|0);
      var $2474=HEAP32[(($2473)>>2)];
      var $2475=$2474;
      $p45=$2475;
      var $2476=$2;
      var $2477=(($2476+4)|0);
      var $2478=HEAP32[(($2477)>>2)];
      var $2479=(($2478)|0);
      var $2480=HEAP32[(($2479)>>2)];
      var $2481=$2480;
      $base46=$2481;
      var $2482=$1;
      var $2483=$p45;
      var $2484=$base46;
      var $2485=_readint_mrb_int($2482, $2483, $2484, 1, $overflow49);
      $i47=$2485;
      var $2486=HEAP32[(($overflow49)>>2)];
      var $2487=(($2486)|(0))!=0;
      if ($2487) { label = 327; break; } else { label = 328; break; }
    case 327: 
      var $2489=$1;
      var $2490=$p45;
      var $2491=$base46;
      var $2492=_readint_float($2489, $2490, $2491);
      $f50=$2492;
      var $2493=$1;
      var $2494=$f50;
      var $2495=(-$2494);
      _mrb_float_value902($12, $2495);
      var $2496=_new_lit($2493, $12);
      $off51=$2496;
      var $2497=$1;
      var $2498=$1;
      var $2499=(($2498+56)|0);
      var $2500=HEAP32[(($2499)>>2)];
      var $2501=$2500 & 511;
      var $2502=$2501 << 23;
      var $2503=2 | $2502;
      var $2504=$off51;
      var $2505=$2504 & 65535;
      var $2506=$2505 << 7;
      var $2507=$2503 | $2506;
      _genop($2497, $2507);
      label = 333; break;
    case 328: 
      var $2509=$i47;
      var $2510=(($2509)|(0)) < 32767;
      if ($2510) { label = 329; break; } else { label = 331; break; }
    case 329: 
      var $2512=$i47;
      var $2513=(($2512)|(0)) > -32767;
      if ($2513) { label = 330; break; } else { label = 331; break; }
    case 330: 
      var $2515=$1;
      var $2516=(($2515+56)|0);
      var $2517=HEAP32[(($2516)>>2)];
      var $2518=$2517 & 511;
      var $2519=$2518 << 23;
      var $2520=3 | $2519;
      var $2521=$i47;
      var $2522=((($2521)+(32767))|0);
      var $2523=$2522 & 65535;
      var $2524=$2523 << 7;
      var $2525=$2520 | $2524;
      $co48=$2525;
      label = 332; break;
    case 331: 
      var $2527=$1;
      var $2528=$i47;
      _mrb_fixnum_value901($13, $2528);
      var $2529=_new_lit($2527, $13);
      $off52=$2529;
      var $2530=$1;
      var $2531=(($2530+56)|0);
      var $2532=HEAP32[(($2531)>>2)];
      var $2533=$2532 & 511;
      var $2534=$2533 << 23;
      var $2535=2 | $2534;
      var $2536=$off52;
      var $2537=$2536 & 65535;
      var $2538=$2537 << 7;
      var $2539=$2535 | $2538;
      $co48=$2539;
      label = 332; break;
    case 332: 
      var $2541=$1;
      var $2542=$co48;
      _genop($2541, $2542);
      label = 333; break;
    case 333: 
      var $2544=$1;
      _push_($2544);
      label = 335; break;
    case 334: 
      var $2546=$1;
      var $2547=$1;
      var $2548=(($2547)|0);
      var $2549=HEAP32[(($2548)>>2)];
      var $2550=_mrb_intern2($2549, ((93320)|0), 1);
      var $2551=_new_msym($2546, $2550);
      $sym53=$2551;
      var $2552=$1;
      var $2553=$1;
      var $2554=(($2553+56)|0);
      var $2555=HEAP32[(($2554)>>2)];
      var $2556=$2555 & 511;
      var $2557=$2556 << 23;
      var $2558=3 | $2557;
      _genop($2552, $2558);
      var $2559=$1;
      _push_($2559);
      var $2560=$1;
      var $2561=$2;
      _codegen($2560, $2561, 1);
      var $2562=$1;
      var $2563=(($2562+56)|0);
      var $2564=HEAP32[(($2563)>>2)];
      var $2565=((($2564)-(1))|0);
      HEAP32[(($2563)>>2)]=$2565;
      var $2566=$1;
      var $2567=(($2566+56)|0);
      var $2568=HEAP32[(($2567)>>2)];
      var $2569=((($2568)-(1))|0);
      HEAP32[(($2567)>>2)]=$2569;
      var $2570=$1;
      var $2571=$1;
      var $2572=(($2571+56)|0);
      var $2573=HEAP32[(($2572)>>2)];
      var $2574=$2573 & 511;
      var $2575=$2574 << 23;
      var $2576=46 | $2575;
      var $2577=$sym53;
      var $2578=$2577 & 511;
      var $2579=$2578 << 14;
      var $2580=$2576 | $2579;
      var $2581=$2580 | 256;
      _genop($2570, $2581);
      label = 335; break;
    case 335: 
      label = 437; break;
    case 336: 
      var $2584=$3;
      var $2585=(($2584)|(0))!=0;
      if ($2585) { label = 337; break; } else { label = 338; break; }
    case 337: 
      var $2587=$2;
      var $2588=(($2587)|0);
      var $2589=HEAP32[(($2588)>>2)];
      var $2590=$2589;
      $p54=$2590;
      var $2591=$2;
      var $2592=(($2591+4)|0);
      var $2593=HEAP32[(($2592)>>2)];
      var $2594=$2593;
      $len55=$2594;
      var $2595=$1;
      var $2596=(($2595)|0);
      var $2597=HEAP32[(($2596)>>2)];
      var $2598=_mrb_gc_arena_save($2597);
      $ai=$2598;
      var $2599=$1;
      var $2600=$1;
      var $2601=(($2600)|0);
      var $2602=HEAP32[(($2601)>>2)];
      var $2603=$p54;
      var $2604=$len55;
      _mrb_str_new($14, $2602, $2603, $2604);
      var $2605=_new_lit($2599, $14);
      $off56=$2605;
      var $2606=$1;
      var $2607=(($2606)|0);
      var $2608=HEAP32[(($2607)>>2)];
      var $2609=$ai;
      _mrb_gc_arena_restore($2608, $2609);
      var $2610=$1;
      var $2611=$1;
      var $2612=(($2611+56)|0);
      var $2613=HEAP32[(($2612)>>2)];
      var $2614=$2613 & 511;
      var $2615=$2614 << 23;
      var $2616=61 | $2615;
      var $2617=$off56;
      var $2618=$2617 & 65535;
      var $2619=$2618 << 7;
      var $2620=$2616 | $2619;
      _genop($2610, $2620);
      var $2621=$1;
      _push_($2621);
      label = 338; break;
    case 338: 
      label = 437; break;
    case 339: 
      var $2624=$2;
      var $2625=$2624;
      var $2626=(($2625+16)|0);
      var $2627=HEAP32[(($2626)>>2)];
      $2=$2627;
      label = 340; break;
    case 340: 
      var $2629=$3;
      var $2630=(($2629)|(0))!=0;
      if ($2630) { label = 341; break; } else { label = 345; break; }
    case 341: 
      var $2632=$2;
      $n57=$2632;
      var $2633=$1;
      var $2634=$n57;
      var $2635=(($2634)|0);
      var $2636=HEAP32[(($2635)>>2)];
      _codegen($2633, $2636, 1);
      var $2637=$n57;
      var $2638=(($2637+4)|0);
      var $2639=HEAP32[(($2638)>>2)];
      $n57=$2639;
      label = 342; break;
    case 342: 
      var $2641=$n57;
      var $2642=(($2641)|(0))!=0;
      if ($2642) { label = 343; break; } else { label = 344; break; }
    case 343: 
      var $2644=$1;
      var $2645=$n57;
      var $2646=(($2645)|0);
      var $2647=HEAP32[(($2646)>>2)];
      _codegen($2644, $2647, 1);
      var $2648=$1;
      var $2649=(($2648+56)|0);
      var $2650=HEAP32[(($2649)>>2)];
      var $2651=((($2650)-(1))|0);
      HEAP32[(($2649)>>2)]=$2651;
      var $2652=$1;
      var $2653=(($2652+56)|0);
      var $2654=HEAP32[(($2653)>>2)];
      var $2655=((($2654)-(1))|0);
      HEAP32[(($2653)>>2)]=$2655;
      var $2656=$1;
      var $2657=$1;
      var $2658=(($2657+56)|0);
      var $2659=HEAP32[(($2658)>>2)];
      var $2660=$2659 & 511;
      var $2661=$2660 << 23;
      var $2662=62 | $2661;
      var $2663=$1;
      var $2664=(($2663+56)|0);
      var $2665=HEAP32[(($2664)>>2)];
      var $2666=((($2665)+(1))|0);
      var $2667=$2666 & 511;
      var $2668=$2667 << 14;
      var $2669=$2662 | $2668;
      _genop_peep($2656, $2669, 1);
      var $2670=$1;
      _push_($2670);
      var $2671=$n57;
      var $2672=(($2671+4)|0);
      var $2673=HEAP32[(($2672)>>2)];
      $n57=$2673;
      label = 342; break;
    case 344: 
      label = 351; break;
    case 345: 
      var $2676=$2;
      $n58=$2676;
      label = 346; break;
    case 346: 
      var $2678=$n58;
      var $2679=(($2678)|(0))!=0;
      if ($2679) { label = 347; break; } else { label = 350; break; }
    case 347: 
      var $2681=$n58;
      var $2682=(($2681)|0);
      var $2683=HEAP32[(($2682)>>2)];
      var $2684=(($2683)|0);
      var $2685=HEAP32[(($2684)>>2)];
      var $2686=$2685;
      var $2687=(($2686)|(0))!=55;
      if ($2687) { label = 348; break; } else { label = 349; break; }
    case 348: 
      var $2689=$1;
      var $2690=$n58;
      var $2691=(($2690)|0);
      var $2692=HEAP32[(($2691)>>2)];
      _codegen($2689, $2692, 0);
      label = 349; break;
    case 349: 
      var $2694=$n58;
      var $2695=(($2694+4)|0);
      var $2696=HEAP32[(($2695)>>2)];
      $n58=$2696;
      label = 346; break;
    case 350: 
      label = 351; break;
    case 351: 
      label = 437; break;
    case 352: 
      var $2700=$1;
      var $2701=$2;
      var $2702=$3;
      _gen_literal_array($2700, $2701, 0, $2702);
      label = 437; break;
    case 353: 
      var $2704=$1;
      var $2705=$2;
      var $2706=$3;
      _gen_literal_array($2704, $2705, 1, $2706);
      label = 437; break;
    case 354: 
      var $2708=$3;
      var $2709=(($2708)|(0))!=0;
      if ($2709) { label = 355; break; } else { label = 356; break; }
    case 355: 
      var $2711=$2;
      var $2712=(($2711)|0);
      var $2713=HEAP32[(($2712)>>2)];
      var $2714=$2713;
      $p59=$2714;
      var $2715=$2;
      var $2716=(($2715+4)|0);
      var $2717=HEAP32[(($2716)>>2)];
      var $2718=$2717;
      $len60=$2718;
      var $2719=$1;
      var $2720=(($2719)|0);
      var $2721=HEAP32[(($2720)>>2)];
      var $2722=_mrb_gc_arena_save($2721);
      $ai61=$2722;
      var $2723=$1;
      var $2724=$1;
      var $2725=(($2724)|0);
      var $2726=HEAP32[(($2725)>>2)];
      var $2727=_mrb_intern2($2726, ((113508)|0), 6);
      var $2728=_new_sym900($2723, $2727);
      $sym62=$2728;
      var $2729=$1;
      var $2730=$1;
      var $2731=(($2730)|0);
      var $2732=HEAP32[(($2731)>>2)];
      var $2733=$p59;
      var $2734=$len60;
      _mrb_str_new($15, $2732, $2733, $2734);
      var $2735=_new_lit($2729, $15);
      $off63=$2735;
      var $2736=$1;
      var $2737=$1;
      var $2738=(($2737+56)|0);
      var $2739=HEAP32[(($2738)>>2)];
      var $2740=$2739 & 511;
      var $2741=$2740 << 23;
      var $2742=66 | $2741;
      _genop($2736, $2742);
      var $2743=$1;
      var $2744=$1;
      var $2745=(($2744+56)|0);
      var $2746=HEAP32[(($2745)>>2)];
      var $2747=$2746 & 511;
      var $2748=$2747 << 23;
      var $2749=19 | $2748;
      var $2750=$sym62;
      var $2751=$2750 & 65535;
      var $2752=$2751 << 7;
      var $2753=$2749 | $2752;
      _genop($2743, $2753);
      var $2754=$1;
      _push_($2754);
      var $2755=$1;
      var $2756=$1;
      var $2757=(($2756+56)|0);
      var $2758=HEAP32[(($2757)>>2)];
      var $2759=$2758 & 511;
      var $2760=$2759 << 23;
      var $2761=61 | $2760;
      var $2762=$off63;
      var $2763=$2762 & 65535;
      var $2764=$2763 << 7;
      var $2765=$2761 | $2764;
      _genop($2755, $2765);
      var $2766=$1;
      var $2767=(($2766+56)|0);
      var $2768=HEAP32[(($2767)>>2)];
      var $2769=((($2768)-(1))|0);
      HEAP32[(($2767)>>2)]=$2769;
      var $2770=$1;
      var $2771=$1;
      var $2772=(($2771)|0);
      var $2773=HEAP32[(($2772)>>2)];
      var $2774=_mrb_intern2($2773, ((112696)|0), 1);
      var $2775=_new_sym900($2770, $2774);
      $sym62=$2775;
      var $2776=$1;
      var $2777=$1;
      var $2778=(($2777+56)|0);
      var $2779=HEAP32[(($2778)>>2)];
      var $2780=$2779 & 511;
      var $2781=$2780 << 23;
      var $2782=32 | $2781;
      var $2783=$sym62;
      var $2784=$2783 & 511;
      var $2785=$2784 << 14;
      var $2786=$2782 | $2785;
      var $2787=$2786 | 128;
      _genop($2776, $2787);
      var $2788=$1;
      var $2789=(($2788)|0);
      var $2790=HEAP32[(($2789)>>2)];
      var $2791=$ai61;
      _mrb_gc_arena_restore($2790, $2791);
      var $2792=$1;
      _push_($2792);
      label = 356; break;
    case 356: 
      label = 437; break;
    case 357: 
      var $2795=$3;
      var $2796=(($2795)|(0))!=0;
      if ($2796) { label = 358; break; } else { label = 361; break; }
    case 358: 
      var $2798=$2;
      var $2799=(($2798)|0);
      var $2800=HEAP32[(($2799)>>2)];
      var $2801=$2800;
      $p1=$2801;
      var $2802=$2;
      var $2803=(($2802+4)|0);
      var $2804=HEAP32[(($2803)>>2)];
      var $2805=$2804;
      $p2=$2805;
      var $2806=$1;
      var $2807=(($2806)|0);
      var $2808=HEAP32[(($2807)>>2)];
      var $2809=_mrb_gc_arena_save($2808);
      $ai64=$2809;
      var $2810=$1;
      var $2811=$1;
      var $2812=(($2811)|0);
      var $2813=HEAP32[(($2812)>>2)];
      var $2814=_mrb_intern903($2813, ((112048)|0));
      var $2815=_new_sym900($2810, $2814);
      $sym65=$2815;
      var $2816=$1;
      var $2817=$1;
      var $2818=(($2817)|0);
      var $2819=HEAP32[(($2818)>>2)];
      var $2820=$p1;
      var $2821=$p1;
      var $2822=_strlen($2821);
      _mrb_str_new($16, $2819, $2820, $2822);
      var $2823=_new_lit($2816, $16);
      $off66=$2823;
      $argc=1;
      var $2824=$1;
      var $2825=$1;
      var $2826=(($2825+56)|0);
      var $2827=HEAP32[(($2826)>>2)];
      var $2828=$2827 & 511;
      var $2829=$2828 << 23;
      var $2830=66 | $2829;
      _genop($2824, $2830);
      var $2831=$1;
      var $2832=$1;
      var $2833=(($2832+56)|0);
      var $2834=HEAP32[(($2833)>>2)];
      var $2835=$2834 & 511;
      var $2836=$2835 << 23;
      var $2837=19 | $2836;
      var $2838=$sym65;
      var $2839=$2838 & 65535;
      var $2840=$2839 << 7;
      var $2841=$2837 | $2840;
      _genop($2831, $2841);
      var $2842=$1;
      _push_($2842);
      var $2843=$1;
      var $2844=$1;
      var $2845=(($2844+56)|0);
      var $2846=HEAP32[(($2845)>>2)];
      var $2847=$2846 & 511;
      var $2848=$2847 << 23;
      var $2849=61 | $2848;
      var $2850=$off66;
      var $2851=$2850 & 65535;
      var $2852=$2851 << 7;
      var $2853=$2849 | $2852;
      _genop($2843, $2853);
      var $2854=$p2;
      var $2855=(($2854)|(0))!=0;
      if ($2855) { label = 359; break; } else { label = 360; break; }
    case 359: 
      var $2857=$1;
      _push_($2857);
      var $2858=$1;
      var $2859=$1;
      var $2860=(($2859)|0);
      var $2861=HEAP32[(($2860)>>2)];
      var $2862=$p2;
      var $2863=$p2;
      var $2864=_strlen($2863);
      _mrb_str_new($17, $2861, $2862, $2864);
      var $2865=_new_lit($2858, $17);
      $off66=$2865;
      var $2866=$1;
      var $2867=$1;
      var $2868=(($2867+56)|0);
      var $2869=HEAP32[(($2868)>>2)];
      var $2870=$2869 & 511;
      var $2871=$2870 << 23;
      var $2872=61 | $2871;
      var $2873=$off66;
      var $2874=$2873 & 65535;
      var $2875=$2874 << 7;
      var $2876=$2872 | $2875;
      _genop($2866, $2876);
      var $2877=$argc;
      var $2878=((($2877)+(1))|0);
      $argc=$2878;
      var $2879=$1;
      var $2880=(($2879+56)|0);
      var $2881=HEAP32[(($2880)>>2)];
      var $2882=((($2881)-(1))|0);
      HEAP32[(($2880)>>2)]=$2882;
      label = 360; break;
    case 360: 
      var $2884=$1;
      var $2885=(($2884+56)|0);
      var $2886=HEAP32[(($2885)>>2)];
      var $2887=((($2886)-(1))|0);
      HEAP32[(($2885)>>2)]=$2887;
      var $2888=$1;
      var $2889=$1;
      var $2890=(($2889)|0);
      var $2891=HEAP32[(($2890)>>2)];
      var $2892=_mrb_intern2($2891, ((111452)|0), 7);
      var $2893=_new_sym900($2888, $2892);
      $sym65=$2893;
      var $2894=$1;
      var $2895=$1;
      var $2896=(($2895+56)|0);
      var $2897=HEAP32[(($2896)>>2)];
      var $2898=$2897 & 511;
      var $2899=$2898 << 23;
      var $2900=32 | $2899;
      var $2901=$sym65;
      var $2902=$2901 & 511;
      var $2903=$2902 << 14;
      var $2904=$2900 | $2903;
      var $2905=$argc;
      var $2906=$2905 & 127;
      var $2907=$2906 << 7;
      var $2908=$2904 | $2907;
      _genop($2894, $2908);
      var $2909=$1;
      var $2910=(($2909)|0);
      var $2911=HEAP32[(($2910)>>2)];
      var $2912=$ai64;
      _mrb_gc_arena_restore($2911, $2912);
      var $2913=$1;
      _push_($2913);
      label = 361; break;
    case 361: 
      label = 437; break;
    case 362: 
      var $2916=$3;
      var $2917=(($2916)|(0))!=0;
      if ($2917) { label = 363; break; } else { label = 371; break; }
    case 363: 
      var $2919=$2;
      var $2920=(($2919)|0);
      var $2921=HEAP32[(($2920)>>2)];
      $n67=$2921;
      var $2922=$1;
      var $2923=(($2922)|0);
      var $2924=HEAP32[(($2923)>>2)];
      var $2925=_mrb_gc_arena_save($2924);
      $ai68=$2925;
      var $2926=$1;
      var $2927=$1;
      var $2928=(($2927)|0);
      var $2929=HEAP32[(($2928)>>2)];
      var $2930=_mrb_intern903($2929, ((112048)|0));
      var $2931=_new_sym900($2926, $2930);
      $sym69=$2931;
      $argc70=1;
      var $2932=$1;
      var $2933=$1;
      var $2934=(($2933+56)|0);
      var $2935=HEAP32[(($2934)>>2)];
      var $2936=$2935 & 511;
      var $2937=$2936 << 23;
      var $2938=66 | $2937;
      _genop($2932, $2938);
      var $2939=$1;
      var $2940=$1;
      var $2941=(($2940+56)|0);
      var $2942=HEAP32[(($2941)>>2)];
      var $2943=$2942 & 511;
      var $2944=$2943 << 23;
      var $2945=19 | $2944;
      var $2946=$sym69;
      var $2947=$2946 & 65535;
      var $2948=$2947 << 7;
      var $2949=$2945 | $2948;
      _genop($2939, $2949);
      var $2950=$1;
      _push_($2950);
      var $2951=$1;
      var $2952=$n67;
      var $2953=(($2952)|0);
      var $2954=HEAP32[(($2953)>>2)];
      _codegen($2951, $2954, 1);
      var $2955=$n67;
      var $2956=(($2955+4)|0);
      var $2957=HEAP32[(($2956)>>2)];
      $n67=$2957;
      label = 364; break;
    case 364: 
      var $2959=$n67;
      var $2960=(($2959)|(0))!=0;
      if ($2960) { label = 365; break; } else { label = 366; break; }
    case 365: 
      var $2962=$1;
      var $2963=$n67;
      var $2964=(($2963)|0);
      var $2965=HEAP32[(($2964)>>2)];
      _codegen($2962, $2965, 1);
      var $2966=$1;
      var $2967=(($2966+56)|0);
      var $2968=HEAP32[(($2967)>>2)];
      var $2969=((($2968)-(1))|0);
      HEAP32[(($2967)>>2)]=$2969;
      var $2970=$1;
      var $2971=(($2970+56)|0);
      var $2972=HEAP32[(($2971)>>2)];
      var $2973=((($2972)-(1))|0);
      HEAP32[(($2971)>>2)]=$2973;
      var $2974=$1;
      var $2975=$1;
      var $2976=(($2975+56)|0);
      var $2977=HEAP32[(($2976)>>2)];
      var $2978=$2977 & 511;
      var $2979=$2978 << 23;
      var $2980=62 | $2979;
      var $2981=$1;
      var $2982=(($2981+56)|0);
      var $2983=HEAP32[(($2982)>>2)];
      var $2984=((($2983)+(1))|0);
      var $2985=$2984 & 511;
      var $2986=$2985 << 14;
      var $2987=$2980 | $2986;
      _genop_peep($2974, $2987, 1);
      var $2988=$1;
      _push_($2988);
      var $2989=$n67;
      var $2990=(($2989+4)|0);
      var $2991=HEAP32[(($2990)>>2)];
      $n67=$2991;
      label = 364; break;
    case 366: 
      var $2993=$2;
      var $2994=(($2993+4)|0);
      var $2995=HEAP32[(($2994)>>2)];
      var $2996=(($2995+4)|0);
      var $2997=HEAP32[(($2996)>>2)];
      $n67=$2997;
      var $2998=$n67;
      var $2999=(($2998)|0);
      var $3000=HEAP32[(($2999)>>2)];
      var $3001=(($3000)|(0))!=0;
      if ($3001) { label = 367; break; } else { label = 368; break; }
    case 367: 
      var $3003=$n67;
      var $3004=(($3003)|0);
      var $3005=HEAP32[(($3004)>>2)];
      var $3006=$3005;
      $p72=$3006;
      var $3007=$1;
      var $3008=$1;
      var $3009=(($3008)|0);
      var $3010=HEAP32[(($3009)>>2)];
      var $3011=$p72;
      var $3012=$p72;
      var $3013=_strlen($3012);
      _mrb_str_new($18, $3010, $3011, $3013);
      var $3014=_new_lit($3007, $18);
      $off71=$3014;
      var $3015=$1;
      var $3016=$2;
      var $3017=(($3016)|0);
      var $3018=HEAP32[(($3017)>>2)];
      _codegen($3015, $3018, 1);
      var $3019=$1;
      var $3020=$1;
      var $3021=(($3020+56)|0);
      var $3022=HEAP32[(($3021)>>2)];
      var $3023=$3022 & 511;
      var $3024=$3023 << 23;
      var $3025=61 | $3024;
      var $3026=$off71;
      var $3027=$3026 & 65535;
      var $3028=$3027 << 7;
      var $3029=$3025 | $3028;
      _genop($3019, $3029);
      var $3030=$1;
      var $3031=(($3030+56)|0);
      var $3032=HEAP32[(($3031)>>2)];
      var $3033=((($3032)-(1))|0);
      HEAP32[(($3031)>>2)]=$3033;
      var $3034=$1;
      var $3035=$1;
      var $3036=(($3035+56)|0);
      var $3037=HEAP32[(($3036)>>2)];
      var $3038=$3037 & 511;
      var $3039=$3038 << 23;
      var $3040=62 | $3039;
      var $3041=$1;
      var $3042=(($3041+56)|0);
      var $3043=HEAP32[(($3042)>>2)];
      var $3044=((($3043)+(1))|0);
      var $3045=$3044 & 511;
      var $3046=$3045 << 14;
      var $3047=$3040 | $3046;
      _genop_peep($3034, $3047, 1);
      label = 368; break;
    case 368: 
      var $3049=$n67;
      var $3050=(($3049+4)|0);
      var $3051=HEAP32[(($3050)>>2)];
      var $3052=(($3051)|(0))!=0;
      if ($3052) { label = 369; break; } else { label = 370; break; }
    case 369: 
      var $3054=$n67;
      var $3055=(($3054+4)|0);
      var $3056=HEAP32[(($3055)>>2)];
      var $3057=$3056;
      $p273=$3057;
      var $3058=$1;
      _push_($3058);
      var $3059=$1;
      var $3060=$1;
      var $3061=(($3060)|0);
      var $3062=HEAP32[(($3061)>>2)];
      var $3063=$p273;
      var $3064=$p273;
      var $3065=_strlen($3064);
      _mrb_str_new($19, $3062, $3063, $3065);
      var $3066=_new_lit($3059, $19);
      $off74=$3066;
      var $3067=$1;
      var $3068=$1;
      var $3069=(($3068+56)|0);
      var $3070=HEAP32[(($3069)>>2)];
      var $3071=$3070 & 511;
      var $3072=$3071 << 23;
      var $3073=61 | $3072;
      var $3074=$off74;
      var $3075=$3074 & 65535;
      var $3076=$3075 << 7;
      var $3077=$3073 | $3076;
      _genop($3067, $3077);
      var $3078=$argc70;
      var $3079=((($3078)+(1))|0);
      $argc70=$3079;
      var $3080=$1;
      var $3081=(($3080+56)|0);
      var $3082=HEAP32[(($3081)>>2)];
      var $3083=((($3082)-(1))|0);
      HEAP32[(($3081)>>2)]=$3083;
      label = 370; break;
    case 370: 
      var $3085=$1;
      var $3086=(($3085+56)|0);
      var $3087=HEAP32[(($3086)>>2)];
      var $3088=((($3087)-(1))|0);
      HEAP32[(($3086)>>2)]=$3088;
      var $3089=$1;
      var $3090=$1;
      var $3091=(($3090)|0);
      var $3092=HEAP32[(($3091)>>2)];
      var $3093=_mrb_intern2($3092, ((111452)|0), 7);
      var $3094=_new_sym900($3089, $3093);
      $sym69=$3094;
      var $3095=$1;
      var $3096=$1;
      var $3097=(($3096+56)|0);
      var $3098=HEAP32[(($3097)>>2)];
      var $3099=$3098 & 511;
      var $3100=$3099 << 23;
      var $3101=32 | $3100;
      var $3102=$sym69;
      var $3103=$3102 & 511;
      var $3104=$3103 << 14;
      var $3105=$3101 | $3104;
      var $3106=$argc70;
      var $3107=$3106 & 127;
      var $3108=$3107 << 7;
      var $3109=$3105 | $3108;
      _genop($3095, $3109);
      var $3110=$1;
      var $3111=(($3110)|0);
      var $3112=HEAP32[(($3111)>>2)];
      var $3113=$ai68;
      _mrb_gc_arena_restore($3112, $3113);
      var $3114=$1;
      _push_($3114);
      label = 377; break;
    case 371: 
      var $3116=$2;
      var $3117=(($3116)|0);
      var $3118=HEAP32[(($3117)>>2)];
      $n75=$3118;
      label = 372; break;
    case 372: 
      var $3120=$n75;
      var $3121=(($3120)|(0))!=0;
      if ($3121) { label = 373; break; } else { label = 376; break; }
    case 373: 
      var $3123=$n75;
      var $3124=(($3123)|0);
      var $3125=HEAP32[(($3124)>>2)];
      var $3126=(($3125)|0);
      var $3127=HEAP32[(($3126)>>2)];
      var $3128=$3127;
      var $3129=(($3128)|(0))!=55;
      if ($3129) { label = 374; break; } else { label = 375; break; }
    case 374: 
      var $3131=$1;
      var $3132=$n75;
      var $3133=(($3132)|0);
      var $3134=HEAP32[(($3133)>>2)];
      _codegen($3131, $3134, 0);
      label = 375; break;
    case 375: 
      var $3136=$n75;
      var $3137=(($3136+4)|0);
      var $3138=HEAP32[(($3137)>>2)];
      $n75=$3138;
      label = 372; break;
    case 376: 
      label = 377; break;
    case 377: 
      label = 437; break;
    case 378: 
      var $3142=$3;
      var $3143=(($3142)|(0))!=0;
      if ($3143) { label = 379; break; } else { label = 380; break; }
    case 379: 
      var $3145=$1;
      var $3146=$2;
      var $3147=$3146;
      var $3148=(($3147) & 65535);
      var $3149=_new_sym900($3145, $3148);
      $sym76=$3149;
      var $3150=$1;
      var $3151=$1;
      var $3152=(($3151+56)|0);
      var $3153=HEAP32[(($3152)>>2)];
      var $3154=$3153 & 511;
      var $3155=$3154 << 23;
      var $3156=4 | $3155;
      var $3157=$sym76;
      var $3158=$3157 & 65535;
      var $3159=$3158 << 7;
      var $3160=$3156 | $3159;
      _genop($3150, $3160);
      var $3161=$1;
      _push_($3161);
      label = 380; break;
    case 380: 
      label = 437; break;
    case 381: 
      var $3164=$1;
      var $3165=$2;
      var $3166=$3;
      _codegen($3164, $3165, $3166);
      var $3167=$3;
      var $3168=(($3167)|(0))!=0;
      if ($3168) { label = 382; break; } else { label = 383; break; }
    case 382: 
      var $3170=$1;
      _gen_send_intern($3170);
      label = 383; break;
    case 383: 
      label = 437; break;
    case 384: 
      var $3173=$3;
      var $3174=(($3173)|(0))!=0;
      if ($3174) { label = 385; break; } else { label = 386; break; }
    case 385: 
      var $3176=$1;
      var $3177=$1;
      var $3178=(($3177+56)|0);
      var $3179=HEAP32[(($3178)>>2)];
      var $3180=$3179 & 511;
      var $3181=$3180 << 23;
      var $3182=6 | $3181;
      _genop($3176, $3182);
      var $3183=$1;
      _push_($3183);
      label = 386; break;
    case 386: 
      label = 437; break;
    case 387: 
      var $3186=$3;
      var $3187=(($3186)|(0))!=0;
      if ($3187) { label = 388; break; } else { label = 389; break; }
    case 388: 
      var $3189=$1;
      var $3190=$1;
      var $3191=(($3190+56)|0);
      var $3192=HEAP32[(($3191)>>2)];
      var $3193=$3192 & 511;
      var $3194=$3193 << 23;
      var $3195=5 | $3194;
      _genop($3189, $3195);
      var $3196=$1;
      _push_($3196);
      label = 389; break;
    case 389: 
      label = 437; break;
    case 390: 
      var $3199=$3;
      var $3200=(($3199)|(0))!=0;
      if ($3200) { label = 391; break; } else { label = 392; break; }
    case 391: 
      var $3202=$1;
      var $3203=$1;
      var $3204=(($3203+56)|0);
      var $3205=HEAP32[(($3204)>>2)];
      var $3206=$3205 & 511;
      var $3207=$3206 << 23;
      var $3208=7 | $3207;
      _genop($3202, $3208);
      var $3209=$1;
      _push_($3209);
      label = 392; break;
    case 392: 
      label = 437; break;
    case 393: 
      var $3212=$3;
      var $3213=(($3212)|(0))!=0;
      if ($3213) { label = 394; break; } else { label = 395; break; }
    case 394: 
      var $3215=$1;
      var $3216=$1;
      var $3217=(($3216+56)|0);
      var $3218=HEAP32[(($3217)>>2)];
      var $3219=$3218 & 511;
      var $3220=$3219 << 23;
      var $3221=8 | $3220;
      _genop($3215, $3221);
      var $3222=$1;
      _push_($3222);
      label = 395; break;
    case 395: 
      label = 437; break;
    case 396: 
      var $3225=$1;
      var $3226=$2;
      var $3227=(($3226)|0);
      var $3228=HEAP32[(($3227)>>2)];
      var $3229=$3228;
      var $3230=(($3229) & 65535);
      var $3231=_new_msym($3225, $3230);
      $a=$3231;
      var $3232=$1;
      var $3233=$2;
      var $3234=(($3233+4)|0);
      var $3235=HEAP32[(($3234)>>2)];
      var $3236=$3235;
      var $3237=(($3236) & 65535);
      var $3238=_new_msym($3232, $3237);
      $b=$3238;
      var $3239=$1;
      var $3240=$1;
      var $3241=(($3240)|0);
      var $3242=HEAP32[(($3241)>>2)];
      var $3243=_mrb_intern2($3242, ((110996)|0), 12);
      var $3244=_new_msym($3239, $3243);
      $c=$3244;
      var $3245=$1;
      var $3246=$1;
      var $3247=(($3246+56)|0);
      var $3248=HEAP32[(($3247)>>2)];
      var $3249=$3248 & 511;
      var $3250=$3249 << 23;
      var $3251=72 | $3250;
      _genop($3245, $3251);
      var $3252=$1;
      _push_($3252);
      var $3253=$1;
      var $3254=$1;
      var $3255=(($3254+56)|0);
      var $3256=HEAP32[(($3255)>>2)];
      var $3257=$3256 & 511;
      var $3258=$3257 << 23;
      var $3259=4 | $3258;
      var $3260=$a;
      var $3261=$3260 & 65535;
      var $3262=$3261 << 7;
      var $3263=$3259 | $3262;
      _genop($3253, $3263);
      var $3264=$1;
      _push_($3264);
      var $3265=$1;
      var $3266=$1;
      var $3267=(($3266+56)|0);
      var $3268=HEAP32[(($3267)>>2)];
      var $3269=$3268 & 511;
      var $3270=$3269 << 23;
      var $3271=4 | $3270;
      var $3272=$b;
      var $3273=$3272 & 65535;
      var $3274=$3273 << 7;
      var $3275=$3271 | $3274;
      _genop($3265, $3275);
      var $3276=$1;
      _push_($3276);
      var $3277=$1;
      var $3278=$1;
      var $3279=(($3278+56)|0);
      var $3280=HEAP32[(($3279)>>2)];
      var $3281=$3280 & 511;
      var $3282=$3281 << 23;
      var $3283=5 | $3282;
      _genop($3277, $3283);
      var $3284=$1;
      var $3285=(($3284+56)|0);
      var $3286=HEAP32[(($3285)>>2)];
      var $3287=((($3286)-(3))|0);
      HEAP32[(($3285)>>2)]=$3287;
      var $3288=$1;
      var $3289=$1;
      var $3290=(($3289+56)|0);
      var $3291=HEAP32[(($3290)>>2)];
      var $3292=$3291 & 511;
      var $3293=$3292 << 23;
      var $3294=32 | $3293;
      var $3295=$c;
      var $3296=$3295 & 511;
      var $3297=$3296 << 14;
      var $3298=$3294 | $3297;
      var $3299=$3298 | 256;
      _genop($3288, $3299);
      var $3300=$3;
      var $3301=(($3300)|(0))!=0;
      if ($3301) { label = 397; break; } else { label = 398; break; }
    case 397: 
      var $3303=$1;
      _push_($3303);
      label = 398; break;
    case 398: 
      label = 437; break;
    case 399: 
      var $3306=$1;
      var $3307=$1;
      var $3308=(($3307)|0);
      var $3309=HEAP32[(($3308)>>2)];
      var $3310=_mrb_intern2($3309, ((110496)|0), 12);
      var $3311=_new_msym($3306, $3310);
      $undef=$3311;
      $num=0;
      var $3312=$2;
      $t77=$3312;
      var $3313=$1;
      var $3314=$1;
      var $3315=(($3314+56)|0);
      var $3316=HEAP32[(($3315)>>2)];
      var $3317=$3316 & 511;
      var $3318=$3317 << 23;
      var $3319=72 | $3318;
      _genop($3313, $3319);
      var $3320=$1;
      _push_($3320);
      label = 400; break;
    case 400: 
      var $3322=$t77;
      var $3323=(($3322)|(0))!=0;
      if ($3323) { label = 401; break; } else { label = 402; break; }
    case 401: 
      var $3325=$1;
      var $3326=$t77;
      var $3327=(($3326)|0);
      var $3328=HEAP32[(($3327)>>2)];
      var $3329=$3328;
      var $3330=(($3329) & 65535);
      var $3331=_new_msym($3325, $3330);
      $symbol=$3331;
      var $3332=$1;
      var $3333=$1;
      var $3334=(($3333+56)|0);
      var $3335=HEAP32[(($3334)>>2)];
      var $3336=$3335 & 511;
      var $3337=$3336 << 23;
      var $3338=4 | $3337;
      var $3339=$symbol;
      var $3340=$3339 & 65535;
      var $3341=$3340 << 7;
      var $3342=$3338 | $3341;
      _genop($3332, $3342);
      var $3343=$1;
      _push_($3343);
      var $3344=$t77;
      var $3345=(($3344+4)|0);
      var $3346=HEAP32[(($3345)>>2)];
      $t77=$3346;
      var $3347=$num;
      var $3348=((($3347)+(1))|0);
      $num=$3348;
      label = 400; break;
    case 402: 
      var $3350=$num;
      var $3351=((($3350)+(1))|0);
      var $3352=$1;
      var $3353=(($3352+56)|0);
      var $3354=HEAP32[(($3353)>>2)];
      var $3355=((($3354)-($3351))|0);
      HEAP32[(($3353)>>2)]=$3355;
      var $3356=$1;
      var $3357=$1;
      var $3358=(($3357+56)|0);
      var $3359=HEAP32[(($3358)>>2)];
      var $3360=$3359 & 511;
      var $3361=$3360 << 23;
      var $3362=32 | $3361;
      var $3363=$undef;
      var $3364=$3363 & 511;
      var $3365=$3364 << 14;
      var $3366=$3362 | $3365;
      var $3367=$num;
      var $3368=$3367 & 127;
      var $3369=$3368 << 7;
      var $3370=$3366 | $3369;
      _genop($3356, $3370);
      var $3371=$3;
      var $3372=(($3371)|(0))!=0;
      if ($3372) { label = 403; break; } else { label = 404; break; }
    case 403: 
      var $3374=$1;
      _push_($3374);
      label = 404; break;
    case 404: 
      label = 437; break;
    case 405: 
      var $3377=$2;
      var $3378=(($3377)|0);
      var $3379=HEAP32[(($3378)>>2)];
      var $3380=(($3379)|0);
      var $3381=HEAP32[(($3380)>>2)];
      var $3382=(($3381)|(0))==0;
      if ($3382) { label = 406; break; } else { label = 407; break; }
    case 406: 
      var $3384=$1;
      var $3385=$1;
      var $3386=(($3385+56)|0);
      var $3387=HEAP32[(($3386)>>2)];
      var $3388=$3387 & 511;
      var $3389=$3388 << 23;
      var $3390=5 | $3389;
      _genop($3384, $3390);
      var $3391=$1;
      _push_($3391);
      label = 411; break;
    case 407: 
      var $3393=$2;
      var $3394=(($3393)|0);
      var $3395=HEAP32[(($3394)>>2)];
      var $3396=(($3395)|0);
      var $3397=HEAP32[(($3396)>>2)];
      var $3398=(($3397)|(0))==1;
      if ($3398) { label = 408; break; } else { label = 409; break; }
    case 408: 
      var $3400=$1;
      var $3401=$1;
      var $3402=(($3401+56)|0);
      var $3403=HEAP32[(($3402)>>2)];
      var $3404=$3403 & 511;
      var $3405=$3404 << 23;
      var $3406=66 | $3405;
      _genop($3400, $3406);
      var $3407=$1;
      _push_($3407);
      label = 410; break;
    case 409: 
      var $3409=$1;
      var $3410=$2;
      var $3411=(($3410)|0);
      var $3412=HEAP32[(($3411)>>2)];
      var $3413=(($3412)|0);
      var $3414=HEAP32[(($3413)>>2)];
      _codegen($3409, $3414, 1);
      label = 410; break;
    case 410: 
      label = 411; break;
    case 411: 
      var $3417=$2;
      var $3418=(($3417+4)|0);
      var $3419=HEAP32[(($3418)>>2)];
      var $3420=(($3419)|0);
      var $3421=HEAP32[(($3420)>>2)];
      var $3422=(($3421)|(0))!=0;
      if ($3422) { label = 412; break; } else { label = 413; break; }
    case 412: 
      var $3424=$1;
      var $3425=$2;
      var $3426=(($3425+4)|0);
      var $3427=HEAP32[(($3426)>>2)];
      var $3428=(($3427)|0);
      var $3429=HEAP32[(($3428)>>2)];
      _codegen($3424, $3429, 1);
      label = 414; break;
    case 413: 
      var $3431=$1;
      var $3432=$1;
      var $3433=(($3432+56)|0);
      var $3434=HEAP32[(($3433)>>2)];
      var $3435=$3434 & 511;
      var $3436=$3435 << 23;
      var $3437=5 | $3436;
      _genop($3431, $3437);
      var $3438=$1;
      _push_($3438);
      label = 414; break;
    case 414: 
      var $3440=$1;
      var $3441=(($3440+56)|0);
      var $3442=HEAP32[(($3441)>>2)];
      var $3443=((($3442)-(1))|0);
      HEAP32[(($3441)>>2)]=$3443;
      var $3444=$1;
      var $3445=(($3444+56)|0);
      var $3446=HEAP32[(($3445)>>2)];
      var $3447=((($3446)-(1))|0);
      HEAP32[(($3445)>>2)]=$3447;
      var $3448=$1;
      var $3449=$2;
      var $3450=(($3449)|0);
      var $3451=HEAP32[(($3450)>>2)];
      var $3452=(($3451+4)|0);
      var $3453=HEAP32[(($3452)>>2)];
      var $3454=$3453;
      var $3455=(($3454) & 65535);
      var $3456=_new_msym($3448, $3455);
      $idx78=$3456;
      var $3457=$1;
      var $3458=$1;
      var $3459=(($3458+56)|0);
      var $3460=HEAP32[(($3459)>>2)];
      var $3461=$3460 & 511;
      var $3462=$3461 << 23;
      var $3463=67 | $3462;
      var $3464=$idx78;
      var $3465=$3464 & 511;
      var $3466=$3465 << 14;
      var $3467=$3463 | $3466;
      _genop($3457, $3467);
      var $3468=$1;
      var $3469=$2;
      var $3470=(($3469+4)|0);
      var $3471=HEAP32[(($3470)>>2)];
      var $3472=(($3471+4)|0);
      var $3473=HEAP32[(($3472)>>2)];
      var $3474=(($3473)|0);
      var $3475=HEAP32[(($3474)>>2)];
      var $3476=_scope_body($3468, $3475);
      $idx78=$3476;
      var $3477=$1;
      var $3478=$1;
      var $3479=(($3478+56)|0);
      var $3480=HEAP32[(($3479)>>2)];
      var $3481=$3480 & 511;
      var $3482=$3481 << 23;
      var $3483=69 | $3482;
      var $3484=$idx78;
      var $3485=$3484 & 65535;
      var $3486=$3485 << 7;
      var $3487=$3483 | $3486;
      _genop($3477, $3487);
      var $3488=$3;
      var $3489=(($3488)|(0))!=0;
      if ($3489) { label = 415; break; } else { label = 416; break; }
    case 415: 
      var $3491=$1;
      _push_($3491);
      label = 416; break;
    case 416: 
      label = 437; break;
    case 417: 
      var $3494=$2;
      var $3495=(($3494)|0);
      var $3496=HEAP32[(($3495)>>2)];
      var $3497=(($3496)|0);
      var $3498=HEAP32[(($3497)>>2)];
      var $3499=(($3498)|(0))==0;
      if ($3499) { label = 418; break; } else { label = 419; break; }
    case 418: 
      var $3501=$1;
      var $3502=$1;
      var $3503=(($3502+56)|0);
      var $3504=HEAP32[(($3503)>>2)];
      var $3505=$3504 & 511;
      var $3506=$3505 << 23;
      var $3507=5 | $3506;
      _genop($3501, $3507);
      var $3508=$1;
      _push_($3508);
      label = 423; break;
    case 419: 
      var $3510=$2;
      var $3511=(($3510)|0);
      var $3512=HEAP32[(($3511)>>2)];
      var $3513=(($3512)|0);
      var $3514=HEAP32[(($3513)>>2)];
      var $3515=(($3514)|(0))==1;
      if ($3515) { label = 420; break; } else { label = 421; break; }
    case 420: 
      var $3517=$1;
      var $3518=$1;
      var $3519=(($3518+56)|0);
      var $3520=HEAP32[(($3519)>>2)];
      var $3521=$3520 & 511;
      var $3522=$3521 << 23;
      var $3523=66 | $3522;
      _genop($3517, $3523);
      var $3524=$1;
      _push_($3524);
      label = 422; break;
    case 421: 
      var $3526=$1;
      var $3527=$2;
      var $3528=(($3527)|0);
      var $3529=HEAP32[(($3528)>>2)];
      var $3530=(($3529)|0);
      var $3531=HEAP32[(($3530)>>2)];
      _codegen($3526, $3531, 1);
      label = 422; break;
    case 422: 
      label = 423; break;
    case 423: 
      var $3534=$1;
      var $3535=(($3534+56)|0);
      var $3536=HEAP32[(($3535)>>2)];
      var $3537=((($3536)-(1))|0);
      HEAP32[(($3535)>>2)]=$3537;
      var $3538=$1;
      var $3539=$2;
      var $3540=(($3539)|0);
      var $3541=HEAP32[(($3540)>>2)];
      var $3542=(($3541+4)|0);
      var $3543=HEAP32[(($3542)>>2)];
      var $3544=$3543;
      var $3545=(($3544) & 65535);
      var $3546=_new_msym($3538, $3545);
      $idx79=$3546;
      var $3547=$1;
      var $3548=$1;
      var $3549=(($3548+56)|0);
      var $3550=HEAP32[(($3549)>>2)];
      var $3551=$3550 & 511;
      var $3552=$3551 << 23;
      var $3553=68 | $3552;
      var $3554=$idx79;
      var $3555=$3554 & 511;
      var $3556=$3555 << 14;
      var $3557=$3553 | $3556;
      _genop($3547, $3557);
      var $3558=$1;
      var $3559=$2;
      var $3560=(($3559+4)|0);
      var $3561=HEAP32[(($3560)>>2)];
      var $3562=(($3561)|0);
      var $3563=HEAP32[(($3562)>>2)];
      var $3564=_scope_body($3558, $3563);
      $idx79=$3564;
      var $3565=$1;
      var $3566=$1;
      var $3567=(($3566+56)|0);
      var $3568=HEAP32[(($3567)>>2)];
      var $3569=$3568 & 511;
      var $3570=$3569 << 23;
      var $3571=69 | $3570;
      var $3572=$idx79;
      var $3573=$3572 & 65535;
      var $3574=$3573 << 7;
      var $3575=$3571 | $3574;
      _genop($3565, $3575);
      var $3576=$3;
      var $3577=(($3576)|(0))!=0;
      if ($3577) { label = 424; break; } else { label = 425; break; }
    case 424: 
      var $3579=$1;
      _push_($3579);
      label = 425; break;
    case 425: 
      label = 437; break;
    case 426: 
      var $3582=$1;
      var $3583=$2;
      var $3584=(($3583)|0);
      var $3585=HEAP32[(($3584)>>2)];
      _codegen($3582, $3585, 1);
      var $3586=$1;
      var $3587=(($3586+56)|0);
      var $3588=HEAP32[(($3587)>>2)];
      var $3589=((($3588)-(1))|0);
      HEAP32[(($3587)>>2)]=$3589;
      var $3590=$1;
      var $3591=$1;
      var $3592=(($3591+56)|0);
      var $3593=HEAP32[(($3592)>>2)];
      var $3594=$3593 & 511;
      var $3595=$3594 << 23;
      var $3596=71 | $3595;
      var $3597=$1;
      var $3598=(($3597+56)|0);
      var $3599=HEAP32[(($3598)>>2)];
      var $3600=$3599 & 511;
      var $3601=$3600 << 14;
      var $3602=$3596 | $3601;
      _genop($3590, $3602);
      var $3603=$1;
      var $3604=$2;
      var $3605=(($3604+4)|0);
      var $3606=HEAP32[(($3605)>>2)];
      var $3607=(($3606)|0);
      var $3608=HEAP32[(($3607)>>2)];
      var $3609=_scope_body($3603, $3608);
      $idx80=$3609;
      var $3610=$1;
      var $3611=$1;
      var $3612=(($3611+56)|0);
      var $3613=HEAP32[(($3612)>>2)];
      var $3614=$3613 & 511;
      var $3615=$3614 << 23;
      var $3616=69 | $3615;
      var $3617=$idx80;
      var $3618=$3617 & 65535;
      var $3619=$3618 << 7;
      var $3620=$3616 | $3619;
      _genop($3610, $3620);
      var $3621=$3;
      var $3622=(($3621)|(0))!=0;
      if ($3622) { label = 427; break; } else { label = 428; break; }
    case 427: 
      var $3624=$1;
      _push_($3624);
      label = 428; break;
    case 428: 
      label = 437; break;
    case 429: 
      var $3627=$1;
      var $3628=$2;
      var $3629=(($3628)|0);
      var $3630=HEAP32[(($3629)>>2)];
      var $3631=$3630;
      var $3632=(($3631) & 65535);
      var $3633=_new_msym($3627, $3632);
      $sym81=$3633;
      var $3634=$1;
      var $3635=$2;
      var $3636=(($3635+4)|0);
      var $3637=HEAP32[(($3636)>>2)];
      var $3638=_lambda_body($3634, $3637, 0);
      $idx82=$3638;
      var $3639=$1;
      var $3640=$1;
      var $3641=(($3640+56)|0);
      var $3642=HEAP32[(($3641)>>2)];
      var $3643=$3642 & 511;
      var $3644=$3643 << 23;
      var $3645=72 | $3644;
      _genop($3639, $3645);
      var $3646=$1;
      _push_($3646);
      var $3647=$1;
      var $3648=$1;
      var $3649=(($3648+56)|0);
      var $3650=HEAP32[(($3649)>>2)];
      var $3651=$3650 & 511;
      var $3652=$3651 << 23;
      var $3653=64 | $3652;
      var $3654=$idx82;
      var $3655=$3654 & 16383;
      var $3656=$3655 << 9;
      var $3657=$3656 | 128;
      var $3658=$3653 | $3657;
      _genop($3647, $3658);
      var $3659=$1;
      var $3660=(($3659+56)|0);
      var $3661=HEAP32[(($3660)>>2)];
      var $3662=((($3661)-(1))|0);
      HEAP32[(($3660)>>2)]=$3662;
      var $3663=$1;
      var $3664=$1;
      var $3665=(($3664+56)|0);
      var $3666=HEAP32[(($3665)>>2)];
      var $3667=$3666 & 511;
      var $3668=$3667 << 23;
      var $3669=70 | $3668;
      var $3670=$sym81;
      var $3671=$3670 & 511;
      var $3672=$3671 << 14;
      var $3673=$3669 | $3672;
      _genop($3663, $3673);
      var $3674=$3;
      var $3675=(($3674)|(0))!=0;
      if ($3675) { label = 430; break; } else { label = 431; break; }
    case 430: 
      var $3677=$1;
      var $3678=$1;
      var $3679=(($3678+56)|0);
      var $3680=HEAP32[(($3679)>>2)];
      var $3681=$3680 & 511;
      var $3682=$3681 << 23;
      var $3683=5 | $3682;
      _genop($3677, $3683);
      var $3684=$1;
      _push_($3684);
      label = 431; break;
    case 431: 
      label = 437; break;
    case 432: 
      var $3687=$2;
      var $3688=(($3687)|0);
      var $3689=HEAP32[(($3688)>>2)];
      $recv=$3689;
      var $3690=$1;
      var $3691=$2;
      var $3692=(($3691+4)|0);
      var $3693=HEAP32[(($3692)>>2)];
      var $3694=(($3693)|0);
      var $3695=HEAP32[(($3694)>>2)];
      var $3696=$3695;
      var $3697=(($3696) & 65535);
      var $3698=_new_msym($3690, $3697);
      $sym83=$3698;
      var $3699=$1;
      var $3700=$2;
      var $3701=(($3700+4)|0);
      var $3702=HEAP32[(($3701)>>2)];
      var $3703=(($3702+4)|0);
      var $3704=HEAP32[(($3703)>>2)];
      var $3705=_lambda_body($3699, $3704, 0);
      $idx84=$3705;
      var $3706=$1;
      var $3707=$recv;
      _codegen($3706, $3707, 1);
      var $3708=$1;
      var $3709=(($3708+56)|0);
      var $3710=HEAP32[(($3709)>>2)];
      var $3711=((($3710)-(1))|0);
      HEAP32[(($3709)>>2)]=$3711;
      var $3712=$1;
      var $3713=$1;
      var $3714=(($3713+56)|0);
      var $3715=HEAP32[(($3714)>>2)];
      var $3716=$3715 & 511;
      var $3717=$3716 << 23;
      var $3718=71 | $3717;
      var $3719=$1;
      var $3720=(($3719+56)|0);
      var $3721=HEAP32[(($3720)>>2)];
      var $3722=$3721 & 511;
      var $3723=$3722 << 14;
      var $3724=$3718 | $3723;
      _genop($3712, $3724);
      var $3725=$1;
      _push_($3725);
      var $3726=$1;
      var $3727=$1;
      var $3728=(($3727+56)|0);
      var $3729=HEAP32[(($3728)>>2)];
      var $3730=$3729 & 511;
      var $3731=$3730 << 23;
      var $3732=64 | $3731;
      var $3733=$idx84;
      var $3734=$3733 & 16383;
      var $3735=$3734 << 9;
      var $3736=$3735 | 128;
      var $3737=$3732 | $3736;
      _genop($3726, $3737);
      var $3738=$1;
      var $3739=(($3738+56)|0);
      var $3740=HEAP32[(($3739)>>2)];
      var $3741=((($3740)-(1))|0);
      HEAP32[(($3739)>>2)]=$3741;
      var $3742=$1;
      var $3743=$1;
      var $3744=(($3743+56)|0);
      var $3745=HEAP32[(($3744)>>2)];
      var $3746=$3745 & 511;
      var $3747=$3746 << 23;
      var $3748=70 | $3747;
      var $3749=$sym83;
      var $3750=$3749 & 511;
      var $3751=$3750 << 14;
      var $3752=$3748 | $3751;
      _genop($3742, $3752);
      var $3753=$3;
      var $3754=(($3753)|(0))!=0;
      if ($3754) { label = 433; break; } else { label = 434; break; }
    case 433: 
      var $3756=$1;
      var $3757=$1;
      var $3758=(($3757+56)|0);
      var $3759=HEAP32[(($3758)>>2)];
      var $3760=$3759 & 511;
      var $3761=$3760 << 23;
      var $3762=5 | $3761;
      _genop($3756, $3762);
      var $3763=$1;
      _push_($3763);
      label = 434; break;
    case 434: 
      label = 437; break;
    case 435: 
      var $3766=$1;
      var $3767=$2;
      _codegen($3766, $3767, 0);
      label = 437; break;
    case 436: 
      label = 437; break;
    case 437: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_label($s) {
  var label = 0;
  var $1;
  $1=$s;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$1;
  var $6=(($5+64)|0);
  HEAP32[(($6)>>2)]=$4;
  var $7=$1;
  var $8=(($7+60)|0);
  var $9=HEAP32[(($8)>>2)];
  return $9;
}
function _genop($s, $i) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$s;
      $2=$i;
      var $3=$1;
      var $4=(($3+60)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+96)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($5)|(0))==(($8)|(0));
      if ($9) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $11=$1;
      var $12=(($11+96)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=($13<<1);
      HEAP32[(($12)>>2)]=$14;
      var $15=$1;
      var $16=$1;
      var $17=(($16+88)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$1;
      var $21=(($20+96)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=($22<<2);
      var $24=_codegen_realloc($15, $19, $23);
      var $25=$24;
      var $26=$1;
      var $27=(($26+88)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$1;
      var $29=(($28+92)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)|(0))!=0;
      if ($31) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $33=$1;
      var $34=$1;
      var $35=(($34+92)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=$1;
      var $39=(($38+96)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=($40<<1);
      var $42=_codegen_realloc($33, $37, $41);
      var $43=$42;
      var $44=$1;
      var $45=(($44+92)|0);
      HEAP32[(($45)>>2)]=$43;
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $48=$2;
      var $49=$1;
      var $50=(($49+60)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$1;
      var $53=(($52+88)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<2))|0);
      HEAP32[(($55)>>2)]=$48;
      var $56=$1;
      var $57=(($56+92)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|(0))!=0;
      if ($59) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $61=$1;
      var $62=(($61+84)|0);
      var $63=HEAP16[(($62)>>1)];
      var $64=$1;
      var $65=(($64+60)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$1;
      var $68=(($67+92)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69+($66<<1))|0);
      HEAP16[(($70)>>1)]=$63;
      label = 7; break;
    case 7: 
      var $72=$1;
      var $73=(($72+60)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)+(1))|0);
      HEAP32[(($73)>>2)]=$75;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _push_($s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$s;
      var $2=$1;
      var $3=(($2+56)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0)) > 511;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      _codegen_error($7, ((106628)|0));
      label = 3; break;
    case 3: 
      var $9=$1;
      var $10=(($9+56)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)+(1))|0);
      HEAP32[(($10)>>2)]=$12;
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=(($14+56)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$1;
      var $18=(($17+116)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|(0)) > (($19)|(0));
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $22=$1;
      var $23=(($22+56)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$1;
      var $26=(($25+116)|0);
      HEAP32[(($26)>>2)]=$24;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_push($s, $t) {
  var label = 0;
  var $1;
  var $2;
  var $p;
  $1=$s;
  $2=$t;
  var $3=$1;
  var $4=_codegen_palloc($3, 28);
  var $5=$4;
  $p=$5;
  var $6=$2;
  var $7=$p;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$p;
  var $10=(($9+12)|0);
  HEAP32[(($10)>>2)]=0;
  var $11=$p;
  var $12=(($11+8)|0);
  HEAP32[(($12)>>2)]=0;
  var $13=$p;
  var $14=(($13+4)|0);
  HEAP32[(($14)>>2)]=0;
  var $15=$1;
  var $16=(($15+72)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=$p;
  var $19=(($18+24)|0);
  HEAP32[(($19)>>2)]=$17;
  var $20=$1;
  var $21=(($20+76)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=$p;
  var $24=(($23+20)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+56)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$p;
  var $29=(($28+16)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$p;
  var $31=$1;
  var $32=(($31+72)|0);
  HEAP32[(($32)>>2)]=$30;
  var $33=$p;
  return $33;
}
function _dispatch($s, $pc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $diff;
      var $i;
      var $c;
      $1=$s;
      $2=$pc;
      var $3=$1;
      var $4=(($3+60)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=((($5)-($6))|0);
      $diff=$7;
      var $8=$2;
      var $9=$1;
      var $10=(($9+88)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($8<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      $i=$13;
      var $14=$i;
      var $15=$14 & 127;
      $c=$15;
      var $16=$1;
      var $17=(($16+60)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$1;
      var $20=(($19+64)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$c;
      if ((($21)|(0))==23 | (($21)|(0))==24 | (($21)|(0))==25 | (($21)|(0))==26) {
        label = 2; break;
      }
      else {
      label = 3; break;
      }
    case 2: 
      label = 4; break;
    case 3: 
      var $24=HEAP32[((_stderr)>>2)];
      var $25=_fprintf($24, ((107164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $26=$1;
      _scope_error($26);
      label = 4; break;
    case 4: 
      var $28=$c;
      var $29=$28 & 127;
      var $30=$i;
      var $31=$30 >>> 23;
      var $32=$31 & 511;
      var $33=$32 & 511;
      var $34=$33 << 23;
      var $35=$29 | $34;
      var $36=$diff;
      var $37=((($36)+(32767))|0);
      var $38=$37 & 65535;
      var $39=$38 << 7;
      var $40=$35 | $39;
      var $41=$2;
      var $42=$1;
      var $43=(($42+88)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+($41<<2))|0);
      HEAP32[(($45)>>2)]=$40;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_msym($s, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $len;
      $2=$s;
      $3=$sym;
      var $4=$2;
      var $5=(($4+100)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6+40)|0);
      var $8=HEAP32[(($7)>>2)];
      $len=$8;
      var $9=$len;
      var $10=(($9)|(0)) > 256;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $len=256;
      label = 3; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $14=$i;
      var $15=$len;
      var $16=(($14)|(0)) < (($15)|(0));
      if ($16) { label = 5; break; } else { label = 11; break; }
    case 5: 
      var $18=$i;
      var $19=$2;
      var $20=(($19+100)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+($18<<1))|0);
      var $25=HEAP16[(($24)>>1)];
      var $26=(($25 << 16) >> 16);
      var $27=$3;
      var $28=(($27 << 16) >> 16);
      var $29=(($26)|(0))==(($28)|(0));
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $31=$i;
      $1=$31;
      label = 16; break;
    case 7: 
      var $33=$i;
      var $34=$2;
      var $35=(($34+100)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+($33<<1))|0);
      var $40=HEAP16[(($39)>>1)];
      var $41=(($40 << 16) >> 16);
      var $42=(($41)|(0))==0;
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $46=$i;
      var $47=((($46)+(1))|0);
      $i=$47;
      label = 4; break;
    case 11: 
      var $49=$i;
      var $50=(($49)|(0))==256;
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $52=$2;
      _codegen_error($52, ((107456)|0));
      label = 13; break;
    case 13: 
      var $54=$3;
      var $55=$i;
      var $56=$2;
      var $57=(($56+100)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+($55<<1))|0);
      HEAP16[(($61)>>1)]=$54;
      var $62=$i;
      var $63=$2;
      var $64=(($63+100)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+40)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($62)|(0))==(($67)|(0));
      if ($68) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $70=$2;
      var $71=(($70+100)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+40)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($74)+(1))|0);
      HEAP32[(($73)>>2)]=$75;
      label = 15; break;
    case 15: 
      var $77=$i;
      $1=$77;
      label = 16; break;
    case 16: 
      var $79=$1;
      return $79;
    default: assert(0, "bad label: " + label);
  }
}
function _dispatch_linked($s, $pc) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $pos;
      $1=$s;
      $2=$pc;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 7; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$2;
      var $9=$1;
      var $10=(($9+88)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11+($8<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      $i=$13;
      var $14=$i;
      var $15=$14 >>> 7;
      var $16=$15 & 65535;
      var $17=((($16)-(32767))|0);
      $pos=$17;
      var $18=$1;
      var $19=$2;
      _dispatch($18, $19);
      var $20=$pos;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 7; break;
    case 6: 
      var $24=$pos;
      $2=$24;
      label = 4; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_assignment($s, $node, $sp, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $idx;
      var $type;
      var $lv;
      var $up;
      $1=$s;
      $2=$node;
      $3=$sp;
      $4=$val;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $type=$8;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      $2=$11;
      var $12=$type;
      if ((($12)|(0))==41) {
        label = 2; break;
      }
      else if ((($12)|(0))==39) {
        label = 3; break;
      }
      else if ((($12)|(0))==42) {
        label = 14; break;
      }
      else if ((($12)|(0))==44) {
        label = 15; break;
      }
      else if ((($12)|(0))==43) {
        label = 16; break;
      }
      else if ((($12)|(0))==77) {
        label = 17; break;
      }
      else if ((($12)|(0))==29) {
        label = 18; break;
      }
      else {
      label = 21; break;
      }
    case 2: 
      var $14=$1;
      var $15=$2;
      var $16=$15;
      var $17=(($16) & 65535);
      var $18=_new_sym900($14, $17);
      $idx=$18;
      var $19=$1;
      var $20=$3;
      var $21=$20 & 511;
      var $22=$21 << 23;
      var $23=10 | $22;
      var $24=$idx;
      var $25=$24 & 65535;
      var $26=$25 << 7;
      var $27=$23 | $26;
      var $28=$4;
      _genop_peep($19, $27, $28);
      label = 22; break;
    case 3: 
      var $30=$1;
      var $31=$2;
      var $32=$31;
      var $33=(($32) & 65535);
      var $34=_lv_idx($30, $33);
      $idx=$34;
      var $35=$idx;
      var $36=(($35)|(0)) > 0;
      if ($36) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $38=$idx;
      var $39=$3;
      var $40=(($38)|(0))!=(($39)|(0));
      if ($40) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $42=$1;
      var $43=$idx;
      var $44=$43 & 511;
      var $45=$44 << 23;
      var $46=1 | $45;
      var $47=$3;
      var $48=$47 & 511;
      var $49=$48 << 14;
      var $50=$46 | $49;
      var $51=$4;
      _genop_peep($42, $50, $51);
      label = 6; break;
    case 6: 
      label = 22; break;
    case 7: 
      $lv=0;
      var $54=$1;
      var $55=(($54+48)|0);
      var $56=HEAP32[(($55)>>2)];
      $up=$56;
      label = 8; break;
    case 8: 
      var $58=$up;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $61=$up;
      var $62=$2;
      var $63=$62;
      var $64=(($63) & 65535);
      var $65=_lv_idx($61, $64);
      $idx=$65;
      var $66=$idx;
      var $67=(($66)|(0)) > 0;
      if ($67) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $69=$1;
      var $70=$3;
      var $71=$70 & 511;
      var $72=$71 << 23;
      var $73=22 | $72;
      var $74=$idx;
      var $75=$74 & 511;
      var $76=$75 << 14;
      var $77=$73 | $76;
      var $78=$lv;
      var $79=$78 & 127;
      var $80=$79 << 7;
      var $81=$77 | $80;
      var $82=$4;
      _genop_peep($69, $81, $82);
      label = 12; break;
    case 11: 
      var $84=$lv;
      var $85=((($84)+(1))|0);
      $lv=$85;
      var $86=$up;
      var $87=(($86+48)|0);
      var $88=HEAP32[(($87)>>2)];
      $up=$88;
      label = 8; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 22; break;
    case 14: 
      var $92=$1;
      var $93=$2;
      var $94=$93;
      var $95=(($94) & 65535);
      var $96=_new_sym900($92, $95);
      $idx=$96;
      var $97=$1;
      var $98=$3;
      var $99=$98 & 511;
      var $100=$99 << 23;
      var $101=14 | $100;
      var $102=$idx;
      var $103=$102 & 65535;
      var $104=$103 << 7;
      var $105=$101 | $104;
      var $106=$4;
      _genop_peep($97, $105, $106);
      label = 22; break;
    case 15: 
      var $108=$1;
      var $109=$2;
      var $110=$109;
      var $111=(($110) & 65535);
      var $112=_new_sym900($108, $111);
      $idx=$112;
      var $113=$1;
      var $114=$3;
      var $115=$114 & 511;
      var $116=$115 << 23;
      var $117=16 | $116;
      var $118=$idx;
      var $119=$118 & 65535;
      var $120=$119 << 7;
      var $121=$117 | $120;
      var $122=$4;
      _genop_peep($113, $121, $122);
      label = 22; break;
    case 16: 
      var $124=$1;
      var $125=$2;
      var $126=$125;
      var $127=(($126) & 65535);
      var $128=_new_sym900($124, $127);
      $idx=$128;
      var $129=$1;
      var $130=$3;
      var $131=$130 & 511;
      var $132=$131 << 23;
      var $133=18 | $132;
      var $134=$idx;
      var $135=$134 & 65535;
      var $136=$135 << 7;
      var $137=$133 | $136;
      var $138=$4;
      _genop_peep($129, $137, $138);
      label = 22; break;
    case 17: 
      var $140=$1;
      var $141=$2;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$143;
      var $145=(($144) & 65535);
      var $146=_new_sym900($140, $145);
      $idx=$146;
      var $147=$1;
      var $148=$1;
      var $149=(($148+56)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$150 & 511;
      var $152=$151 << 23;
      var $153=1 | $152;
      var $154=$3;
      var $155=$154 & 511;
      var $156=$155 << 14;
      var $157=$153 | $156;
      _genop_peep($147, $157, 0);
      var $158=$1;
      _push_($158);
      var $159=$1;
      var $160=$2;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      _codegen($159, $162, 1);
      var $163=$1;
      var $164=(($163+56)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=((($165)-(2))|0);
      HEAP32[(($164)>>2)]=$166;
      var $167=$1;
      var $168=$1;
      var $169=(($168+56)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$170 & 511;
      var $172=$171 << 23;
      var $173=20 | $172;
      var $174=$idx;
      var $175=$174 & 65535;
      var $176=$175 << 7;
      var $177=$173 | $176;
      var $178=$4;
      _genop_peep($167, $177, $178);
      label = 22; break;
    case 18: 
      var $180=$1;
      _push_($180);
      var $181=$1;
      var $182=$2;
      var $183=$1;
      var $184=$2;
      var $185=(($184+4)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($186)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$188;
      var $190=(($189) & 65535);
      var $191=_attrsym($183, $190);
      var $192=$3;
      _gen_call($181, $182, $191, $192, 0);
      var $193=$1;
      var $194=(($193+56)|0);
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195)-(1))|0);
      HEAP32[(($194)>>2)]=$196;
      var $197=$4;
      var $198=(($197)|(0))!=0;
      if ($198) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $200=$1;
      var $201=$1;
      var $202=(($201+56)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & 511;
      var $205=$204 << 23;
      var $206=1 | $205;
      var $207=$3;
      var $208=$207 & 511;
      var $209=$208 << 14;
      var $210=$206 | $209;
      var $211=$4;
      _genop_peep($200, $210, $211);
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      var $214=$type;
      var $215=_printf(((108324)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$214,tempInt));
      label = 22; break;
    case 22: 
      var $217=$4;
      var $218=(($217)|(0))!=0;
      if ($218) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $220=$1;
      _push_($220);
      label = 24; break;
    case 24: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_pop($s, $val) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$s;
      $2=$val;
      var $3=$2;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$1;
      var $8=(($7+56)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 & 511;
      var $11=$10 << 23;
      var $12=5 | $11;
      _genop($6, $12);
      label = 3; break;
    case 3: 
      var $14=$1;
      var $15=$1;
      var $16=(($15+72)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+12)|0);
      var $19=HEAP32[(($18)>>2)];
      _dispatch_linked($14, $19);
      var $20=$1;
      var $21=(($20+72)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+24)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$1;
      var $26=(($25+72)|0);
      HEAP32[(($26)>>2)]=$24;
      var $27=$2;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$1;
      _push_($30);
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _scope_body($s, $tree) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $scope;
      var $idx;
      $1=$s;
      $2=$tree;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=_scope_new($5, $6, $9);
      $scope=$10;
      var $11=$scope;
      var $12=(($11+124)|0);
      var $13=HEAP32[(($12)>>2)];
      $idx=$13;
      var $14=$scope;
      var $15=$2;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      _codegen($14, $17, 1);
      var $18=$1;
      var $19=(($18+88)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $23=$scope;
      _genop($23, 74);
      label = 7; break;
    case 3: 
      var $25=$scope;
      var $26=(($25+116)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))==0;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$scope;
      _genop($30, 5);
      var $31=$scope;
      _genop($31, 41);
      label = 6; break;
    case 5: 
      var $33=$scope;
      var $34=$scope;
      var $35=(($34+56)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 & 511;
      var $38=$37 << 23;
      var $39=41 | $38;
      _genop_peep($33, $39, 0);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $42=$scope;
      _scope_finish($42);
      var $43=$idx;
      var $44=$1;
      var $45=(($44+124)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=((($43)-($46))|0);
      return $47;
    default: assert(0, "bad label: " + label);
  }
}
function _genop_peep($s, $i, $val) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i0;
      var $c1;
      var $c0;
      var $c;
      var $i1;
      $1=$s;
      $2=$i;
      $3=$val;
      var $4=$1;
      var $5=(($4+64)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+60)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)|(0))!=(($9)|(0));
      if ($10) { label = 2; break; } else { label = 89; break; }
    case 2: 
      var $12=$1;
      var $13=(($12+60)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0)) > 0;
      if ($15) { label = 3; break; } else { label = 89; break; }
    case 3: 
      var $17=$1;
      var $18=(($17+60)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      var $21=$1;
      var $22=(($21+88)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+($20<<2))|0);
      var $25=HEAP32[(($24)>>2)];
      $i0=$25;
      var $26=$2;
      var $27=$26 & 127;
      $c1=$27;
      var $28=$i0;
      var $29=$28 & 127;
      $c0=$29;
      var $30=$c1;
      if ((($30)|(0))==1) {
        label = 4; break;
      }
      else if ((($30)|(0))==14 | (($30)|(0))==16 | (($30)|(0))==18 | (($30)|(0))==20 | (($30)|(0))==10) {
        label = 39; break;
      }
      else if ((($30)|(0))==22) {
        label = 46; break;
      }
      else if ((($30)|(0))==31) {
        label = 53; break;
      }
      else if ((($30)|(0))==28) {
        label = 56; break;
      }
      else if ((($30)|(0))==41) {
        label = 59; break;
      }
      else if ((($30)|(0))==44 | (($30)|(0))==46) {
        label = 70; break;
      }
      else if ((($30)|(0))==62) {
        label = 81; break;
      }
      else {
      label = 87; break;
      }
    case 4: 
      var $32=$2;
      var $33=$32 >>> 23;
      var $34=$33 & 511;
      var $35=$2;
      var $36=$35 >>> 14;
      var $37=$36 & 511;
      var $38=(($34)|(0))==(($37)|(0));
      if ($38) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 90; break;
    case 6: 
      var $41=$3;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 88; break;
    case 8: 
      var $45=$c0;
      if ((($45)|(0))==1) {
        label = 9; break;
      }
      else if ((($45)|(0))==3) {
        label = 17; break;
      }
      else if ((($45)|(0))==55 | (($45)|(0))==63 | (($45)|(0))==65 | (($45)|(0))==58 | (($45)|(0))==21) {
        label = 21; break;
      }
      else if ((($45)|(0))==4 | (($45)|(0))==9 | (($45)|(0))==13 | (($45)|(0))==15 | (($45)|(0))==17 | (($45)|(0))==11 | (($45)|(0))==2 | (($45)|(0))==61) {
        label = 25; break;
      }
      else if ((($45)|(0))==71) {
        label = 29; break;
      }
      else if ((($45)|(0))==5 | (($45)|(0))==6 | (($45)|(0))==7 | (($45)|(0))==8 | (($45)|(0))==66) {
        label = 33; break;
      }
      else {
      label = 37; break;
      }
    case 9: 
      var $47=$2;
      var $48=$47 >>> 14;
      var $49=$48 & 511;
      var $50=$i0;
      var $51=$50 >>> 23;
      var $52=$51 & 511;
      var $53=(($49)|(0))==(($52)|(0));
      if ($53) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $55=$2;
      var $56=$55 >>> 23;
      var $57=$56 & 511;
      var $58=$i0;
      var $59=$58 >>> 14;
      var $60=$59 & 511;
      var $61=(($57)|(0))==(($60)|(0));
      if ($61) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $63=$2;
      var $64=$63 >>> 23;
      var $65=$64 & 511;
      var $66=$1;
      var $67=(($66+112)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($65)|(0)) >= (($68)|(0));
      if ($69) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 90; break;
    case 13: 
      var $72=$2;
      var $73=$72 >>> 14;
      var $74=$73 & 511;
      var $75=$i0;
      var $76=$75 >>> 23;
      var $77=$76 & 511;
      var $78=(($74)|(0))==(($77)|(0));
      if ($78) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $80=$i0;
      var $81=$80 >>> 23;
      var $82=$81 & 511;
      var $83=$1;
      var $84=(($83+112)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($82)|(0)) >= (($85)|(0));
      if ($86) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $88=$2;
      var $89=$88 >>> 23;
      var $90=$89 & 511;
      var $91=$90 & 511;
      var $92=$91 << 23;
      var $93=1 | $92;
      var $94=$i0;
      var $95=$94 >>> 14;
      var $96=$95 & 511;
      var $97=$96 & 511;
      var $98=$97 << 14;
      var $99=$93 | $98;
      var $100=$1;
      var $101=(($100+60)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=((($102)-(1))|0);
      var $104=$1;
      var $105=(($104+88)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+($103<<2))|0);
      HEAP32[(($107)>>2)]=$99;
      label = 90; break;
    case 16: 
      label = 38; break;
    case 17: 
      var $110=$2;
      var $111=$110 >>> 14;
      var $112=$111 & 511;
      var $113=$i0;
      var $114=$113 >>> 23;
      var $115=$114 & 511;
      var $116=(($112)|(0))==(($115)|(0));
      if ($116) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $118=$i0;
      var $119=$118 >>> 23;
      var $120=$119 & 511;
      var $121=$1;
      var $122=(($121+112)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($120)|(0)) >= (($123)|(0));
      if ($124) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $126=$2;
      var $127=$126 >>> 23;
      var $128=$127 & 511;
      var $129=$128 & 511;
      var $130=$129 << 23;
      var $131=3 | $130;
      var $132=$i0;
      var $133=$132 >>> 7;
      var $134=$133 & 65535;
      var $135=((($134)-(32767))|0);
      var $136=((($135)+(32767))|0);
      var $137=$136 & 65535;
      var $138=$137 << 7;
      var $139=$131 | $138;
      var $140=$1;
      var $141=(($140+60)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=((($142)-(1))|0);
      var $144=$1;
      var $145=(($144+88)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=(($146+($143<<2))|0);
      HEAP32[(($147)>>2)]=$139;
      label = 90; break;
    case 20: 
      label = 38; break;
    case 21: 
      var $150=$2;
      var $151=$150 >>> 14;
      var $152=$151 & 511;
      var $153=$i0;
      var $154=$153 >>> 23;
      var $155=$154 & 511;
      var $156=(($152)|(0))==(($155)|(0));
      if ($156) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $158=$i0;
      var $159=$158 >>> 23;
      var $160=$159 & 511;
      var $161=$1;
      var $162=(($161+112)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($160)|(0)) >= (($163)|(0));
      if ($164) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $166=$c0;
      var $167=$166 & 127;
      var $168=$2;
      var $169=$168 >>> 23;
      var $170=$169 & 511;
      var $171=$170 & 511;
      var $172=$171 << 23;
      var $173=$167 | $172;
      var $174=$i0;
      var $175=$174 >>> 14;
      var $176=$175 & 511;
      var $177=$176 & 511;
      var $178=$177 << 14;
      var $179=$173 | $178;
      var $180=$i0;
      var $181=$180 >>> 7;
      var $182=$181 & 127;
      var $183=$182 & 127;
      var $184=$183 << 7;
      var $185=$179 | $184;
      var $186=$1;
      var $187=(($186+60)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=((($188)-(1))|0);
      var $190=$1;
      var $191=(($190+88)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($192+($189<<2))|0);
      HEAP32[(($193)>>2)]=$185;
      label = 90; break;
    case 24: 
      label = 38; break;
    case 25: 
      var $196=$2;
      var $197=$196 >>> 14;
      var $198=$197 & 511;
      var $199=$i0;
      var $200=$199 >>> 23;
      var $201=$200 & 511;
      var $202=(($198)|(0))==(($201)|(0));
      if ($202) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $204=$i0;
      var $205=$204 >>> 23;
      var $206=$205 & 511;
      var $207=$1;
      var $208=(($207+112)|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=(($206)|(0)) >= (($209)|(0));
      if ($210) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $212=$c0;
      var $213=$212 & 127;
      var $214=$2;
      var $215=$214 >>> 23;
      var $216=$215 & 511;
      var $217=$216 & 511;
      var $218=$217 << 23;
      var $219=$213 | $218;
      var $220=$i0;
      var $221=$220 >>> 7;
      var $222=$221 & 65535;
      var $223=$222 & 65535;
      var $224=$223 << 7;
      var $225=$219 | $224;
      var $226=$1;
      var $227=(($226+60)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=((($228)-(1))|0);
      var $230=$1;
      var $231=(($230+88)|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=(($232+($229<<2))|0);
      HEAP32[(($233)>>2)]=$225;
      label = 90; break;
    case 28: 
      label = 38; break;
    case 29: 
      var $236=$2;
      var $237=$236 >>> 14;
      var $238=$237 & 511;
      var $239=$i0;
      var $240=$239 >>> 23;
      var $241=$240 & 511;
      var $242=(($238)|(0))==(($241)|(0));
      if ($242) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $244=$i0;
      var $245=$244 >>> 23;
      var $246=$245 & 511;
      var $247=$1;
      var $248=(($247+112)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)|(0)) >= (($249)|(0));
      if ($250) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $252=$c0;
      var $253=$252 & 127;
      var $254=$2;
      var $255=$254 >>> 23;
      var $256=$255 & 511;
      var $257=$256 & 511;
      var $258=$257 << 23;
      var $259=$253 | $258;
      var $260=$i0;
      var $261=$260 >>> 14;
      var $262=$261 & 511;
      var $263=$262 & 511;
      var $264=$263 << 14;
      var $265=$259 | $264;
      var $266=$1;
      var $267=(($266+60)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=((($268)-(1))|0);
      var $270=$1;
      var $271=(($270+88)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=(($272+($269<<2))|0);
      HEAP32[(($273)>>2)]=$265;
      label = 90; break;
    case 32: 
      label = 38; break;
    case 33: 
      var $276=$2;
      var $277=$276 >>> 14;
      var $278=$277 & 511;
      var $279=$i0;
      var $280=$279 >>> 23;
      var $281=$280 & 511;
      var $282=(($278)|(0))==(($281)|(0));
      if ($282) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $284=$i0;
      var $285=$284 >>> 23;
      var $286=$285 & 511;
      var $287=$1;
      var $288=(($287+112)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=(($286)|(0)) >= (($289)|(0));
      if ($290) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $292=$c0;
      var $293=$292 & 127;
      var $294=$2;
      var $295=$294 >>> 23;
      var $296=$295 & 511;
      var $297=$296 & 511;
      var $298=$297 << 23;
      var $299=$293 | $298;
      var $300=$1;
      var $301=(($300+60)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=((($302)-(1))|0);
      var $304=$1;
      var $305=(($304+88)|0);
      var $306=HEAP32[(($305)>>2)];
      var $307=(($306+($303<<2))|0);
      HEAP32[(($307)>>2)]=$299;
      label = 90; break;
    case 36: 
      label = 38; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 88; break;
    case 39: 
      var $312=$3;
      var $313=(($312)|(0))!=0;
      if ($313) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 88; break;
    case 41: 
      var $316=$c0;
      var $317=(($316)|(0))==1;
      if ($317) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $319=$2;
      var $320=$319 >>> 23;
      var $321=$320 & 511;
      var $322=$i0;
      var $323=$322 >>> 23;
      var $324=$323 & 511;
      var $325=(($321)|(0))==(($324)|(0));
      if ($325) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $327=$c1;
      var $328=$327 & 127;
      var $329=$i0;
      var $330=$329 >>> 14;
      var $331=$330 & 511;
      var $332=$331 & 511;
      var $333=$332 << 23;
      var $334=$328 | $333;
      var $335=$2;
      var $336=$335 >>> 7;
      var $337=$336 & 65535;
      var $338=$337 & 65535;
      var $339=$338 << 7;
      var $340=$334 | $339;
      var $341=$1;
      var $342=(($341+60)|0);
      var $343=HEAP32[(($342)>>2)];
      var $344=((($343)-(1))|0);
      var $345=$1;
      var $346=(($345+88)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=(($347+($344<<2))|0);
      HEAP32[(($348)>>2)]=$340;
      label = 90; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 88; break;
    case 46: 
      var $352=$3;
      var $353=(($352)|(0))!=0;
      if ($353) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 88; break;
    case 48: 
      var $356=$c0;
      var $357=(($356)|(0))==1;
      if ($357) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $359=$2;
      var $360=$359 >>> 23;
      var $361=$360 & 511;
      var $362=$i0;
      var $363=$362 >>> 23;
      var $364=$363 & 511;
      var $365=(($361)|(0))==(($364)|(0));
      if ($365) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $367=$c1;
      var $368=$367 & 127;
      var $369=$i0;
      var $370=$369 >>> 14;
      var $371=$370 & 511;
      var $372=$371 & 511;
      var $373=$372 << 23;
      var $374=$368 | $373;
      var $375=$2;
      var $376=$375 >>> 14;
      var $377=$376 & 511;
      var $378=$377 & 511;
      var $379=$378 << 14;
      var $380=$374 | $379;
      var $381=$2;
      var $382=$381 >>> 7;
      var $383=$382 & 127;
      var $384=$383 & 127;
      var $385=$384 << 7;
      var $386=$380 | $385;
      var $387=$1;
      var $388=(($387+60)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=((($389)-(1))|0);
      var $391=$1;
      var $392=(($391+88)|0);
      var $393=HEAP32[(($392)>>2)];
      var $394=(($393+($390<<2))|0);
      HEAP32[(($394)>>2)]=$386;
      label = 90; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 88; break;
    case 53: 
      var $398=$c0;
      var $399=(($398)|(0))==31;
      if ($399) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $401=$i0;
      var $402=$401 >>> 23;
      var $403=$402 & 511;
      var $404=$2;
      var $405=$404 >>> 23;
      var $406=$405 & 511;
      var $407=((($403)+($406))|0);
      var $408=$407 & 511;
      var $409=$408 << 23;
      var $410=31 | $409;
      var $411=$1;
      var $412=(($411+60)|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=((($413)-(1))|0);
      var $415=$1;
      var $416=(($415+88)|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=(($417+($414<<2))|0);
      HEAP32[(($418)>>2)]=$410;
      label = 90; break;
    case 55: 
      label = 88; break;
    case 56: 
      var $421=$c0;
      var $422=(($421)|(0))==28;
      if ($422) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $424=$i0;
      var $425=$424 >>> 23;
      var $426=$425 & 511;
      var $427=$2;
      var $428=$427 >>> 23;
      var $429=$428 & 511;
      var $430=((($426)+($429))|0);
      var $431=$430 & 511;
      var $432=$431 << 23;
      var $433=28 | $432;
      var $434=$1;
      var $435=(($434+60)|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=((($436)-(1))|0);
      var $438=$1;
      var $439=(($438+88)|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=(($440+($437<<2))|0);
      HEAP32[(($441)>>2)]=$433;
      label = 90; break;
    case 58: 
      label = 88; break;
    case 59: 
      var $444=$c0;
      if ((($444)|(0))==41) {
        label = 60; break;
      }
      else if ((($444)|(0))==1) {
        label = 61; break;
      }
      else if ((($444)|(0))==3) {
        label = 62; break;
      }
      else if ((($444)|(0))==55 | (($444)|(0))==63 | (($444)|(0))==65 | (($444)|(0))==58 | (($444)|(0))==21) {
        label = 63; break;
      }
      else if ((($444)|(0))==14 | (($444)|(0))==16 | (($444)|(0))==18 | (($444)|(0))==20 | (($444)|(0))==22 | (($444)|(0))==10) {
        label = 64; break;
      }
      else if ((($444)|(0))==4 | (($444)|(0))==9 | (($444)|(0))==13 | (($444)|(0))==15 | (($444)|(0))==17 | (($444)|(0))==11 | (($444)|(0))==2 | (($444)|(0))==61) {
        label = 65; break;
      }
      else if ((($444)|(0))==71) {
        label = 66; break;
      }
      else if ((($444)|(0))==5 | (($444)|(0))==6 | (($444)|(0))==7 | (($444)|(0))==8 | (($444)|(0))==66) {
        label = 67; break;
      }
      else {
      label = 68; break;
      }
    case 60: 
      label = 90; break;
    case 61: 
      var $447=$i0;
      var $448=$447 >>> 14;
      var $449=$448 & 511;
      var $450=$449 & 511;
      var $451=$450 << 23;
      var $452=41 | $451;
      var $453=$1;
      var $454=(($453+60)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=((($455)-(1))|0);
      var $457=$1;
      var $458=(($457+88)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($459+($456<<2))|0);
      HEAP32[(($460)>>2)]=$452;
      label = 90; break;
    case 62: 
      var $462=$i0;
      var $463=$462 >>> 7;
      var $464=$463 & 65535;
      var $465=((($464)-(32767))|0);
      var $466=((($465)+(32767))|0);
      var $467=$466 & 65535;
      var $468=$467 << 7;
      var $469=3 | $468;
      var $470=$1;
      var $471=(($470+60)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=((($472)-(1))|0);
      var $474=$1;
      var $475=(($474+88)|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=(($476+($473<<2))|0);
      HEAP32[(($477)>>2)]=$469;
      var $478=$1;
      _genop($478, 41);
      label = 90; break;
    case 63: 
      var $480=$c0;
      var $481=$480 & 127;
      var $482=$i0;
      var $483=$482 >>> 14;
      var $484=$483 & 511;
      var $485=$484 & 511;
      var $486=$485 << 14;
      var $487=$481 | $486;
      var $488=$i0;
      var $489=$488 >>> 7;
      var $490=$489 & 127;
      var $491=$490 & 127;
      var $492=$491 << 7;
      var $493=$487 | $492;
      var $494=$1;
      var $495=(($494+60)|0);
      var $496=HEAP32[(($495)>>2)];
      var $497=((($496)-(1))|0);
      var $498=$1;
      var $499=(($498+88)|0);
      var $500=HEAP32[(($499)>>2)];
      var $501=(($500+($497<<2))|0);
      HEAP32[(($501)>>2)]=$493;
      var $502=$1;
      _genop($502, 41);
      label = 90; break;
    case 64: 
      var $504=$1;
      var $505=(($504+60)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=((($506)-(1))|0);
      HEAP32[(($505)>>2)]=$507;
      var $508=$1;
      var $509=$i0;
      _genop_peep($508, $509, 0);
      var $510=$1;
      var $511=(($510+60)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=((($512)-(1))|0);
      var $514=$1;
      var $515=(($514+88)|0);
      var $516=HEAP32[(($515)>>2)];
      var $517=(($516+($513<<2))|0);
      var $518=HEAP32[(($517)>>2)];
      $i0=$518;
      var $519=$1;
      var $520=$i0;
      var $521=$520 >>> 23;
      var $522=$521 & 511;
      var $523=$522 & 511;
      var $524=$523 << 23;
      var $525=41 | $524;
      _genop($519, $525);
      label = 90; break;
    case 65: 
      var $527=$c0;
      var $528=$527 & 127;
      var $529=$i0;
      var $530=$529 >>> 7;
      var $531=$530 & 65535;
      var $532=$531 & 65535;
      var $533=$532 << 7;
      var $534=$528 | $533;
      var $535=$1;
      var $536=(($535+60)|0);
      var $537=HEAP32[(($536)>>2)];
      var $538=((($537)-(1))|0);
      var $539=$1;
      var $540=(($539+88)|0);
      var $541=HEAP32[(($540)>>2)];
      var $542=(($541+($538<<2))|0);
      HEAP32[(($542)>>2)]=$534;
      var $543=$1;
      _genop($543, 41);
      label = 90; break;
    case 66: 
      var $545=$c0;
      var $546=$545 & 127;
      var $547=$2;
      var $548=$547 >>> 23;
      var $549=$548 & 511;
      var $550=$549 & 511;
      var $551=$550 << 23;
      var $552=$546 | $551;
      var $553=$i0;
      var $554=$553 >>> 14;
      var $555=$554 & 511;
      var $556=$555 & 511;
      var $557=$556 << 14;
      var $558=$552 | $557;
      var $559=$1;
      var $560=(($559+60)|0);
      var $561=HEAP32[(($560)>>2)];
      var $562=((($561)-(1))|0);
      var $563=$1;
      var $564=(($563+88)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=(($565+($562<<2))|0);
      HEAP32[(($566)>>2)]=$558;
      var $567=$1;
      _genop($567, 41);
      label = 90; break;
    case 67: 
      var $569=$c0;
      var $570=$569 & 127;
      var $571=$1;
      var $572=(($571+60)|0);
      var $573=HEAP32[(($572)>>2)];
      var $574=((($573)-(1))|0);
      var $575=$1;
      var $576=(($575+88)|0);
      var $577=HEAP32[(($576)>>2)];
      var $578=(($577+($574<<2))|0);
      HEAP32[(($578)>>2)]=$570;
      var $579=$1;
      _genop($579, 41);
      label = 90; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 88; break;
    case 70: 
      var $583=$c0;
      var $584=(($583)|(0))==3;
      if ($584) { label = 71; break; } else { label = 80; break; }
    case 71: 
      var $586=$i0;
      var $587=$586 >>> 7;
      var $588=$587 & 65535;
      var $589=((($588)-(32767))|0);
      $c=$589;
      var $590=$c1;
      var $591=(($590)|(0))==46;
      if ($591) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $593=$c;
      var $594=(((-$593))|0);
      $c=$594;
      label = 73; break;
    case 73: 
      var $596=$c;
      var $597=(($596)|(0)) > 127;
      if ($597) { label = 75; break; } else { label = 74; break; }
    case 74: 
      var $599=$c;
      var $600=(($599)|(0)) < -127;
      if ($600) { label = 75; break; } else { label = 76; break; }
    case 75: 
      label = 88; break;
    case 76: 
      var $603=$c;
      var $604=0 <= (($603)|(0));
      if ($604) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $606=$2;
      var $607=$606 >>> 23;
      var $608=$607 & 511;
      var $609=$608 & 511;
      var $610=$609 << 23;
      var $611=45 | $610;
      var $612=$2;
      var $613=$612 >>> 14;
      var $614=$613 & 511;
      var $615=$614 & 511;
      var $616=$615 << 14;
      var $617=$611 | $616;
      var $618=$c;
      var $619=$618 & 127;
      var $620=$619 << 7;
      var $621=$617 | $620;
      var $622=$1;
      var $623=(($622+60)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=((($624)-(1))|0);
      var $626=$1;
      var $627=(($626+88)|0);
      var $628=HEAP32[(($627)>>2)];
      var $629=(($628+($625<<2))|0);
      HEAP32[(($629)>>2)]=$621;
      label = 79; break;
    case 78: 
      var $631=$2;
      var $632=$631 >>> 23;
      var $633=$632 & 511;
      var $634=$633 & 511;
      var $635=$634 << 23;
      var $636=47 | $635;
      var $637=$2;
      var $638=$637 >>> 14;
      var $639=$638 & 511;
      var $640=$639 & 511;
      var $641=$640 << 14;
      var $642=$636 | $641;
      var $643=$c;
      var $644=(((-$643))|0);
      var $645=$644 & 127;
      var $646=$645 << 7;
      var $647=$642 | $646;
      var $648=$1;
      var $649=(($648+60)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=((($650)-(1))|0);
      var $652=$1;
      var $653=(($652+88)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=(($654+($651<<2))|0);
      HEAP32[(($655)>>2)]=$647;
      label = 79; break;
    case 79: 
      label = 90; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $659=$c0;
      var $660=(($659)|(0))==61;
      if ($660) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $662=$i0;
      var $663=$662 >>> 7;
      var $664=$663 & 65535;
      $i1=$664;
      var $665=$i1;
      var $666=$1;
      var $667=(($666+100)|0);
      var $668=HEAP32[(($667)>>2)];
      var $669=(($668+16)|0);
      var $670=HEAP32[(($669)>>2)];
      var $671=(($670+((($665)*(12))&-1))|0);
      var $672=(($671+8)|0);
      var $673=HEAP32[(($672)>>2)];
      var $674=(($673)|(0))==16;
      if ($674) { label = 83; break; } else { label = 85; break; }
    case 83: 
      var $676=$i1;
      var $677=$1;
      var $678=(($677+100)|0);
      var $679=HEAP32[(($678)>>2)];
      var $680=(($679+16)|0);
      var $681=HEAP32[(($680)>>2)];
      var $682=(($681+((($676)*(12))&-1))|0);
      var $683=(($682)|0);
      var $684=$683;
      var $685=HEAP32[(($684)>>2)];
      var $686=$685;
      var $687=(($686+12)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=(($688)|(0))==0;
      if ($689) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $691=$1;
      var $692=(($691+60)|0);
      var $693=HEAP32[(($692)>>2)];
      var $694=((($693)-(1))|0);
      HEAP32[(($692)>>2)]=$694;
      label = 90; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 88; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $700=$1;
      var $701=$2;
      _genop($700, $701);
      label = 90; break;
    case 90: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _lambda_body($s, $tree, $blk) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $idx;
      var $base;
      var $c;
      var $lp;
      var $a;
      var $ma;
      var $oa;
      var $ra;
      var $pa;
      var $ka;
      var $kd;
      var $ba;
      var $pos;
      var $i;
      var $n;
      var $opt;
      var $idx1;
      $1=$s;
      $2=$tree;
      $3=$blk;
      var $4=$1;
      var $5=(($4+124)|0);
      var $6=HEAP32[(($5)>>2)];
      $base=$6;
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$1;
      var $11=$2;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=_scope_new($9, $10, $13);
      $1=$14;
      var $15=$1;
      var $16=(($15+124)|0);
      var $17=HEAP32[(($16)>>2)];
      $idx=$17;
      var $18=$3;
      var $19=(($18)|(0))!=0;
      var $20=$19 ^ 1;
      var $21=(($20)&(1));
      var $22=(($21) & 255);
      var $23=$1;
      var $24=$22 & 1;
      var $25=$23;
      var $26=(($25+69)|0);
      var $27=$24 & 1;
      var $28=$27 << 7;
      var $29=HEAP8[($26)];
      var $30=$29 & 127;
      var $31=$30 | $28;
      HEAP8[($26)]=$31;
      var $32=$3;
      var $33=(($32)|(0))!=0;
      if ($33) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $35=$1;
      var $36=_loop_push($35, 1);
      $lp=$36;
      var $37=$1;
      var $38=_new_label($37);
      var $39=$lp;
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$38;
      label = 3; break;
    case 3: 
      var $42=$2;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      $2=$44;
      var $45=$2;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 4; break; } else { label = 19; break; }
    case 4: 
      var $50=$2;
      var $51=(($50)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=_node_len($54);
      $ma=$55;
      var $56=$2;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      $n=$60;
      label = 5; break;
    case 5: 
      var $62=$n;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $65=$n;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      $n=$67;
      label = 5; break;
    case 7: 
      var $69=$2;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=_node_len($75);
      $oa=$76;
      var $77=$2;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)|(0))!=0;
      var $87=$86 ? 1 : 0;
      $ra=$87;
      var $88=$2;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90+4)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92+4)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=_node_len($98);
      $pa=$99;
      $kd=0;
      $ka=0;
      var $100=$2;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104+4)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|(0))!=0;
      var $112=$111 ? 1 : 0;
      $ba=$112;
      var $113=$ma;
      var $114=$113 & 31;
      var $115=$114 << 18;
      var $116=$oa;
      var $117=$116 & 31;
      var $118=$117 << 13;
      var $119=$115 | $118;
      var $120=$ra;
      var $121=$120 & 1;
      var $122=$121 << 12;
      var $123=$119 | $122;
      var $124=$pa;
      var $125=$124 & 31;
      var $126=$125 << 7;
      var $127=$123 | $126;
      var $128=$ka;
      var $129=$128 & 31;
      var $130=$129 << 2;
      var $131=$127 | $130;
      var $132=$kd;
      var $133=$132 & 1;
      var $134=$133 << 1;
      var $135=$131 | $134;
      var $136=$ba;
      var $137=$136 & 1;
      var $138=$135 | $137;
      $a=$138;
      var $139=$ma;
      var $140=$oa;
      var $141=((($139)+($140))|0);
      var $142=$141 & 63;
      var $143=$142 << 6;
      var $144=$ra;
      var $145=$144 & 1;
      var $146=$145 << 5;
      var $147=$143 | $146;
      var $148=$pa;
      var $149=$148 & 31;
      var $150=$147 | $149;
      var $151=$1;
      var $152=$150 & 32767;
      var $153=$152 << 17;
      var $154=$153 >> 17;
      var $155=$151;
      var $156=(($155+68)|0);
      var $157=$156;
      var $158=$152 & 32767;
      var $159=HEAP32[(($157)>>2)];
      var $160=$159 & -32768;
      var $161=$160 | $158;
      HEAP32[(($157)>>2)]=$161;
      var $162=$1;
      var $163=$a;
      var $164=$163 & 33554431;
      var $165=$164 << 7;
      var $166=38 | $165;
      _genop($162, $166);
      var $167=$1;
      var $168=_new_label($167);
      $pos=$168;
      $i=0;
      label = 8; break;
    case 8: 
      var $170=$i;
      var $171=$oa;
      var $172=(($170)|(0)) < (($171)|(0));
      if ($172) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $174=$1;
      var $175=_new_label($174);
      var $176=$1;
      _genop($176, 4194199);
      label = 10; break;
    case 10: 
      var $178=$i;
      var $179=((($178)+(1))|0);
      $i=$179;
      label = 8; break;
    case 11: 
      var $181=$oa;
      var $182=(($181)|(0)) > 0;
      if ($182) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $184=$1;
      _genop($184, 4194199);
      label = 13; break;
    case 13: 
      var $186=$2;
      var $187=(($186)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188+4)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190)|0);
      var $192=HEAP32[(($191)>>2)];
      $opt=$192;
      $i=0;
      label = 14; break;
    case 14: 
      var $194=$opt;
      var $195=(($194)|(0))!=0;
      if ($195) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $197=$1;
      var $198=$pos;
      var $199=$i;
      var $200=((($198)+($199))|0);
      _dispatch($197, $200);
      var $201=$1;
      var $202=$opt;
      var $203=(($202)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=(($204+4)|0);
      var $206=HEAP32[(($205)>>2)];
      _codegen($201, $206, 1);
      var $207=$1;
      var $208=$opt;
      var $209=(($208)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212;
      var $214=(($213) & 65535);
      var $215=_lv_idx($207, $214);
      $idx1=$215;
      var $216=$1;
      var $217=(($216+56)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=((($218)-(1))|0);
      HEAP32[(($217)>>2)]=$219;
      var $220=$1;
      var $221=$idx1;
      var $222=$221 & 511;
      var $223=$222 << 23;
      var $224=1 | $223;
      var $225=$1;
      var $226=(($225+56)|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=$227 & 511;
      var $229=$228 << 14;
      var $230=$224 | $229;
      _genop_peep($220, $230, 0);
      var $231=$i;
      var $232=((($231)+(1))|0);
      $i=$232;
      var $233=$opt;
      var $234=(($233+4)|0);
      var $235=HEAP32[(($234)>>2)];
      $opt=$235;
      label = 14; break;
    case 16: 
      var $237=$oa;
      var $238=(($237)|(0)) > 0;
      if ($238) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $240=$1;
      var $241=$pos;
      var $242=$i;
      var $243=((($241)+($242))|0);
      _dispatch($240, $243);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $246=$1;
      var $247=$2;
      var $248=(($247+4)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|0);
      var $251=HEAP32[(($250)>>2)];
      _codegen($246, $251, 1);
      var $252=$1;
      var $253=(($252+56)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=((($254)-(1))|0);
      HEAP32[(($253)>>2)]=$255;
      var $256=$1;
      var $257=(($256+60)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258)|(0)) > 0;
      if ($259) { label = 20; break; } else { label = 28; break; }
    case 20: 
      var $261=$1;
      var $262=(($261+60)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=((($263)-(1))|0);
      var $265=$1;
      var $266=(($265+88)|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=(($267+($264<<2))|0);
      var $269=HEAP32[(($268)>>2)];
      $c=$269;
      var $270=$c;
      var $271=$270 & 127;
      var $272=(($271)|(0))!=41;
      if ($272) { label = 23; break; } else { label = 21; break; }
    case 21: 
      var $274=$c;
      var $275=$274 >>> 14;
      var $276=$275 & 511;
      var $277=(($276)|(0))!=0;
      if ($277) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $279=$1;
      var $280=(($279+60)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$1;
      var $283=(($282+64)|0);
      var $284=HEAP32[(($283)>>2)];
      var $285=(($281)|(0))==(($284)|(0));
      if ($285) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $287=$1;
      var $288=(($287+116)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=(($289)|(0))==0;
      if ($290) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $292=$1;
      _genop($292, 5);
      var $293=$1;
      _genop($293, 41);
      label = 26; break;
    case 25: 
      var $295=$1;
      var $296=$1;
      var $297=(($296+56)|0);
      var $298=HEAP32[(($297)>>2)];
      var $299=$298 & 511;
      var $300=$299 << 23;
      var $301=41 | $300;
      _genop_peep($295, $301, 0);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $305=$3;
      var $306=(($305)|(0))!=0;
      if ($306) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $308=$1;
      _loop_pop($308, 0);
      label = 30; break;
    case 30: 
      var $310=$1;
      _scope_finish($310);
      var $311=$idx;
      var $312=$base;
      var $313=((($311)-($312))|0);
      return $313;
    default: assert(0, "bad label: " + label);
  }
}
function _for_body($s, $tree) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $prev;
      var $idx;
      var $base;
      var $lp;
      var $n2;
      var $c;
      $1=$s;
      $2=$tree;
      var $3=$1;
      $prev=$3;
      var $4=$1;
      var $5=(($4+124)|0);
      var $6=HEAP32[(($5)>>2)];
      $base=$6;
      var $7=$1;
      var $8=$2;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      _codegen($7, $12, 1);
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$1;
      var $17=$2;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_scope_new($15, $16, $19);
      $1=$20;
      var $21=$1;
      var $22=(($21+124)|0);
      var $23=HEAP32[(($22)>>2)];
      $idx=$23;
      var $24=$1;
      var $25=_loop_push($24, 2);
      $lp=$25;
      var $26=$1;
      var $27=_new_label($26);
      var $28=$lp;
      var $29=(($28+4)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$2;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      $n2=$32;
      var $33=$n2;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $38=$n2;
      var $39=(($38)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+4)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))!=0;
      if ($43) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $45=$n2;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $50=$1;
      _genop($50, 33554470);
      var $51=$1;
      var $52=$n2;
      var $53=(($52)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|0);
      var $56=HEAP32[(($55)>>2)];
      _gen_assignment($51, $56, 1, 0);
      label = 6; break;
    case 5: 
      var $58=$1;
      _genop($58, 33554470);
      var $59=$1;
      var $60=$n2;
      _gen_vmassignment($59, $60, 1, 1);
      label = 6; break;
    case 6: 
      var $62=$1;
      var $63=$2;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      _codegen($62, $69, 1);
      var $70=$1;
      var $71=(($70+56)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=((($72)-(1))|0);
      HEAP32[(($71)>>2)]=$73;
      var $74=$1;
      var $75=(($74+60)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|(0)) > 0;
      if ($77) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $79=$1;
      var $80=(($79+60)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)-(1))|0);
      var $83=$1;
      var $84=(($83+88)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+($82<<2))|0);
      var $87=HEAP32[(($86)>>2)];
      $c=$87;
      var $88=$c;
      var $89=$88 & 127;
      var $90=(($89)|(0))!=41;
      if ($90) { label = 10; break; } else { label = 8; break; }
    case 8: 
      var $92=$c;
      var $93=$92 >>> 14;
      var $94=$93 & 511;
      var $95=(($94)|(0))!=0;
      if ($95) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $97=$1;
      var $98=(($97+60)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$1;
      var $101=(($100+64)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($99)|(0))==(($102)|(0));
      if ($103) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $105=$1;
      var $106=$1;
      var $107=(($106+56)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 511;
      var $110=$109 << 23;
      var $111=41 | $110;
      _genop_peep($105, $111, 0);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $114=$1;
      _loop_pop($114, 0);
      var $115=$1;
      _scope_finish($115);
      var $116=$prev;
      $1=$116;
      var $117=$1;
      var $118=$1;
      var $119=(($118+56)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120 & 511;
      var $122=$121 << 23;
      var $123=64 | $122;
      var $124=$idx;
      var $125=$base;
      var $126=((($124)-($125))|0);
      var $127=$126 & 16383;
      var $128=$127 << 9;
      var $129=$128 | 256;
      var $130=$123 | $129;
      _genop($117, $130);
      var $131=$1;
      var $132=(($131+56)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($133)-(1))|0);
      HEAP32[(($132)>>2)]=$134;
      var $135=$1;
      var $136=$1;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=_mrb_intern2($138, ((108652)|0), 4);
      var $140=_new_msym($135, $139);
      $idx=$140;
      var $141=$1;
      var $142=$1;
      var $143=(($142+56)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=$144 & 511;
      var $146=$145 << 23;
      var $147=33 | $146;
      var $148=$idx;
      var $149=$148 & 511;
      var $150=$149 << 14;
      var $151=$147 | $150;
      _genop($141, $151);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_call($s, $tree, $name, $sp, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $sym;
      var $idx;
      var $n;
      var $noop;
      var $sendv;
      var $blk;
      var $len=__stackBase__;
      var $name1;
      $1=$s;
      $2=$tree;
      $3=$name;
      $4=$sp;
      $5=$val;
      var $6=$3;
      var $7=(($6 << 16) >> 16);
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$3;
      var $11=(($10 << 16) >> 16);
      var $22 = $11;label = 4; break;
    case 3: 
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18) & 65535);
      var $20=(($19 << 16) >> 16);
      var $22 = $20;label = 4; break;
    case 4: 
      var $22;
      var $23=(($22) & 65535);
      $sym=$23;
      $n=0;
      $noop=0;
      $sendv=0;
      $blk=0;
      var $24=$1;
      var $25=$2;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      _codegen($24, $27, 1);
      var $28=$1;
      var $29=$sym;
      var $30=_new_msym($28, $29);
      $idx=$30;
      var $31=$2;
      var $32=(($31+4)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      $2=$37;
      var $38=$2;
      var $39=(($38)|(0))!=0;
      if ($39) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $41=$1;
      var $42=$2;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=_gen_values($41, $44, 1);
      $n=$45;
      var $46=$n;
      var $47=(($46)|(0)) < 0;
      if ($47) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $sendv=1;
      $noop=1;
      $n=1;
      var $49=$1;
      _push_($49);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $52=$4;
      var $53=(($52)|(0))!=0;
      if ($53) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $55=$sendv;
      var $56=(($55)|(0))!=0;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $58=$1;
      var $59=(($58+56)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=$1;
      var $63=$1;
      var $64=(($63+56)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 & 511;
      var $67=$66 << 23;
      var $68=57 | $67;
      var $69=$4;
      var $70=$69 & 511;
      var $71=$70 << 14;
      var $72=$68 | $71;
      _genop($62, $72);
      var $73=$1;
      _push_($73);
      label = 12; break;
    case 11: 
      var $75=$1;
      var $76=$1;
      var $77=(($76+56)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & 511;
      var $80=$79 << 23;
      var $81=1 | $80;
      var $82=$4;
      var $83=$82 & 511;
      var $84=$83 << 14;
      var $85=$81 | $84;
      _genop($75, $85);
      var $86=$1;
      _push_($86);
      var $87=$n;
      var $88=((($87)+(1))|0);
      $n=$88;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $91=$2;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $94=$2;
      var $95=(($94+4)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=(($96)|(0))!=0;
      if ($97) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $noop=1;
      var $99=$1;
      var $100=$2;
      var $101=(($100+4)|0);
      var $102=HEAP32[(($101)>>2)];
      _codegen($99, $102, 1);
      var $103=$1;
      var $104=(($103+56)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)-(1))|0);
      HEAP32[(($104)>>2)]=$106;
      label = 17; break;
    case 16: 
      var $108=$1;
      var $109=(($108+56)|0);
      var $110=HEAP32[(($109)>>2)];
      $blk=$110;
      label = 17; break;
    case 17: 
      var $112=$n;
      var $113=((($112)+(1))|0);
      var $114=$1;
      var $115=(($114+56)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=((($116)-($113))|0);
      HEAP32[(($115)>>2)]=$117;
      var $118=$1;
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$sym;
      var $122=_mrb_sym2name_len($120, $121, $len);
      $name1=$122;
      var $123=$noop;
      var $124=(($123)|(0))!=0;
      if ($124) { label = 21; break; } else { label = 18; break; }
    case 18: 
      var $126=HEAP32[(($len)>>2)];
      var $127=(($126)|(0))==1;
      if ($127) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $129=$name1;
      var $130=(($129)|0);
      var $131=HEAP8[($130)];
      var $132=(($131 << 24) >> 24);
      var $133=(($132)|(0))==43;
      if ($133) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $135=$1;
      var $136=$1;
      var $137=(($136+56)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 & 511;
      var $140=$139 << 23;
      var $141=44 | $140;
      var $142=$idx;
      var $143=$142 & 511;
      var $144=$143 << 14;
      var $145=$141 | $144;
      var $146=$n;
      var $147=$146 & 127;
      var $148=$147 << 7;
      var $149=$145 | $148;
      var $150=$5;
      _genop_peep($135, $149, $150);
      label = 70; break;
    case 21: 
      var $152=$noop;
      var $153=(($152)|(0))!=0;
      if ($153) { label = 25; break; } else { label = 22; break; }
    case 22: 
      var $155=HEAP32[(($len)>>2)];
      var $156=(($155)|(0))==1;
      if ($156) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $158=$name1;
      var $159=(($158)|0);
      var $160=HEAP8[($159)];
      var $161=(($160 << 24) >> 24);
      var $162=(($161)|(0))==45;
      if ($162) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $164=$1;
      var $165=$1;
      var $166=(($165+56)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167 & 511;
      var $169=$168 << 23;
      var $170=46 | $169;
      var $171=$idx;
      var $172=$171 & 511;
      var $173=$172 << 14;
      var $174=$170 | $173;
      var $175=$n;
      var $176=$175 & 127;
      var $177=$176 << 7;
      var $178=$174 | $177;
      var $179=$5;
      _genop_peep($164, $178, $179);
      label = 69; break;
    case 25: 
      var $181=$noop;
      var $182=(($181)|(0))!=0;
      if ($182) { label = 29; break; } else { label = 26; break; }
    case 26: 
      var $184=HEAP32[(($len)>>2)];
      var $185=(($184)|(0))==1;
      if ($185) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $187=$name1;
      var $188=(($187)|0);
      var $189=HEAP8[($188)];
      var $190=(($189 << 24) >> 24);
      var $191=(($190)|(0))==42;
      if ($191) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $193=$1;
      var $194=$1;
      var $195=(($194+56)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$196 & 511;
      var $198=$197 << 23;
      var $199=48 | $198;
      var $200=$idx;
      var $201=$200 & 511;
      var $202=$201 << 14;
      var $203=$199 | $202;
      var $204=$n;
      var $205=$204 & 127;
      var $206=$205 << 7;
      var $207=$203 | $206;
      _genop($193, $207);
      label = 68; break;
    case 29: 
      var $209=$noop;
      var $210=(($209)|(0))!=0;
      if ($210) { label = 33; break; } else { label = 30; break; }
    case 30: 
      var $212=HEAP32[(($len)>>2)];
      var $213=(($212)|(0))==1;
      if ($213) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $215=$name1;
      var $216=(($215)|0);
      var $217=HEAP8[($216)];
      var $218=(($217 << 24) >> 24);
      var $219=(($218)|(0))==47;
      if ($219) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $221=$1;
      var $222=$1;
      var $223=(($222+56)|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=$224 & 511;
      var $226=$225 << 23;
      var $227=49 | $226;
      var $228=$idx;
      var $229=$228 & 511;
      var $230=$229 << 14;
      var $231=$227 | $230;
      var $232=$n;
      var $233=$232 & 127;
      var $234=$233 << 7;
      var $235=$231 | $234;
      _genop($221, $235);
      label = 67; break;
    case 33: 
      var $237=$noop;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 37; break; } else { label = 34; break; }
    case 34: 
      var $240=HEAP32[(($len)>>2)];
      var $241=(($240)|(0))==1;
      if ($241) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $243=$name1;
      var $244=(($243)|0);
      var $245=HEAP8[($244)];
      var $246=(($245 << 24) >> 24);
      var $247=(($246)|(0))==60;
      if ($247) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $249=$1;
      var $250=$1;
      var $251=(($250+56)|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=$252 & 511;
      var $254=$253 << 23;
      var $255=51 | $254;
      var $256=$idx;
      var $257=$256 & 511;
      var $258=$257 << 14;
      var $259=$255 | $258;
      var $260=$n;
      var $261=$260 & 127;
      var $262=$261 << 7;
      var $263=$259 | $262;
      _genop($249, $263);
      label = 66; break;
    case 37: 
      var $265=$noop;
      var $266=(($265)|(0))!=0;
      if ($266) { label = 42; break; } else { label = 38; break; }
    case 38: 
      var $268=HEAP32[(($len)>>2)];
      var $269=(($268)|(0))==2;
      if ($269) { label = 39; break; } else { label = 42; break; }
    case 39: 
      var $271=$name1;
      var $272=(($271)|0);
      var $273=HEAP8[($272)];
      var $274=(($273 << 24) >> 24);
      var $275=(($274)|(0))==60;
      if ($275) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $277=$name1;
      var $278=(($277+1)|0);
      var $279=HEAP8[($278)];
      var $280=(($279 << 24) >> 24);
      var $281=(($280)|(0))==61;
      if ($281) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $283=$1;
      var $284=$1;
      var $285=(($284+56)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=$286 & 511;
      var $288=$287 << 23;
      var $289=52 | $288;
      var $290=$idx;
      var $291=$290 & 511;
      var $292=$291 << 14;
      var $293=$289 | $292;
      var $294=$n;
      var $295=$294 & 127;
      var $296=$295 << 7;
      var $297=$293 | $296;
      _genop($283, $297);
      label = 65; break;
    case 42: 
      var $299=$noop;
      var $300=(($299)|(0))!=0;
      if ($300) { label = 46; break; } else { label = 43; break; }
    case 43: 
      var $302=HEAP32[(($len)>>2)];
      var $303=(($302)|(0))==1;
      if ($303) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $305=$name1;
      var $306=(($305)|0);
      var $307=HEAP8[($306)];
      var $308=(($307 << 24) >> 24);
      var $309=(($308)|(0))==62;
      if ($309) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $311=$1;
      var $312=$1;
      var $313=(($312+56)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & 511;
      var $316=$315 << 23;
      var $317=53 | $316;
      var $318=$idx;
      var $319=$318 & 511;
      var $320=$319 << 14;
      var $321=$317 | $320;
      var $322=$n;
      var $323=$322 & 127;
      var $324=$323 << 7;
      var $325=$321 | $324;
      _genop($311, $325);
      label = 64; break;
    case 46: 
      var $327=$noop;
      var $328=(($327)|(0))!=0;
      if ($328) { label = 51; break; } else { label = 47; break; }
    case 47: 
      var $330=HEAP32[(($len)>>2)];
      var $331=(($330)|(0))==2;
      if ($331) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $333=$name1;
      var $334=(($333)|0);
      var $335=HEAP8[($334)];
      var $336=(($335 << 24) >> 24);
      var $337=(($336)|(0))==62;
      if ($337) { label = 49; break; } else { label = 51; break; }
    case 49: 
      var $339=$name1;
      var $340=(($339+1)|0);
      var $341=HEAP8[($340)];
      var $342=(($341 << 24) >> 24);
      var $343=(($342)|(0))==61;
      if ($343) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $345=$1;
      var $346=$1;
      var $347=(($346+56)|0);
      var $348=HEAP32[(($347)>>2)];
      var $349=$348 & 511;
      var $350=$349 << 23;
      var $351=54 | $350;
      var $352=$idx;
      var $353=$352 & 511;
      var $354=$353 << 14;
      var $355=$351 | $354;
      var $356=$n;
      var $357=$356 & 127;
      var $358=$357 << 7;
      var $359=$355 | $358;
      _genop($345, $359);
      label = 63; break;
    case 51: 
      var $361=$noop;
      var $362=(($361)|(0))!=0;
      if ($362) { label = 56; break; } else { label = 52; break; }
    case 52: 
      var $364=HEAP32[(($len)>>2)];
      var $365=(($364)|(0))==2;
      if ($365) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $367=$name1;
      var $368=(($367)|0);
      var $369=HEAP8[($368)];
      var $370=(($369 << 24) >> 24);
      var $371=(($370)|(0))==61;
      if ($371) { label = 54; break; } else { label = 56; break; }
    case 54: 
      var $373=$name1;
      var $374=(($373+1)|0);
      var $375=HEAP8[($374)];
      var $376=(($375 << 24) >> 24);
      var $377=(($376)|(0))==61;
      if ($377) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $379=$1;
      var $380=$1;
      var $381=(($380+56)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$382 & 511;
      var $384=$383 << 23;
      var $385=50 | $384;
      var $386=$idx;
      var $387=$386 & 511;
      var $388=$387 << 14;
      var $389=$385 | $388;
      var $390=$n;
      var $391=$390 & 127;
      var $392=$391 << 7;
      var $393=$389 | $392;
      _genop($379, $393);
      label = 62; break;
    case 56: 
      var $395=$sendv;
      var $396=(($395)|(0))!=0;
      if ($396) { label = 57; break; } else { label = 58; break; }
    case 57: 
      $n=127;
      label = 58; break;
    case 58: 
      var $399=$blk;
      var $400=(($399)|(0)) > 0;
      if ($400) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $402=$1;
      var $403=$1;
      var $404=(($403+56)|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=$405 & 511;
      var $407=$406 << 23;
      var $408=32 | $407;
      var $409=$idx;
      var $410=$409 & 511;
      var $411=$410 << 14;
      var $412=$408 | $411;
      var $413=$n;
      var $414=$413 & 127;
      var $415=$414 << 7;
      var $416=$412 | $415;
      _genop($402, $416);
      label = 61; break;
    case 60: 
      var $418=$1;
      var $419=$1;
      var $420=(($419+56)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=$421 & 511;
      var $423=$422 << 23;
      var $424=33 | $423;
      var $425=$idx;
      var $426=$425 & 511;
      var $427=$426 << 14;
      var $428=$424 | $427;
      var $429=$n;
      var $430=$429 & 127;
      var $431=$430 << 7;
      var $432=$428 | $431;
      _genop($418, $432);
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $443=$5;
      var $444=(($443)|(0))!=0;
      if ($444) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $446=$1;
      _push_($446);
      label = 72; break;
    case 72: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _new_sym900($s, $sym) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$s;
      $3=$sym;
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=$2;
      var $7=(($6+100)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+40)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($5)>>>(0)) < (($10)>>>(0));
      if ($11) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $13=$i;
      var $14=$2;
      var $15=(($14+100)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+20)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+($13<<1))|0);
      var $20=HEAP16[(($19)>>1)];
      var $21=(($20 << 16) >> 16);
      var $22=$3;
      var $23=(($22 << 16) >> 16);
      var $24=(($21)|(0))==(($23)|(0));
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=$i;
      $1=$26;
      label = 15; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      label = 2; break;
    case 7: 
      var $32=$2;
      var $33=(($32+100)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+40)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)>>>(0)) > 125;
      if ($37) { label = 8; break; } else { label = 14; break; }
    case 8: 
      var $39=$2;
      var $40=(($39+100)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41+40)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)>>>(0)) < 256;
      if ($44) { label = 9; break; } else { label = 14; break; }
    case 9: 
      var $46=$2;
      var $47=$2;
      var $48=(($47+100)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=_codegen_realloc($46, $52, 131072);
      var $54=$53;
      var $55=$2;
      var $56=(($55+100)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+20)|0);
      HEAP32[(($58)>>2)]=$54;
      $i=0;
      label = 10; break;
    case 10: 
      var $60=$i;
      var $61=$2;
      var $62=(($61+100)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+40)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(((256)-($65))|0);
      var $67=(($60)>>>(0)) < (($66)>>>(0));
      if ($67) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $69=$i;
      var $70=$2;
      var $71=(($70+100)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+40)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=((($69)+($74))|0);
      var $76=$2;
      var $77=(($76+100)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+20)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80+($75<<1))|0);
      HEAP16[(($81)>>1)]=0;
      label = 12; break;
    case 12: 
      var $83=$i;
      var $84=((($83)+(1))|0);
      $i=$84;
      label = 10; break;
    case 13: 
      var $86=$2;
      var $87=(($86+100)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+40)|0);
      HEAP32[(($89)>>2)]=256;
      label = 14; break;
    case 14: 
      var $91=$3;
      var $92=$2;
      var $93=(($92+100)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94+40)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$2;
      var $98=(($97+100)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+($96<<1))|0);
      HEAP16[(($102)>>1)]=$91;
      var $103=$2;
      var $104=(($103+100)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+40)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)+(1))|0);
      HEAP32[(($106)>>2)]=$108;
      $1=$107;
      label = 15; break;
    case 15: 
      var $110=$1;
      return $110;
    default: assert(0, "bad label: " + label);
  }
}
function _nosplat($t) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$t;
      label = 2; break;
    case 2: 
      var $4=$2;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $7=$2;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12)|(0))==66;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 7; break;
    case 5: 
      var $16=$2;
      var $17=(($16+4)|0);
      var $18=HEAP32[(($17)>>2)];
      $2=$18;
      label = 2; break;
    case 6: 
      $1=1;
      label = 7; break;
    case 7: 
      var $21=$1;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _lv_idx($s, $id) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $lv;
      var $n;
      $2=$s;
      $3=$id;
      var $4=$2;
      var $5=(($4+52)|0);
      var $6=HEAP32[(($5)>>2)];
      $lv=$6;
      $n=1;
      label = 2; break;
    case 2: 
      var $8=$lv;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $11=$lv;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14) & 65535);
      var $16=(($15 << 16) >> 16);
      var $17=$3;
      var $18=(($17 << 16) >> 16);
      var $19=(($16)|(0))==(($18)|(0));
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$n;
      $1=$21;
      label = 7; break;
    case 5: 
      var $23=$n;
      var $24=((($23)+(1))|0);
      $n=$24;
      var $25=$lv;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      $lv=$27;
      label = 2; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $30=$1;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_values($s, $t, $val) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      $2=$s;
      $3=$t;
      $4=$val;
      $n=0;
      label = 2; break;
    case 2: 
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 19; break; }
    case 3: 
      var $9=$n;
      var $10=(($9)|(0)) >= 127;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=$3;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17)|(0))==66;
      if ($18) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $20=$4;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 13; break; }
    case 6: 
      var $23=$n;
      var $24=$2;
      var $25=(($24+56)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=((($26)-($23))|0);
      HEAP32[(($25)>>2)]=$27;
      var $28=$2;
      var $29=$2;
      var $30=(($29+56)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 511;
      var $33=$32 << 23;
      var $34=55 | $33;
      var $35=$2;
      var $36=(($35+56)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37 & 511;
      var $39=$38 << 14;
      var $40=$34 | $39;
      var $41=$n;
      var $42=$41 & 127;
      var $43=$42 << 7;
      var $44=$40 | $43;
      _genop($28, $44);
      var $45=$2;
      _push_($45);
      var $46=$2;
      var $47=$3;
      var $48=(($47)|0);
      var $49=HEAP32[(($48)>>2)];
      _codegen($46, $49, 1);
      var $50=$2;
      var $51=(($50+56)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=((($52)-(1))|0);
      HEAP32[(($51)>>2)]=$53;
      var $54=$2;
      var $55=(($54+56)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=((($56)-(1))|0);
      HEAP32[(($55)>>2)]=$57;
      var $58=$2;
      var $59=$2;
      var $60=(($59+56)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$61 & 511;
      var $63=$62 << 23;
      var $64=56 | $63;
      var $65=$2;
      var $66=(($65+56)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=((($67)+(1))|0);
      var $69=$68 & 511;
      var $70=$69 << 14;
      var $71=$64 | $70;
      _genop($58, $71);
      var $72=$3;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      $3=$74;
      label = 7; break;
    case 7: 
      var $76=$3;
      var $77=(($76)|(0))!=0;
      if ($77) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $79=$2;
      _push_($79);
      var $80=$2;
      var $81=$3;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      _codegen($80, $83, 1);
      var $84=$2;
      var $85=(($84+56)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=((($86)-(1))|0);
      HEAP32[(($85)>>2)]=$87;
      var $88=$2;
      var $89=(($88+56)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=((($90)-(1))|0);
      HEAP32[(($89)>>2)]=$91;
      var $92=$3;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96;
      var $98=(($97)|(0))==66;
      if ($98) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $100=$2;
      var $101=$2;
      var $102=(($101+56)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 & 511;
      var $105=$104 << 23;
      var $106=56 | $105;
      var $107=$2;
      var $108=(($107+56)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=((($109)+(1))|0);
      var $111=$110 & 511;
      var $112=$111 << 14;
      var $113=$106 | $112;
      _genop($100, $113);
      label = 11; break;
    case 10: 
      var $115=$2;
      var $116=$2;
      var $117=(($116+56)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$118 & 511;
      var $120=$119 << 23;
      var $121=57 | $120;
      var $122=$2;
      var $123=(($122+56)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=((($124)+(1))|0);
      var $126=$125 & 511;
      var $127=$126 << 14;
      var $128=$121 | $127;
      _genop($115, $128);
      label = 11; break;
    case 11: 
      var $130=$3;
      var $131=(($130+4)|0);
      var $132=HEAP32[(($131)>>2)];
      $3=$132;
      label = 7; break;
    case 12: 
      label = 17; break;
    case 13: 
      var $135=$2;
      var $136=$3;
      var $137=(($136)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+4)|0);
      var $140=HEAP32[(($139)>>2)];
      _codegen($135, $140, 0);
      var $141=$3;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      $3=$143;
      label = 14; break;
    case 14: 
      var $145=$3;
      var $146=(($145)|(0))!=0;
      if ($146) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $148=$2;
      var $149=$3;
      var $150=(($149)|0);
      var $151=HEAP32[(($150)>>2)];
      _codegen($148, $151, 0);
      var $152=$3;
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      $3=$154;
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      $1=-1;
      label = 20; break;
    case 18: 
      var $158=$2;
      var $159=$3;
      var $160=(($159)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$4;
      _codegen($158, $161, $162);
      var $163=$n;
      var $164=((($163)+(1))|0);
      $n=$164;
      var $165=$3;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      $3=$167;
      label = 2; break;
    case 19: 
      var $169=$n;
      $1=$169;
      label = 20; break;
    case 20: 
      var $171=$1;
      return $171;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_vmassignment($s, $tree, $rhs, $val) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $post;
      var $t;
      var $p;
      $1=$s;
      $2=$tree;
      $3=$rhs;
      $4=$val;
      $n=0;
      $post=0;
      var $5=$2;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $10=$2;
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      $t=$12;
      $n=0;
      label = 3; break;
    case 3: 
      var $14=$t;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=(($18+56)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & 511;
      var $22=$21 << 23;
      var $23=58 | $22;
      var $24=$3;
      var $25=$24 & 511;
      var $26=$25 << 14;
      var $27=$23 | $26;
      var $28=$n;
      var $29=$28 & 127;
      var $30=$29 << 7;
      var $31=$27 | $30;
      _genop($17, $31);
      var $32=$1;
      var $33=$t;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$1;
      var $37=(($36+56)|0);
      var $38=HEAP32[(($37)>>2)];
      _gen_assignment($32, $35, $38, 0);
      var $39=$n;
      var $40=((($39)+(1))|0);
      $n=$40;
      var $41=$t;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      $t=$43;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $46=$2;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      $t=$48;
      var $49=$t;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 7; break; } else { label = 23; break; }
    case 7: 
      var $52=$t;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|(0))!=0;
      if ($55) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $57=$t;
      var $58=(($57+4)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|0);
      var $61=HEAP32[(($60)>>2)];
      $p=$61;
      label = 9; break;
    case 9: 
      var $63=$p;
      var $64=(($63)|(0))!=0;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $66=$post;
      var $67=((($66)+(1))|0);
      $post=$67;
      var $68=$p;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      $p=$70;
      label = 9; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $73=$4;
      var $74=(($73)|(0))!=0;
      if ($74) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $76=$1;
      var $77=$1;
      var $78=(($77+56)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$79 & 511;
      var $81=$80 << 23;
      var $82=1 | $81;
      var $83=$3;
      var $84=$83 & 511;
      var $85=$84 << 14;
      var $86=$82 | $85;
      _genop($76, $86);
      var $87=$1;
      _push_($87);
      label = 14; break;
    case 14: 
      var $89=$1;
      var $90=(($89+56)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=((($91)-(1))|0);
      HEAP32[(($90)>>2)]=$92;
      var $93=$1;
      var $94=$1;
      var $95=(($94+56)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$96 & 511;
      var $98=$97 << 23;
      var $99=60 | $98;
      var $100=$n;
      var $101=$100 & 511;
      var $102=$101 << 14;
      var $103=$99 | $102;
      var $104=$post;
      var $105=$104 & 127;
      var $106=$105 << 7;
      var $107=$103 | $106;
      _genop($93, $107);
      $n=1;
      var $108=$t;
      var $109=(($108)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|(0))!=0;
      if ($111) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $113=$1;
      var $114=$t;
      var $115=(($114)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$1;
      var $118=(($117+56)|0);
      var $119=HEAP32[(($118)>>2)];
      _gen_assignment($113, $116, $119, 0);
      label = 16; break;
    case 16: 
      var $121=$t;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123)|(0))!=0;
      if ($124) { label = 17; break; } else { label = 22; break; }
    case 17: 
      var $126=$t;
      var $127=(($126+4)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130)|(0))!=0;
      if ($131) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $133=$t;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      $t=$137;
      label = 19; break;
    case 19: 
      var $139=$t;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $142=$1;
      var $143=$t;
      var $144=(($143)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$1;
      var $147=(($146+56)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$n;
      var $150=((($148)+($149))|0);
      _gen_assignment($142, $145, $150, 0);
      var $151=$t;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      $t=$153;
      var $154=$n;
      var $155=((($154)+(1))|0);
      $n=$155;
      label = 19; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _loop_break($s, $tree) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $loop;
      var $tmp;
      $1=$s;
      $2=$tree;
      var $3=$1;
      var $4=(($3+72)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$1;
      var $9=$2;
      _codegen($8, $9, 0);
      var $10=$1;
      _raise_error($10, ((109240)|0));
      label = 19; break;
    case 3: 
      var $12=$2;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$1;
      var $16=$2;
      _codegen($15, $16, 1);
      var $17=$1;
      var $18=(($17+56)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((($19)-(1))|0);
      HEAP32[(($18)>>2)]=$20;
      label = 5; break;
    case 5: 
      var $22=$1;
      var $23=(($22+72)|0);
      var $24=HEAP32[(($23)>>2)];
      $loop=$24;
      label = 6; break;
    case 6: 
      var $26=$loop;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==3;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$1;
      _genop_peep($31, 8388636, 0);
      var $32=$loop;
      var $33=(($32+24)|0);
      var $34=HEAP32[(($33)>>2)];
      $loop=$34;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $37=$loop;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==4;
      if ($40) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $42=$loop;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      $loop=$44;
      label = 9; break;
    case 11: 
      var $46=$loop;
      var $47=(($46)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))==0;
      if ($49) { label = 12; break; } else { label = 17; break; }
    case 12: 
      var $51=$1;
      var $52=(($51+76)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$1;
      var $55=(($54+72)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+20)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($53)|(0)) > (($58)|(0));
      if ($59) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $61=$1;
      var $62=$1;
      var $63=(($62+76)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$1;
      var $66=(($65+72)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+20)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($64)-($69))|0);
      var $71=$70 & 511;
      var $72=$71 << 23;
      var $73=31 | $72;
      _genop_peep($61, $73, 0);
      label = 14; break;
    case 14: 
      var $75=$2;
      var $76=(($75)|(0))!=0;
      if ($76) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $78=$1;
      var $79=$loop;
      var $80=(($79+16)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81 & 511;
      var $83=$82 << 23;
      var $84=1 | $83;
      var $85=$1;
      var $86=(($85+56)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=$87 & 511;
      var $89=$88 << 14;
      var $90=$84 | $89;
      _genop_peep($78, $90, 0);
      label = 16; break;
    case 16: 
      var $92=$1;
      var $93=_new_label($92);
      $tmp=$93;
      var $94=$1;
      var $95=$loop;
      var $96=(($95+12)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=((($97)+(32767))|0);
      var $99=$98 & 65535;
      var $100=$99 << 7;
      var $101=23 | $100;
      _genop($94, $101);
      var $102=$tmp;
      var $103=$loop;
      var $104=(($103+12)|0);
      HEAP32[(($104)>>2)]=$102;
      label = 18; break;
    case 17: 
      var $106=$1;
      var $107=$1;
      var $108=(($107+56)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$109 & 511;
      var $111=$110 << 23;
      var $112=41 | $111;
      var $113=$112 | 16384;
      _genop($106, $113);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _raise_error($s, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $idx;
  var $3=__stackBase__;
  $1=$s;
  $2=$msg;
  var $4=$1;
  var $5=$1;
  var $6=(($5)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$2;
  _mrb_str_new_cstr($3, $7, $8);
  var $9=_new_lit($4, $3);
  $idx=$9;
  var $10=$1;
  var $11=$idx;
  var $12=$11 & 65535;
  var $13=$12 << 7;
  var $14=8388683 | $13;
  _genop($10, $14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value901($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _readint_mrb_int($s, $p, $base, $neg, $overflow) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $e;
      var $result;
      var $n;
      var $c;
      $2=$s;
      $3=$p;
      $4=$base;
      $5=$neg;
      $6=$overflow;
      var $7=$3;
      var $8=$3;
      var $9=_strlen($8);
      var $10=(($7+$9)|0);
      $e=$10;
      $result=0;
      var $11=$3;
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|(0))==43;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$3;
      var $17=(($16+1)|0);
      $3=$17;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $20=$3;
      var $21=$e;
      var $22=(($20)>>>(0)) < (($21)>>>(0));
      if ($22) { label = 5; break; } else { label = 21; break; }
    case 5: 
      var $24=$3;
      var $25=HEAP8[($24)];
      $c=$25;
      var $26=$c;
      var $27=(($26)&(255));
      var $28=_tolower($27);
      var $29=(($28) & 255);
      $c=$29;
      $n=0;
      label = 6; break;
    case 6: 
      var $31=$n;
      var $32=$4;
      var $33=(($31)|(0)) < (($32)|(0));
      if ($33) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $35=$n;
      var $36=((79872+$35)|0);
      var $37=HEAP8[($36)];
      var $38=(($37 << 24) >> 24);
      var $39=$c;
      var $40=(($39 << 24) >> 24);
      var $41=(($38)|(0))==(($40)|(0));
      if ($41) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $45=$n;
      var $46=((($45)+(1))|0);
      $n=$46;
      label = 6; break;
    case 11: 
      var $48=$n;
      var $49=$4;
      var $50=(($48)|(0))==(($49)|(0));
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $52=$2;
      _codegen_error($52, ((109736)|0));
      label = 13; break;
    case 13: 
      var $54=$5;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $57=$n;
      var $58=((($57)-(2147483648))|0);
      var $59=$4;
      var $60=((((($58)|(0)))/((($59)|(0))))&-1);
      var $61=$result;
      var $62=(($60)|(0)) > (($61)|(0));
      if ($62) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $64=$6;
      HEAP32[(($64)>>2)]=1;
      $1=0;
      label = 22; break;
    case 16: 
      var $66=$4;
      var $67=$result;
      var $68=Math.imul($67,$66);
      $result=$68;
      var $69=$n;
      var $70=$result;
      var $71=((($70)-($69))|0);
      $result=$71;
      label = 20; break;
    case 17: 
      var $73=$n;
      var $74=(((2147483647)-($73))|0);
      var $75=$4;
      var $76=((((($74)|(0)))/((($75)|(0))))&-1);
      var $77=$result;
      var $78=(($76)|(0)) < (($77)|(0));
      if ($78) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $80=$6;
      HEAP32[(($80)>>2)]=1;
      $1=0;
      label = 22; break;
    case 19: 
      var $82=$4;
      var $83=$result;
      var $84=Math.imul($83,$82);
      $result=$84;
      var $85=$n;
      var $86=$result;
      var $87=((($86)+($85))|0);
      $result=$87;
      label = 20; break;
    case 20: 
      var $89=$3;
      var $90=(($89+1)|0);
      $3=$90;
      label = 4; break;
    case 21: 
      var $92=$6;
      HEAP32[(($92)>>2)]=0;
      var $93=$result;
      $1=$93;
      label = 22; break;
    case 22: 
      var $95=$1;
      return $95;
    default: assert(0, "bad label: " + label);
  }
}
function _node_len($tree) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $n;
      $1=$tree;
      $n=0;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)|(0))!=0;
      if ($4) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $6=$n;
      var $7=((($6)+(1))|0);
      $n=$7;
      var $8=$1;
      var $9=(($8+4)|0);
      var $10=HEAP32[(($9)>>2)];
      $1=$10;
      label = 2; break;
    case 4: 
      var $12=$n;
      return $12;
    default: assert(0, "bad label: " + label);
  }
}
function _calc_crc_16_ccitt($src, $nbytes, $crc) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $ibyte;
      var $ibit;
      var $crcwk;
      $1=$src;
      $2=$nbytes;
      $3=$crc;
      var $4=$3;
      var $5=(($4)&(65535));
      var $6=$5 << 8;
      $crcwk=$6;
      $ibyte=0;
      label = 2; break;
    case 2: 
      var $8=$ibyte;
      var $9=$2;
      var $10=(($8)>>>(0)) < (($9)>>>(0));
      if ($10) { label = 3; break; } else { label = 11; break; }
    case 3: 
      var $12=$1;
      var $13=(($12+1)|0);
      $1=$13;
      var $14=HEAP8[($12)];
      var $15=(($14)&(255));
      var $16=$crcwk;
      var $17=$16 | $15;
      $crcwk=$17;
      $ibit=0;
      label = 4; break;
    case 4: 
      var $19=$ibit;
      var $20=(($19)>>>(0)) < 8;
      if ($20) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $22=$crcwk;
      var $23=$22 << 1;
      $crcwk=$23;
      var $24=$crcwk;
      var $25=$24 & 16777216;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$crcwk;
      var $29=$28 ^ 17834240;
      $crcwk=$29;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $32=$ibit;
      var $33=((($32)+(1))|0);
      $ibit=$33;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $36=$ibyte;
      var $37=((($36)+(1))|0);
      $ibyte=$37;
      label = 2; break;
    case 11: 
      var $39=$crcwk;
      var $40=$39 >>> 8;
      var $41=(($40) & 65535);
      return $41;
    default: assert(0, "bad label: " + label);
  }
}
function _readint_float($s, $p, $base) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $e;
      var $f;
      var $n;
      var $c;
      $1=$s;
      $2=$p;
      $3=$base;
      var $4=$2;
      var $5=$2;
      var $6=_strlen($5);
      var $7=(($4+$6)|0);
      $e=$7;
      $f=0;
      var $8=$2;
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24);
      var $11=(($10)|(0))==43;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$2;
      var $14=(($13+1)|0);
      $2=$14;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $17=$2;
      var $18=$e;
      var $19=(($17)>>>(0)) < (($18)>>>(0));
      if ($19) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $21=$2;
      var $22=HEAP8[($21)];
      $c=$22;
      var $23=$c;
      var $24=(($23)&(255));
      var $25=_tolower($24);
      var $26=(($25) & 255);
      $c=$26;
      $n=0;
      label = 6; break;
    case 6: 
      var $28=$n;
      var $29=$3;
      var $30=(($28)|(0)) < (($29)|(0));
      if ($30) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $32=$n;
      var $33=((79872+$32)|0);
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      var $36=$c;
      var $37=(($36 << 24) >> 24);
      var $38=(($35)|(0))==(($37)|(0));
      if ($38) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $40=$3;
      var $41=(($40)|(0));
      var $42=$f;
      var $43=($42)*($41);
      $f=$43;
      var $44=$n;
      var $45=(($44)|(0));
      var $46=$f;
      var $47=($46)+($45);
      $f=$47;
      label = 11; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $50=$n;
      var $51=((($50)+(1))|0);
      $n=$51;
      label = 6; break;
    case 11: 
      var $53=$n;
      var $54=$3;
      var $55=(($53)|(0))==(($54)|(0));
      if ($55) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $57=$1;
      _codegen_error($57, ((109736)|0));
      label = 13; break;
    case 13: 
      var $59=$2;
      var $60=(($59+1)|0);
      $2=$60;
      label = 4; break;
    case 14: 
      var $62=$f;
      return $62;
    default: assert(0, "bad label: " + label);
  }
}
function _new_lit($s, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $pv=__stackBase__;
      var $len;
      $2=$s;
      var $3=(($val+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==16) {
        label = 2; break;
      }
      else if ((($4)|(0))==6) {
        label = 13; break;
      }
      else {
      label = 14; break;
      }
    case 2: 
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=$2;
      var $9=(($8+100)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10+36)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($7)>>>(0)) < (($12)>>>(0));
      if ($13) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $15=$i;
      var $16=$2;
      var $17=(($16+100)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+((($15)*(12))&-1))|0);
      var $22=$pv;
      var $23=$21;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=(($pv+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=16;
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 11; break;
    case 6: 
      var $29=(($pv)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      $len=$34;
      var $35=(($val)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($34)|(0))!=(($40)|(0));
      if ($41) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $44=(($pv)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=(($47+20)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($val)|0);
      var $51=$50;
      var $52=HEAP32[(($51)>>2)];
      var $53=$52;
      var $54=(($53+20)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$len;
      var $57=_memcmp($49, $55, $56);
      var $58=(($57)|(0))==0;
      if ($58) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $60=$i;
      $1=$60;
      label = 24; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $63=$i;
      var $64=((($63)+(1))|0);
      $i=$64;
      label = 3; break;
    case 12: 
      label = 21; break;
    case 13: 
      label = 14; break;
    case 14: 
      $i=0;
      label = 15; break;
    case 15: 
      var $69=$i;
      var $70=$2;
      var $71=(($70+100)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+36)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($69)>>>(0)) < (($74)>>>(0));
      if ($75) { label = 16; break; } else { label = 20; break; }
    case 16: 
      var $77=$2;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$i;
      var $81=$2;
      var $82=(($81+100)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+16)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+((($80)*(12))&-1))|0);
      var $87=_mrb_obj_equal($79, $86, $val);
      var $88=(($87)|(0))!=0;
      if ($88) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $90=$i;
      $1=$90;
      label = 24; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $93=$i;
      var $94=((($93)+(1))|0);
      $i=$94;
      label = 15; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $97=$2;
      var $98=(($97+100)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+36)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$2;
      var $103=(($102+104)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)|(0))==(($104)|(0));
      if ($105) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $107=$2;
      var $108=(($107+104)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=($109<<1);
      HEAP32[(($108)>>2)]=$110;
      var $111=$2;
      var $112=$2;
      var $113=(($112+100)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($114+16)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$116;
      var $118=$2;
      var $119=(($118+104)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($120)*(12))&-1);
      var $122=_codegen_realloc($111, $117, $121);
      var $123=$122;
      var $124=$2;
      var $125=(($124+100)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+16)|0);
      HEAP32[(($127)>>2)]=$123;
      label = 23; break;
    case 23: 
      var $129=$2;
      var $130=(($129+100)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131+36)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$2;
      var $135=(($134+100)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+16)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138+((($133)*(12))&-1))|0);
      var $140=$139;
      var $141=$val;
      assert(12 % 1 === 0);HEAP32[(($140)>>2)]=HEAP32[(($141)>>2)];HEAP32[((($140)+(4))>>2)]=HEAP32[((($141)+(4))>>2)];HEAP32[((($140)+(8))>>2)]=HEAP32[((($141)+(8))>>2)];
      var $142=$2;
      var $143=(($142+100)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($144+36)|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=((($146)+(1))|0);
      HEAP32[(($145)>>2)]=$147;
      $i=$146;
      var $148=$i;
      $1=$148;
      label = 24; break;
    case 24: 
      var $150=$1;
      STACKTOP = __stackBase__;
      return $150;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value902($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gen_literal_array($s, $tree, $sym, $val) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $j;
      $1=$s;
      $2=$tree;
      $3=$sym;
      $4=$val;
      var $5=$4;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 23; break; }
    case 2: 
      $i=0;
      $j=0;
      label = 3; break;
    case 3: 
      var $9=$2;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 18; break; }
    case 4: 
      var $12=$2;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      if ((($17)|(0))==55) {
        label = 5; break;
      }
      else if ((($17)|(0))==17) {
        label = 9; break;
      }
      else if ((($17)|(0))==100) {
        label = 10; break;
      }
      else {
      label = 15; break;
      }
    case 5: 
      var $19=$2;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))==0;
      if ($22) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $24=$2;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31)|(0))==0;
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 15; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$1;
      var $37=$2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      _codegen($36, $39, 1);
      var $40=$j;
      var $41=((($40)+(1))|0);
      $j=$41;
      label = 15; break;
    case 10: 
      var $43=$j;
      var $44=(($43)|(0)) > 0;
      if ($44) { label = 11; break; } else { label = 14; break; }
    case 11: 
      $j=0;
      var $46=$i;
      var $47=((($46)+(1))|0);
      $i=$47;
      var $48=$3;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $51=$1;
      _gen_send_intern($51);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $55=$j;
      var $56=(($55)|(0)) >= 2;
      if ($56) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $58=$1;
      var $59=(($58+56)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(1))|0);
      HEAP32[(($59)>>2)]=$61;
      var $62=$1;
      var $63=(($62+56)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=((($64)-(1))|0);
      HEAP32[(($63)>>2)]=$65;
      var $66=$1;
      var $67=$1;
      var $68=(($67+56)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & 511;
      var $71=$70 << 23;
      var $72=62 | $71;
      var $73=$1;
      var $74=(($73+56)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)+(1))|0);
      var $77=$76 & 511;
      var $78=$77 << 14;
      var $79=$72 | $78;
      _genop_peep($66, $79, 1);
      var $80=$1;
      _push_($80);
      $j=1;
      label = 17; break;
    case 17: 
      var $82=$2;
      var $83=(($82+4)|0);
      var $84=HEAP32[(($83)>>2)];
      $2=$84;
      label = 3; break;
    case 18: 
      var $86=$j;
      var $87=(($86)|(0)) > 0;
      if ($87) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $89=$i;
      var $90=((($89)+(1))|0);
      $i=$90;
      var $91=$3;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $94=$1;
      _gen_send_intern($94);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $97=$i;
      var $98=$1;
      var $99=(($98+56)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-($97))|0);
      HEAP32[(($99)>>2)]=$101;
      var $102=$1;
      var $103=$1;
      var $104=(($103+56)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 & 511;
      var $107=$106 << 23;
      var $108=55 | $107;
      var $109=$1;
      var $110=(($109+56)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$111 & 511;
      var $113=$112 << 14;
      var $114=$108 | $113;
      var $115=$i;
      var $116=$115 & 127;
      var $117=$116 << 7;
      var $118=$114 | $117;
      _genop($102, $118);
      var $119=$1;
      _push_($119);
      label = 29; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $122=$2;
      var $123=(($122)|(0))!=0;
      if ($123) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $125=$2;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$129;
      if ((($130)|(0))==17 | (($130)|(0))==4) {
        label = 26; break;
      }
      else {
      label = 27; break;
      }
    case 26: 
      var $132=$1;
      var $133=$2;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      _codegen($132, $135, 0);
      label = 27; break;
    case 27: 
      var $137=$2;
      var $138=(($137+4)|0);
      var $139=HEAP32[(($138)>>2)];
      $2=$139;
      label = 24; break;
    case 28: 
      label = 29; break;
    case 29: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern903($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _gen_send_intern($s) {
  var label = 0;
  var $1;
  $1=$s;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=((($4)-(1))|0);
  HEAP32[(($3)>>2)]=$5;
  var $6=$1;
  var $7=$1;
  var $8=(($7+56)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$9 & 511;
  var $11=$10 << 23;
  var $12=32 | $11;
  var $13=$1;
  var $14=$1;
  var $15=(($14)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=_mrb_intern2($16, ((110148)|0), 6);
  var $18=_new_msym($13, $17);
  var $19=$18 & 511;
  var $20=$19 << 14;
  var $21=$12 | $20;
  _genop($6, $21);
  var $22=$1;
  _push_($22);
  return;
}
function _scope_finish($s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mrb;
      var $irep;
      var $fname_len;
      var $fname;
      $1=$s;
      var $2=$1;
      var $3=(($2)|0);
      var $4=HEAP32[(($3)>>2)];
      $mrb=$4;
      var $5=$1;
      var $6=(($5+100)|0);
      var $7=HEAP32[(($6)>>2)];
      $irep=$7;
      var $8=$irep;
      var $9=(($8+8)|0);
      HEAP8[($9)]=0;
      var $10=$1;
      var $11=(($10+88)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $15=$1;
      var $16=$1;
      var $17=(($16+88)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=$1;
      var $21=(($20+60)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=($22<<2);
      var $24=_codegen_realloc($15, $19, $23);
      var $25=$24;
      var $26=$irep;
      var $27=(($26+12)|0);
      HEAP32[(($27)>>2)]=$25;
      var $28=$1;
      var $29=(($28+60)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$irep;
      var $32=(($31+32)|0);
      HEAP32[(($32)>>2)]=$30;
      var $33=$1;
      var $34=(($33+92)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $38=$1;
      var $39=$1;
      var $40=(($39+92)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=$1;
      var $44=(($43+60)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=($45<<1);
      var $47=_codegen_realloc($38, $42, $46);
      var $48=$47;
      var $49=$irep;
      var $50=(($49+28)|0);
      HEAP32[(($50)>>2)]=$48;
      label = 5; break;
    case 4: 
      var $52=$irep;
      var $53=(($52+28)|0);
      HEAP32[(($53)>>2)]=0;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $56=$1;
      var $57=$irep;
      var $58=(($57+16)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59;
      var $61=$irep;
      var $62=(($61+36)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=((($63)*(12))&-1);
      var $65=_codegen_realloc($56, $60, $64);
      var $66=$65;
      var $67=$irep;
      var $68=(($67+16)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$1;
      var $70=$irep;
      var $71=(($70+20)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      var $74=$irep;
      var $75=(($74+40)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=($76<<1);
      var $78=_codegen_realloc($69, $73, $77);
      var $79=$78;
      var $80=$irep;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$1;
      var $83=(($82+80)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $87=$1;
      var $88=(($87+80)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=_strlen($89);
      $fname_len=$90;
      var $91=$1;
      var $92=$fname_len;
      var $93=((($92)+(1))|0);
      var $94=_codegen_malloc($91, $93);
      $fname=$94;
      var $95=$fname;
      var $96=$1;
      var $97=(($96+80)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$fname_len;
      assert($99 % 1 === 0);_memcpy($95, $98, $99);
      var $100=$fname_len;
      var $101=$fname;
      var $102=(($101+$100)|0);
      HEAP8[($102)]=0;
      var $103=$fname;
      var $104=$irep;
      var $105=(($104+24)|0);
      HEAP32[(($105)>>2)]=$103;
      label = 8; break;
    case 8: 
      var $107=$1;
      var $108=(($107+112)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109) & 65535);
      var $111=$irep;
      var $112=(($111+4)|0);
      HEAP16[(($112)>>1)]=$110;
      var $113=$1;
      var $114=(($113+116)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115) & 65535);
      var $117=$irep;
      var $118=(($117+6)|0);
      HEAP16[(($118)>>1)]=$116;
      var $119=$mrb;
      var $120=$1;
      var $121=(($120+120)|0);
      var $122=HEAP32[(($121)>>2)];
      _mrb_gc_arena_restore($119, $122);
      var $123=$1;
      var $124=(($123+4)|0);
      var $125=HEAP32[(($124)>>2)];
      _mrb_pool_close($125);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _attrsym($s, $a) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $name;
  var $len=__stackBase__;
  var $name2;
  $1=$s;
  $2=$a;
  var $3=$1;
  var $4=(($3)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$2;
  var $7=_mrb_sym2name_len($5, $6, $len);
  $name=$7;
  var $8=$1;
  var $9=HEAP32[(($len)>>2)];
  var $10=((($9)+(1))|0);
  var $11=_codegen_palloc($8, $10);
  $name2=$11;
  var $12=$name2;
  var $13=$name;
  var $14=HEAP32[(($len)>>2)];
  assert($14 % 1 === 0);_memcpy($12, $13, $14);
  var $15=HEAP32[(($len)>>2)];
  var $16=$name2;
  var $17=(($16+$15)|0);
  HEAP8[($17)]=61;
  var $18=HEAP32[(($len)>>2)];
  var $19=((($18)+(1))|0);
  var $20=$name2;
  var $21=(($20+$19)|0);
  HEAP8[($21)]=0;
  var $22=$1;
  var $23=(($22)|0);
  var $24=HEAP32[(($23)>>2)];
  var $25=$name2;
  var $26=HEAP32[(($len)>>2)];
  var $27=((($26)+(1))|0);
  var $28=_mrb_intern2($24, $25, $27);
  STACKTOP = __stackBase__;
  return $28;
}
function _codegen_palloc($s, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $p;
      $1=$s;
      $2=$len;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=_mrb_pool_alloc($5, $6);
      $p=$7;
      var $8=$p;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      _codegen_error($11, ((107796)|0));
      label = 3; break;
    case 3: 
      var $13=$p;
      return $13;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_exc_new($agg_result, $mrb, $c, $ptr, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4;
  var $5=__stackBase__;
  var $6=(__stackBase__)+(12);
  $1=$mrb;
  $2=$c;
  $3=$ptr;
  $4=$len;
  var $7=$1;
  var $8=$2;
  var $9=$8;
  _mrb_obj_value942($5, $9);
  var $10=$1;
  var $11=$3;
  var $12=$4;
  _mrb_str_new($6, $10, $11, $12);
  _mrb_funcall($agg_result, $7, $5, ((94072)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _scope_error($s) {
  var label = 0;
  var $1;
  $1=$s;
  _exit(1);
  throw "Reached an unreachable!";
  return;
}
function _mrb_obj_value942($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_exc_new3($agg_result, $mrb, $c, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3=__stackBase__;
  var $4=(__stackBase__)+(12);
  $1=$mrb;
  $2=$c;
  var $5=$1;
  _mrb_str_to_str($3, $5, $str);
  var $6=$str;
  var $7=$3;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=$1;
  var $9=$2;
  var $10=$9;
  _mrb_obj_value942($4, $10);
  _mrb_funcall($agg_result, $8, $4, ((94072)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($str)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($str)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($str)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _exc_debug_info($mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ci;
      var $pc;
      var $3=__stackBase__;
      var $irep;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      $1=$mrb;
      $2=$exc;
      var $6=$1;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      $ci=$10;
      var $11=$ci;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      $pc=$13;
      var $14=$1;
      var $15=$2;
      var $16=$1;
      var $17=_mrb_intern2($16, ((103628)|0), 5);
      var $18=$ci;
      var $19=$1;
      var $20=(($19+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+20)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$18;
      var $25=$23;
      var $26=((($24)-($25))|0);
      var $27=((((($26)|(0)))/(44))&-1);
      _mrb_fixnum_value959($3, $27);
      _mrb_obj_iv_set($14, $15, $17, $3);
      var $28=$ci;
      var $29=((($28)-(44))|0);
      $ci=$29;
      label = 2; break;
    case 2: 
      var $31=$ci;
      var $32=$1;
      var $33=(($32+8)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($34+20)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($31)>>>(0)) >= (($36)>>>(0));
      if ($37) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $39=$ci;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))!=0;
      if ($42) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $44=$ci;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 11;
      var $50=$49 & 2097151;
      var $51=$50 & 128;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 11; break; } else { label = 5; break; }
    case 5: 
      var $54=$ci;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+12)|0);
      var $58=$57;
      var $59=HEAP32[(($58)>>2)];
      $irep=$59;
      var $60=$irep;
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|(0))!=0;
      if ($63) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $65=$irep;
      var $66=(($65+28)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))!=0;
      if ($68) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $70=$irep;
      var $71=(($70+12)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=$pc;
      var $74=(($72)>>>(0)) <= (($73)>>>(0));
      if ($74) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $76=$pc;
      var $77=$irep;
      var $78=(($77+12)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$irep;
      var $81=(($80+32)|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=(($79+($82<<2))|0);
      var $84=(($76)>>>(0)) < (($83)>>>(0));
      if ($84) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $86=$1;
      var $87=$2;
      var $88=$1;
      var $89=_mrb_intern2($88, ((106616)|0), 4);
      var $90=$1;
      var $91=$irep;
      var $92=(($91+24)|0);
      var $93=HEAP32[(($92)>>2)];
      _mrb_str_new_cstr($4, $90, $93);
      _mrb_obj_iv_set($86, $87, $89, $4);
      var $94=$1;
      var $95=$2;
      var $96=$1;
      var $97=_mrb_intern2($96, ((106212)|0), 4);
      var $98=$pc;
      var $99=$irep;
      var $100=(($99+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=$98;
      var $103=$101;
      var $104=((($102)-($103))|0);
      var $105=((((($104)|(0)))/(4))&-1);
      var $106=((($105)-(1))|0);
      var $107=$irep;
      var $108=(($107+28)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109+($106<<1))|0);
      var $111=HEAP16[(($110)>>1)];
      var $112=(($111)&(65535));
      _mrb_fixnum_value959($5, $112);
      _mrb_obj_iv_set($94, $95, $97, $5);
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $115=$ci;
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      $pc=$117;
      var $118=$ci;
      var $119=((($118)-(44))|0);
      $ci=$119;
      label = 2; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_raise($mrb, $c, $msg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $mesg=__stackBase__;
  var $4=(__stackBase__)+(12);
  var $5=(__stackBase__)+(24);
  $1=$mrb;
  $2=$c;
  $3=$msg;
  var $6=$1;
  var $7=$3;
  _mrb_str_new_cstr($4, $6, $7);
  var $8=$mesg;
  var $9=$4;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=$1;
  var $11=$1;
  var $12=$2;
  _mrb_exc_new3($5, $11, $12, $mesg);
  _mrb_exc_raise($10, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_vformat($agg_result, $mrb, $format, $ap) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $b;
      var $size;
      var $ary=__stackBase__;
      var $c;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      var $7=(__stackBase__)+(48);
      var $8=(__stackBase__)+(60);
      var $9=(__stackBase__)+(72);
      $1=$mrb;
      $2=$format;
      $3=$ap;
      var $10=$2;
      $p=$10;
      var $11=$p;
      $b=$11;
      var $12=$1;
      _mrb_ary_new_capa($ary, $12, 4);
      label = 2; break;
    case 2: 
      var $14=$p;
      var $15=HEAP8[($14)];
      var $16=(($15 << 24) >> 24)!=0;
      if ($16) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $18=$p;
      var $19=(($18+1)|0);
      $p=$19;
      var $20=HEAP8[($18)];
      $c=$20;
      var $21=$c;
      var $22=(($21 << 24) >> 24);
      var $23=(($22)|(0))==37;
      if ($23) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $25=$p;
      var $26=HEAP8[($25)];
      var $27=(($26 << 24) >> 24);
      var $28=(($27)|(0))==83;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $30=$p;
      var $31=$b;
      var $32=$30;
      var $33=$31;
      var $34=((($32)-($33))|0);
      var $35=((($34)-(1))|0);
      $size=$35;
      var $36=$1;
      var $37=$1;
      var $38=$b;
      var $39=$size;
      _mrb_str_new($4, $37, $38, $39);
      _mrb_ary_push($36, $ary, $4);
      var $40=$1;
      var $41=$3;
      var $42=$41;
      var $43=(($41+12)|0);
      $3=$43;
      var $44=$5;
      var $45=$42;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      _mrb_ary_push($40, $ary, $5);
      var $46=$p;
      var $47=(($46+1)|0);
      $b=$47;
      label = 6; break;
    case 6: 
      label = 13; break;
    case 7: 
      var $50=$c;
      var $51=(($50 << 24) >> 24);
      var $52=(($51)|(0))==92;
      if ($52) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $54=$p;
      var $55=HEAP8[($54)];
      var $56=(($55 << 24) >> 24)!=0;
      if ($56) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $58=$p;
      var $59=$b;
      var $60=$58;
      var $61=$59;
      var $62=((($60)-($61))|0);
      var $63=((($62)-(1))|0);
      $size=$63;
      var $64=$1;
      var $65=$1;
      var $66=$b;
      var $67=$size;
      _mrb_str_new($6, $65, $66, $67);
      _mrb_ary_push($64, $ary, $6);
      var $68=$1;
      var $69=$1;
      var $70=$p;
      _mrb_str_new($7, $69, $70, 1);
      _mrb_ary_push($68, $ary, $7);
      var $71=$p;
      var $72=(($71+1)|0);
      $p=$72;
      $b=$72;
      label = 11; break;
    case 10: 
      label = 14; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 2; break;
    case 14: 
      var $78=$b;
      var $79=$2;
      var $80=(($78)|(0))==(($79)|(0));
      if ($80) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $82=$1;
      var $83=$2;
      _mrb_str_new_cstr($agg_result, $82, $83);
      label = 17; break;
    case 16: 
      var $85=$p;
      var $86=$b;
      var $87=$85;
      var $88=$86;
      var $89=((($87)-($88))|0);
      $size=$89;
      var $90=$1;
      var $91=$1;
      var $92=$b;
      var $93=$size;
      _mrb_str_new($8, $91, $92, $93);
      _mrb_ary_push($90, $ary, $8);
      var $94=$1;
      var $95=$1;
      _mrb_str_new($9, $95, 0, 0);
      _mrb_ary_join($agg_result, $94, $ary, $9);
      label = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_format($agg_result, $mrb, $format, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $ap=__stackBase__;
  var $str=(__stackBase__)+(4);
  var $3=(__stackBase__)+(16);
  $1=$mrb;
  $2=$format;
  var $4=$ap;
  HEAP32[(($4)>>2)]=varrp;
  var $5=$1;
  var $6=$2;
  var $7=HEAP32[(($ap)>>2)];
  _mrb_vformat($3, $5, $6, $7);
  var $8=$str;
  var $9=$3;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=$ap;
  var $11=$agg_result;
  var $12=$str;
  assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_raisef($mrb, $c, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $args=__stackBase__;
  var $mesg=(__stackBase__)+(4);
  var $4=(__stackBase__)+(16);
  var $5=(__stackBase__)+(28);
  $1=$mrb;
  $2=$c;
  $3=$fmt;
  var $6=$args;
  HEAP32[(($6)>>2)]=varrp;
  var $7=$1;
  var $8=$3;
  var $9=HEAP32[(($args)>>2)];
  _mrb_vformat($4, $7, $8, $9);
  var $10=$mesg;
  var $11=$4;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  var $12=$args;
  var $13=$1;
  var $14=$1;
  var $15=$2;
  _mrb_exc_new3($5, $14, $15, $mesg);
  _mrb_exc_raise($13, $5);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_name_error($mrb, $id, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $exc=__stackBase__;
  var $argv=(__stackBase__)+(12);
  var $args=(__stackBase__)+(36);
  var $4=(__stackBase__)+(40);
  var $5=(__stackBase__)+(52);
  var $6=(__stackBase__)+(64);
  $1=$mrb;
  $2=$id;
  $3=$fmt;
  var $7=$args;
  HEAP32[(($7)>>2)]=varrp;
  var $8=(($argv)|0);
  var $9=$1;
  var $10=$3;
  var $11=HEAP32[(($args)>>2)];
  _mrb_vformat($4, $9, $10, $11);
  var $12=$8;
  var $13=$4;
  assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
  var $14=$args;
  var $15=(($argv+12)|0);
  var $16=$2;
  _mrb_symbol_value953($5, $16);
  var $17=$15;
  var $18=$5;
  assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
  var $19=$1;
  var $20=(($argv)|0);
  var $21=$1;
  var $22=_mrb_class_get($21, ((109156)|0));
  _mrb_class_new_instance($6, $19, 2, $20, $22);
  var $23=$exc;
  var $24=$6;
  assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
  var $25=$1;
  _mrb_exc_raise($25, $exc);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_symbol_value953($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_warn($mrb, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $ap=__stackBase__;
  var $str=(__stackBase__)+(4);
  var $3=(__stackBase__)+(16);
  $1=$mrb;
  $2=$fmt;
  var $4=$ap;
  HEAP32[(($4)>>2)]=varrp;
  var $5=$1;
  var $6=$2;
  var $7=HEAP32[(($ap)>>2)];
  _mrb_vformat($3, $5, $6, $7);
  var $8=$str;
  var $9=$3;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=HEAP32[((_stderr)>>2)];
  var $11=_fputs(((105240)|0), $10);
  var $12=(($str)|0);
  var $13=$12;
  var $14=HEAP32[(($13)>>2)];
  var $15=$14;
  var $16=(($15+20)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=(($str)|0);
  var $19=$18;
  var $20=HEAP32[(($19)>>2)];
  var $21=$20;
  var $22=(($21+12)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=HEAP32[((_stderr)>>2)];
  var $25=_fwrite($17, $23, 1, $24);
  var $26=$ap;
  STACKTOP = __stackBase__;
  return;
}
function _make_exception($agg_result, $mrb, $argc, $argv, $isstr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $mesg=__stackBase__;
      var $n;
      var $5=(__stackBase__)+(12);
      var $6=(__stackBase__)+(24);
      var $7=(__stackBase__)+(36);
      var $exc;
      var $8=(__stackBase__)+(48);
      var $9=(__stackBase__)+(60);
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      $4=$isstr;
      _mrb_nil_value958($5);
      var $10=$mesg;
      var $11=$5;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=$2;
      if ((($12)|(0))==0) {
        label = 2; break;
      }
      else if ((($12)|(0))==1) {
        label = 3; break;
      }
      else if ((($12)|(0))==2 | (($12)|(0))==3) {
        label = 12; break;
      }
      else {
      label = 17; break;
      }
    case 2: 
      label = 18; break;
    case 3: 
      var $15=$3;
      var $16=(($15)|0);
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==0;
      if ($19) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $21=$3;
      var $22=(($21)|0);
      var $23=(($22)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 5; break; }
    case 5: 
      label = 18; break;
    case 6: 
      var $29=$4;
      var $30=(($29)|(0))!=0;
      if ($30) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $32=$1;
      var $33=$3;
      var $34=(($33)|0);
      _mrb_check_string_type($6, $32, $34);
      var $35=$mesg;
      var $36=$6;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      var $37=(($mesg+8)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $41=(($mesg)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $46=$1;
      var $47=$1;
      var $48=_mrb_class_get($47, ((97272)|0));
      _mrb_exc_new3($7, $46, $48, $mesg);
      var $49=$mesg;
      var $50=$7;
      assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($50)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($50)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($50)+(8))>>2)];
      label = 18; break;
    case 10: 
      label = 11; break;
    case 11: 
      $n=0;
      label = 13; break;
    case 12: 
      $n=1;
      label = 13; break;
    case 13: 
      var $55=$1;
      var $56=_mrb_intern2($55, ((96064)|0), 9);
      $exc=$56;
      var $57=$1;
      var $58=$3;
      var $59=(($58)|0);
      var $60=$exc;
      var $61=_mrb_respond_to($57, $59, $60);
      var $62=(($61)|(0))!=0;
      if ($62) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $64=$1;
      var $65=$3;
      var $66=(($65)|0);
      var $67=$exc;
      var $68=$n;
      var $69=$3;
      var $70=(($69+12)|0);
      _mrb_funcall_argv($8, $64, $66, $67, $68, $70);
      var $71=$mesg;
      var $72=$8;
      assert(12 % 1 === 0);HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($71)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
      label = 16; break;
    case 15: 
      var $74=$1;
      var $75=$1;
      var $76=_mrb_class_get($75, ((94992)|0));
      _mrb_raise($74, $76, ((94148)|0));
      label = 16; break;
    case 16: 
      label = 18; break;
    case 17: 
      var $79=$1;
      var $80=$1;
      var $81=_mrb_class_get($80, ((93272)|0));
      var $82=$2;
      _mrb_fixnum_value959($9, $82);
      _mrb_raisef($79, $81, ((113452)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($9)+(8))>>2)],tempInt));
      label = 18; break;
    case 18: 
      var $84=$2;
      var $85=(($84)|(0)) > 0;
      if ($85) { label = 19; break; } else { label = 24; break; }
    case 19: 
      var $87=$1;
      var $88=$1;
      var $89=(($88+572)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=_mrb_obj_is_kind_of($87, $mesg, $90);
      var $92=(($91)|(0))!=0;
      if ($92) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $94=$1;
      var $95=$1;
      var $96=_mrb_class_get($95, ((94992)|0));
      _mrb_raise($94, $96, ((112620)|0));
      label = 21; break;
    case 21: 
      var $98=$2;
      var $99=(($98)|(0)) > 2;
      if ($99) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $101=$1;
      var $102=$3;
      var $103=(($102+24)|0);
      _set_backtrace($101, $mesg, $103);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $106=$agg_result;
      var $107=$mesg;
      assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value958($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value959($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _set_backtrace($mrb, $info, $bt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $info; $info = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($info)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($info)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($info)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $bt; $bt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($bt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($bt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($bt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  _mrb_funcall($2, $3, $info, ((103844)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($bt)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($bt)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($bt)+(8))>>2)],tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_make_exception($agg_result, $mrb, $argc, $argv) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$argc;
  $3=$argv;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  _make_exception($agg_result, $4, $5, $6, 1);
  return;
}
function _mrb_init_exception($mrb) {
  var label = 0;
  var $1;
  var $e;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((110968)|0), $5);
  $e=$6;
  var $7=$1;
  var $8=(($7+572)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$1;
  var $10=$e;
  _mrb_define_class_method($9, $10, ((96064)|0), 608, 4096);
  var $11=$1;
  var $12=$e;
  _mrb_define_method($11, $12, ((96064)|0), 558, 4096);
  var $13=$1;
  var $14=$e;
  _mrb_define_method($13, $14, ((110480)|0), 584, 4096);
  var $15=$1;
  var $16=$e;
  _mrb_define_method($15, $16, ((110128)|0), 222, 262144);
  var $17=$1;
  var $18=$e;
  _mrb_define_method($17, $18, ((109684)|0), 132, 0);
  var $19=$1;
  var $20=$e;
  _mrb_define_method($19, $20, ((109208)|0), 354, 0);
  var $21=$1;
  var $22=$e;
  _mrb_define_method($21, $22, ((108604)|0), 282, 0);
  var $23=$1;
  var $24=$1;
  var $25=(($24+572)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=_mrb_define_class($23, ((108300)|0), $26);
  var $28=$1;
  var $29=(($28+576)|0);
  HEAP32[(($29)>>2)]=$27;
  var $30=$1;
  var $31=$1;
  var $32=(($31+576)|0);
  var $33=HEAP32[(($32)>>2)];
  var $34=_mrb_define_class($30, ((97272)|0), $33);
  var $35=$1;
  var $36=$1;
  var $37=(($36+572)|0);
  var $38=HEAP32[(($37)>>2)];
  var $39=_mrb_define_class($35, ((107752)|0), $38);
  $e=$39;
  var $40=$1;
  var $41=$e;
  var $42=_mrb_define_class($40, ((107436)|0), $41);
  return;
}
function _exc_exception($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $exc=__stackBase__;
      var $a=(__stackBase__)+(12);
      var $argc;
      var $2=(__stackBase__)+(24);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((104112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,tempInt));
      $argc=$4;
      var $5=$argc;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $11=$1;
      var $12=_mrb_obj_equal($11, $self, $a);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $15=$agg_result;
      var $16=$self;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $18=$1;
      _mrb_obj_clone($2, $18, $self);
      var $19=$exc;
      var $20=$2;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=$1;
      var $22=$1;
      var $23=_mrb_intern2($22, ((107096)|0), 4);
      _mrb_iv_set($21, $exc, $23, $a);
      var $24=$agg_result;
      var $25=$exc;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_exc_raise($mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($exc)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=$1;
      var $7=(($6+16)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$1;
      var $9=$1;
      var $10=(($9+16)|0);
      var $11=HEAP32[(($10)>>2)];
      _exc_debug_info($8, $11);
      var $12=$1;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $17=$1;
      _mrb_p($17, $exc);
      _abort();
      throw "Reached an unreachable!";
    case 3: 
      var $19=$1;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22)|0);
      _longjmp($23, 1);
      throw "Reached an unreachable!";
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bug($mrb, $fmt, varrp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $ap=__stackBase__;
  var $str=(__stackBase__)+(4);
  var $3=(__stackBase__)+(16);
  $1=$mrb;
  $2=$fmt;
  var $4=$ap;
  HEAP32[(($4)>>2)]=varrp;
  var $5=$1;
  var $6=$2;
  var $7=HEAP32[(($ap)>>2)];
  _mrb_vformat($3, $5, $6, $7);
  var $8=$str;
  var $9=$3;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=HEAP32[((_stderr)>>2)];
  var $11=_fputs(((102432)|0), $10);
  var $12=(($str)|0);
  var $13=$12;
  var $14=HEAP32[(($13)>>2)];
  var $15=$14;
  var $16=(($15+20)|0);
  var $17=HEAP32[(($16)>>2)];
  var $18=(($str)|0);
  var $19=$18;
  var $20=HEAP32[(($19)>>2)];
  var $21=$20;
  var $22=(($21+12)|0);
  var $23=HEAP32[(($22)>>2)];
  var $24=HEAP32[((_stderr)>>2)];
  var $25=_fwrite($17, $23, 1, $24);
  var $26=$ap;
  _exit(1);
  throw "Reached an unreachable!";
  STACKTOP = __stackBase__;
  return;
}
function _exc_initialize($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mesg=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((104112)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mesg,tempInt));
      var $4=(($3)|(0))==1;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$1;
      var $8=_mrb_intern2($7, ((107096)|0), 4);
      _mrb_iv_set($6, $exc, $8, $mesg);
      label = 3; break;
    case 3: 
      var $10=$agg_result;
      var $11=$exc;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_equal($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj=__stackBase__;
      var $mesg=(__stackBase__)+(12);
      var $equal_p;
      var $id_mesg;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      $1=$mrb;
      var $5=$1;
      var $6=_mrb_intern2($5, ((107096)|0), 4);
      $id_mesg=$6;
      var $7=$1;
      var $8=_mrb_get_args($7, ((104692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $9=$1;
      var $10=_mrb_obj_equal($9, $exc, $obj);
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $equal_p=1;
      label = 10; break;
    case 3: 
      var $14=$1;
      var $15=_mrb_obj_class($14, $exc);
      var $16=$1;
      var $17=_mrb_obj_class($16, $obj);
      var $18=(($15)|(0))!=(($17)|(0));
      if ($18) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $20=$1;
      var $21=$1;
      var $22=_mrb_intern2($21, ((109208)|0), 7);
      var $23=_mrb_respond_to($20, $obj, $22);
      var $24=(($23)|(0))!=0;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=$1;
      _mrb_funcall($2, $26, $obj, ((109208)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $27=$mesg;
      var $28=$2;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 7; break;
    case 6: 
      _mrb_false_value960($agg_result);
      label = 11; break;
    case 7: 
      label = 9; break;
    case 8: 
      var $32=$1;
      var $33=$id_mesg;
      _mrb_attr_get($3, $32, $obj, $33);
      var $34=$mesg;
      var $35=$3;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 9; break;
    case 9: 
      var $37=$1;
      var $38=$1;
      var $39=$id_mesg;
      _mrb_attr_get($4, $38, $exc, $39);
      var $40=_mrb_equal($37, $4, $mesg);
      var $41=(($40) & 255);
      $equal_p=$41;
      label = 10; break;
    case 10: 
      var $43=$equal_p;
      _mrb_bool_value961($agg_result, $43);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_to_s($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mesg=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=$1;
      var $4=_mrb_intern2($3, ((107096)|0), 4);
      _mrb_attr_get($mesg, $2, $exc, $4);
      var $5=(($mesg+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($mesg)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$1;
      var $15=$1;
      var $16=_mrb_obj_classname($15, $exc);
      _mrb_str_new_cstr($agg_result, $14, $16);
      label = 5; break;
    case 4: 
      var $18=$agg_result;
      var $19=$mesg;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _exc_message($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_funcall($agg_result, $2, $exc, ((109684)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _exc_inspect($agg_result, $mrb, $exc) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 228)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $exc; $exc = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($exc)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($exc)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($exc)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str=__stackBase__;
      var $mesg=(__stackBase__)+(12);
      var $file=(__stackBase__)+(24);
      var $line=(__stackBase__)+(36);
      var $2=(__stackBase__)+(48);
      var $3=(__stackBase__)+(60);
      var $4=(__stackBase__)+(72);
      var $5=(__stackBase__)+(84);
      var $6=(__stackBase__)+(96);
      var $7=(__stackBase__)+(108);
      var $8=(__stackBase__)+(120);
      var $9=(__stackBase__)+(132);
      var $10=(__stackBase__)+(144);
      var $11=(__stackBase__)+(156);
      var $12=(__stackBase__)+(168);
      var $13=(__stackBase__)+(180);
      var $14=(__stackBase__)+(192);
      var $15=(__stackBase__)+(204);
      var $16=(__stackBase__)+(216);
      $1=$mrb;
      var $17=$1;
      var $18=$1;
      var $19=_mrb_intern2($18, ((107096)|0), 4);
      _mrb_attr_get($2, $17, $exc, $19);
      var $20=$mesg;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=$1;
      var $23=$1;
      var $24=_mrb_intern2($23, ((106616)|0), 4);
      _mrb_attr_get($3, $22, $exc, $24);
      var $25=$file;
      var $26=$3;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$1;
      var $28=$1;
      var $29=_mrb_intern2($28, ((106212)|0), 4);
      _mrb_attr_get($4, $27, $exc, $29);
      var $30=$line;
      var $31=$4;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      var $32=(($file+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))==0;
      if ($34) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $36=(($file)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))!=0;
      if ($39) { label = 3; break; } else { label = 14; break; }
    case 3: 
      var $41=(($line+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))==0;
      if ($43) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $45=(($line)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))!=0;
      if ($48) { label = 5; break; } else { label = 14; break; }
    case 5: 
      var $50=$str;
      var $51=$file;
      assert(12 % 1 === 0);HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)];HEAP32[((($50)+(8))>>2)]=HEAP32[((($51)+(8))>>2)];
      var $52=$1;
      _mrb_str_cat($5, $52, $str, ((105876)|0), 1);
      var $53=$1;
      _mrb_str_append($6, $53, $str, $line);
      var $54=$1;
      _mrb_str_cat($7, $54, $str, ((105600)|0), 2);
      var $55=(($mesg+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|(0))==0;
      if ($57) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $59=(($mesg)|0);
      var $60=$59;
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))!=0;
      if ($62) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $64=(($mesg)|0);
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=$66;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0)) > 0;
      if ($70) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $72=$1;
      _mrb_str_append($8, $72, $str, $mesg);
      var $73=$1;
      _mrb_str_cat($9, $73, $str, ((105272)|0), 2);
      label = 9; break;
    case 9: 
      var $75=$1;
      var $76=$1;
      var $77=_mrb_obj_classname($76, $exc);
      _mrb_str_cat_cstr($10, $75, $str, $77);
      var $78=(($mesg+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))==0;
      if ($80) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $82=(($mesg)|0);
      var $83=$82;
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $87=(($mesg)|0);
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89;
      var $91=(($90+12)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|(0)) > 0;
      if ($93) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $95=$1;
      _mrb_str_cat($11, $95, $str, ((104992)|0), 1);
      label = 13; break;
    case 13: 
      label = 20; break;
    case 14: 
      var $98=$1;
      var $99=$1;
      var $100=_mrb_obj_classname($99, $exc);
      _mrb_str_new_cstr($12, $98, $100);
      var $101=$str;
      var $102=$12;
      assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
      var $103=(($mesg+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104)|(0))==0;
      if ($105) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $107=(($mesg)|0);
      var $108=$107;
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)|(0))!=0;
      if ($110) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $112=(($mesg)|0);
      var $113=$112;
      var $114=HEAP32[(($113)>>2)];
      var $115=$114;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117)|(0)) > 0;
      if ($118) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $120=$1;
      _mrb_str_cat($13, $120, $str, ((105600)|0), 2);
      var $121=$1;
      _mrb_str_append($14, $121, $str, $mesg);
      label = 19; break;
    case 18: 
      var $123=$1;
      _mrb_str_cat($15, $123, $str, ((105600)|0), 2);
      var $124=$1;
      var $125=$1;
      var $126=_mrb_obj_classname($125, $exc);
      _mrb_str_cat_cstr($16, $124, $str, $126);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $129=$agg_result;
      var $130=$str;
      assert(12 % 1 === 0);HEAP32[(($129)>>2)]=HEAP32[(($130)>>2)];HEAP32[((($129)+(4))>>2)]=HEAP32[((($130)+(4))>>2)];HEAP32[((($129)+(8))>>2)]=HEAP32[((($130)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value960($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value961($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_realloc($mrb, $p, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p2;
      $1=$mrb;
      $2=$p;
      $3=$len;
      var $4=$1;
      var $5=(($4+4)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=$2;
      var $9=$3;
      var $10=$1;
      var $11=(($10+580)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=FUNCTION_TABLE[$6]($7, $8, $9, $12);
      $p2=$13;
      var $14=$p2;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $17=$3;
      var $18=(($17)>>>(0)) > 0;
      if ($18) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $20=$1;
      var $21=(($20+100)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=$1;
      _mrb_garbage_collect($25);
      var $26=$1;
      var $27=(($26+4)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$1;
      var $30=$2;
      var $31=$3;
      var $32=$1;
      var $33=(($32+580)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=FUNCTION_TABLE[$28]($29, $30, $31, $34);
      $p2=$35;
      label = 5; break;
    case 5: 
      var $37=$p2;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 11; break; } else { label = 6; break; }
    case 6: 
      var $40=$3;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $43=$1;
      var $44=$43;
      var $45=(($44+552)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&(255)) >>> 3;
      var $48=$47 & 1;
      var $49=(($48 << 24) >> 24)!=0;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $52=$1;
      var $53=$52;
      var $54=(($53+552)|0);
      var $55=HEAP8[($54)];
      var $56=$55 & -9;
      var $57=$56 | 8;
      HEAP8[($54)]=$57;
      var $58=$1;
      var $59=$1;
      var $60=_mrb_class_get($59, ((93440)|0));
      _mrb_raise($58, $60, ((108724)|0));
      label = 10; break;
    case 10: 
      label = 12; break;
    case 11: 
      var $63=$1;
      var $64=$63;
      var $65=(($64+552)|0);
      var $66=HEAP8[($65)];
      var $67=$66 & -9;
      HEAP8[($65)]=$67;
      label = 12; break;
    case 12: 
      var $69=$p2;
      return $69;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_garbage_collect($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $max_limit;
      $1=$mrb;
      $max_limit=-1;
      var $2=$1;
      var $3=$2;
      var $4=(($3+552)|0);
      var $5=HEAP8[($4)];
      var $6=$5 & 1;
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 15; break;
    case 3: 
      var $10=$1;
      var $11=(($10+520)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==2;
      if ($13) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $16=$1;
      var $17=(($16+520)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $21=$1;
      var $22=$max_limit;
      var $23=_incremental_gc($21, $22);
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $26=$1;
      var $27=$26;
      var $28=(($27+552)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255)) >>> 2;
      var $31=$30 & 1;
      var $32=(($31 << 24) >> 24)!=0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$1;
      _clear_all_old($34);
      var $35=$1;
      var $36=$35;
      var $37=(($36+552)|0);
      var $38=HEAP8[($37)];
      var $39=$38 & -3;
      var $40=$39 | 2;
      HEAP8[($37)]=$40;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $43=$1;
      var $44=$max_limit;
      var $45=_incremental_gc($43, $44);
      label = 12; break;
    case 12: 
      var $47=$1;
      var $48=(($47+520)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|(0))!=0;
      if ($50) { label = 11; break; } else { label = 13; break; }
    case 13: 
      var $52=$1;
      var $53=(($52+536)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=Math.floor(((($54)>>>(0)))/(100));
      var $56=$1;
      var $57=(($56+544)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=Math.imul($55,$58);
      var $60=$1;
      var $61=(($60+540)|0);
      HEAP32[(($61)>>2)]=$59;
      var $62=$1;
      var $63=$62;
      var $64=(($63+552)|0);
      var $65=HEAP8[($64)];
      var $66=(($65)&(255)) >>> 2;
      var $67=$66 & 1;
      var $68=(($67 << 24) >> 24)!=0;
      if ($68) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $70=$1;
      var $71=(($70+536)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=Math.floor(((($72)>>>(0)))/(100));
      var $74=((($73)*(200))&-1);
      var $75=$1;
      var $76=(($75+556)|0);
      HEAP32[(($76)>>2)]=$74;
      var $77=$1;
      var $78=$77;
      var $79=(($78+552)|0);
      var $80=HEAP8[($79)];
      var $81=$80 & -3;
      HEAP8[($79)]=$81;
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_malloc($mrb, $len) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$len;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_realloc($3, 0, $4);
  return $5;
}
function _mrb_calloc($mrb, $nelem, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $size;
      $1=$mrb;
      $2=$nelem;
      $3=$len;
      $p=0;
      var $4=$2;
      var $5=$3;
      var $6=Math.floor((4294967295)/((($5)>>>(0))));
      var $7=(($4)>>>(0)) <= (($6)>>>(0));
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=$3;
      var $11=Math.imul($9,$10);
      $size=$11;
      var $12=$1;
      var $13=$size;
      var $14=_mrb_realloc($12, 0, $13);
      $p=$14;
      var $15=$p;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $18=$size;
      var $19=(($18)>>>(0)) > 0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$p;
      var $22=$size;
      _memset($21, 0, $22);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $25=$p;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free($mrb, $p) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$p;
  var $3=$1;
  var $4=(($3+4)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$1;
  var $7=$2;
  var $8=$1;
  var $9=(($8+580)|0);
  var $10=HEAP32[(($9)>>2)];
  var $11=FUNCTION_TABLE[$5]($6, $7, 0, $10);
  return;
}
function _mrb_init_heap($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+100)|0);
  HEAP32[(($3)>>2)]=0;
  var $4=$1;
  var $5=(($4+108)|0);
  HEAP32[(($5)>>2)]=0;
  var $6=$1;
  _add_heap($6);
  var $7=$1;
  var $8=(($7+544)|0);
  HEAP32[(($8)>>2)]=200;
  var $9=$1;
  var $10=(($9+548)|0);
  HEAP32[(($10)>>2)]=200;
  var $11=$1;
  var $12=$11;
  var $13=(($12+552)|0);
  var $14=HEAP8[($13)];
  var $15=$14 & -5;
  var $16=$15 | 4;
  HEAP8[($13)]=$16;
  var $17=$1;
  var $18=$17;
  var $19=(($18+552)|0);
  var $20=HEAP8[($19)];
  var $21=$20 & -3;
  var $22=$21 | 2;
  HEAP8[($19)]=$22;
  return;
}
function _add_heap($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $page;
      var $p;
      var $e;
      var $prev;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_calloc($2, 1, 24600);
      var $4=$3;
      $page=$4;
      $prev=0;
      var $5=$page;
      var $6=(($5+24)|0);
      var $7=(($6)|0);
      $p=$7;
      var $8=$p;
      var $9=(($8+24576)|0);
      $e=$9;
      label = 2; break;
    case 2: 
      var $11=$p;
      var $12=$e;
      var $13=(($11)>>>(0)) < (($12)>>>(0));
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=$p;
      var $16=(($15)|0);
      var $17=$16;
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & -256;
      var $21=$20 | 1;
      HEAP32[(($18)>>2)]=$21;
      var $22=$prev;
      var $23=$p;
      var $24=(($23)|0);
      var $25=$24;
      var $26=(($25+12)|0);
      HEAP32[(($26)>>2)]=$22;
      var $27=$p;
      var $28=(($27)|0);
      var $29=$28;
      $prev=$29;
      label = 4; break;
    case 4: 
      var $31=$p;
      var $32=(($31+24)|0);
      $p=$32;
      label = 2; break;
    case 5: 
      var $34=$prev;
      var $35=$page;
      var $36=(($35)|0);
      HEAP32[(($36)>>2)]=$34;
      var $37=$1;
      var $38=$page;
      _link_heap_page($37, $38);
      var $39=$1;
      var $40=$page;
      _link_free_heap_page($39, $40);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_free_heap($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $page;
      var $tmp;
      var $p;
      var $e;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+100)|0);
      var $4=HEAP32[(($3)>>2)];
      $page=$4;
      label = 2; break;
    case 2: 
      var $6=$page;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=$page;
      $tmp=$9;
      var $10=$page;
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      $page=$12;
      var $13=$tmp;
      var $14=(($13+24)|0);
      var $15=(($14)|0);
      $p=$15;
      var $16=$p;
      var $17=(($16+24576)|0);
      $e=$17;
      label = 4; break;
    case 4: 
      var $19=$p;
      var $20=$e;
      var $21=(($19)>>>(0)) < (($20)>>>(0));
      if ($21) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $23=$p;
      var $24=(($23)|0);
      var $25=$24;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 & 255;
      var $29=(($28)|(0))!=1;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $31=$1;
      var $32=$p;
      var $33=(($32)|0);
      var $34=$33;
      _obj_free($31, $34);
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $37=$p;
      var $38=(($37+24)|0);
      $p=$38;
      label = 4; break;
    case 9: 
      var $40=$1;
      var $41=$tmp;
      var $42=$41;
      _mrb_free($40, $42);
      label = 2; break;
    case 10: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _unlink_free_heap_page($mrb, $page) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$page;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+16)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+12)|0);
      HEAP32[(($14)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+16)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+16)|0);
      HEAP32[(($27)>>2)]=$23;
      label = 5; break;
    case 5: 
      var $29=$1;
      var $30=(($29+108)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($31)|(0))==(($32)|(0));
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+12)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$1;
      var $39=(($38+108)|0);
      HEAP32[(($39)>>2)]=$37;
      label = 7; break;
    case 7: 
      var $41=$2;
      var $42=(($41+16)|0);
      HEAP32[(($42)>>2)]=0;
      var $43=$2;
      var $44=(($43+12)|0);
      HEAP32[(($44)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _add_gray_list($mrb, $obj) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$obj;
  var $3=$2;
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5 & -1793;
  HEAP32[(($4)>>2)]=$6;
  var $7=$1;
  var $8=(($7+528)|0);
  var $9=HEAP32[(($8)>>2)];
  var $10=$2;
  var $11=(($10+8)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$2;
  var $13=$1;
  var $14=(($13+528)|0);
  HEAP32[(($14)>>2)]=$12;
  return;
}
function _mrb_gc_arena_save($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+516)|0);
  var $4=HEAP32[(($3)>>2)];
  return $4;
}
function _mrb_gc_arena_restore($mrb, $idx) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$idx;
  var $3=$2;
  var $4=$1;
  var $5=(($4+516)|0);
  HEAP32[(($5)>>2)]=$3;
  return;
}
function _mrb_write_barrier($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$obj;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 >>> 8;
      var $7=$6 & 7;
      var $8=$7 & 4;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $12=$2;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & -1793;
      HEAP32[(($13)>>2)]=$15;
      var $16=$1;
      var $17=(($16+532)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      var $20=(($19+8)|0);
      HEAP32[(($20)>>2)]=$18;
      var $21=$2;
      var $22=$1;
      var $23=(($22+532)|0);
      HEAP32[(($23)>>2)]=$21;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _obj_free($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $e;
      var $c;
      var $d;
      $1=$mrb;
      $2=$obj;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 & 255;
      if ((($6)|(0))==2 | (($6)|(0))==3 | (($6)|(0))==4 | (($6)|(0))==6) {
        label = 2; break;
      }
      else if ((($6)|(0))==8) {
        label = 3; break;
      }
      else if ((($6)|(0))==9 | (($6)|(0))==10 | (($6)|(0))==12) {
        label = 4; break;
      }
      else if ((($6)|(0))==20) {
        label = 5; break;
      }
      else if ((($6)|(0))==22) {
        label = 8; break;
      }
      else if ((($6)|(0))==14) {
        label = 9; break;
      }
      else if ((($6)|(0))==15) {
        label = 13; break;
      }
      else if ((($6)|(0))==16) {
        label = 14; break;
      }
      else if ((($6)|(0))==17) {
        label = 15; break;
      }
      else if ((($6)|(0))==21) {
        label = 16; break;
      }
      else {
      label = 19; break;
      }
    case 2: 
      label = 21; break;
    case 3: 
      var $9=$1;
      var $10=$2;
      var $11=$10;
      _mrb_gc_free_iv($9, $11);
      label = 20; break;
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$14;
      _mrb_gc_free_mt($13, $15);
      var $16=$1;
      var $17=$2;
      var $18=$17;
      _mrb_gc_free_iv($16, $18);
      label = 20; break;
    case 5: 
      var $20=$2;
      var $21=$20;
      $e=$21;
      var $22=$e;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0)) < 0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$1;
      var $28=$e;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      _mrb_free($27, $31);
      var $32=$e;
      var $33=(($32+12)|0);
      HEAP32[(($33)>>2)]=0;
      label = 7; break;
    case 7: 
      label = 20; break;
    case 8: 
      var $36=$2;
      var $37=$36;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      $c=$39;
      var $40=$1;
      var $41=$c;
      _mrb_free_context($40, $41);
      label = 20; break;
    case 9: 
      var $43=$2;
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 >>> 11;
      var $47=$46 & 2097151;
      var $48=$47 & 256;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $51=$1;
      var $52=$2;
      var $53=$52;
      var $54=(($53+16)|0);
      var $55=$54;
      var $56=HEAP32[(($55)>>2)];
      _mrb_ary_decref($51, $56);
      label = 12; break;
    case 11: 
      var $58=$1;
      var $59=$2;
      var $60=$59;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62;
      _mrb_free($58, $63);
      label = 12; break;
    case 12: 
      label = 20; break;
    case 13: 
      var $66=$1;
      var $67=$2;
      var $68=$67;
      _mrb_gc_free_iv($66, $68);
      var $69=$1;
      var $70=$2;
      var $71=$70;
      _mrb_gc_free_hash($69, $71);
      label = 20; break;
    case 14: 
      var $73=$1;
      var $74=$2;
      var $75=$74;
      _mrb_gc_free_str($73, $75);
      label = 20; break;
    case 15: 
      var $77=$1;
      var $78=$2;
      var $79=$78;
      var $80=(($79+12)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      _mrb_free($77, $82);
      label = 20; break;
    case 16: 
      var $84=$2;
      var $85=$84;
      $d=$85;
      var $86=$d;
      var $87=(($86+16)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=(($90)|(0))!=0;
      if ($91) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $93=$d;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$1;
      var $99=$d;
      var $100=(($99+20)|0);
      var $101=HEAP32[(($100)>>2)];
      FUNCTION_TABLE[$97]($98, $101);
      label = 18; break;
    case 18: 
      var $103=$1;
      var $104=$2;
      var $105=$104;
      _mrb_gc_free_iv($103, $105);
      label = 20; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $108=$2;
      var $109=$108;
      var $110=HEAP32[(($109)>>2)];
      var $111=$110 & -256;
      var $112=$111 | 1;
      HEAP32[(($109)>>2)]=$112;
      label = 21; break;
    case 21: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_protect($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)>>>(0)) <= 7;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 4; break;
    case 3: 
      var $7=$1;
      var $8=(($obj)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _gc_protect($7, $11);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_protect($mrb, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$p;
      var $3=$1;
      var $4=(($3+516)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0)) >= 100;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=(($8+516)|0);
      HEAP32[(($9)>>2)]=96;
      var $10=$1;
      var $11=$1;
      var $12=_mrb_class_get($11, ((93440)|0));
      _mrb_raise($10, $12, ((110932)|0));
      label = 3; break;
    case 3: 
      var $14=$2;
      var $15=$1;
      var $16=(($15+516)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)+(1))|0);
      HEAP32[(($16)>>2)]=$18;
      var $19=$1;
      var $20=(($19+116)|0);
      var $21=(($20+($17<<2))|0);
      HEAP32[(($21)>>2)]=$14;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_alloc($mrb, $ttype, $cls) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p;
      $1=$mrb;
      $2=$ttype;
      $3=$cls;
      var $4=$1;
      var $5=(($4+540)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$1;
      var $8=(($7+112)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($6)>>>(0)) < (($9)>>>(0));
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      _mrb_incremental_gc($12);
      label = 3; break;
    case 3: 
      var $14=$1;
      var $15=(($14+108)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))==0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      _add_heap($19);
      label = 5; break;
    case 5: 
      var $21=$1;
      var $22=(($21+108)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      $p=$25;
      var $26=$p;
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$1;
      var $31=(($30+108)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0);
      HEAP32[(($33)>>2)]=$29;
      var $34=$1;
      var $35=(($34+108)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38)|(0))==0;
      if ($39) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $41=$1;
      var $42=$1;
      var $43=(($42+108)|0);
      var $44=HEAP32[(($43)>>2)];
      _unlink_free_heap_page($41, $44);
      label = 7; break;
    case 7: 
      var $46=$1;
      var $47=(($46+112)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=$1;
      var $51=$p;
      _gc_protect($50, $51);
      var $52=$p;
      var $53=$52;
      var $54=$53;
      assert(24 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[((((79804)|0))>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[(((((79804)|0))+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[(((((79804)|0))+(8))>>2)];HEAP32[((($54)+(12))>>2)]=HEAP32[(((((79804)|0))+(12))>>2)];HEAP32[((($54)+(16))>>2)]=HEAP32[(((((79804)|0))+(16))>>2)];HEAP32[((($54)+(20))>>2)]=HEAP32[(((((79804)|0))+(20))>>2)];
      var $55=$2;
      var $56=$p;
      var $57=$55 & 255;
      var $58=$56;
      var $59=$57 & 255;
      var $60=HEAP32[(($58)>>2)];
      var $61=$60 & -256;
      var $62=$61 | $59;
      HEAP32[(($58)>>2)]=$62;
      var $63=$3;
      var $64=$p;
      var $65=(($64+4)|0);
      HEAP32[(($65)>>2)]=$63;
      var $66=$1;
      var $67=(($66+524)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=$p;
      var $70=$68 & 7;
      var $71=$69;
      var $72=$70 & 7;
      var $73=$72 << 8;
      var $74=HEAP32[(($71)>>2)];
      var $75=$74 & -1793;
      var $76=$75 | $73;
      HEAP32[(($71)>>2)]=$76;
      var $77=$p;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_incremental_gc($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $limit;
      var $result;
      $1=$mrb;
      var $2=$1;
      var $3=$2;
      var $4=(($3+552)|0);
      var $5=HEAP8[($4)];
      var $6=$5 & 1;
      var $7=(($6 << 24) >> 24)!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 29; break;
    case 3: 
      var $10=$1;
      var $11=$10;
      var $12=(($11+552)|0);
      var $13=HEAP8[($12)];
      var $14=(($13)&(255)) >>> 2;
      var $15=$14 & 1;
      var $16=(($15)&(255));
      var $17=(($16)|(0))!=0;
      if ($17) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $19=$1;
      var $20=$19;
      var $21=(($20+552)|0);
      var $22=HEAP8[($21)];
      var $23=(($22)&(255)) >>> 1;
      var $24=$23 & 1;
      var $25=(($24 << 24) >> 24)!=0;
      if ($25) { label = 9; break; } else { label = 5; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $28=$1;
      var $29=_incremental_gc($28, -1);
      label = 7; break;
    case 7: 
      var $31=$1;
      var $32=(($31+520)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 6; break; } else { label = 8; break; }
    case 8: 
      label = 15; break;
    case 9: 
      $limit=0;
      $result=0;
      var $37=$1;
      var $38=(($37+548)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)*(10))&-1);
      $limit=$40;
      label = 10; break;
    case 10: 
      var $42=$result;
      var $43=$limit;
      var $44=(($42)>>>(0)) < (($43)>>>(0));
      if ($44) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $46=$1;
      var $47=$limit;
      var $48=_incremental_gc($46, $47);
      var $49=$result;
      var $50=((($49)+($48))|0);
      $result=$50;
      var $51=$1;
      var $52=(($51+520)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53)|(0))==0;
      if ($54) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 14; break;
    case 13: 
      label = 10; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $59=$1;
      var $60=(($59+520)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))==0;
      if ($62) { label = 16; break; } else { label = 28; break; }
    case 16: 
      var $64=$1;
      var $65=(($64+536)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=Math.floor(((($66)>>>(0)))/(100));
      var $68=$1;
      var $69=(($68+544)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=Math.imul($67,$70);
      var $72=$1;
      var $73=(($72+540)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$1;
      var $75=(($74+540)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)>>>(0)) < 1024;
      if ($77) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $79=$1;
      var $80=(($79+540)|0);
      HEAP32[(($80)>>2)]=1024;
      label = 18; break;
    case 18: 
      var $82=$1;
      var $83=$82;
      var $84=(($83+552)|0);
      var $85=HEAP8[($84)];
      var $86=(($85)&(255)) >>> 2;
      var $87=$86 & 1;
      var $88=(($87)&(255));
      var $89=(($88)|(0))!=0;
      if ($89) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $91=$1;
      var $92=$91;
      var $93=(($92+552)|0);
      var $94=HEAP8[($93)];
      var $95=(($94)&(255)) >>> 1;
      var $96=$95 & 1;
      var $97=(($96)&(255));
      var $98=(($97)|(0))!=0;
      if ($98) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$1;
      var $101=(($100+536)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=Math.floor(((($102)>>>(0)))/(100));
      var $104=((($103)*(200))&-1);
      var $105=$1;
      var $106=(($105+556)|0);
      HEAP32[(($106)>>2)]=$104;
      var $107=$1;
      var $108=$107;
      var $109=(($108+552)|0);
      var $110=HEAP8[($109)];
      var $111=$110 & -3;
      HEAP8[($109)]=$111;
      label = 27; break;
    case 21: 
      var $113=$1;
      var $114=$113;
      var $115=(($114+552)|0);
      var $116=HEAP8[($115)];
      var $117=(($116)&(255)) >>> 2;
      var $118=$117 & 1;
      var $119=(($118)&(255));
      var $120=(($119)|(0))!=0;
      if ($120) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $122=$1;
      var $123=$122;
      var $124=(($123+552)|0);
      var $125=HEAP8[($124)];
      var $126=(($125)&(255)) >>> 1;
      var $127=$126 & 1;
      var $128=(($127 << 24) >> 24)!=0;
      if ($128) { label = 26; break; } else { label = 23; break; }
    case 23: 
      var $130=$1;
      var $131=(($130+112)|0);
      var $132=HEAP32[(($131)>>2)];
      var $133=$1;
      var $134=(($133+556)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($132)>>>(0)) > (($135)>>>(0));
      if ($136) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $138=$1;
      _clear_all_old($138);
      var $139=$1;
      var $140=$139;
      var $141=(($140+552)|0);
      var $142=HEAP8[($141)];
      var $143=$142 & -3;
      var $144=$143 | 2;
      HEAP8[($141)]=$144;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 29; break;
    case 28: 
      var $149=$1;
      var $150=(($149+112)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=((($151)+(1024))|0);
      var $153=$1;
      var $154=(($153+540)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 29; break;
    case 29: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$obj;
      var $3=$2;
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      label = 6; break;
    case 3: 
      var $7=$2;
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 8;
      var $11=$10 & 7;
      var $12=$11 & 3;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 6; break;
    case 5: 
      var $16=$1;
      var $17=$2;
      _add_gray_list($16, $17);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_gc($mrb, $limit) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tried_sweep;
      $2=$mrb;
      $3=$limit;
      var $4=$2;
      var $5=(($4+520)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==0) {
        label = 2; break;
      }
      else if ((($6)|(0))==1) {
        label = 3; break;
      }
      else if ((($6)|(0))==2) {
        label = 6; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $8=$2;
      _root_scan_phase($8);
      var $9=$2;
      var $10=(($9+520)|0);
      HEAP32[(($10)>>2)]=1;
      var $11=$2;
      var $12=(($11+524)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 ^ 3;
      var $15=$2;
      var $16=(($15+524)|0);
      HEAP32[(($16)>>2)]=$14;
      $1=0;
      label = 10; break;
    case 3: 
      var $18=$2;
      var $19=(($18+528)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$2;
      var $24=$3;
      var $25=_incremental_marking_phase($23, $24);
      $1=$25;
      label = 10; break;
    case 5: 
      var $27=$2;
      _final_marking_phase($27);
      var $28=$2;
      _prepare_incremental_sweep($28);
      $1=0;
      label = 10; break;
    case 6: 
      $tried_sweep=0;
      var $30=$2;
      var $31=$3;
      var $32=_incremental_sweep_phase($30, $31);
      $tried_sweep=$32;
      var $33=$tried_sweep;
      var $34=(($33)|(0))==0;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $36=$2;
      var $37=(($36+520)|0);
      HEAP32[(($37)>>2)]=0;
      label = 8; break;
    case 8: 
      var $39=$tried_sweep;
      $1=$39;
      label = 10; break;
    case 9: 
      $1=0;
      label = 10; break;
    case 10: 
      var $42=$1;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _clear_all_old($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $origin_mode;
      $1=$mrb;
      var $2=$1;
      var $3=$2;
      var $4=(($3+552)|0);
      var $5=HEAP8[($4)];
      var $6=(($5)&(255)) >>> 2;
      var $7=$6 & 1;
      var $8=(($7)&(255));
      $origin_mode=$8;
      var $9=$1;
      var $10=$9;
      var $11=(($10+552)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&(255)) >>> 2;
      var $14=$13 & 1;
      var $15=(($14)&(255));
      var $16=(($15)|(0))!=0;
      if ($16) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $18=$1;
      var $19=$18;
      var $20=(($19+552)|0);
      var $21=HEAP8[($20)];
      var $22=(($21)&(255)) >>> 1;
      var $23=$22 & 1;
      var $24=(($23)&(255));
      var $25=(($24)|(0))!=0;
      if ($25) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $27=$1;
      _advance_phase($27, 0);
      label = 4; break;
    case 4: 
      var $29=$1;
      var $30=$29;
      var $31=(($30+552)|0);
      var $32=HEAP8[($31)];
      var $33=$32 & -5;
      HEAP8[($31)]=$33;
      var $34=$1;
      _prepare_incremental_sweep($34);
      var $35=$1;
      _advance_phase($35, 0);
      var $36=$1;
      var $37=(($36+528)|0);
      HEAP32[(($37)>>2)]=0;
      var $38=$1;
      var $39=(($38+532)|0);
      HEAP32[(($39)>>2)]=0;
      var $40=$origin_mode;
      var $41=(($40) & 255);
      var $42=$1;
      var $43=$41 & 1;
      var $44=$42;
      var $45=(($44+552)|0);
      var $46=$43 & 1;
      var $47=$46 << 2;
      var $48=HEAP8[($45)];
      var $49=$48 & -5;
      var $50=$49 | $47;
      HEAP8[($45)]=$50;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_field_write_barrier($mrb, $obj, $value) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$obj;
      $3=$value;
      var $4=$2;
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6 >>> 8;
      var $8=$7 & 7;
      var $9=$8 & 4;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 9; break;
    case 3: 
      var $13=$3;
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 >>> 8;
      var $17=$16 & 7;
      var $18=$17 & 3;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 4; break; }
    case 4: 
      label = 9; break;
    case 5: 
      var $22=$1;
      var $23=$22;
      var $24=(($23+552)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&(255)) >>> 2;
      var $27=$26 & 1;
      var $28=(($27)&(255));
      var $29=(($28)|(0))!=0;
      if ($29) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $31=$1;
      var $32=(($31+520)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))==1;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $36=$1;
      var $37=$3;
      _add_gray_list($36, $37);
      label = 9; break;
    case 8: 
      var $39=$1;
      var $40=(($39+524)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$2;
      var $43=$41 & 7;
      var $44=$42;
      var $45=$43 & 7;
      var $46=$45 << 8;
      var $47=HEAP32[(($44)>>2)];
      var $48=$47 & -1793;
      var $49=$48 | $46;
      HEAP32[(($44)>>2)]=$49;
      label = 9; break;
    case 9: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepare_incremental_sweep($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+520)|0);
  HEAP32[(($3)>>2)]=2;
  var $4=$1;
  var $5=(($4+100)|0);
  var $6=HEAP32[(($5)>>2)];
  var $7=$1;
  var $8=(($7+104)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$1;
  var $10=(($9+112)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$1;
  var $13=(($12+536)|0);
  HEAP32[(($13)>>2)]=$11;
  return;
}
function _mrb_objspace_each_objects($mrb, $callback, $data) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $page;
      var $p;
      var $pend;
      $1=$mrb;
      $2=$callback;
      $3=$data;
      var $4=$1;
      var $5=(($4+100)|0);
      var $6=HEAP32[(($5)>>2)];
      $page=$6;
      label = 2; break;
    case 2: 
      var $8=$page;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $11=$page;
      var $12=(($11+24)|0);
      var $13=(($12)|0);
      $p=$13;
      var $14=$p;
      var $15=(($14+24576)|0);
      $pend=$15;
      label = 4; break;
    case 4: 
      var $17=$p;
      var $18=$pend;
      var $19=(($17)>>>(0)) < (($18)>>>(0));
      if ($19) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $21=$2;
      var $22=$1;
      var $23=$p;
      var $24=(($23)|0);
      var $25=$24;
      var $26=$3;
      FUNCTION_TABLE[$21]($22, $25, $26);
      label = 6; break;
    case 6: 
      var $28=$p;
      var $29=(($28+24)|0);
      $p=$29;
      label = 4; break;
    case 7: 
      var $31=$page;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      $page=$33;
      label = 2; break;
    case 8: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_gc($mrb) {
  var label = 0;
  var $1;
  var $gc;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((105080)|0));
  $gc=$3;
  var $4=$1;
  var $5=$gc;
  _mrb_define_class_method($4, $5, ((102196)|0), 268, 0);
  var $6=$1;
  var $7=$gc;
  _mrb_define_class_method($6, $7, ((99568)|0), 640, 0);
  var $8=$1;
  var $9=$gc;
  _mrb_define_class_method($8, $9, ((97236)|0), 106, 0);
  var $10=$1;
  var $11=$gc;
  _mrb_define_class_method($10, $11, ((96028)|0), 110, 0);
  var $12=$1;
  var $13=$gc;
  _mrb_define_class_method($12, $13, ((94964)|0), 266, 262144);
  var $14=$1;
  var $15=$gc;
  _mrb_define_class_method($14, $15, ((94136)|0), 400, 0);
  var $16=$1;
  var $17=$gc;
  _mrb_define_class_method($16, $17, ((93260)|0), 652, 262144);
  var $18=$1;
  var $19=$gc;
  _mrb_define_class_method($18, $19, ((113432)|0), 362, 262144);
  var $20=$1;
  var $21=$gc;
  _mrb_define_class_method($20, $21, ((112580)|0), 190, 0);
  return;
}
function _gc_start($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_garbage_collect($2);
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_enable($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $old;
  $1=$mrb;
  var $2=$1;
  var $3=$2;
  var $4=(($3+552)|0);
  var $5=HEAP8[($4)];
  var $6=$5 & 1;
  var $7=(($6)&(255));
  $old=$7;
  var $8=$1;
  var $9=$8;
  var $10=(($9+552)|0);
  var $11=HEAP8[($10)];
  var $12=$11 & -2;
  HEAP8[($10)]=$12;
  var $13=$old;
  var $14=(($13) & 255);
  _mrb_bool_value1003($agg_result, $14);
  STACKTOP = __stackBase__;
  return;
}
function _gc_disable($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $old;
  $1=$mrb;
  var $2=$1;
  var $3=$2;
  var $4=(($3+552)|0);
  var $5=HEAP8[($4)];
  var $6=$5 & 1;
  var $7=(($6)&(255));
  $old=$7;
  var $8=$1;
  var $9=$8;
  var $10=(($9+552)|0);
  var $11=HEAP8[($10)];
  var $12=$11 & -2;
  var $13=$12 | 1;
  HEAP8[($10)]=$13;
  var $14=$old;
  var $15=(($14) & 255);
  _mrb_bool_value1003($agg_result, $15);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_get($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+544)|0);
  var $4=HEAP32[(($3)>>2)];
  _mrb_fixnum_value1005($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _gc_interval_ratio_set($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ratio=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
  var $4=HEAP32[(($ratio)>>2)];
  var $5=$1;
  var $6=(($5+544)|0);
  HEAP32[(($6)>>2)]=$4;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_get($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+548)|0);
  var $4=HEAP32[(($3)>>2)];
  _mrb_fixnum_value1005($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _gc_step_ratio_set($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ratio=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111428)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ratio,tempInt));
  var $4=HEAP32[(($ratio)>>2)];
  var $5=$1;
  var $6=(($5+548)|0);
  HEAP32[(($6)>>2)]=$4;
  _mrb_nil_value1004($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _gc_generational_mode_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $enable=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((112032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$enable,tempInt));
      var $4=$1;
      var $5=$4;
      var $6=(($5+552)|0);
      var $7=HEAP8[($6)];
      var $8=(($7)&(255)) >>> 2;
      var $9=$8 & 1;
      var $10=(($9)&(255));
      var $11=HEAP8[($enable)];
      var $12=(($11)&(255));
      var $13=(($10)|(0))!=(($12)|(0));
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$1;
      var $16=HEAP8[($enable)];
      var $17=(($16)&(255));
      _change_gen_gc_mode($15, $17);
      label = 3; break;
    case 3: 
      var $19=HEAP8[($enable)];
      _mrb_bool_value1003($agg_result, $19);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_generational_mode_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$2;
  var $4=(($3+552)|0);
  var $5=HEAP8[($4)];
  var $6=(($5)&(255)) >>> 2;
  var $7=$6 & 1;
  _mrb_bool_value1003($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value1003($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _change_gen_gc_mode($mrb, $enable) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$enable;
      var $3=$1;
      var $4=$3;
      var $5=(($4+552)|0);
      var $6=HEAP8[($5)];
      var $7=(($6)&(255)) >>> 2;
      var $8=$7 & 1;
      var $9=(($8)&(255));
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=$2;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$1;
      _clear_all_old($15);
      var $16=$1;
      var $17=$16;
      var $18=(($17+552)|0);
      var $19=HEAP8[($18)];
      var $20=$19 & -3;
      HEAP8[($18)]=$20;
      label = 8; break;
    case 4: 
      var $22=$1;
      var $23=$22;
      var $24=(($23+552)|0);
      var $25=HEAP8[($24)];
      var $26=(($25)&(255)) >>> 2;
      var $27=$26 & 1;
      var $28=(($27 << 24) >> 24)!=0;
      if ($28) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $30=$2;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $33=$1;
      _advance_phase($33, 0);
      var $34=$1;
      var $35=(($34+536)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=Math.floor(((($36)>>>(0)))/(100));
      var $38=((($37)*(200))&-1);
      var $39=$1;
      var $40=(($39+556)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$1;
      var $42=$41;
      var $43=(($42+552)|0);
      var $44=HEAP8[($43)];
      var $45=$44 & -3;
      HEAP8[($43)]=$45;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $48=$2;
      var $49=(($48) & 255);
      var $50=$1;
      var $51=$49 & 1;
      var $52=$50;
      var $53=(($52+552)|0);
      var $54=$51 & 1;
      var $55=$54 << 2;
      var $56=HEAP8[($53)];
      var $57=$56 & -5;
      var $58=$57 | $55;
      HEAP8[($53)]=$58;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _advance_phase($mrb, $to_state) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$to_state;
      label = 2; break;
    case 2: 
      var $4=$1;
      var $5=(($4+520)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=$2;
      var $8=(($6)|(0))!=(($7)|(0));
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$1;
      var $11=_incremental_gc($10, -1);
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1004($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1005($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _root_scan_phase($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $j;
      var $i;
      var $e;
      var $len;
      var $irep;
      $1=$mrb;
      var $2=$1;
      var $3=$2;
      var $4=(($3+552)|0);
      var $5=HEAP8[($4)];
      var $6=(($5)&(255)) >>> 2;
      var $7=$6 & 1;
      var $8=(($7)&(255));
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$11;
      var $13=(($12+552)|0);
      var $14=HEAP8[($13)];
      var $15=(($14)&(255)) >>> 1;
      var $16=$15 & 1;
      var $17=(($16 << 24) >> 24)!=0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$1;
      var $20=(($19+528)|0);
      HEAP32[(($20)>>2)]=0;
      var $21=$1;
      var $22=(($21+532)|0);
      HEAP32[(($22)>>2)]=0;
      label = 4; break;
    case 4: 
      var $24=$1;
      _mrb_gc_mark_gv($24);
      $i=0;
      var $25=$1;
      var $26=(($25+516)|0);
      var $27=HEAP32[(($26)>>2)];
      $e=$27;
      label = 5; break;
    case 5: 
      var $29=$i;
      var $30=$e;
      var $31=(($29)>>>(0)) < (($30)>>>(0));
      if ($31) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $33=$1;
      var $34=$i;
      var $35=$1;
      var $36=(($35+116)|0);
      var $37=(($36+($34<<2))|0);
      var $38=HEAP32[(($37)>>2)];
      _mrb_gc_mark($33, $38);
      label = 7; break;
    case 7: 
      var $40=$i;
      var $41=((($40)+(1))|0);
      $i=$41;
      label = 5; break;
    case 8: 
      var $43=$1;
      var $44=$1;
      var $45=(($44+44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      _mrb_gc_mark($43, $47);
      var $48=$1;
      var $49=$1;
      var $50=(($49+40)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      _mrb_gc_mark($48, $52);
      var $53=$1;
      var $54=$1;
      var $55=(($54+16)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=$56;
      _mrb_gc_mark($53, $57);
      var $58=$1;
      var $59=$1;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      _mark_context($58, $61);
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|(0))!=0;
      if ($65) { label = 9; break; } else { label = 26; break; }
    case 9: 
      var $67=$1;
      var $68=(($67+28)|0);
      var $69=HEAP32[(($68)>>2)];
      $len=$69;
      var $70=$len;
      var $71=$1;
      var $72=(($71+32)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70)>>>(0)) > (($73)>>>(0));
      if ($74) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $76=$1;
      var $77=(($76+32)|0);
      var $78=HEAP32[(($77)>>2)];
      $len=$78;
      label = 11; break;
    case 11: 
      $i=0;
      label = 12; break;
    case 12: 
      var $81=$i;
      var $82=$len;
      var $83=(($81)>>>(0)) < (($82)>>>(0));
      if ($83) { label = 13; break; } else { label = 25; break; }
    case 13: 
      var $85=$i;
      var $86=$1;
      var $87=(($86+24)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+($85<<2))|0);
      var $90=HEAP32[(($89)>>2)];
      $irep=$90;
      var $91=$irep;
      var $92=(($91)|(0))!=0;
      if ($92) { label = 15; break; } else { label = 14; break; }
    case 14: 
      label = 24; break;
    case 15: 
      $j=0;
      label = 16; break;
    case 16: 
      var $96=$j;
      var $97=$irep;
      var $98=(($97+36)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($96)>>>(0)) < (($99)>>>(0));
      if ($100) { label = 17; break; } else { label = 23; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $103=$j;
      var $104=$irep;
      var $105=(($104+16)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=(($106+((($103)*(12))&-1))|0);
      var $108=(($107+8)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($109)>>>(0)) >= 8;
      if ($110) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $112=$1;
      var $113=$j;
      var $114=$irep;
      var $115=(($114+16)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($116+((($113)*(12))&-1))|0);
      var $118=(($117)|0);
      var $119=$118;
      var $120=HEAP32[(($119)>>2)];
      var $121=$120;
      _mrb_gc_mark($112, $121);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $125=$j;
      var $126=((($125)+(1))|0);
      $j=$126;
      label = 16; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $129=$i;
      var $130=((($129)+(1))|0);
      $i=$130;
      label = 12; break;
    case 25: 
      label = 26; break;
    case 26: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_marking_phase($mrb, $limit) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $tried_marks;
      $1=$mrb;
      $2=$limit;
      $tried_marks=0;
      label = 2; break;
    case 2: 
      var $4=$1;
      var $5=(($4+528)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { var $13 = 0;label = 4; break; }
    case 3: 
      var $9=$tried_marks;
      var $10=$2;
      var $11=(($9)>>>(0)) < (($10)>>>(0));
      var $13 = $11;label = 4; break;
    case 4: 
      var $13;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$1;
      var $16=$1;
      var $17=(($16+528)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_gc_gray_mark($15, $18);
      var $20=$tried_marks;
      var $21=((($20)+($19))|0);
      $tried_marks=$21;
      label = 2; break;
    case 6: 
      var $23=$tried_marks;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _final_marking_phase($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3+528)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $8=$1;
      var $9=(($8+528)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12 >>> 8;
      var $14=$13 & 7;
      var $15=(($14)|(0))==0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=(($18+528)|0);
      var $20=HEAP32[(($19)>>2)];
      _gc_mark_children($17, $20);
      label = 6; break;
    case 5: 
      var $22=$1;
      var $23=(($22+528)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$1;
      var $28=(($27+528)|0);
      HEAP32[(($28)>>2)]=$26;
      label = 6; break;
    case 6: 
      label = 2; break;
    case 7: 
      var $31=$1;
      var $32=(($31+532)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$1;
      var $35=(($34+528)|0);
      HEAP32[(($35)>>2)]=$33;
      var $36=$1;
      var $37=(($36+532)|0);
      HEAP32[(($37)>>2)]=0;
      label = 8; break;
    case 8: 
      var $39=$1;
      var $40=(($39+528)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))!=0;
      if ($42) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $44=$1;
      var $45=(($44+528)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 8;
      var $50=$49 & 7;
      var $51=(($50)|(0))==0;
      if ($51) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $53=$1;
      var $54=$1;
      var $55=(($54+528)|0);
      var $56=HEAP32[(($55)>>2)];
      _gc_mark_children($53, $56);
      label = 12; break;
    case 11: 
      var $58=$1;
      var $59=(($58+528)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$1;
      var $64=(($63+528)|0);
      HEAP32[(($64)>>2)]=$62;
      label = 12; break;
    case 12: 
      label = 8; break;
    case 13: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _unlink_heap_page($mrb, $page) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$page;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$2;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13+8)|0);
      HEAP32[(($14)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $16=$2;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+4)|0);
      HEAP32[(($27)>>2)]=$23;
      label = 5; break;
    case 5: 
      var $29=$1;
      var $30=(($29+100)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$2;
      var $33=(($31)|(0))==(($32)|(0));
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+8)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$1;
      var $39=(($38+100)|0);
      HEAP32[(($39)>>2)]=$37;
      label = 7; break;
    case 7: 
      var $41=$2;
      var $42=(($41+4)|0);
      HEAP32[(($42)>>2)]=0;
      var $43=$2;
      var $44=(($43+8)|0);
      HEAP32[(($44)>>2)]=0;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _link_free_heap_page($mrb, $page) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$page;
      var $3=$1;
      var $4=(($3+108)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+12)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$1;
      var $9=(($8+108)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$2;
      var $14=$1;
      var $15=(($14+108)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+16)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 3; break;
    case 3: 
      var $19=$2;
      var $20=$1;
      var $21=(($20+108)|0);
      HEAP32[(($21)>>2)]=$19;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _incremental_sweep_phase($mrb, $limit) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $page;
      var $tried_sweep;
      var $p;
      var $e;
      var $freed;
      var $dead_slot;
      var $full;
      var $next;
      $1=$mrb;
      $2=$limit;
      var $3=$1;
      var $4=(($3+104)|0);
      var $5=HEAP32[(($4)>>2)];
      $page=$5;
      $tried_sweep=0;
      label = 2; break;
    case 2: 
      var $7=$page;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { var $14 = 0;label = 4; break; }
    case 3: 
      var $10=$tried_sweep;
      var $11=$2;
      var $12=(($10)>>>(0)) < (($11)>>>(0));
      var $14 = $12;label = 4; break;
    case 4: 
      var $14;
      if ($14) { label = 5; break; } else { label = 33; break; }
    case 5: 
      var $16=$page;
      var $17=(($16+24)|0);
      var $18=(($17)|0);
      $p=$18;
      var $19=$p;
      var $20=(($19+24576)|0);
      $e=$20;
      $freed=0;
      $dead_slot=1;
      var $21=$page;
      var $22=(($21)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==0;
      var $25=(($24)&(1));
      $full=$25;
      var $26=$1;
      var $27=$26;
      var $28=(($27+552)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255)) >>> 2;
      var $31=$30 & 1;
      var $32=(($31)&(255));
      var $33=(($32)|(0))!=0;
      if ($33) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $35=$1;
      var $36=$35;
      var $37=(($36+552)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255)) >>> 1;
      var $40=$39 & 1;
      var $41=(($40 << 24) >> 24)!=0;
      if ($41) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $43=$page;
      var $44=$43;
      var $45=(($44+20)|0);
      var $46=HEAP8[($45)];
      var $47=$46 & 1;
      var $48=(($47)&(255));
      var $49=(($48)|(0))!=0;
      if ($49) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $51=$e;
      $p=$51;
      $dead_slot=0;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $54=$p;
      var $55=$e;
      var $56=(($54)>>>(0)) < (($55)>>>(0));
      if ($56) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $58=$p;
      var $59=(($58)|0);
      var $60=$59;
      var $61=$60;
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 >>> 8;
      var $64=$63 & 7;
      var $65=$1;
      var $66=(($65+524)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 ^ 3;
      var $69=$64 & $68;
      var $70=$69 & 3;
      var $71=(($70)|(0))!=0;
      if ($71) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $73=$p;
      var $74=(($73)|0);
      var $75=$74;
      var $76=$75;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77 & 255;
      var $79=(($78)|(0))==1;
      if ($79) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $81=$p;
      var $82=(($81)|0);
      var $83=$82;
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      var $86=$85 & 255;
      var $87=(($86)|(0))!=1;
      if ($87) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $89=$1;
      var $90=$p;
      var $91=(($90)|0);
      var $92=$91;
      _obj_free($89, $92);
      var $93=$page;
      var $94=(($93)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=$p;
      var $97=(($96)|0);
      var $98=$97;
      var $99=(($98+12)|0);
      HEAP32[(($99)>>2)]=$95;
      var $100=$p;
      var $101=$100;
      var $102=$page;
      var $103=(($102)|0);
      HEAP32[(($103)>>2)]=$101;
      var $104=$freed;
      var $105=((($104)+(1))|0);
      $freed=$105;
      label = 15; break;
    case 15: 
      label = 19; break;
    case 16: 
      var $108=$1;
      var $109=$108;
      var $110=(($109+552)|0);
      var $111=HEAP8[($110)];
      var $112=(($111)&(255)) >>> 2;
      var $113=$112 & 1;
      var $114=(($113 << 24) >> 24)!=0;
      if ($114) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $116=$1;
      var $117=(($116+524)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$p;
      var $120=(($119)|0);
      var $121=$120;
      var $122=$118 & 7;
      var $123=$121;
      var $124=$122 & 7;
      var $125=$124 << 8;
      var $126=HEAP32[(($123)>>2)];
      var $127=$126 & -1793;
      var $128=$127 | $125;
      HEAP32[(($123)>>2)]=$128;
      label = 18; break;
    case 18: 
      $dead_slot=0;
      label = 19; break;
    case 19: 
      var $131=$p;
      var $132=(($131+24)|0);
      $p=$132;
      label = 10; break;
    case 20: 
      var $134=$dead_slot;
      var $135=(($134)|(0))!=0;
      if ($135) { label = 21; break; } else { label = 23; break; }
    case 21: 
      var $137=$freed;
      var $138=(($137)>>>(0)) < 1024;
      if ($138) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $140=$page;
      var $141=(($140+8)|0);
      var $142=HEAP32[(($141)>>2)];
      $next=$142;
      var $143=$1;
      var $144=$page;
      _unlink_heap_page($143, $144);
      var $145=$1;
      var $146=$page;
      _unlink_free_heap_page($145, $146);
      var $147=$1;
      var $148=$page;
      var $149=$148;
      _mrb_free($147, $149);
      var $150=$next;
      $page=$150;
      label = 32; break;
    case 23: 
      var $152=$full;
      var $153=(($152)|(0))!=0;
      if ($153) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $155=$freed;
      var $156=(($155)>>>(0)) > 0;
      if ($156) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $158=$1;
      var $159=$page;
      _link_free_heap_page($158, $159);
      label = 26; break;
    case 26: 
      var $161=$page;
      var $162=(($161)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163)|(0))==0;
      if ($164) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $166=$1;
      var $167=$166;
      var $168=(($167+552)|0);
      var $169=HEAP8[($168)];
      var $170=(($169)&(255)) >>> 2;
      var $171=$170 & 1;
      var $172=(($171)&(255));
      var $173=(($172)|(0))!=0;
      if ($173) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $175=$1;
      var $176=$175;
      var $177=(($176+552)|0);
      var $178=HEAP8[($177)];
      var $179=(($178)&(255)) >>> 1;
      var $180=$179 & 1;
      var $181=(($180 << 24) >> 24)!=0;
      if ($181) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $183=$page;
      var $184=$183;
      var $185=(($184+20)|0);
      var $186=HEAP8[($185)];
      var $187=$186 & -2;
      var $188=$187 | 1;
      HEAP8[($185)]=$188;
      label = 31; break;
    case 30: 
      var $190=$page;
      var $191=$190;
      var $192=(($191+20)|0);
      var $193=HEAP8[($192)];
      var $194=$193 & -2;
      HEAP8[($192)]=$194;
      label = 31; break;
    case 31: 
      var $196=$page;
      var $197=(($196+8)|0);
      var $198=HEAP32[(($197)>>2)];
      $page=$198;
      label = 32; break;
    case 32: 
      var $200=$tried_sweep;
      var $201=((($200)+(1024))|0);
      $tried_sweep=$201;
      var $202=$freed;
      var $203=$1;
      var $204=(($203+112)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=((($205)-($202))|0);
      HEAP32[(($204)>>2)]=$206;
      var $207=$freed;
      var $208=$1;
      var $209=(($208+536)|0);
      var $210=HEAP32[(($209)>>2)];
      var $211=((($210)-($207))|0);
      HEAP32[(($209)>>2)]=$211;
      label = 2; break;
    case 33: 
      var $213=$page;
      var $214=$1;
      var $215=(($214+104)|0);
      HEAP32[(($215)>>2)]=$213;
      var $216=$tried_sweep;
      return $216;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_mark_children($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      var $p;
      var $e;
      var $i;
      var $len;
      var $c1;
      var $a;
      var $i2;
      var $e3;
      var $r;
      $1=$mrb;
      $2=$obj;
      var $3=$2;
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5 & -1793;
      var $7=$6 | 1024;
      HEAP32[(($4)>>2)]=$7;
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$1;
      var $12=(($11+528)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$1;
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      _mrb_gc_mark($13, $17);
      var $18=$2;
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & 255;
      if ((($21)|(0))==11) {
        label = 2; break;
      }
      else if ((($21)|(0))==9 | (($21)|(0))==10 | (($21)|(0))==12) {
        label = 3; break;
      }
      else if ((($21)|(0))==8 | (($21)|(0))==21) {
        label = 4; break;
      }
      else if ((($21)|(0))==13) {
        label = 5; break;
      }
      else if ((($21)|(0))==20) {
        label = 6; break;
      }
      else if ((($21)|(0))==22) {
        label = 17; break;
      }
      else if ((($21)|(0))==14) {
        label = 18; break;
      }
      else if ((($21)|(0))==15) {
        label = 27; break;
      }
      else if ((($21)|(0))==16) {
        label = 28; break;
      }
      else if ((($21)|(0))==17) {
        label = 29; break;
      }
      else {
      label = 40; break;
      }
    case 2: 
      var $23=$1;
      var $24=$2;
      var $25=$24;
      var $26=(($25+20)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      _mrb_gc_mark($23, $28);
      label = 41; break;
    case 3: 
      var $30=$2;
      var $31=$30;
      $c=$31;
      var $32=$1;
      var $33=$c;
      _mrb_gc_mark_mt($32, $33);
      var $34=$1;
      var $35=$c;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      _mrb_gc_mark($34, $38);
      label = 4; break;
    case 4: 
      var $40=$1;
      var $41=$2;
      var $42=$41;
      _mrb_gc_mark_iv($40, $42);
      label = 41; break;
    case 5: 
      var $44=$2;
      var $45=$44;
      $p=$45;
      var $46=$1;
      var $47=$p;
      var $48=(($47+20)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      _mrb_gc_mark($46, $50);
      var $51=$1;
      var $52=$p;
      var $53=(($52+16)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      _mrb_gc_mark($51, $55);
      label = 41; break;
    case 6: 
      var $57=$2;
      var $58=$57;
      $e=$58;
      var $59=$e;
      var $60=(($59+20)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0)) < 0;
      if ($62) { label = 7; break; } else { label = 16; break; }
    case 7: 
      var $64=$e;
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=$66 >>> 11;
      var $68=$67 & 2097151;
      $len=$68;
      $i=0;
      label = 8; break;
    case 8: 
      var $70=$i;
      var $71=$len;
      var $72=(($70)|(0)) < (($71)|(0));
      if ($72) { label = 9; break; } else { label = 15; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $75=$i;
      var $76=$e;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+((($75)*(12))&-1))|0);
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($81)>>>(0)) >= 8;
      if ($82) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $84=$1;
      var $85=$i;
      var $86=$e;
      var $87=(($86+12)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=(($88+((($85)*(12))&-1))|0);
      var $90=(($89)|0);
      var $91=$90;
      var $92=HEAP32[(($91)>>2)];
      var $93=$92;
      _mrb_gc_mark($84, $93);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $97=$i;
      var $98=((($97)+(1))|0);
      $i=$98;
      label = 8; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 41; break;
    case 17: 
      var $102=$2;
      var $103=$102;
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      $c1=$105;
      var $106=$1;
      var $107=$c1;
      _mark_context($106, $107);
      label = 41; break;
    case 18: 
      var $109=$2;
      var $110=$109;
      $a=$110;
      $i2=0;
      var $111=$a;
      var $112=(($111+12)|0);
      var $113=HEAP32[(($112)>>2)];
      $e3=$113;
      label = 19; break;
    case 19: 
      var $115=$i2;
      var $116=$e3;
      var $117=(($115)>>>(0)) < (($116)>>>(0));
      if ($117) { label = 20; break; } else { label = 26; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $120=$i2;
      var $121=$a;
      var $122=(($121+20)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($123+((($120)*(12))&-1))|0);
      var $125=(($124+8)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126)>>>(0)) >= 8;
      if ($127) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $129=$1;
      var $130=$i2;
      var $131=$a;
      var $132=(($131+20)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=(($133+((($130)*(12))&-1))|0);
      var $135=(($134)|0);
      var $136=$135;
      var $137=HEAP32[(($136)>>2)];
      var $138=$137;
      _mrb_gc_mark($129, $138);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $142=$i2;
      var $143=((($142)+(1))|0);
      $i2=$143;
      label = 19; break;
    case 26: 
      label = 41; break;
    case 27: 
      var $146=$1;
      var $147=$2;
      var $148=$147;
      _mrb_gc_mark_iv($146, $148);
      var $149=$1;
      var $150=$2;
      var $151=$150;
      _mrb_gc_mark_hash($149, $151);
      label = 41; break;
    case 28: 
      label = 41; break;
    case 29: 
      var $154=$2;
      var $155=$154;
      $r=$155;
      var $156=$r;
      var $157=(($156+12)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=(($158)|(0))!=0;
      if ($159) { label = 30; break; } else { label = 39; break; }
    case 30: 
      label = 31; break;
    case 31: 
      var $162=$r;
      var $163=(($162+12)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($164)|0);
      var $166=(($165+8)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($167)>>>(0)) >= 8;
      if ($168) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $170=$1;
      var $171=$r;
      var $172=(($171+12)|0);
      var $173=HEAP32[(($172)>>2)];
      var $174=(($173)|0);
      var $175=(($174)|0);
      var $176=$175;
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      _mrb_gc_mark($170, $178);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $182=$r;
      var $183=(($182+12)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($184+12)|0);
      var $186=(($185+8)|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187)>>>(0)) >= 8;
      if ($188) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $190=$1;
      var $191=$r;
      var $192=(($191+12)|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=(($193+12)|0);
      var $195=(($194)|0);
      var $196=$195;
      var $197=HEAP32[(($196)>>2)];
      var $198=$197;
      _mrb_gc_mark($190, $198);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      label = 41; break;
    case 41: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _link_heap_page($mrb, $page) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$page;
      var $3=$1;
      var $4=(($3+100)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+8)|0);
      HEAP32[(($7)>>2)]=$5;
      var $8=$1;
      var $9=(($8+100)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$2;
      var $14=$1;
      var $15=(($14+100)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+4)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 3; break;
    case 3: 
      var $19=$2;
      var $20=$1;
      var $21=(($20+100)|0);
      HEAP32[(($21)>>2)]=$19;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_fill_flags1053($p, $c, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$p;
      $2=$c;
      $3=$len;
      label = 2; break;
    case 2: 
      var $5=$3;
      var $6=((($5)-(1))|0);
      $3=$6;
      var $7=(($5)>>>(0)) > 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=$1;
      var $11=(($10+1)|0);
      $1=$11;
      HEAP8[($10)]=$9;
      label = 2; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mark_context($mrb, $c) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $e;
      var $ci;
      $1=$mrb;
      $2=$c;
      var $3=$2;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$5;
      var $10=$8;
      var $11=((($9)-($10))|0);
      var $12=((((($11)|(0)))/(12))&-1);
      $e=$12;
      var $13=$2;
      var $14=(($13+16)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $18=$2;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$e;
      var $24=((($23)+($22))|0);
      $e=$24;
      label = 3; break;
    case 3: 
      var $26=$2;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$e;
      var $30=(($28+((($29)*(12))&-1))|0);
      var $31=$2;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($30)>>>(0)) > (($33)>>>(0));
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $36=$2;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=$38;
      var $43=$41;
      var $44=((($42)-($43))|0);
      var $45=((((($44)|(0)))/(12))&-1);
      $e=$45;
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $48=$i;
      var $49=$e;
      var $50=(($48)>>>(0)) < (($49)>>>(0));
      if ($50) { label = 7; break; } else { label = 13; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $53=$i;
      var $54=$2;
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+((($53)*(12))&-1))|0);
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)>>>(0)) >= 8;
      if ($60) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $62=$1;
      var $63=$i;
      var $64=$2;
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=(($67)|0);
      var $69=$68;
      var $70=HEAP32[(($69)>>2)];
      var $71=$70;
      _mrb_gc_mark($62, $71);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $75=$i;
      var $76=((($75)+(1))|0);
      $i=$76;
      label = 6; break;
    case 13: 
      var $78=$2;
      var $79=(($78+16)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|(0))!=0;
      if ($81) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $83=$2;
      var $84=(($83+16)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85+36)|0);
      var $87=HEAP32[(($86)>>2)];
      var $90 = $87;label = 16; break;
    case 15: 
      var $90 = 0;label = 16; break;
    case 16: 
      var $90;
      $e=$90;
      $i=0;
      label = 17; break;
    case 17: 
      var $92=$i;
      var $93=$e;
      var $94=(($92)>>>(0)) < (($93)>>>(0));
      if ($94) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $96=$1;
      var $97=$i;
      var $98=$2;
      var $99=(($98+36)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100+($97<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102;
      _mrb_gc_mark($96, $103);
      label = 19; break;
    case 19: 
      var $105=$i;
      var $106=((($105)+(1))|0);
      $i=$106;
      label = 17; break;
    case 20: 
      var $108=$2;
      var $109=(($108+20)|0);
      var $110=HEAP32[(($109)>>2)];
      $ci=$110;
      label = 21; break;
    case 21: 
      var $112=$ci;
      var $113=$2;
      var $114=(($113+16)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($112)>>>(0)) <= (($115)>>>(0));
      if ($116) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $118=$ci;
      var $119=(($118)|(0))!=0;
      if ($119) { label = 24; break; } else { label = 23; break; }
    case 23: 
      label = 25; break;
    case 24: 
      var $122=$1;
      var $123=$ci;
      var $124=(($123+40)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$125;
      _mrb_gc_mark($122, $126);
      var $127=$1;
      var $128=$ci;
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=$130;
      _mrb_gc_mark($127, $131);
      var $132=$1;
      var $133=$ci;
      var $134=(($133+28)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=$135;
      _mrb_gc_mark($132, $136);
      label = 25; break;
    case 25: 
      var $138=$ci;
      var $139=(($138+44)|0);
      $ci=$139;
      label = 21; break;
    case 26: 
      var $141=$2;
      var $142=(($141)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($143)|(0))!=0;
      if ($144) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $146=$2;
      var $147=(($146)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=(($148+48)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($150)|(0))!=0;
      if ($151) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $153=$1;
      var $154=$2;
      var $155=(($154)|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=(($156+48)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$158;
      _mrb_gc_mark($153, $159);
      label = 29; break;
    case 29: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _gc_gray_mark($mrb, $obj) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $children;
      var $c;
      var $c1;
      var $i;
      var $ci;
      var $a;
      $1=$mrb;
      $2=$obj;
      $children=0;
      var $3=$1;
      var $4=$2;
      _gc_mark_children($3, $4);
      var $5=$2;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      if ((($8)|(0))==11) {
        label = 2; break;
      }
      else if ((($8)|(0))==9 | (($8)|(0))==12 | (($8)|(0))==10) {
        label = 3; break;
      }
      else if ((($8)|(0))==8 | (($8)|(0))==21) {
        label = 4; break;
      }
      else if ((($8)|(0))==20) {
        label = 5; break;
      }
      else if ((($8)|(0))==22) {
        label = 6; break;
      }
      else if ((($8)|(0))==14) {
        label = 20; break;
      }
      else if ((($8)|(0))==15) {
        label = 21; break;
      }
      else if ((($8)|(0))==13 | (($8)|(0))==17) {
        label = 22; break;
      }
      else {
      label = 23; break;
      }
    case 2: 
      var $10=$children;
      var $11=((($10)+(1))|0);
      $children=$11;
      label = 24; break;
    case 3: 
      var $13=$2;
      var $14=$13;
      $c=$14;
      var $15=$1;
      var $16=$2;
      var $17=$16;
      var $18=_mrb_gc_mark_iv_size($15, $17);
      var $19=$children;
      var $20=((($19)+($18))|0);
      $children=$20;
      var $21=$1;
      var $22=$c;
      var $23=_mrb_gc_mark_mt_size($21, $22);
      var $24=$children;
      var $25=((($24)+($23))|0);
      $children=$25;
      var $26=$children;
      var $27=((($26)+(1))|0);
      $children=$27;
      label = 24; break;
    case 4: 
      var $29=$1;
      var $30=$2;
      var $31=$30;
      var $32=_mrb_gc_mark_iv_size($29, $31);
      var $33=$children;
      var $34=((($33)+($32))|0);
      $children=$34;
      label = 24; break;
    case 5: 
      var $36=$2;
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 >>> 11;
      var $40=$39 & 2097151;
      var $41=$children;
      var $42=((($41)+($40))|0);
      $children=$42;
      label = 24; break;
    case 6: 
      var $44=$2;
      var $45=$44;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      $c1=$47;
      var $48=$c1;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$c1;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$50;
      var $55=$53;
      var $56=((($54)-($55))|0);
      var $57=((((($56)|(0)))/(12))&-1);
      $i=$57;
      var $58=$c1;
      var $59=(($58+16)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60)|(0))!=0;
      if ($61) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $63=$c1;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$i;
      var $69=((($68)+($67))|0);
      $i=$69;
      label = 8; break;
    case 8: 
      var $71=$c1;
      var $72=(($71+8)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$i;
      var $75=(($73+((($74)*(12))&-1))|0);
      var $76=$c1;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($75)>>>(0)) > (($78)>>>(0));
      if ($79) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $81=$c1;
      var $82=(($81+12)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$c1;
      var $85=(($84+8)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$83;
      var $88=$86;
      var $89=((($87)-($88))|0);
      var $90=((((($89)|(0)))/(12))&-1);
      $i=$90;
      label = 10; break;
    case 10: 
      var $92=$i;
      var $93=$children;
      var $94=((($93)+($92))|0);
      $children=$94;
      var $95=$c1;
      var $96=(($95+16)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97)|(0))!=0;
      if ($98) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $100=$c1;
      var $101=(($100+16)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+36)|0);
      var $104=HEAP32[(($103)>>2)];
      var $107 = $104;label = 13; break;
    case 12: 
      var $107 = 0;label = 13; break;
    case 13: 
      var $107;
      var $108=$children;
      var $109=((($108)+($107))|0);
      $children=$109;
      var $110=$c1;
      var $111=(($110+20)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=(($112)|(0))!=0;
      if ($113) { label = 14; break; } else { label = 19; break; }
    case 14: 
      $i=0;
      var $115=$c1;
      var $116=(($115+20)|0);
      var $117=HEAP32[(($116)>>2)];
      $ci=$117;
      label = 15; break;
    case 15: 
      var $119=$ci;
      var $120=$c1;
      var $121=(($120+16)|0);
      var $122=HEAP32[(($121)>>2)];
      var $123=(($119)>>>(0)) <= (($122)>>>(0));
      if ($123) { label = 16; break; } else { label = 18; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $126=$i;
      var $127=((($126)+(1))|0);
      $i=$127;
      var $128=$ci;
      var $129=(($128+44)|0);
      $ci=$129;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $132=$i;
      var $133=$children;
      var $134=((($133)+($132))|0);
      $children=$134;
      label = 24; break;
    case 20: 
      var $136=$2;
      var $137=$136;
      $a=$137;
      var $138=$a;
      var $139=(($138+12)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$children;
      var $142=((($141)+($140))|0);
      $children=$142;
      label = 24; break;
    case 21: 
      var $144=$1;
      var $145=$2;
      var $146=$145;
      var $147=_mrb_gc_mark_iv_size($144, $146);
      var $148=$children;
      var $149=((($148)+($147))|0);
      $children=$149;
      var $150=$1;
      var $151=$2;
      var $152=$151;
      var $153=_mrb_gc_mark_hash_size($150, $152);
      var $154=$children;
      var $155=((($154)+($153))|0);
      $children=$155;
      label = 24; break;
    case 22: 
      var $157=$children;
      var $158=((($157)+(2))|0);
      $children=$158;
      label = 24; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $161=$children;
      return $161;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_alloc_ht($h) {
  var label = 0;
  var $1;
  var $sz;
  $1=$h;
  var $2=$1;
  var $3=(($2)|0);
  var $4=HEAP32[(($3)>>2)];
  $sz=$4;
  var $5=$1;
  var $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=0;
  var $7=$1;
  var $8=(($7+4)|0);
  HEAP32[(($8)>>2)]=0;
  var $9=$sz;
  var $10=$9 >>> 2;
  var $11=$sz;
  var $12=$11 >>> 1;
  var $13=$10 | $12;
  var $14=$1;
  var $15=(($14+12)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$1;
  var $17=(($16+40)|0);
  var $18=HEAP32[(($17)>>2)];
  var $19=$sz;
  var $20=$19;
  var $21=Math.floor(((($20)>>>(0)))/(4));
  var $22=_mrb_malloc($18, $21);
  var $23=$1;
  var $24=(($23+16)|0);
  HEAP32[(($24)>>2)]=$22;
  var $25=$1;
  var $26=(($25+16)|0);
  var $27=HEAP32[(($26)>>2)];
  var $28=$sz;
  var $29=Math.floor(((($28)>>>(0)))/(8));
  var $30=(($27+$29)|0);
  var $31=$1;
  var $32=(($31+20)|0);
  HEAP32[(($32)>>2)]=$30;
  var $33=$1;
  var $34=(($33+16)|0);
  var $35=HEAP32[(($34)>>2)];
  var $36=$sz;
  var $37=Math.floor(((($36)>>>(0)))/(8));
  _kh_fill_flags1053($35, -1, $37);
  var $38=$1;
  var $39=(($38+20)|0);
  var $40=HEAP32[(($39)>>2)];
  var $41=$sz;
  var $42=Math.floor(((($41)>>>(0)))/(8));
  _kh_fill_flags1053($40, 0, $42);
  var $43=$1;
  var $44=(($43+40)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=$sz;
  var $47=((($46)*(12))&-1);
  var $48=_mrb_malloc($45, $47);
  var $49=$48;
  var $50=$1;
  var $51=(($50+24)|0);
  HEAP32[(($51)>>2)]=$49;
  var $52=$1;
  var $53=(($52+40)|0);
  var $54=HEAP32[(($53)>>2)];
  var $55=$sz;
  var $56=((($55)*(12))&-1);
  var $57=_mrb_malloc($54, $56);
  var $58=$57;
  var $59=$1;
  var $60=(($59+28)|0);
  HEAP32[(($60)>>2)]=$58;
  var $61=$sz;
  var $62=((($61)-(1))|0);
  var $63=$1;
  var $64=(($63+32)|0);
  HEAP32[(($64)>>2)]=$62;
  var $65=$sz;
  var $66=Math.floor(((($65)>>>(0)))/(2));
  var $67=((($66)-(1))|0);
  var $68=$1;
  var $69=(($68+36)|0);
  HEAP32[(($69)>>2)]=$67;
  return;
}
function _kh_init_ht_size($mrb, $size) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h;
      $1=$mrb;
      $2=$size;
      var $3=$1;
      var $4=_mrb_calloc($3, 1, 44);
      var $5=$4;
      $h=$5;
      var $6=$2;
      var $7=(($6)>>>(0)) < 8;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $11=$2;
      var $12=((($11)-(1))|0);
      $2=$12;
      var $13=$2;
      var $14=$13 >>> 1;
      var $15=$2;
      var $16=$15 | $14;
      $2=$16;
      var $17=$2;
      var $18=$17 >>> 2;
      var $19=$2;
      var $20=$19 | $18;
      $2=$20;
      var $21=$2;
      var $22=$21 >>> 4;
      var $23=$2;
      var $24=$23 | $22;
      $2=$24;
      var $25=$2;
      var $26=$25 >>> 8;
      var $27=$2;
      var $28=$27 | $26;
      $2=$28;
      var $29=$2;
      var $30=$29 >>> 16;
      var $31=$2;
      var $32=$31 | $30;
      $2=$32;
      var $33=$2;
      var $34=((($33)+(1))|0);
      $2=$34;
      label = 5; break;
    case 5: 
      var $36=$2;
      var $37=$h;
      var $38=(($37)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$1;
      var $40=$h;
      var $41=(($40+40)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$h;
      _kh_alloc_ht($42);
      var $43=$h;
      return $43;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_init_ht($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_kh_init_ht_size($2, 32);
  return $3;
}
function _kh_destroy_ht($h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$h;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $5=$1;
      var $6=(($5+40)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$1;
      var $9=(($8+24)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      _mrb_free($7, $11);
      var $12=$1;
      var $13=(($12+40)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$1;
      var $16=(($15+28)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_free($14, $18);
      var $19=$1;
      var $20=(($19+40)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      _mrb_free($21, $24);
      var $25=$1;
      var $26=(($25+40)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$1;
      var $29=$28;
      _mrb_free($27, $29);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_clear_ht($h) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$h;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $5=$1;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$1;
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=$1;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=Math.floor(((($15)>>>(0)))/(8));
      _kh_fill_flags1053($12, -1, $16);
      var $17=$1;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=Math.floor(((($22)>>>(0)))/(8));
      _kh_fill_flags1053($19, 0, $23);
      var $24=$1;
      var $25=(($24+8)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$1;
      var $27=(($26+4)|0);
      HEAP32[(($27)>>2)]=0;
      label = 4; break;
    case 4: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_get_ht($h, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $k;
      $2=$h;
      var $3=$2;
      var $4=(($3+40)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=_mrb_hash_ht_hash_func($5, $key);
      var $7=$2;
      var $8=(($7+32)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$6 & $9;
      $k=$10;
      label = 2; break;
    case 2: 
      var $12=$k;
      var $13=Math.floor(((($12)>>>(0)))/(8));
      var $14=$2;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+$13)|0);
      var $18=HEAP8[($17)];
      var $19=(($18)&(255));
      var $20=$k;
      var $21=((($20)>>>(0)))%(8);
      var $22=((114644+$21)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$19 & $24;
      var $26=(($25)|(0))!=0;
      var $27=$26 ^ 1;
      if ($27) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $29=$k;
      var $30=Math.floor(((($29)>>>(0)))/(8));
      var $31=$2;
      var $32=(($31+20)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33+$30)|0);
      var $35=HEAP8[($34)];
      var $36=(($35)&(255));
      var $37=$k;
      var $38=((($37)>>>(0)))%(8);
      var $39=((114644+$38)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&(255));
      var $42=$36 & $41;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 7; break; } else { label = 4; break; }
    case 4: 
      var $45=$2;
      var $46=(($45+40)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$k;
      var $49=$2;
      var $50=(($49+24)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51+((($48)*(12))&-1))|0);
      var $53=_mrb_hash_ht_hash_equal($47, $52, $key);
      var $54=(($53)|(0))!=0;
      if ($54) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $56=$k;
      $1=$56;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $59=$k;
      var $60=$2;
      var $61=(($60+36)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=((($59)+($62))|0);
      var $64=$2;
      var $65=(($64+32)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$63 & $66;
      $k=$67;
      label = 2; break;
    case 8: 
      var $69=$2;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      $1=$71;
      label = 9; break;
    case 9: 
      var $73=$1;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_ht_hash_func($mrb, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $h;
  var $h2=__stackBase__;
  var $2=(__stackBase__)+(12);
  $1=$mrb;
  var $3=(($key+8)|0);
  var $4=HEAP32[(($3)>>2)];
  var $5=$4 << 24;
  $h=$5;
  var $6=$1;
  _mrb_funcall($2, $6, $key, ((100520)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  var $7=$h2;
  var $8=$2;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  var $9=(($h2)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$h;
  var $13=$12 ^ $11;
  $h=$13;
  var $14=$h;
  STACKTOP = __stackBase__;
  return $14;
}
function _mrb_hash_ht_hash_equal($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_eql($2, $a, $b);
  STACKTOP = __stackBase__;
  return $3;
}
function _kh_del_ht($h, $x) {
  var label = 0;
  var $1;
  var $2;
  $1=$h;
  $2=$x;
  var $3=$2;
  var $4=((($3)>>>(0)))%(8);
  var $5=((114644+$4)|0);
  var $6=HEAP8[($5)];
  var $7=(($6)&(255));
  var $8=$2;
  var $9=Math.floor(((($8)>>>(0)))/(8));
  var $10=$1;
  var $11=(($10+20)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=(($12+$9)|0);
  var $14=HEAP8[($13)];
  var $15=(($14)&(255));
  var $16=$15 | $7;
  var $17=(($16) & 255);
  HEAP8[($13)]=$17;
  var $18=$1;
  var $19=(($18+4)|0);
  var $20=HEAP32[(($19)>>2)];
  var $21=((($20)-(1))|0);
  HEAP32[(($19)>>2)]=$21;
  return;
}
function _mrb_gc_mark_hash_size($mrb, $hash) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$mrb;
      $3=$hash;
      var $4=$3;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 4; break;
    case 3: 
      var $10=$3;
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=($14<<1);
      $1=$15;
      label = 4; break;
    case 4: 
      var $17=$1;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_resize_ht($h, $new_n_buckets) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $old_e_flags;
      var $old_keys;
      var $old_vals;
      var $old_n_buckets;
      var $i;
      var $k;
      $1=$h;
      $2=$new_n_buckets;
      var $3=$2;
      var $4=(($3)>>>(0)) < 8;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=8;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$2;
      var $9=((($8)-(1))|0);
      $2=$9;
      var $10=$2;
      var $11=$10 >>> 1;
      var $12=$2;
      var $13=$12 | $11;
      $2=$13;
      var $14=$2;
      var $15=$14 >>> 2;
      var $16=$2;
      var $17=$16 | $15;
      $2=$17;
      var $18=$2;
      var $19=$18 >>> 4;
      var $20=$2;
      var $21=$20 | $19;
      $2=$21;
      var $22=$2;
      var $23=$22 >>> 8;
      var $24=$2;
      var $25=$24 | $23;
      $2=$25;
      var $26=$2;
      var $27=$26 >>> 16;
      var $28=$2;
      var $29=$28 | $27;
      $2=$29;
      var $30=$2;
      var $31=((($30)+(1))|0);
      $2=$31;
      label = 5; break;
    case 5: 
      var $33=$1;
      var $34=(($33+16)|0);
      var $35=HEAP32[(($34)>>2)];
      $old_e_flags=$35;
      var $36=$1;
      var $37=(($36+24)|0);
      var $38=HEAP32[(($37)>>2)];
      $old_keys=$38;
      var $39=$1;
      var $40=(($39+28)|0);
      var $41=HEAP32[(($40)>>2)];
      $old_vals=$41;
      var $42=$1;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      $old_n_buckets=$44;
      var $45=$2;
      var $46=$1;
      var $47=(($46)|0);
      HEAP32[(($47)>>2)]=$45;
      var $48=$1;
      _kh_alloc_ht($48);
      $i=0;
      label = 6; break;
    case 6: 
      var $50=$i;
      var $51=$old_n_buckets;
      var $52=(($50)>>>(0)) < (($51)>>>(0));
      if ($52) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $54=$i;
      var $55=Math.floor(((($54)>>>(0)))/(8));
      var $56=$old_e_flags;
      var $57=(($56+$55)|0);
      var $58=HEAP8[($57)];
      var $59=(($58)&(255));
      var $60=$i;
      var $61=((($60)>>>(0)))%(8);
      var $62=((114644+$61)|0);
      var $63=HEAP8[($62)];
      var $64=(($63)&(255));
      var $65=$59 & $64;
      var $66=(($65)|(0))!=0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$1;
      var $69=$i;
      var $70=$old_keys;
      var $71=(($70+((($69)*(12))&-1))|0);
      var $72=_kh_put_ht($68, $71);
      $k=$72;
      var $73=$k;
      var $74=$1;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+((($73)*(12))&-1))|0);
      var $78=$i;
      var $79=$old_vals;
      var $80=(($79+((($78)*(12))&-1))|0);
      var $81=$77;
      var $82=$80;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $85=$i;
      var $86=((($85)+(1))|0);
      $i=$86;
      label = 6; break;
    case 11: 
      var $88=$1;
      var $89=(($88+40)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$old_e_flags;
      _mrb_free($90, $91);
      var $92=$1;
      var $93=(($92+40)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$old_keys;
      var $96=$95;
      _mrb_free($94, $96);
      var $97=$1;
      var $98=(($97+40)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$old_vals;
      var $101=$100;
      _mrb_free($99, $101);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _kh_put_ht($h, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $k;
      $1=$h;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=$1;
      var $6=(($5+12)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($4)>>>(0)) >= (($7)>>>(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=($13<<1);
      _kh_resize_ht($10, $14);
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=(($16+40)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=_mrb_hash_ht_hash_func($18, $key);
      var $20=$1;
      var $21=(($20+32)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$19 & $22;
      $k=$23;
      label = 4; break;
    case 4: 
      var $25=$k;
      var $26=Math.floor(((($25)>>>(0)))/(8));
      var $27=$1;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+$26)|0);
      var $31=HEAP8[($30)];
      var $32=(($31)&(255));
      var $33=$k;
      var $34=((($33)>>>(0)))%(8);
      var $35=((114644+$34)|0);
      var $36=HEAP8[($35)];
      var $37=(($36)&(255));
      var $38=$32 & $37;
      var $39=(($38)|(0))!=0;
      if ($39) { var $57 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      var $41=$k;
      var $42=Math.floor(((($41)>>>(0)))/(8));
      var $43=$1;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45+$42)|0);
      var $47=HEAP8[($46)];
      var $48=(($47)&(255));
      var $49=$k;
      var $50=((($49)>>>(0)))%(8);
      var $51=((114644+$50)|0);
      var $52=HEAP8[($51)];
      var $53=(($52)&(255));
      var $54=$48 & $53;
      var $55=(($54)|(0))!=0;
      var $57 = $55;label = 6; break;
    case 6: 
      var $57;
      var $58=$57 ^ 1;
      if ($58) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $60=$1;
      var $61=(($60+40)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$k;
      var $64=$1;
      var $65=(($64+24)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($63)*(12))&-1))|0);
      var $68=_mrb_hash_ht_hash_equal($62, $67, $key);
      var $69=(($68)|(0))!=0;
      if ($69) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 10; break;
    case 9: 
      var $72=$k;
      var $73=$1;
      var $74=(($73+36)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($72)+($75))|0);
      var $77=$1;
      var $78=(($77+32)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$76 & $79;
      $k=$80;
      label = 4; break;
    case 10: 
      var $82=$k;
      var $83=Math.floor(((($82)>>>(0)))/(8));
      var $84=$1;
      var $85=(($84+16)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+$83)|0);
      var $88=HEAP8[($87)];
      var $89=(($88)&(255));
      var $90=$k;
      var $91=((($90)>>>(0)))%(8);
      var $92=((114644+$91)|0);
      var $93=HEAP8[($92)];
      var $94=(($93)&(255));
      var $95=$89 & $94;
      var $96=(($95)|(0))!=0;
      if ($96) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $98=$k;
      var $99=$1;
      var $100=(($99+24)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101+((($98)*(12))&-1))|0);
      var $103=$102;
      var $104=$key;
      assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
      var $105=$k;
      var $106=((($105)>>>(0)))%(8);
      var $107=((114644+$106)|0);
      var $108=HEAP8[($107)];
      var $109=(($108)&(255));
      var $110=$109 ^ -1;
      var $111=$k;
      var $112=Math.floor(((($111)>>>(0)))/(8));
      var $113=$1;
      var $114=(($113+16)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+$112)|0);
      var $117=HEAP8[($116)];
      var $118=(($117)&(255));
      var $119=$118 & $110;
      var $120=(($119) & 255);
      HEAP8[($116)]=$120;
      var $121=$1;
      var $122=(($121+4)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=((($123)+(1))|0);
      HEAP32[(($122)>>2)]=$124;
      var $125=$1;
      var $126=(($125+8)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=((($127)+(1))|0);
      HEAP32[(($126)>>2)]=$128;
      label = 15; break;
    case 12: 
      var $130=$k;
      var $131=Math.floor(((($130)>>>(0)))/(8));
      var $132=$1;
      var $133=(($132+20)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=(($134+$131)|0);
      var $136=HEAP8[($135)];
      var $137=(($136)&(255));
      var $138=$k;
      var $139=((($138)>>>(0)))%(8);
      var $140=((114644+$139)|0);
      var $141=HEAP8[($140)];
      var $142=(($141)&(255));
      var $143=$137 & $142;
      var $144=(($143)|(0))!=0;
      if ($144) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $146=$k;
      var $147=$1;
      var $148=(($147+24)|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149+((($146)*(12))&-1))|0);
      var $151=$150;
      var $152=$key;
      assert(12 % 1 === 0);HEAP32[(($151)>>2)]=HEAP32[(($152)>>2)];HEAP32[((($151)+(4))>>2)]=HEAP32[((($152)+(4))>>2)];HEAP32[((($151)+(8))>>2)]=HEAP32[((($152)+(8))>>2)];
      var $153=$k;
      var $154=((($153)>>>(0)))%(8);
      var $155=((114644+$154)|0);
      var $156=HEAP8[($155)];
      var $157=(($156)&(255));
      var $158=$157 ^ -1;
      var $159=$k;
      var $160=Math.floor(((($159)>>>(0)))/(8));
      var $161=$1;
      var $162=(($161+20)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+$160)|0);
      var $165=HEAP8[($164)];
      var $166=(($165)&(255));
      var $167=$166 & $158;
      var $168=(($167) & 255);
      HEAP8[($164)]=$168;
      var $169=$1;
      var $170=(($169+4)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=((($171)+(1))|0);
      HEAP32[(($170)>>2)]=$172;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $175=$k;
      STACKTOP = __stackBase__;
      return $175;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_mark_hash($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $k;
      var $h;
      var $key=__stackBase__;
      var $val=(__stackBase__)+(12);
      $1=$mrb;
      $2=$hash;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      $h=$5;
      var $6=$h;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 18; break;
    case 3: 
      $k=0;
      label = 4; break;
    case 4: 
      var $11=$k;
      var $12=$h;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|(0))!=(($14)|(0));
      if ($15) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $17=$k;
      var $18=Math.floor(((($17)>>>(0)))/(8));
      var $19=$h;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+$18)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$k;
      var $26=((($25)>>>(0)))%(8);
      var $27=((114644+$26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28)&(255));
      var $30=$24 & $29;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 16; break; } else { label = 6; break; }
    case 6: 
      var $33=$k;
      var $34=Math.floor(((($33)>>>(0)))/(8));
      var $35=$h;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$k;
      var $42=((($41)>>>(0)))%(8);
      var $43=((114644+$42)|0);
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $46=$40 & $45;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 16; break; } else { label = 7; break; }
    case 7: 
      var $49=$k;
      var $50=$h;
      var $51=(($50+24)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+((($49)*(12))&-1))|0);
      var $54=$key;
      var $55=$53;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      var $56=$k;
      var $57=$h;
      var $58=(($57+28)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59+((($56)*(12))&-1))|0);
      var $61=$val;
      var $62=$60;
      assert(12 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
      label = 8; break;
    case 8: 
      var $64=(($key+8)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)>>>(0)) >= 8;
      if ($66) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $68=$1;
      var $69=(($key)|0);
      var $70=$69;
      var $71=HEAP32[(($70)>>2)];
      var $72=$71;
      _mrb_gc_mark($68, $72);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $76=(($val+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)>>>(0)) >= 8;
      if ($78) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $80=$1;
      var $81=(($val)|0);
      var $82=$81;
      var $83=HEAP32[(($82)>>2)];
      var $84=$83;
      _mrb_gc_mark($80, $84);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $89=$k;
      var $90=((($89)+(1))|0);
      $k=$90;
      label = 4; break;
    case 18: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_gc_free_hash($mrb, $hash) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$mrb;
      $2=$hash;
      var $3=$2;
      var $4=(($3+16)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      _kh_destroy_ht($10);
      label = 3; break;
    case 3: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_new_capa($agg_result, $mrb, $capa) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h;
      $1=$mrb;
      $2=$capa;
      var $3=$1;
      var $4=$1;
      var $5=(($4+68)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=_mrb_obj_alloc($3, 15, $6);
      var $8=$7;
      $h=$8;
      var $9=$1;
      var $10=_kh_init_ht($9);
      var $11=$h;
      var $12=(($11+16)|0);
      HEAP32[(($12)>>2)]=$10;
      var $13=$2;
      var $14=(($13)|(0)) > 0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$h;
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$2;
      _kh_resize_ht($18, $19);
      label = 3; break;
    case 3: 
      var $21=$h;
      var $22=(($21+12)|0);
      HEAP32[(($22)>>2)]=0;
      var $23=$h;
      var $24=$23;
      _mrb_obj_value1062($agg_result, $24);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1062($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_new($agg_result, $mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_hash_new_capa($agg_result, $2, 0);
  return;
}
function _mrb_hash_get($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=(($hash)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $h=$8;
      var $9=$h;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $12=$h;
      var $13=_kh_get_ht($12, $key);
      $k=$13;
      var $14=$k;
      var $15=$h;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14)|(0))!=(($17)|(0));
      if ($18) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20=$k;
      var $21=$h;
      var $22=(($21+28)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23+((($20)*(12))&-1))|0);
      var $25=$agg_result;
      var $26=$24;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      label = 8; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $29=(($hash)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=$32;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 >>> 11;
      var $36=$35 & 2097151;
      var $37=$36 & 256;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $40=$1;
      var $41=$1;
      var $42=$1;
      var $43=_mrb_intern2($42, ((114100)|0), 6);
      _mrb_iv_get($2, $41, $hash, $43);
      _mrb_funcall($agg_result, $40, $2, ((113400)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
      label = 8; break;
    case 7: 
      var $45=$1;
      var $46=$1;
      var $47=_mrb_intern2($46, ((114100)|0), 6);
      _mrb_iv_get($agg_result, $45, $hash, $47);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_fetch($agg_result, $mrb, $hash, $key, $def) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $def; $def = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($def)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($def)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($def)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $11=$h;
      var $12=_kh_get_ht($11, $key);
      $k=$12;
      var $13=$k;
      var $14=$h;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|(0))!=(($16)|(0));
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$k;
      var $20=$h;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($19)*(12))&-1))|0);
      var $24=$agg_result;
      var $25=$23;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $28=$agg_result;
      var $29=$def;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set($mrb, $hash, $key, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=$1;
      _mrb_hash_modify($3, $hash);
      var $4=(($hash)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      $h=$9;
      var $10=$h;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $13=$1;
      var $14=_kh_init_ht($13);
      var $15=(($hash)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+16)|0);
      HEAP32[(($19)>>2)]=$14;
      $h=$14;
      label = 3; break;
    case 3: 
      var $21=$h;
      var $22=_kh_get_ht($21, $key);
      $k=$22;
      var $23=$k;
      var $24=$h;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)|(0))==(($26)|(0));
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$h;
      var $30=$1;
      _mrb_hash_ht_key($2, $30, $key);
      var $31=_kh_put_ht($29, $2);
      $k=$31;
      label = 5; break;
    case 5: 
      var $33=$k;
      var $34=$h;
      var $35=(($34+28)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36+((($33)*(12))&-1))|0);
      var $38=$37;
      var $39=$val;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      var $40=$1;
      var $41=(($hash)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=$44;
      _mrb_write_barrier($40, $45);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_modify($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_hash_tbl($2, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_ht_key($agg_result, $mrb, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($key+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==16;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      _mrb_str_dup($agg_result, $6, $key);
      label = 4; break;
    case 3: 
      var $8=$agg_result;
      var $9=$key;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_tbl($mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=_kh_init_ht($11);
      var $13=(($hash)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=(($16+16)|0);
      HEAP32[(($17)>>2)]=$12;
      label = 3; break;
    case 3: 
      var $19=$h;
      STACKTOP = __stackBase__;
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_aget($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $key=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $4=$1;
  _mrb_hash_get($agg_result, $4, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_delete_key($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $delVal=__stackBase__;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $11=$h;
      var $12=_kh_get_ht($11, $key);
      $k=$12;
      var $13=$k;
      var $14=$h;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|(0))!=(($16)|(0));
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$k;
      var $20=$h;
      var $21=(($20+28)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($19)*(12))&-1))|0);
      var $24=$delVal;
      var $25=$23;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $26=$h;
      var $27=$k;
      _kh_del_ht($26, $27);
      var $28=$agg_result;
      var $29=$delVal;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      _mrb_nil_value1065($agg_result);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1065($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_delete($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $key=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $4=$1;
  _mrb_hash_delete_key($agg_result, $4, $self, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_clear($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$h;
      _kh_clear_ht($11);
      label = 3; break;
    case 3: 
      var $13=$agg_result;
      var $14=$hash;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_aset($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $key=__stackBase__;
  var $val=(__stackBase__)+(12);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99252)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $4=$1;
  _mrb_hash_set($4, $self, $key, $val);
  var $5=$agg_result;
  var $6=$val;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_empty_p($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $empty_p;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$h;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==0;
      var $15=(($14)&(1));
      var $16=(($15) & 255);
      $empty_p=$16;
      label = 4; break;
    case 3: 
      $empty_p=1;
      label = 4; break;
    case 4: 
      var $19=$empty_p;
      _mrb_bool_value1066($agg_result, $19);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1066($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_keys($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $ary=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $v=(__stackBase__)+(24);
      $1=$mrb;
      var $3=(($hash)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $h=$8;
      var $9=$h;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$1;
      _mrb_ary_new($agg_result, $12);
      label = 11; break;
    case 3: 
      var $14=$1;
      var $15=$h;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      _mrb_ary_new_capa($2, $14, $17);
      var $18=$ary;
      var $19=$2;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      $k=0;
      label = 4; break;
    case 4: 
      var $21=$k;
      var $22=$h;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($21)|(0))!=(($24)|(0));
      if ($25) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $27=$k;
      var $28=Math.floor(((($27)>>>(0)))/(8));
      var $29=$h;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$28)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&(255));
      var $35=$k;
      var $36=((($35)>>>(0)))%(8);
      var $37=((114644+$36)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255));
      var $40=$34 & $39;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $43=$k;
      var $44=Math.floor(((($43)>>>(0)))/(8));
      var $45=$h;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$44)|0);
      var $49=HEAP8[($48)];
      var $50=(($49)&(255));
      var $51=$k;
      var $52=((($51)>>>(0)))%(8);
      var $53=((114644+$52)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=$50 & $55;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $59=$k;
      var $60=$h;
      var $61=(($60+24)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+((($59)*(12))&-1))|0);
      var $64=$v;
      var $65=$63;
      assert(12 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
      var $66=$1;
      _mrb_ary_push($66, $ary, $v);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $69=$k;
      var $70=((($69)+(1))|0);
      $k=$70;
      label = 4; break;
    case 10: 
      var $72=$agg_result;
      var $73=$ary;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_has_keyWithKey($agg_result, $mrb, $hash, $key) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $key; $key = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($key)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($key)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($key)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $result;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$h;
      var $12=_kh_get_ht($11, $key);
      $k=$12;
      var $13=$k;
      var $14=$h;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13)|(0))!=(($16)|(0));
      var $18=(($17)&(1));
      var $19=(($18) & 255);
      $result=$19;
      label = 4; break;
    case 3: 
      $result=0;
      label = 4; break;
    case 4: 
      var $22=$result;
      _mrb_bool_value1066($agg_result, $22);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_hash($mrb) {
  var label = 0;
  var $1;
  var $h;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((108276)|0), $5);
  var $7=$1;
  var $8=(($7+68)|0);
  HEAP32[(($8)>>2)]=$6;
  $h=$6;
  var $9=$h;
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11 >>> 11;
  var $13=$12 & 2097151;
  var $14=$13 & -256;
  var $15=$14 | 15;
  var $16=$h;
  var $17=$15 & 2097151;
  var $18=$16;
  var $19=$17 & 2097151;
  var $20=$19 << 11;
  var $21=HEAP32[(($18)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | $20;
  HEAP32[(($18)>>2)]=$23;
  var $24=$1;
  var $25=$h;
  var $26=$1;
  var $27=_mrb_class_get($26, ((94836)|0));
  _mrb_include_module($24, $25, $27);
  var $28=$1;
  var $29=$h;
  _mrb_define_method($28, $29, ((94024)|0), 48, 262144);
  var $30=$1;
  var $31=$h;
  _mrb_define_method($30, $31, ((114040)|0), 676, 262144);
  var $32=$1;
  var $33=$h;
  _mrb_define_method($32, $33, ((113360)|0), 22, 524288);
  var $34=$1;
  var $35=$h;
  _mrb_define_method($34, $35, ((112512)|0), 408, 0);
  var $36=$1;
  var $37=$h;
  _mrb_define_method($36, $37, ((111948)|0), 150, 4096);
  var $38=$1;
  var $39=$h;
  _mrb_define_method($38, $39, ((111372)|0), 42, 262144);
  var $40=$1;
  var $41=$h;
  _mrb_define_method($40, $41, ((110876)|0), 278, 0);
  var $42=$1;
  var $43=$h;
  _mrb_define_method($42, $43, ((110436)|0), 446, 262144);
  var $44=$1;
  var $45=$h;
  _mrb_define_method($44, $45, ((110028)|0), 704, 262144);
  var $46=$1;
  var $47=$h;
  _mrb_define_method($46, $47, ((109608)|0), 582, 0);
  var $48=$1;
  var $49=$h;
  _mrb_define_method($48, $49, ((109096)|0), 412, 262144);
  var $50=$1;
  var $51=$h;
  _mrb_define_method($50, $51, ((108564)|0), 472, 262144);
  var $52=$1;
  var $53=$h;
  _mrb_define_method($52, $53, ((108236)|0), 412, 262144);
  var $54=$1;
  var $55=$h;
  _mrb_define_method($54, $55, ((107684)|0), 468, 4096);
  var $56=$1;
  var $57=$h;
  _mrb_define_method($56, $57, ((107396)|0), 236, 262144);
  var $58=$1;
  var $59=$h;
  _mrb_define_method($58, $59, ((107024)|0), 412, 262144);
  var $60=$1;
  var $61=$h;
  _mrb_define_method($60, $61, ((106548)|0), 120, 0);
  var $62=$1;
  var $63=$h;
  _mrb_define_method($62, $63, ((106164)|0), 678, 0);
  var $64=$1;
  var $65=$h;
  _mrb_define_method($64, $65, ((105828)|0), 412, 262144);
  var $66=$1;
  var $67=$h;
  _mrb_define_method($66, $67, ((105540)|0), 236, 262144);
  var $68=$1;
  var $69=$h;
  _mrb_define_method($68, $69, ((105216)|0), 452, 0);
  var $70=$1;
  var $71=$h;
  _mrb_define_method($70, $71, ((104924)|0), 678, 0);
  var $72=$1;
  var $73=$h;
  _mrb_define_method($72, $73, ((104624)|0), 22, 524288);
  var $74=$1;
  var $75=$h;
  _mrb_define_method($74, $75, ((104056)|0), 472, 262144);
  var $76=$1;
  var $77=$h;
  _mrb_define_method($76, $77, ((103812)|0), 96, 0);
  var $78=$1;
  var $79=$h;
  _mrb_define_method($78, $79, ((104660)|0), 32, 0);
  var $80=$1;
  var $81=$h;
  _mrb_define_method($80, $81, ((103596)|0), 212, 0);
  var $82=$1;
  var $83=$h;
  _mrb_define_alias($82, $83, ((103388)|0), ((103596)|0));
  var $84=$1;
  var $85=$h;
  _mrb_define_method($84, $85, ((103184)|0), 700, 262144);
  return;
}
function _mrb_hash_equal($agg_result, $mrb, $hash1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $hash2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
  var $4=$1;
  _hash_equal($agg_result, $4, $hash1, $hash2, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_default($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 32)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $key=(__stackBase__)+(8);
      var $2=(__stackBase__)+(20);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((100780)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $5=(($hash)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $12=$11 & 2097151;
      var $13=$12 & 256;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $16=HEAP32[(($argc)>>2)];
      var $17=(($16)|(0))==0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _mrb_nil_value1065($agg_result);
      label = 6; break;
    case 4: 
      var $20=HEAP32[(($argv)>>2)];
      var $21=(($20)|0);
      var $22=$key;
      var $23=$21;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=$1;
      var $25=$1;
      var $26=$1;
      var $27=_mrb_intern2($26, ((114100)|0), 6);
      _mrb_iv_get($2, $25, $hash, $27);
      _mrb_funcall($agg_result, $24, $2, ((113400)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($key)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($key)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($key)+(8))>>2)],tempInt));
      label = 6; break;
    case 5: 
      var $29=$1;
      var $30=$1;
      var $31=_mrb_intern2($30, ((114100)|0), 6);
      _mrb_iv_get($agg_result, $29, $hash, $31);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set_default($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ifnone=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
  var $4=$1;
  _mrb_hash_modify($4, $hash);
  var $5=$1;
  var $6=$1;
  var $7=_mrb_intern2($6, ((114100)|0), 6);
  _mrb_iv_set($5, $hash, $7, $ifnone);
  var $8=(($hash)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  var $14=$13 >>> 11;
  var $15=$14 & 2097151;
  var $16=$15 & -257;
  var $17=$16 & 2097151;
  var $18=$11;
  var $19=$17 & 2097151;
  var $20=$19 << 11;
  var $21=HEAP32[(($18)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | $20;
  HEAP32[(($18)>>2)]=$23;
  var $24=$agg_result;
  var $25=$ifnone;
  assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_default_proc($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 >>> 11;
      var $9=$8 & 2097151;
      var $10=$9 & 256;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_intern2($14, ((114100)|0), 6);
      _mrb_iv_get($agg_result, $13, $hash, $15);
      label = 4; break;
    case 3: 
      _mrb_nil_value1065($agg_result);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_set_default_proc($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ifnone=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ifnone,tempInt));
  var $4=$1;
  _mrb_hash_modify($4, $hash);
  var $5=$1;
  var $6=$1;
  var $7=_mrb_intern2($6, ((114100)|0), 6);
  _mrb_iv_set($5, $hash, $7, $ifnone);
  var $8=(($hash)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=$10;
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  var $14=$13 >>> 11;
  var $15=$14 & 2097151;
  var $16=$15 | 256;
  var $17=$16 & 2097151;
  var $18=$11;
  var $19=$17 & 2097151;
  var $20=$19 << 11;
  var $21=HEAP32[(($18)>>2)];
  var $22=$21 & 2047;
  var $23=$22 | $20;
  HEAP32[(($18)>>2)]=$23;
  var $24=$agg_result;
  var $25=$ifnone;
  assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_key($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $key=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$key,tempInt));
  var $4=$1;
  _mrb_hash_has_keyWithKey($agg_result, $4, $hash, $key);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_value($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $val=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
  var $4=$1;
  _mrb_hash_has_valueWithvalue($agg_result, $4, $hash, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_init_core($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $block=__stackBase__;
      var $ifnone=(__stackBase__)+(12);
      var $argv=(__stackBase__)+(24);
      var $argc=(__stackBase__)+(28);
      var $2=(__stackBase__)+(32);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((101048)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$block,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,tempInt));
      var $5=$1;
      _mrb_hash_modify($5, $hash);
      var $6=(($block+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 9; break; }
    case 2: 
      var $10=(($block)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 9; break; } else { label = 3; break; }
    case 3: 
      var $15=HEAP32[(($argc)>>2)];
      var $16=(($15)|(0)) > 0;
      if ($16) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $18=HEAP32[(($argc)>>2)];
      var $19=(($18)|(0))!=1;
      if ($19) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $21=$1;
      var $22=$1;
      var $23=_mrb_class_get($22, ((97052)|0));
      _mrb_raise($21, $23, ((95908)|0));
      label = 6; break;
    case 6: 
      var $25=HEAP32[(($argv)>>2)];
      var $26=(($25)|0);
      var $27=$ifnone;
      var $28=$26;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 8; break;
    case 7: 
      _mrb_nil_value1065($2);
      var $30=$ifnone;
      var $31=$2;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      label = 8; break;
    case 8: 
      label = 12; break;
    case 9: 
      var $34=HEAP32[(($argc)>>2)];
      var $35=(($34)|(0)) > 0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$1;
      var $38=$1;
      var $39=_mrb_class_get($38, ((97052)|0));
      _mrb_raise($37, $39, ((95908)|0));
      label = 11; break;
    case 11: 
      var $41=(($hash)|0);
      var $42=$41;
      var $43=HEAP32[(($42)>>2)];
      var $44=$43;
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 >>> 11;
      var $48=$47 & 2097151;
      var $49=$48 | 256;
      var $50=$49 & 2097151;
      var $51=$44;
      var $52=$50 & 2097151;
      var $53=$52 << 11;
      var $54=HEAP32[(($51)>>2)];
      var $55=$54 & 2047;
      var $56=$55 | $53;
      HEAP32[(($51)>>2)]=$56;
      var $57=$ifnone;
      var $58=$block;
      assert(12 % 1 === 0);HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];HEAP32[((($57)+(8))>>2)]=HEAP32[((($58)+(8))>>2)];
      label = 12; break;
    case 12: 
      var $60=$1;
      var $61=$1;
      var $62=_mrb_intern2($61, ((114100)|0), 6);
      _mrb_iv_set($60, $hash, $62, $ifnone);
      var $63=$agg_result;
      var $64=$hash;
      assert(12 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_replace($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $hash2=__stackBase__;
      var $ifnone=(__stackBase__)+(12);
      var $h2;
      var $k;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(60);
      $1=$mrb;
      var $6=$1;
      var $7=_mrb_get_args($6, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
      var $8=$1;
      _to_hash1070($2, $8, $hash2);
      var $9=$hash2;
      var $10=$2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$1;
      var $12=_mrb_obj_equal($11, $hash, $hash2);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$agg_result;
      var $16=$hash;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 16; break;
    case 3: 
      var $18=$1;
      _mrb_hash_clear($3, $18, $hash);
      var $19=(($hash2)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+16)|0);
      var $24=HEAP32[(($23)>>2)];
      $h2=$24;
      var $25=$h2;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 12; break; }
    case 4: 
      $k=0;
      label = 5; break;
    case 5: 
      var $29=$k;
      var $30=$h2;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($29)|(0))!=(($32)|(0));
      if ($33) { label = 6; break; } else { label = 11; break; }
    case 6: 
      var $35=$k;
      var $36=Math.floor(((($35)>>>(0)))/(8));
      var $37=$h2;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+$36)|0);
      var $41=HEAP8[($40)];
      var $42=(($41)&(255));
      var $43=$k;
      var $44=((($43)>>>(0)))%(8);
      var $45=((114644+$44)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&(255));
      var $48=$42 & $47;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 9; break; } else { label = 7; break; }
    case 7: 
      var $51=$k;
      var $52=Math.floor(((($51)>>>(0)))/(8));
      var $53=$h2;
      var $54=(($53+20)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+$52)|0);
      var $57=HEAP8[($56)];
      var $58=(($57)&(255));
      var $59=$k;
      var $60=((($59)>>>(0)))%(8);
      var $61=((114644+$60)|0);
      var $62=HEAP8[($61)];
      var $63=(($62)&(255));
      var $64=$58 & $63;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $67=$1;
      var $68=$k;
      var $69=$h2;
      var $70=(($69+24)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+((($68)*(12))&-1))|0);
      var $73=$k;
      var $74=$h2;
      var $75=(($74+28)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+((($73)*(12))&-1))|0);
      _mrb_hash_set($67, $hash, $72, $77);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $80=$k;
      var $81=((($80)+(1))|0);
      $k=$81;
      label = 5; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $84=(($hash2)|0);
      var $85=$84;
      var $86=HEAP32[(($85)>>2)];
      var $87=$86;
      var $88=$87;
      var $89=HEAP32[(($88)>>2)];
      var $90=$89 >>> 11;
      var $91=$90 & 2097151;
      var $92=$91 & 256;
      var $93=(($92)|(0))!=0;
      if ($93) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $95=(($hash)|0);
      var $96=$95;
      var $97=HEAP32[(($96)>>2)];
      var $98=$97;
      var $99=$98;
      var $100=HEAP32[(($99)>>2)];
      var $101=$100 >>> 11;
      var $102=$101 & 2097151;
      var $103=$102 | 256;
      var $104=$103 & 2097151;
      var $105=$98;
      var $106=$104 & 2097151;
      var $107=$106 << 11;
      var $108=HEAP32[(($105)>>2)];
      var $109=$108 & 2047;
      var $110=$109 | $107;
      HEAP32[(($105)>>2)]=$110;
      var $111=$1;
      var $112=$1;
      var $113=_mrb_intern2($112, ((114100)|0), 6);
      _mrb_iv_get($4, $111, $hash2, $113);
      var $114=$ifnone;
      var $115=$4;
      assert(12 % 1 === 0);HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];HEAP32[((($114)+(8))>>2)]=HEAP32[((($115)+(8))>>2)];
      label = 15; break;
    case 14: 
      var $117=$1;
      var $118=$1;
      var $119=_mrb_intern2($118, ((114100)|0), 6);
      _mrb_iv_get($5, $117, $hash2, $119);
      var $120=$ifnone;
      var $121=$5;
      assert(12 % 1 === 0);HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)];HEAP32[((($120)+(8))>>2)]=HEAP32[((($121)+(8))>>2)];
      label = 15; break;
    case 15: 
      var $123=$1;
      var $124=$1;
      var $125=_mrb_intern2($124, ((114100)|0), 6);
      _mrb_iv_set($123, $hash, $125, $ifnone);
      var $126=$agg_result;
      var $127=$hash;
      assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_size_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_fixnum_value1069($agg_result, 0);
      label = 4; break;
    case 3: 
      var $12=$h;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      _mrb_fixnum_value1069($agg_result, $14);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_shift($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $delKey=__stackBase__;
      var $delVal=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      $1=$mrb;
      var $5=(($hash)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      $h=$10;
      var $11=$1;
      _mrb_hash_modify($11, $hash);
      var $12=$h;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 2; break; } else { label = 12; break; }
    case 2: 
      var $15=$h;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)>>>(0)) > 0;
      if ($18) { label = 3; break; } else { label = 11; break; }
    case 3: 
      $k=0;
      label = 4; break;
    case 4: 
      var $21=$k;
      var $22=$h;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($21)|(0))!=(($24)|(0));
      if ($25) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $27=$k;
      var $28=Math.floor(((($27)>>>(0)))/(8));
      var $29=$h;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$28)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&(255));
      var $35=$k;
      var $36=((($35)>>>(0)))%(8);
      var $37=((114644+$36)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255));
      var $40=$34 & $39;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $43=$k;
      var $44=Math.floor(((($43)>>>(0)))/(8));
      var $45=$h;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$44)|0);
      var $49=HEAP8[($48)];
      var $50=(($49)&(255));
      var $51=$k;
      var $52=((($51)>>>(0)))%(8);
      var $53=((114644+$52)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=$50 & $55;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 9; break;
    case 8: 
      var $60=$k;
      var $61=$h;
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63+((($60)*(12))&-1))|0);
      var $65=$delKey;
      var $66=$64;
      assert(12 % 1 === 0);HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)];HEAP32[((($65)+(8))>>2)]=HEAP32[((($66)+(8))>>2)];
      var $67=$1;
      _mrb_gc_protect($67, $delKey);
      var $68=$1;
      _mrb_hash_delete_key($2, $68, $hash, $delKey);
      var $69=$delVal;
      var $70=$2;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      var $71=$1;
      _mrb_gc_protect($71, $delVal);
      var $72=$1;
      _mrb_assoc_new($agg_result, $72, $delKey, $delVal);
      label = 15; break;
    case 9: 
      var $74=$k;
      var $75=((($74)+(1))|0);
      $k=$75;
      label = 4; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $79=(($hash)|0);
      var $80=$79;
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      var $83=$82;
      var $84=HEAP32[(($83)>>2)];
      var $85=$84 >>> 11;
      var $86=$85 & 2097151;
      var $87=$86 & 256;
      var $88=(($87)|(0))!=0;
      if ($88) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $90=$1;
      var $91=$1;
      var $92=$1;
      var $93=_mrb_intern2($92, ((114100)|0), 6);
      _mrb_iv_get($3, $91, $hash, $93);
      _mrb_nil_value1065($4);
      _mrb_funcall($agg_result, $90, $3, ((113400)|0), 2, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($hash)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($hash)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($hash)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
      label = 15; break;
    case 14: 
      var $95=$1;
      var $96=$1;
      var $97=_mrb_intern2($96, ((114100)|0), 6);
      _mrb_iv_get($agg_result, $95, $hash, $97);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_values($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      var $ary=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $v=(__stackBase__)+(24);
      $1=$mrb;
      var $3=(($hash)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      $h=$8;
      var $9=$h;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$1;
      _mrb_ary_new($agg_result, $12);
      label = 11; break;
    case 3: 
      var $14=$1;
      var $15=$h;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      _mrb_ary_new_capa($2, $14, $17);
      var $18=$ary;
      var $19=$2;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      $k=0;
      label = 4; break;
    case 4: 
      var $21=$k;
      var $22=$h;
      var $23=(($22)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($21)|(0))!=(($24)|(0));
      if ($25) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $27=$k;
      var $28=Math.floor(((($27)>>>(0)))/(8));
      var $29=$h;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+$28)|0);
      var $33=HEAP8[($32)];
      var $34=(($33)&(255));
      var $35=$k;
      var $36=((($35)>>>(0)))%(8);
      var $37=((114644+$36)|0);
      var $38=HEAP8[($37)];
      var $39=(($38)&(255));
      var $40=$34 & $39;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $43=$k;
      var $44=Math.floor(((($43)>>>(0)))/(8));
      var $45=$h;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47+$44)|0);
      var $49=HEAP8[($48)];
      var $50=(($49)&(255));
      var $51=$k;
      var $52=((($51)>>>(0)))%(8);
      var $53=((114644+$52)|0);
      var $54=HEAP8[($53)];
      var $55=(($54)&(255));
      var $56=$50 & $55;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $59=$k;
      var $60=$h;
      var $61=(($60+28)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+((($59)*(12))&-1))|0);
      var $64=$v;
      var $65=$63;
      assert(12 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($65)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($65)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($65)+(8))>>2)];
      var $66=$1;
      _mrb_ary_push($66, $ary, $v);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $69=$k;
      var $70=((($69)+(1))|0);
      $k=$70;
      label = 4; break;
    case 10: 
      var $72=$agg_result;
      var $73=$ary;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_to_hash($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$hash;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_inspect($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$h;
      var $12=(($11+4)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$1;
      _mrb_str_new($agg_result, $16, ((102900)|0), 2);
      label = 5; break;
    case 4: 
      var $18=$1;
      _inspect_hash($agg_result, $18, $hash, 0);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_eql($agg_result, $mrb, $hash1) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $hash2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101880)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash2,tempInt));
  var $4=$1;
  _hash_equal($agg_result, $4, $hash1, $hash2, 1);
  STACKTOP = __stackBase__;
  return;
}
function _hash_equal($agg_result, $mrb, $hash1, $hash2, $eql) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash1; $hash1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $hash2; $hash2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $h1;
      var $h2;
      var $k1;
      var $k2;
      var $key=__stackBase__;
      $1=$mrb;
      $2=$eql;
      var $3=$1;
      var $4=_mrb_obj_equal($3, $hash1, $hash2);
      var $5=(($4)|(0))!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_true_value1067($agg_result);
      label = 28; break;
    case 3: 
      var $8=(($hash2+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==15;
      if ($10) { label = 9; break; } else { label = 4; break; }
    case 4: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_intern2($13, ((104660)|0), 7);
      var $15=_mrb_respond_to($12, $hash2, $14);
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 5; break; }
    case 5: 
      _mrb_false_value1068($agg_result);
      label = 28; break;
    case 6: 
      var $19=$2;
      var $20=(($19)|(0))!=0;
      if ($20) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $22=$1;
      var $23=_mrb_eql($22, $hash2, $hash1);
      _mrb_fixnum_value1069($agg_result, $23);
      label = 28; break;
    case 8: 
      var $25=$1;
      var $26=_mrb_equal($25, $hash2, $hash1);
      _mrb_fixnum_value1069($agg_result, $26);
      label = 28; break;
    case 9: 
      var $28=(($hash1)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+16)|0);
      var $33=HEAP32[(($32)>>2)];
      $h1=$33;
      var $34=(($hash2)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=$36;
      var $38=(($37+16)|0);
      var $39=HEAP32[(($38)>>2)];
      $h2=$39;
      var $40=$h1;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $43=$h2;
      var $44=(($43)|(0))!=0;
      var $45=$44 ^ 1;
      var $46=(($45)&(1));
      var $47=(($46) & 255);
      _mrb_bool_value1066($agg_result, $47);
      label = 28; break;
    case 11: 
      var $49=$h2;
      var $50=(($49)|(0))!=0;
      if ($50) { label = 13; break; } else { label = 12; break; }
    case 12: 
      _mrb_false_value1068($agg_result);
      label = 28; break;
    case 13: 
      var $53=$h1;
      var $54=(($53+4)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$h2;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($55)|(0))!=(($58)|(0));
      if ($59) { label = 14; break; } else { label = 15; break; }
    case 14: 
      _mrb_false_value1068($agg_result);
      label = 28; break;
    case 15: 
      $k1=0;
      label = 16; break;
    case 16: 
      var $63=$k1;
      var $64=$h1;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($63)|(0))!=(($66)|(0));
      if ($67) { label = 17; break; } else { label = 26; break; }
    case 17: 
      var $69=$k1;
      var $70=Math.floor(((($69)>>>(0)))/(8));
      var $71=$h1;
      var $72=(($71+16)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73+$70)|0);
      var $75=HEAP8[($74)];
      var $76=(($75)&(255));
      var $77=$k1;
      var $78=((($77)>>>(0)))%(8);
      var $79=((114644+$78)|0);
      var $80=HEAP8[($79)];
      var $81=(($80)&(255));
      var $82=$76 & $81;
      var $83=(($82)|(0))!=0;
      if ($83) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $85=$k1;
      var $86=Math.floor(((($85)>>>(0)))/(8));
      var $87=$h1;
      var $88=(($87+20)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+$86)|0);
      var $91=HEAP8[($90)];
      var $92=(($91)&(255));
      var $93=$k1;
      var $94=((($93)>>>(0)))%(8);
      var $95=((114644+$94)|0);
      var $96=HEAP8[($95)];
      var $97=(($96)&(255));
      var $98=$92 & $97;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 25; break;
    case 20: 
      var $102=$k1;
      var $103=$h1;
      var $104=(($103+24)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105+((($102)*(12))&-1))|0);
      var $107=$key;
      var $108=$106;
      assert(12 % 1 === 0);HEAP32[(($107)>>2)]=HEAP32[(($108)>>2)];HEAP32[((($107)+(4))>>2)]=HEAP32[((($108)+(4))>>2)];HEAP32[((($107)+(8))>>2)]=HEAP32[((($108)+(8))>>2)];
      var $109=$h2;
      var $110=_kh_get_ht($109, $key);
      $k2=$110;
      var $111=$k2;
      var $112=$h2;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($111)|(0))!=(($114)|(0));
      if ($115) { label = 21; break; } else { label = 24; break; }
    case 21: 
      var $117=$1;
      var $118=$k1;
      var $119=$h1;
      var $120=(($119+28)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=(($121+((($118)*(12))&-1))|0);
      var $123=$k2;
      var $124=$h2;
      var $125=(($124+28)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+((($123)*(12))&-1))|0);
      var $128=_mrb_equal($117, $122, $127);
      var $129=(($128)|(0))!=0;
      if ($129) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 25; break;
    case 23: 
      label = 24; break;
    case 24: 
      _mrb_false_value1068($agg_result);
      label = 28; break;
    case 25: 
      var $134=$k1;
      var $135=((($134)+(1))|0);
      $k1=$135;
      label = 16; break;
    case 26: 
      label = 27; break;
    case 27: 
      _mrb_true_value1067($agg_result);
      label = 28; break;
    case 28: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1067($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1068($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1069($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_hash($agg_result, $mrb, $hash, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 120)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $str=__stackBase__;
      var $str2=(__stackBase__)+(12);
      var $h;
      var $k;
      var $3=(__stackBase__)+(24);
      var $ai;
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(60);
      var $7=(__stackBase__)+(72);
      var $8=(__stackBase__)+(84);
      var $9=(__stackBase__)+(96);
      var $10=(__stackBase__)+(108);
      $1=$mrb;
      $2=$recur;
      var $11=(($hash)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      $h=$16;
      var $17=$2;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20=$1;
      _mrb_str_new($agg_result, $20, ((102724)|0), 5);
      label = 16; break;
    case 3: 
      var $22=$1;
      _mrb_str_new($3, $22, ((102404)|0), 1);
      var $23=$str;
      var $24=$3;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      var $25=$h;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 15; break; }
    case 4: 
      var $28=$h;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30)>>>(0)) > 0;
      if ($31) { label = 5; break; } else { label = 15; break; }
    case 5: 
      $k=0;
      label = 6; break;
    case 6: 
      var $34=$k;
      var $35=$h;
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($34)|(0))!=(($37)|(0));
      if ($38) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $40=$k;
      var $41=Math.floor(((($40)>>>(0)))/(8));
      var $42=$h;
      var $43=(($42+16)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+$41)|0);
      var $46=HEAP8[($45)];
      var $47=(($46)&(255));
      var $48=$k;
      var $49=((($48)>>>(0)))%(8);
      var $50=((114644+$49)|0);
      var $51=HEAP8[($50)];
      var $52=(($51)&(255));
      var $53=$47 & $52;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $56=$k;
      var $57=Math.floor(((($56)>>>(0)))/(8));
      var $58=$h;
      var $59=(($58+20)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+$57)|0);
      var $62=HEAP8[($61)];
      var $63=(($62)&(255));
      var $64=$k;
      var $65=((($64)>>>(0)))%(8);
      var $66=((114644+$65)|0);
      var $67=HEAP8[($66)];
      var $68=(($67)&(255));
      var $69=$63 & $68;
      var $70=(($69)|(0))!=0;
      if ($70) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 13; break;
    case 10: 
      var $73=$1;
      var $74=_mrb_gc_arena_save($73);
      $ai=$74;
      var $75=(($str)|0);
      var $76=$75;
      var $77=HEAP32[(($76)>>2)];
      var $78=$77;
      var $79=(($78+12)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|(0)) > 1;
      if ($81) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $83=$1;
      _mrb_str_cat($4, $83, $str, ((102088)|0), 2);
      label = 12; break;
    case 12: 
      var $85=$1;
      var $86=$k;
      var $87=$h;
      var $88=(($87+24)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89+((($86)*(12))&-1))|0);
      _mrb_inspect($5, $85, $90);
      var $91=$str2;
      var $92=$5;
      assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
      var $93=$1;
      _mrb_str_append($6, $93, $str, $str2);
      var $94=$1;
      _mrb_str_buf_cat($7, $94, $str, ((101844)|0), 2);
      var $95=$1;
      var $96=$k;
      var $97=$h;
      var $98=(($97+28)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+((($96)*(12))&-1))|0);
      _mrb_inspect($8, $95, $100);
      var $101=$str2;
      var $102=$8;
      assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
      var $103=$1;
      _mrb_str_append($9, $103, $str, $str2);
      var $104=$1;
      var $105=$ai;
      _mrb_gc_arena_restore($104, $105);
      label = 13; break;
    case 13: 
      var $107=$k;
      var $108=((($107)+(1))|0);
      $k=$108;
      label = 6; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $111=$1;
      _mrb_str_buf_cat($10, $111, $str, ((101352)|0), 1);
      var $112=$agg_result;
      var $113=$str;
      assert(12 % 1 === 0);HEAP32[(($112)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($112)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];HEAP32[((($112)+(8))>>2)]=HEAP32[((($113)+(8))>>2)];
      label = 16; break;
    case 16: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _to_hash1070($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_convert_type($agg_result, $2, $hash, 15, ((108276)|0), ((104660)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_hash_has_valueWithvalue($agg_result, $mrb, $hash, $value) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $value; $value = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($value)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($value)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($value)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $h;
      var $k;
      $1=$mrb;
      var $2=(($hash)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+16)|0);
      var $7=HEAP32[(($6)>>2)];
      $h=$7;
      var $8=$h;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 2; break; } else { label = 12; break; }
    case 2: 
      $k=0;
      label = 3; break;
    case 3: 
      var $12=$k;
      var $13=$h;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)|(0))!=(($15)|(0));
      if ($16) { label = 4; break; } else { label = 11; break; }
    case 4: 
      var $18=$k;
      var $19=Math.floor(((($18)>>>(0)))/(8));
      var $20=$h;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=$k;
      var $27=((($26)>>>(0)))%(8);
      var $28=((114644+$27)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255));
      var $31=$25 & $30;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $34=$k;
      var $35=Math.floor(((($34)>>>(0)))/(8));
      var $36=$h;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+$35)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&(255));
      var $42=$k;
      var $43=((($42)>>>(0)))%(8);
      var $44=((114644+$43)|0);
      var $45=HEAP8[($44)];
      var $46=(($45)&(255));
      var $47=$41 & $46;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 10; break;
    case 7: 
      var $51=$1;
      var $52=$k;
      var $53=$h;
      var $54=(($53+28)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55+((($52)*(12))&-1))|0);
      var $57=_mrb_equal($51, $56, $value);
      var $58=(($57)|(0))!=0;
      if ($58) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_true_value1067($agg_result);
      label = 13; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $62=$k;
      var $63=((($62)+(1))|0);
      $k=$63;
      label = 3; break;
    case 11: 
      label = 12; break;
    case 12: 
      _mrb_false_value1068($agg_result);
      label = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_core($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_init_symtbl($2);
  var $3=$1;
  _mrb_gc_arena_restore($3, 0);
  var $4=$1;
  _mrb_init_class($4);
  var $5=$1;
  _mrb_gc_arena_restore($5, 0);
  var $6=$1;
  _mrb_init_object($6);
  var $7=$1;
  _mrb_gc_arena_restore($7, 0);
  var $8=$1;
  _mrb_init_kernel($8);
  var $9=$1;
  _mrb_gc_arena_restore($9, 0);
  var $10=$1;
  _mrb_init_comparable($10);
  var $11=$1;
  _mrb_gc_arena_restore($11, 0);
  var $12=$1;
  _mrb_init_enumerable($12);
  var $13=$1;
  _mrb_gc_arena_restore($13, 0);
  var $14=$1;
  _mrb_init_symbol($14);
  var $15=$1;
  _mrb_gc_arena_restore($15, 0);
  var $16=$1;
  _mrb_init_exception($16);
  var $17=$1;
  _mrb_gc_arena_restore($17, 0);
  var $18=$1;
  _mrb_init_proc($18);
  var $19=$1;
  _mrb_gc_arena_restore($19, 0);
  var $20=$1;
  _mrb_init_string($20);
  var $21=$1;
  _mrb_gc_arena_restore($21, 0);
  var $22=$1;
  _mrb_init_array($22);
  var $23=$1;
  _mrb_gc_arena_restore($23, 0);
  var $24=$1;
  _mrb_init_hash($24);
  var $25=$1;
  _mrb_gc_arena_restore($25, 0);
  var $26=$1;
  _mrb_init_numeric($26);
  var $27=$1;
  _mrb_gc_arena_restore($27, 0);
  var $28=$1;
  _mrb_init_range($28);
  var $29=$1;
  _mrb_gc_arena_restore($29, 0);
  var $30=$1;
  _mrb_init_gc($30);
  var $31=$1;
  _mrb_gc_arena_restore($31, 0);
  var $32=$1;
  _mrb_init_mrblib($32);
  var $33=$1;
  _mrb_gc_arena_restore($33, 0);
  var $34=$1;
  _mrb_init_mrbgems($34);
  var $35=$1;
  _mrb_gc_arena_restore($35, 0);
  return;
}
function _mrb_final_core($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_final_mrbgems($2);
  var $3=$1;
  _mrb_gc_arena_restore($3, 0);
  return;
}
function _mrb_obj_basic_to_s_p($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $me;
      $2=$mrb;
      var $3=$2;
      var $4=$2;
      var $5=_mrb_class1141($4, $obj);
      var $6=$2;
      var $7=_mrb_intern2($6, ((113532)|0), 4);
      var $8=_mrb_method_search($3, $5, $7);
      $me=$8;
      var $9=$me;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $12=$me;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 11;
      var $16=$15 & 2097151;
      var $17=$16 & 128;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $20=$me;
      var $21=(($20+12)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==(((398))|(0));
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $28=$1;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_class1141($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($v+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==0) {
        label = 2; break;
      }
      else if ((($4)|(0))==2) {
        label = 5; break;
      }
      else if ((($4)|(0))==4) {
        label = 6; break;
      }
      else if ((($4)|(0))==3) {
        label = 7; break;
      }
      else if ((($4)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $6=(($v)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 10; break;
    case 4: 
      var $15=$2;
      var $16=(($15+88)|0);
      var $17=HEAP32[(($16)>>2)];
      $1=$17;
      label = 10; break;
    case 5: 
      var $19=$2;
      var $20=(($19+80)|0);
      var $21=HEAP32[(($20)>>2)];
      $1=$21;
      label = 10; break;
    case 6: 
      var $23=$2;
      var $24=(($23+92)|0);
      var $25=HEAP32[(($24)>>2)];
      $1=$25;
      label = 10; break;
    case 7: 
      var $27=$2;
      var $28=(($27+76)|0);
      var $29=HEAP32[(($28)>>2)];
      $1=$29;
      label = 10; break;
    case 8: 
      var $31=$2;
      var $32=(($31+72)|0);
      var $33=HEAP32[(($32)>>2)];
      $1=$33;
      label = 10; break;
    case 9: 
      var $35=(($v)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      $1=$40;
      label = 10; break;
    case 10: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==8;
      if ($4) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $6=$1;
      var $7=_mrb_obj_basic_to_s_p($6, $obj);
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=$1;
      var $11=(($obj)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      var $14=$13;
      _mrb_obj_iv_inspect($agg_result, $10, $14);
      label = 5; break;
    case 4: 
      var $16=$1;
      _mrb_any_to_s($agg_result, $16, $obj);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_singleton_class_clone($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $klass;
      var $clone;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      $2=$mrb;
      var $6=(($obj)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      $klass=$11;
      var $12=$klass;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 255;
      var $16=(($15)|(0))!=12;
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $18=$klass;
      $1=$18;
      label = 13; break;
    case 3: 
      var $20=$2;
      var $21=$klass;
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 255;
      var $25=$2;
      var $26=(($25+48)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=_mrb_obj_alloc($20, $24, $27);
      var $29=$28;
      $clone=$29;
      var $30=(($obj+8)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0))==9;
      if ($32) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $34=(($obj+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))==12;
      if ($36) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $38=$clone;
      var $39=$clone;
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$38;
      label = 7; break;
    case 6: 
      var $42=$2;
      var $43=$klass;
      var $44=$43;
      _mrb_obj_value1142($3, $44);
      var $45=_mrb_singleton_class_clone($42, $3);
      var $46=$clone;
      var $47=(($46+4)|0);
      HEAP32[(($47)>>2)]=$45;
      label = 7; break;
    case 7: 
      var $49=$klass;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$clone;
      var $53=(($52+20)|0);
      HEAP32[(($53)>>2)]=$51;
      var $54=$klass;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $59=$2;
      var $60=$clone;
      var $61=$60;
      _mrb_obj_value1142($4, $61);
      var $62=$klass;
      var $63=$62;
      _mrb_obj_value1142($5, $63);
      _mrb_iv_copy($59, $4, $5);
      var $64=$2;
      var $65=$clone;
      var $66=$65;
      var $67=$2;
      var $68=_mrb_intern2($67, ((113372)|0), 12);
      _mrb_obj_iv_set($64, $66, $68, $obj);
      label = 9; break;
    case 9: 
      var $70=$klass;
      var $71=(($70+16)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0))!=0;
      if ($73) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $75=$2;
      var $76=$klass;
      var $77=(($76+16)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=_kh_copy_mt($75, $78);
      var $80=$clone;
      var $81=(($80+16)|0);
      HEAP32[(($81)>>2)]=$79;
      label = 12; break;
    case 11: 
      var $83=$2;
      var $84=_kh_init_mt($83);
      var $85=$clone;
      var $86=(($85+16)|0);
      HEAP32[(($86)>>2)]=$84;
      label = 12; break;
    case 12: 
      var $88=$clone;
      var $89=$88;
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 & -256;
      var $92=$91 | 12;
      HEAP32[(($89)>>2)]=$92;
      var $93=$clone;
      $1=$93;
      label = 13; break;
    case 13: 
      var $95=$1;
      STACKTOP = __stackBase__;
      return $95;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1142($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_clone($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $clone=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($self+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)>>>(0)) <= 7;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((108264)|0));
      _mrb_raisef($7, $9, ((104644)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($self)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($self)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($self)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $11=$1;
      var $12=(($self+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=_mrb_obj_class($14, $self);
      var $16=_mrb_obj_alloc($11, $13, $15);
      var $17=$16;
      $p=$17;
      var $18=$1;
      var $19=_mrb_singleton_class_clone($18, $self);
      var $20=$p;
      var $21=(($20+4)|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=$p;
      var $23=$22;
      _mrb_obj_value1142($2, $23);
      var $24=$clone;
      var $25=$2;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $26=$1;
      _init_copy($26, $clone, $self);
      var $27=$agg_result;
      var $28=$clone;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _init_copy($mrb, $dest, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $dest; $dest = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=(($obj+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==8 | (($4)|(0))==9 | (($4)|(0))==10 | (($4)|(0))==12 | (($4)|(0))==15 | (($4)|(0))==21) {
        label = 2; break;
      }
      else {
      label = 3; break;
      }
    case 2: 
      var $6=$1;
      _mrb_iv_copy($6, $dest, $obj);
      label = 4; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$1;
      _mrb_funcall($2, $9, $dest, ((102388)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_dup($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $dup=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($obj+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)>>>(0)) <= 7;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((108264)|0));
      _mrb_raisef($7, $9, ((101860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $11=$1;
      var $12=(($obj+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$1;
      var $15=_mrb_obj_class($14, $obj);
      var $16=_mrb_obj_alloc($11, $13, $15);
      $p=$16;
      var $17=$p;
      var $18=$17;
      _mrb_obj_value1142($2, $18);
      var $19=$dup;
      var $20=$2;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=$1;
      _init_copy($21, $dup, $obj);
      var $22=$agg_result;
      var $23=$dup;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_extend_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $4=$1;
  var $5=HEAP32[(($argc)>>2)];
  var $6=HEAP32[(($argv)>>2)];
  _mrb_obj_extend($agg_result, $4, $5, $6, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_extend($agg_result, $mrb, $argc, $argv, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      var $6=$2;
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_class_get($10, ((97020)|0));
      _mrb_raise($9, $11, ((96700)|0));
      label = 3; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $14=$i;
      var $15=$2;
      var $16=(($14)|(0)) < (($15)|(0));
      if ($16) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $18=$1;
      var $19=$i;
      var $20=$3;
      var $21=(($20+((($19)*(12))&-1))|0);
      _mrb_check_type($18, $21, 10);
      label = 6; break;
    case 6: 
      var $23=$i;
      var $24=((($23)+(1))|0);
      $i=$24;
      label = 4; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $27=$2;
      var $28=((($27)-(1))|0);
      $2=$28;
      var $29=(($27)|(0))!=0;
      if ($29) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $31=$1;
      var $32=$2;
      var $33=$3;
      var $34=(($33+((($32)*(12))&-1))|0);
      _mrb_funcall($4, $31, $34, ((96604)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      var $35=$1;
      var $36=$2;
      var $37=$3;
      var $38=(($37+((($36)*(12))&-1))|0);
      _mrb_funcall($5, $35, $38, ((96516)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj)+(8))>>2)],tempInt));
      label = 8; break;
    case 10: 
      var $40=$agg_result;
      var $41=$obj;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_hash($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=_mrb_obj_id($self);
  _mrb_fixnum_value1145($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value1145($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_init_copy($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $orig=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$orig,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $self, $orig);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 3: 
      var $11=(($self+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($orig+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($12)|(0))!=(($14)|(0));
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$1;
      var $18=_mrb_obj_class($17, $self);
      var $19=$1;
      var $20=_mrb_obj_class($19, $orig);
      var $21=(($18)|(0))!=(($20)|(0));
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$1;
      var $24=$1;
      var $25=_mrb_class_get($24, ((108264)|0));
      _mrb_raise($23, $25, ((95844)|0));
      label = 6; break;
    case 6: 
      var $27=$agg_result;
      var $28=$self;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_instance_eval($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a=__stackBase__;
      var $b=(__stackBase__)+(12);
      var $cv=(__stackBase__)+(24);
      var $c;
      var $2=(__stackBase__)+(36);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((94804)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$b,tempInt));
      var $5=(($4)|(0))==1;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((93992)|0));
      _mrb_raise($7, $9, ((113956)|0));
      label = 3; break;
    case 3: 
      var $11=(($self+8)|0);
      var $12=HEAP32[(($11)>>2)];
      if ((($12)|(0))==4 | (($12)|(0))==3 | (($12)|(0))==6) {
        label = 4; break;
      }
      else {
      label = 5; break;
      }
    case 4: 
      $c=0;
      label = 6; break;
    case 5: 
      var $15=$1;
      _mrb_singleton_class($2, $15, $self);
      var $16=$cv;
      var $17=$2;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=(($cv)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      $c=$21;
      label = 6; break;
    case 6: 
      var $23=$1;
      var $24=$c;
      _mrb_yield_internal($agg_result, $23, $b, 0, 0, $self, $24);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_is_instance_of($mrb, $obj, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$mrb;
      $3=$c;
      var $4=$2;
      var $5=_mrb_obj_class($4, $obj);
      var $6=$3;
      var $7=(($5)|(0))==(($6)|(0));
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 4; break;
    case 3: 
      $1=0;
      label = 4; break;
    case 4: 
      var $11=$1;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_ivar_defined($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $mid=__stackBase__;
  var $defined_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((113356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$mid,tempInt));
  var $4=$1;
  var $5=HEAP16[(($mid)>>1)];
  _check_iv_name($4, $5);
  var $6=$1;
  var $7=(($self)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  var $11=HEAP16[(($mid)>>1)];
  var $12=_mrb_obj_iv_defined($6, $10, $11);
  $defined_p=$12;
  var $13=$defined_p;
  _mrb_bool_value1146($agg_result, $13);
  STACKTOP = __stackBase__;
  return;
}
function _check_iv_name($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $s;
      var $len=__stackBase__;
      var $3=(__stackBase__)+(4);
      $1=$mrb;
      $2=$id;
      var $4=$1;
      var $5=$2;
      var $6=_mrb_sym2name_len($4, $5, $len);
      $s=$6;
      var $7=HEAP32[(($len)>>2)];
      var $8=(($7)>>>(0)) < 2;
      if ($8) { label = 4; break; } else { label = 2; break; }
    case 2: 
      var $10=$s;
      var $11=(($10)|0);
      var $12=HEAP8[($11)];
      var $13=(($12 << 24) >> 24);
      var $14=(($13)|(0))==64;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$s;
      var $17=(($16+1)|0);
      var $18=HEAP8[($17)];
      var $19=(($18 << 24) >> 24);
      var $20=(($19)|(0))!=64;
      if ($20) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $22=$1;
      var $23=$2;
      var $24=$1;
      var $25=$2;
      _mrb_sym2str($3, $24, $25);
      _mrb_name_error($22, $23, ((97148)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1146($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_ivar_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((113356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_iv_name($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_iv_get($agg_result, $6, $self, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_ivar_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $id=__stackBase__;
  var $val=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((112508)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$id,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $4=$1;
  var $5=HEAP16[(($id)>>1)];
  _check_iv_name($4, $5);
  var $6=$1;
  var $7=HEAP16[(($id)>>1)];
  _mrb_iv_set($6, $self, $7, $val);
  var $8=$agg_result;
  var $9=$val;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arg=__stackBase__;
  var $kind_of_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $4=$1;
  var $5=(($arg)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=_mrb_obj_is_kind_of($4, $self, $8);
  var $10=(($9) & 255);
  $kind_of_p=$10;
  var $11=$kind_of_p;
  _mrb_bool_value1146($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _class_instance_method_list($agg_result, $mrb, $recur, $klass, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ary=__stackBase__;
      var $oldklass;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$recur;
      $3=$klass;
      $4=$obj;
      var $6=$1;
      _mrb_ary_new($5, $6);
      var $7=$ary;
      var $8=$5;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      $oldklass=0;
      label = 2; break;
    case 2: 
      var $10=$3;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 3; break; } else { var $17 = 0;label = 4; break; }
    case 3: 
      var $13=$3;
      var $14=$oldklass;
      var $15=(($13)|(0))!=(($14)|(0));
      var $17 = $15;label = 4; break;
    case 4: 
      var $17;
      if ($17) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $19=$1;
      var $20=$3;
      _method_entry_loop($19, $20, $ary);
      var $21=$3;
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 255;
      var $25=(($24)|(0))==11;
      if ($25) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $27=$3;
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & 255;
      var $31=(($30)|(0))==12;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 11; break;
    case 8: 
      var $34=$2;
      var $35=(($34 << 24) >> 24)!=0;
      if ($35) { label = 10; break; } else { label = 9; break; }
    case 9: 
      label = 12; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $39=$3;
      $oldklass=$39;
      var $40=$3;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      $3=$42;
      label = 2; break;
    case 12: 
      var $44=$agg_result;
      var $45=$ary;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _method_entry_loop($mrb, $klass, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $i;
      var $h;
      var $3=__stackBase__;
      $1=$mrb;
      $2=$klass;
      var $4=$2;
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $h=$6;
      var $7=$h;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 10; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $12=$i;
      var $13=$h;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($12)>>>(0)) < (($15)>>>(0));
      if ($16) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $18=$i;
      var $19=Math.floor(((($18)>>>(0)))/(8));
      var $20=$h;
      var $21=(($20+16)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+$19)|0);
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=$i;
      var $27=((($26)>>>(0)))%(8);
      var $28=((114636+$27)|0);
      var $29=HEAP8[($28)];
      var $30=(($29)&(255));
      var $31=$25 & $30;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 8; break; } else { label = 6; break; }
    case 6: 
      var $34=$i;
      var $35=Math.floor(((($34)>>>(0)))/(8));
      var $36=$h;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+$35)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&(255));
      var $42=$i;
      var $43=((($42)>>>(0)))%(8);
      var $44=((114636+$43)|0);
      var $45=HEAP8[($44)];
      var $46=(($45)&(255));
      var $47=$41 & $46;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $50=$1;
      var $51=$i;
      var $52=$h;
      var $53=(($52+24)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+($51<<1))|0);
      var $56=HEAP16[(($55)>>1)];
      _mrb_symbol_value1155($3, $56);
      _mrb_ary_push($50, $ary, $3);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $59=$i;
      var $60=((($59)+(1))|0);
      $i=$60;
      label = 4; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_singleton_methods($agg_result, $mrb, $recur, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ary=__stackBase__;
      var $klass;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      $2=$recur;
      var $4=$1;
      var $5=_mrb_class1141($4, $obj);
      $klass=$5;
      var $6=$1;
      _mrb_ary_new($3, $6);
      var $7=$ary;
      var $8=$3;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$klass;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=$klass;
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 255;
      var $16=(($15)|(0))==12;
      if ($16) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $18=$1;
      var $19=$klass;
      _method_entry_loop($18, $19, $ary);
      var $20=$klass;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      $klass=$22;
      label = 4; break;
    case 4: 
      var $24=$2;
      var $25=(($24 << 24) >> 24)!=0;
      if ($25) { label = 5; break; } else { label = 13; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $28=$klass;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 7; break; } else { var $45 = 0;label = 10; break; }
    case 7: 
      var $31=$klass;
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33 & 255;
      var $35=(($34)|(0))==12;
      if ($35) { var $43 = 1;label = 9; break; } else { label = 8; break; }
    case 8: 
      var $37=$klass;
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 & 255;
      var $41=(($40)|(0))==11;
      var $43 = $41;label = 9; break;
    case 9: 
      var $43;
      var $45 = $43;label = 10; break;
    case 10: 
      var $45;
      if ($45) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $47=$1;
      var $48=$klass;
      _method_entry_loop($47, $48, $ary);
      var $49=$klass;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      $klass=$51;
      label = 6; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $54=$agg_result;
      var $55=$ary;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_methods($agg_result, $mrb, $recur, $obj, $flag) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$recur;
      $3=$flag;
      var $4=$2;
      var $5=(($4 << 24) >> 24)!=0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$2;
      var $9=$1;
      var $10=_mrb_class1141($9, $obj);
      _class_instance_method_list($agg_result, $7, $8, $10, 0);
      label = 4; break;
    case 3: 
      var $12=$1;
      var $13=$2;
      _mrb_obj_singleton_methods($agg_result, $12, $13, $obj);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_methods_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $recur=__stackBase__;
  $1=$mrb;
  HEAP8[($recur)]=1;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $4=$1;
  var $5=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $4, $5, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_false($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  _mrb_false_value1149($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_false_value1149($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_private_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $recur=__stackBase__;
  $1=$mrb;
  HEAP8[($recur)]=1;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $4=$1;
  var $5=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $4, $5, $self, 2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_protected_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $recur=__stackBase__;
  $1=$mrb;
  HEAP8[($recur)]=1;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $4=$1;
  var $5=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $4, $5, $self, 4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_public_methods($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $recur=__stackBase__;
  $1=$mrb;
  HEAP8[($recur)]=1;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $4=$1;
  var $5=HEAP8[($recur)];
  _mrb_obj_methods($agg_result, $4, $5, $self, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_raise($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a=__stackBase__;
      var $exc=(__stackBase__)+(24);
      var $argc;
      var $2=(__stackBase__)+(36);
      var $3=(__stackBase__)+(48);
      var $4=(__stackBase__)+(60);
      var $5=(__stackBase__)+(72);
      $1=$mrb;
      var $6=$1;
      var $7=(($a)|0);
      var $8=(($a+12)|0);
      var $9=_mrb_get_args($6, ((111368)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$7,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt));
      $argc=$9;
      var $10=$argc;
      if ((($10)|(0))==0) {
        label = 2; break;
      }
      else if ((($10)|(0))==1) {
        label = 3; break;
      }
      else {
      label = 7; break;
      }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_get($13, ((110860)|0));
      _mrb_raise($12, $14, ((110432)|0));
      label = 8; break;
    case 3: 
      var $16=(($a+12)|0);
      var $17=$1;
      var $18=(($a)|0);
      _mrb_check_string_type($2, $17, $18);
      var $19=$16;
      var $20=$2;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=(($a+12)|0);
      var $22=(($21+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==0;
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=(($a+12)|0);
      var $27=(($26)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $argc=2;
      var $32=(($a)|0);
      var $33=$1;
      var $34=_mrb_class_get($33, ((110860)|0));
      var $35=$34;
      _mrb_obj_value1142($3, $35);
      var $36=$32;
      var $37=$3;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $40=$1;
      var $41=$argc;
      var $42=(($a)|0);
      _mrb_make_exception($4, $40, $41, $42);
      var $43=$exc;
      var $44=$4;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$1;
      var $46=(($exc)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=$1;
      var $51=_mrb_intern2($50, ((110020)|0), 6);
      var $52=$1;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54+16)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+20)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      _mrb_voidp_value1150($5, $59);
      _mrb_obj_iv_set($45, $49, $51, $5);
      var $60=$1;
      _mrb_exc_raise($60, $exc);
      label = 8; break;
    case 8: 
      _mrb_nil_value1151($agg_result);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_voidp_value1150($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$p;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=7;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1151($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_remove_instance_variable($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $sym=__stackBase__;
      var $val=(__stackBase__)+(4);
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_get_args($4, ((113356)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$sym,tempInt));
      var $6=$1;
      var $7=HEAP16[(($sym)>>1)];
      _check_iv_name($6, $7);
      var $8=$1;
      var $9=HEAP16[(($sym)>>1)];
      _mrb_iv_remove($2, $8, $self, $9);
      var $10=$val;
      var $11=$2;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($val+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==5;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$1;
      var $17=HEAP16[(($sym)>>1)];
      var $18=$1;
      var $19=HEAP16[(($sym)>>1)];
      _mrb_sym2str($3, $18, $19);
      _mrb_name_error($16, $17, ((109572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $21=$agg_result;
      var $22=$val;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _obj_respond_to($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 92)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $mid=(__stackBase__)+(8);
      var $priv=(__stackBase__)+(20);
      var $id;
      var $rtm_id;
      var $respond_to_p;
      var $2=(__stackBase__)+(32);
      var $tmp=(__stackBase__)+(44);
      var $3=(__stackBase__)+(56);
      var $4=(__stackBase__)+(68);
      var $5=(__stackBase__)+(80);
      $1=$mrb;
      $respond_to_p=1;
      var $6=$1;
      var $7=_mrb_get_args($6, ((99208)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $8=HEAP32[(($argv)>>2)];
      var $9=(($8)|0);
      var $10=$mid;
      var $11=$9;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=HEAP32[(($argc)>>2)];
      var $13=(($12)|(0)) > 1;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=HEAP32[(($argv)>>2)];
      var $16=(($15+12)|0);
      var $17=$priv;
      var $18=$16;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      label = 4; break;
    case 3: 
      _mrb_nil_value1151($2);
      var $20=$priv;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $23=(($mid+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))==4;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $27=(($mid)|0);
      var $28=$27;
      var $29=HEAP16[(($28)>>1)];
      $id=$29;
      label = 16; break;
    case 6: 
      var $31=(($mid+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))==16;
      if ($33) { label = 11; break; } else { label = 7; break; }
    case 7: 
      var $35=$1;
      _mrb_check_string_type($3, $35, $mid);
      var $36=$tmp;
      var $37=$3;
      assert(12 % 1 === 0);HEAP32[(($36)>>2)]=HEAP32[(($37)>>2)];HEAP32[((($36)+(4))>>2)]=HEAP32[((($37)+(4))>>2)];HEAP32[((($36)+(8))>>2)]=HEAP32[((($37)+(8))>>2)];
      var $38=(($tmp+8)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39)|(0))==0;
      if ($40) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $42=(($tmp)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0))!=0;
      if ($45) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $47=$1;
      _mrb_inspect($4, $47, $mid);
      var $48=$tmp;
      var $49=$4;
      assert(12 % 1 === 0);HEAP32[(($48)>>2)]=HEAP32[(($49)>>2)];HEAP32[((($48)+(4))>>2)]=HEAP32[((($49)+(4))>>2)];HEAP32[((($48)+(8))>>2)]=HEAP32[((($49)+(8))>>2)];
      var $50=$1;
      var $51=$1;
      var $52=_mrb_class_get($51, ((108264)|0));
      _mrb_raisef($50, $52, ((109076)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $55=$1;
      _mrb_check_intern_str($5, $55, $mid);
      var $56=$tmp;
      var $57=$5;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      var $58=(($tmp+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|(0))==0;
      if ($60) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $62=(($tmp)|0);
      var $63=$62;
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64)|(0))!=0;
      if ($65) { label = 14; break; } else { label = 13; break; }
    case 13: 
      $respond_to_p=0;
      label = 15; break;
    case 14: 
      var $68=(($tmp)|0);
      var $69=$68;
      var $70=HEAP16[(($69)>>1)];
      $id=$70;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $73=$respond_to_p;
      var $74=(($73 << 24) >> 24)!=0;
      if ($74) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $76=$1;
      var $77=$id;
      var $78=(($priv+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))!=0;
      var $81=$80 ^ 1;
      var $82=(($81)&(1));
      var $83=_basic_obj_respond_to($76, $self, $77, $82);
      var $84=(($83) & 255);
      $respond_to_p=$84;
      label = 18; break;
    case 18: 
      var $86=$respond_to_p;
      var $87=(($86 << 24) >> 24)!=0;
      if ($87) { label = 22; break; } else { label = 19; break; }
    case 19: 
      var $89=$1;
      var $90=_mrb_intern2($89, ((108544)|0), 19);
      $rtm_id=$90;
      var $91=$1;
      var $92=$rtm_id;
      var $93=(($priv+8)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=(($94)|(0))!=0;
      var $96=$95 ^ 1;
      var $97=(($96)&(1));
      var $98=_basic_obj_respond_to($91, $self, $92, $97);
      var $99=(($98)|(0))!=0;
      if ($99) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $101=$1;
      var $102=$rtm_id;
      var $103=HEAP32[(($argc)>>2)];
      var $104=HEAP32[(($argv)>>2)];
      _mrb_funcall_argv($agg_result, $101, $self, $102, $103, $104);
      label = 23; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $107=$respond_to_p;
      _mrb_bool_value1146($agg_result, $107);
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _basic_obj_respond_to($mrb, $obj, $id, $pub) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$id;
  $3=$pub;
  var $4=$1;
  var $5=$2;
  var $6=_mrb_respond_to($4, $obj, $5);
  STACKTOP = __stackBase__;
  return $6;
}
function _mrb_obj_singleton_methods_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $recur=__stackBase__;
  $1=$mrb;
  HEAP8[($recur)]=1;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111944)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$recur,tempInt));
  var $4=$1;
  var $5=HEAP8[($recur)];
  _mrb_obj_singleton_methods($agg_result, $4, $5, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_init_kernel($mrb) {
  var label = 0;
  var $1;
  var $krn;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((108228)|0));
  var $4=$1;
  var $5=(($4+96)|0);
  HEAP32[(($5)>>2)]=$3;
  $krn=$3;
  var $6=$1;
  var $7=$krn;
  _mrb_define_class_method($6, $7, ((107668)|0), 128, 0);
  var $8=$1;
  var $9=$krn;
  _mrb_define_class_method($8, $9, ((107376)|0), 18, 0);
  var $10=$1;
  var $11=$krn;
  _mrb_define_class_method($10, $11, ((107012)|0), 128, 0);
  var $12=$1;
  var $13=$krn;
  _mrb_define_class_method($12, $13, ((106540)|0), 64, 4096);
  var $14=$1;
  var $15=$krn;
  _mrb_define_method($14, $15, ((106148)|0), 576, 0);
  var $16=$1;
  var $17=$krn;
  _mrb_define_method($16, $17, ((105824)|0), 192, 262144);
  var $18=$1;
  var $19=$krn;
  _mrb_define_method($18, $19, ((105536)|0), 116, 262144);
  var $20=$1;
  var $21=$krn;
  _mrb_define_method($20, $21, ((105212)|0), 630, 262144);
  var $22=$1;
  var $23=$krn;
  _mrb_define_method($22, $23, ((104916)|0), 568, 0);
  var $24=$1;
  var $25=$krn;
  _mrb_define_method($24, $25, ((104612)|0), 556, 4096);
  var $26=$1;
  var $27=$krn;
  _mrb_define_method($26, $27, ((107668)|0), 128, 0);
  var $28=$1;
  var $29=$krn;
  _mrb_define_method($28, $29, ((104048)|0), 604, 0);
  var $30=$1;
  var $31=$krn;
  _mrb_define_method($30, $31, ((103804)|0), 60, 0);
  var $32=$1;
  var $33=$krn;
  _mrb_define_method($32, $33, ((103592)|0), 458, 0);
  var $34=$1;
  var $35=$krn;
  _mrb_define_method($34, $35, ((103380)|0), 192, 262144);
  var $36=$1;
  var $37=$krn;
  _mrb_define_method($36, $37, ((103176)|0), 192, 262144);
  var $38=$1;
  var $39=$krn;
  _mrb_define_method($38, $39, ((102892)|0), 480, 4096);
  var $40=$1;
  var $41=$krn;
  _mrb_define_method($40, $41, ((107376)|0), 18, 0);
  var $42=$1;
  var $43=$krn;
  _mrb_define_method($42, $43, ((102716)|0), 176, 0);
  var $44=$1;
  var $45=$krn;
  _mrb_define_method($44, $45, ((102388)|0), 684, 262144);
  var $46=$1;
  var $47=$krn;
  _mrb_define_method($46, $47, ((102080)|0), 538, 0);
  var $48=$1;
  var $49=$krn;
  _mrb_define_method($48, $49, ((101828)|0), 466, 4096);
  var $50=$1;
  var $51=$krn;
  _mrb_define_method($50, $51, ((101336)|0), 296, 262144);
  var $52=$1;
  var $53=$krn;
  _mrb_define_method($52, $53, ((101020)|0), 370, 262144);
  var $54=$1;
  var $55=$krn;
  _mrb_define_method($54, $55, ((100756)|0), 84, 262144);
  var $56=$1;
  var $57=$krn;
  _mrb_define_method($56, $57, ((100496)|0), 234, 524288);
  var $58=$1;
  var $59=$krn;
  _mrb_define_method($58, $59, ((100292)|0), 502, 0);
  var $60=$1;
  var $61=$krn;
  _mrb_define_method($60, $61, ((100120)|0), 670, 262144);
  var $62=$1;
  var $63=$krn;
  _mrb_define_method($62, $63, ((107012)|0), 128, 0);
  var $64=$1;
  var $65=$krn;
  _mrb_define_method($64, $65, ((99904)|0), 670, 262144);
  var $66=$1;
  var $67=$krn;
  _mrb_define_method($66, $67, ((99716)|0), 304, 8192);
  var $68=$1;
  var $69=$krn;
  _mrb_define_method($68, $69, ((99456)|0), 470, 0);
  var $70=$1;
  var $71=$krn;
  _mrb_define_method($70, $71, ((99180)|0), 568, 0);
  var $72=$1;
  var $73=$krn;
  _mrb_define_method($72, $73, ((98692)|0), 696, 8192);
  var $74=$1;
  var $75=$krn;
  _mrb_define_method($74, $75, ((98440)|0), 618, 8192);
  var $76=$1;
  var $77=$krn;
  _mrb_define_method($76, $77, ((98172)|0), 672, 8192);
  var $78=$1;
  var $79=$krn;
  _mrb_define_method($78, $79, ((106540)|0), 64, 4096);
  var $80=$1;
  var $81=$krn;
  _mrb_define_method($80, $81, ((97924)|0), 534, 262144);
  var $82=$1;
  var $83=$krn;
  _mrb_define_method($82, $83, ((97736)|0), 694, 4096);
  var $84=$1;
  var $85=$krn;
  _mrb_define_method($84, $85, ((97520)|0), 556, 4096);
  var $86=$1;
  var $87=$krn;
  _mrb_define_method($86, $87, ((97372)|0), 208, 8192);
  var $88=$1;
  var $89=$krn;
  _mrb_define_method($88, $89, ((113532)|0), 398, 0);
  var $90=$1;
  var $91=$1;
  var $92=(($91+44)|0);
  var $93=HEAP32[(($92)>>2)];
  var $94=$1;
  var $95=(($94+96)|0);
  var $96=HEAP32[(($95)>>2)];
  _mrb_include_module($90, $93, $96);
  var $97=$1;
  var $98=$1;
  var $99=(($98+52)|0);
  var $100=HEAP32[(($99)>>2)];
  var $101=$1;
  var $102=_mrb_intern1154($101, ((103592)|0));
  var $103=$1;
  var $104=_mrb_intern1154($103, ((103804)|0));
  _mrb_alias_method($97, $100, $102, $104);
  return;
}
function _mrb_f_block_given_p_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ci;
      var $bp;
      var $given_p;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4+16)|0);
      var $6=HEAP32[(($5)>>2)];
      $ci=$6;
      var $7=$1;
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$ci;
      var $13=(($12+8)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11+((($14)*(12))&-1))|0);
      var $16=(($15+12)|0);
      $bp=$16;
      var $17=$ci;
      var $18=((($17)-(44))|0);
      $ci=$18;
      var $19=$ci;
      var $20=$1;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($19)>>>(0)) <= (($24)>>>(0));
      if ($25) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $given_p=0;
      label = 16; break;
    case 3: 
      var $28=$ci;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+20)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $35=$ci;
      var $36=(($35+4)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+20)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+12)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($41)|(0))!=0;
      if ($42) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $44=$ci;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46+20)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$1;
      var $52=(($51+8)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($50)|(0))==(($55)|(0));
      if ($56) { var $86 = 1;label = 9; break; } else { label = 6; break; }
    case 6: 
      var $58=$ci;
      var $59=(($58+4)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+12)|0);
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|(0))==0;
      if ($68) { label = 7; break; } else { var $84 = 0;label = 8; break; }
    case 7: 
      var $70=$ci;
      var $71=(($70+4)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72+20)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74+12)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76+12)|0);
      var $78=(($77)|0);
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)|(0))!=0;
      var $82=$81 ^ 1;
      var $84 = $82;label = 8; break;
    case 8: 
      var $84;
      var $86 = $84;label = 9; break;
    case 9: 
      var $86;
      var $87=$86 ^ 1;
      var $88=(($87)&(1));
      var $89=(($88) & 255);
      $given_p=$89;
      label = 15; break;
    case 10: 
      var $91=$ci;
      var $92=(($91+16)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93)|(0)) > 0;
      if ($94) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $96=$ci;
      var $97=(($96+16)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$bp;
      var $100=(($99+((($98)*(12))&-1))|0);
      $bp=$100;
      label = 12; break;
    case 12: 
      var $102=$bp;
      var $103=(($102+8)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($104)|(0))==0;
      if ($105) { label = 13; break; } else { var $114 = 0;label = 14; break; }
    case 13: 
      var $107=$bp;
      var $108=(($107)|0);
      var $109=$108;
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|(0))!=0;
      var $112=$111 ^ 1;
      var $114 = $112;label = 14; break;
    case 14: 
      var $114;
      var $115=$114 ^ 1;
      var $116=(($115)&(1));
      var $117=(($116) & 255);
      $given_p=$117;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $120=$given_p;
      _mrb_bool_value1146($agg_result, $120);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arg=__stackBase__;
  var $eql_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $4=$1;
  var $5=_mrb_obj_equal($4, $self, $arg);
  var $6=(($5) & 255);
  $eql_p=$6;
  var $7=$eql_p;
  _mrb_bool_value1146($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_not_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arg=__stackBase__;
  var $eql_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $4=$1;
  var $5=_mrb_equal($4, $self, $arg);
  var $6=(($5) & 255);
  $eql_p=$6;
  var $7=$eql_p;
  var $8=(($7 << 24) >> 24)!=0;
  var $9=$8 ^ 1;
  var $10=(($9)&(1));
  var $11=(($10) & 255);
  _mrb_bool_value1146($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_equal_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arg=__stackBase__;
  var $equal_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $4=$1;
  var $5=_mrb_equal($4, $self, $arg);
  var $6=(($5) & 255);
  $equal_p=$6;
  var $7=$equal_p;
  _mrb_bool_value1146($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_id_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=_mrb_obj_id($self);
  _mrb_fixnum_value1145($agg_result, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_f_send($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $name=__stackBase__;
  var $block=(__stackBase__)+(4);
  var $argv=(__stackBase__)+(16);
  var $argc=(__stackBase__)+(20);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$name,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,HEAP32[(((tempInt)+(12))>>2)]=$block,tempInt));
  var $4=$1;
  var $5=HEAP16[(($name)>>1)];
  var $6=HEAP32[(($argc)>>2)];
  var $7=HEAP32[(($argv)>>2)];
  _mrb_funcall_with_block($agg_result, $4, $self, $5, $6, $7, $block);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_class_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_obj_class($2, $self);
  var $4=$3;
  _mrb_obj_value1142($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _obj_is_instance_of($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $arg=__stackBase__;
  var $instance_of_p;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
  var $4=$1;
  var $5=(($arg)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=_mrb_obj_is_instance_of($4, $self, $8);
  var $10=(($9) & 255);
  $instance_of_p=$10;
  var $11=$instance_of_p;
  _mrb_bool_value1146($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_intern1154($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_symbol_value1155($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1215($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_to_flo($mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($val+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==3) {
        label = 2; break;
      }
      else if ((($4)|(0))==6) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      var $6=(($val)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0));
      $1=$9;
      label = 6; break;
    case 3: 
      label = 5; break;
    case 4: 
      var $12=$2;
      var $13=$2;
      var $14=_mrb_class_get($13, ((108144)|0));
      _mrb_raise($12, $14, ((104576)|0));
      label = 5; break;
    case 5: 
      var $16=(($val)|0);
      var $17=$16;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $1=$18;
      label = 6; break;
    case 6: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_flo_to_str($agg_result, $mrb, $flo, $max_digit) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 108)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $flo; $flo = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($flo)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flo)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flo)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result=__stackBase__;
      var $n;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      var $digit;
      var $m;
      var $exp;
      var $e;
      var $s=(__stackBase__)+(48);
      var $c;
      var $weight;
      var $6=(__stackBase__)+(96);
      $1=$mrb;
      $2=$max_digit;
      var $7=$2;
      var $8=(($7)|(0)) > 40;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$1;
      var $12=_mrb_class_get($11, ((112900)|0));
      _mrb_raise($10, $12, ((113232)|0));
      label = 6; break;
    case 3: 
      var $14=(($flo+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))==6;
      if ($16) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((108144)|0));
      _mrb_raise($18, $20, ((104576)|0));
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=(($flo)|0);
      var $24=$23;
      var $25=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($24)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($24)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $n=$25;
      var $26=$n;
      var $27=___fpclassifyf($26);
      var $28=(($27)|(0))==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $30=$1;
      _mrb_str_new($3, $30, ((101804)|0), 3);
      var $31=$result;
      var $32=$3;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 43; break;
    case 8: 
      var $34=$n;
      var $35=___fpclassifyf($34);
      var $36=(($35)|(0))==1;
      if ($36) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $38=$n;
      var $39=$38 < 0;
      if ($39) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $41=$1;
      _mrb_str_new($4, $41, ((99164)|0), 4);
      var $42=$result;
      var $43=$4;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      label = 12; break;
    case 11: 
      var $45=$1;
      _mrb_str_new($5, $45, ((97016)|0), 3);
      var $46=$result;
      var $47=$5;
      assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
      label = 12; break;
    case 12: 
      label = 42; break;
    case 13: 
      $e=0;
      var $50=(($s)|0);
      $c=$50;
      var $51=$n;
      var $52=$51 < 0;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $54=$n;
      var $55=(-$54);
      $n=$55;
      var $56=$c;
      var $57=(($56+1)|0);
      $c=$57;
      HEAP8[($56)]=45;
      label = 15; break;
    case 15: 
      var $59=$n;
      var $60=_log10($59);
      var $61=(($60)&-1);
      $exp=$61;
      var $62=$exp;
      var $63=(($62)|(0)) < 0;
      if ($63) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $65=$exp;
      var $66=(((-$65))|0);
      var $70 = $66;label = 18; break;
    case 17: 
      var $68=$exp;
      var $70 = $68;label = 18; break;
    case 18: 
      var $70;
      var $71=$2;
      var $72=(($70)|(0)) > (($71)|(0));
      if ($72) { label = 19; break; } else { label = 22; break; }
    case 19: 
      $e=1;
      var $74=$exp;
      $m=$74;
      var $75=$m;
      var $76=(($75)|(0)) < 0;
      if ($76) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $78=$m;
      var $79=((($78)-(1))|0);
      $m=$79;
      label = 21; break;
    case 21: 
      var $81=$n;
      var $82=$m;
      var $83=(($82)|(0));
      var $84=Math.pow(10, $83);
      var $85=($81)/($84);
      $n=$85;
      $m=0;
      label = 25; break;
    case 22: 
      var $87=$exp;
      $m=$87;
      var $88=$m;
      var $89=(($88)|(0)) < 0;
      if ($89) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $m=0;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $94=$2;
      var $95=(($94)|(0)) >= 0;
      if ($95) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $97=$m;
      var $98=(($97)|(0));
      var $99=Math.pow(10, $98);
      $weight=$99;
      var $100=$n;
      var $101=$weight;
      var $102=($100)/($101);
      var $103=($102)+(1.1920928955078125e-7);
      var $104=Math.floor($103);
      var $105=(($104)&-1);
      $digit=$105;
      var $106=$digit;
      var $107=((($106)+(48))|0);
      var $108=(($107) & 255);
      var $109=$c;
      var $110=(($109+1)|0);
      $c=$110;
      HEAP8[($109)]=$108;
      var $111=$digit;
      var $112=(($111)|(0));
      var $113=$weight;
      var $114=($112)*($113);
      var $115=$n;
      var $116=($115)-($114);
      $n=$116;
      var $117=$2;
      var $118=((($117)-(1))|0);
      $2=$118;
      var $119=$m;
      var $120=((($119)-(1))|0);
      $m=$120;
      var $121=(($119)|(0))==0;
      if ($121) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $123=$c;
      var $124=(($123+1)|0);
      $c=$124;
      HEAP8[($123)]=46;
      label = 33; break;
    case 29: 
      var $126=$m;
      var $127=(($126)|(0)) < -1;
      if ($127) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $129=$n;
      var $130=$129 < 1.1920928955078125e-7;
      if ($130) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 34; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 26; break;
    case 34: 
      var $135=$e;
      var $136=(($135)|(0))!=0;
      if ($136) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $138=$c;
      var $139=(($138+1)|0);
      $c=$139;
      HEAP8[($138)]=101;
      var $140=$exp;
      var $141=(($140)|(0)) > 0;
      if ($141) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $143=$c;
      var $144=(($143+1)|0);
      $c=$144;
      HEAP8[($143)]=43;
      label = 38; break;
    case 37: 
      var $146=$c;
      var $147=(($146+1)|0);
      $c=$147;
      HEAP8[($146)]=45;
      var $148=$exp;
      var $149=(((-$148))|0);
      $exp=$149;
      label = 38; break;
    case 38: 
      var $151=$exp;
      var $152=(($151)|(0)) >= 100;
      if ($152) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $154=$1;
      var $155=$1;
      var $156=_mrb_class_get($155, ((112900)|0));
      _mrb_raise($154, $156, ((95820)|0));
      label = 40; break;
    case 40: 
      var $158=$exp;
      var $159=((((($158)|(0)))/(10))&-1);
      var $160=((($159)+(48))|0);
      var $161=(($160) & 255);
      var $162=$c;
      var $163=(($162+1)|0);
      $c=$163;
      HEAP8[($162)]=$161;
      var $164=$exp;
      var $165=((($164)|(0)))%(10);
      var $166=((($165)+(48))|0);
      var $167=(($166) & 255);
      var $168=$c;
      var $169=(($168+1)|0);
      $c=$169;
      HEAP8[($168)]=$167;
      label = 41; break;
    case 41: 
      var $171=$c;
      HEAP8[($171)]=0;
      var $172=$1;
      var $173=(($s)|0);
      var $174=$c;
      var $175=(($s)|0);
      var $176=$174;
      var $177=$175;
      var $178=((($176)-($177))|0);
      _mrb_str_new($6, $172, $173, $178);
      var $179=$result;
      var $180=$6;
      assert(12 % 1 === 0);HEAP32[(($179)>>2)]=HEAP32[(($180)>>2)];HEAP32[((($179)+(4))>>2)]=HEAP32[((($180)+(4))>>2)];HEAP32[((($179)+(8))>>2)]=HEAP32[((($180)+(8))>>2)];
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $183=$agg_result;
      var $184=$result;
      assert(12 % 1 === 0);HEAP32[(($183)>>2)]=HEAP32[(($184)>>2)];HEAP32[((($183)+(4))>>2)]=HEAP32[((($184)+(4))>>2)];HEAP32[((($183)+(8))>>2)]=HEAP32[((($184)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_mul($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $c;
      $1=$mrb;
      var $2=(($x)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      $a=$4;
      var $5=$a;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$x;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 14; break;
    case 3: 
      var $11=(($y+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==3;
      if ($13) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $15=(($y)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      $b=$17;
      var $18=$a;
      var $19=(($18)|(0)) < 32768;
      if ($19) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $21=$a;
      var $22=(($21)|(0)) >= -32768;
      if ($22) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $24=$b;
      var $25=(($24)|(0)) < 32768;
      if ($25) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $27=$b;
      var $28=(($27)|(0)) >= -32768;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$a;
      var $31=$b;
      var $32=Math.imul($30,$31);
      _mrb_fixnum_value1216($agg_result, $32);
      label = 14; break;
    case 9: 
      var $34=$a;
      var $35=$b;
      var $36=Math.imul($34,$35);
      $c=$36;
      var $37=$a;
      var $38=(($37)|(0))!=0;
      if ($38) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $40=$c;
      var $41=$a;
      var $42=((((($40)|(0)))/((($41)|(0))))&-1);
      var $43=$b;
      var $44=(($42)|(0))!=(($43)|(0));
      if ($44) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $46=$a;
      var $47=(($46)|(0));
      var $48=$b;
      var $49=(($48)|(0));
      var $50=($47)*($49);
      _mrb_float_value1215($agg_result, $50);
      label = 14; break;
    case 12: 
      var $52=$c;
      _mrb_fixnum_value1216($agg_result, $52);
      label = 14; break;
    case 13: 
      var $54=$a;
      var $55=(($54)|(0));
      var $56=$1;
      var $57=_mrb_to_flo($56, $y);
      var $58=($55)*($57);
      _mrb_float_value1215($agg_result, $58);
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1216($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_flo_to_fixnum($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $z;
      var $d;
      $1=$mrb;
      var $2=(($x+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==6;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      var $7=$1;
      var $8=_mrb_class_get($7, ((108144)|0));
      _mrb_raise($6, $8, ((104576)|0));
      $z=0;
      label = 8; break;
    case 3: 
      var $10=(($x)|0);
      var $11=$10;
      var $12=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($11)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $d=$12;
      var $13=$d;
      var $14=___fpclassifyf($13);
      var $15=(($14)|(0))==1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((94784)|0));
      var $20=$d;
      var $21=$20 < 0;
      var $22=$21 ? (((93980)|0)) : (((113944)|0));
      _mrb_raise($17, $19, $22);
      label = 5; break;
    case 5: 
      var $24=$d;
      var $25=___fpclassifyf($24);
      var $26=(($25)|(0))==0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$1;
      var $29=$1;
      var $30=_mrb_class_get($29, ((94784)|0));
      _mrb_raise($28, $30, ((101804)|0));
      label = 7; break;
    case 7: 
      var $32=$d;
      var $33=(($32)&-1);
      $z=$33;
      label = 8; break;
    case 8: 
      var $35=$z;
      _mrb_fixnum_value1216($agg_result, $35);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_plus($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $c;
      $1=$mrb;
      var $2=(($x)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      $a=$4;
      var $5=$a;
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$y;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 9; break;
    case 3: 
      var $11=(($y+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==3;
      if ($13) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $15=(($y)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      $b=$17;
      var $18=$a;
      var $19=$b;
      var $20=((($18)+($19))|0);
      $c=$20;
      var $21=$a;
      var $22=(($21)|(0)) < 0;
      var $23=(($22)&(1));
      var $24=$b;
      var $25=(($24)|(0)) < 0;
      var $26=(($25)&(1));
      var $27=$23 ^ $26;
      var $28=(($27)|(0))==0;
      if ($28) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $30=$a;
      var $31=(($30)|(0)) < 0;
      var $32=(($31)&(1));
      var $33=$c;
      var $34=(($33)|(0)) < 0;
      var $35=(($34)&(1));
      var $36=(($32)|(0))!=(($35)|(0));
      if ($36) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38=$a;
      var $39=(($38)|(0));
      var $40=$b;
      var $41=(($40)|(0));
      var $42=($39)+($41);
      _mrb_float_value1215($agg_result, $42);
      label = 9; break;
    case 7: 
      var $44=$c;
      _mrb_fixnum_value1216($agg_result, $44);
      label = 9; break;
    case 8: 
      var $46=$a;
      var $47=(($46)|(0));
      var $48=$1;
      var $49=_mrb_to_flo($48, $y);
      var $50=($47)+($49);
      _mrb_float_value1215($agg_result, $50);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_minus($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $a;
      var $b;
      var $c;
      $1=$mrb;
      var $2=(($x)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      $a=$4;
      var $5=(($y+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==3;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=(($y)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      $b=$11;
      var $12=$a;
      var $13=$b;
      var $14=((($12)-($13))|0);
      $c=$14;
      var $15=$a;
      var $16=(($15)|(0)) < 0;
      var $17=(($16)&(1));
      var $18=$b;
      var $19=(($18)|(0)) < 0;
      var $20=(($19)&(1));
      var $21=$17 ^ $20;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $24=$a;
      var $25=(($24)|(0)) < 0;
      var $26=(($25)&(1));
      var $27=$c;
      var $28=(($27)|(0)) < 0;
      var $29=(($28)&(1));
      var $30=(($26)|(0))!=(($29)|(0));
      if ($30) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $32=$a;
      var $33=(($32)|(0));
      var $34=$b;
      var $35=(($34)|(0));
      var $36=($33)-($35);
      _mrb_float_value1215($agg_result, $36);
      label = 7; break;
    case 5: 
      var $38=$c;
      _mrb_fixnum_value1216($agg_result, $38);
      label = 7; break;
    case 6: 
      var $40=$a;
      var $41=(($40)|(0));
      var $42=$1;
      var $43=_mrb_to_flo($42, $y);
      var $44=($41)-($43);
      _mrb_float_value1215($agg_result, $44);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_to_str($agg_result, $mrb, $x, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $buf=__stackBase__;
      var $b;
      var $val;
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      $2=$base;
      var $4=(($buf)|0);
      var $5=(($4+33)|0);
      $b=$5;
      var $6=(($x)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      $val=$8;
      var $9=$2;
      var $10=(($9)|(0)) < 2;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=$2;
      var $13=36 < (($12)|(0));
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$1;
      var $16=$1;
      var $17=_mrb_class_get($16, ((113336)|0));
      var $18=$2;
      _mrb_fixnum_value1216($3, $18);
      _mrb_raisef($15, $17, ((112484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      var $20=$val;
      var $21=(($20)|(0))==0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$b;
      var $24=((($23)-(1))|0);
      $b=$24;
      HEAP8[($24)]=48;
      label = 16; break;
    case 6: 
      var $26=$val;
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 7; break; } else { label = 11; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $30=$val;
      var $31=$2;
      var $32=((($30)|(0)))%((($31)|(0)));
      var $33=(((-$32))|0);
      var $34=((79872+$33)|0);
      var $35=HEAP8[($34)];
      var $36=$b;
      var $37=((($36)-(1))|0);
      $b=$37;
      HEAP8[($37)]=$35;
      label = 9; break;
    case 9: 
      var $39=$2;
      var $40=$val;
      var $41=((((($40)|(0)))/((($39)|(0))))&-1);
      $val=$41;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 8; break; } else { label = 10; break; }
    case 10: 
      var $44=$b;
      var $45=((($44)-(1))|0);
      $b=$45;
      HEAP8[($45)]=45;
      label = 15; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $48=$val;
      var $49=$2;
      var $50=((($48)|(0)))%((($49)|(0)));
      var $51=((79872+$50)|0);
      var $52=HEAP8[($51)];
      var $53=$b;
      var $54=((($53)-(1))|0);
      $b=$54;
      HEAP8[($54)]=$52;
      label = 13; break;
    case 13: 
      var $56=$2;
      var $57=$val;
      var $58=((((($57)|(0)))/((($56)|(0))))&-1);
      $val=$58;
      var $59=(($58)|(0))!=0;
      if ($59) { label = 12; break; } else { label = 14; break; }
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $63=$1;
      var $64=$b;
      var $65=(($buf)|0);
      var $66=(($65+33)|0);
      var $67=$b;
      var $68=$66;
      var $69=$67;
      var $70=((($68)-($69))|0);
      _mrb_str_new($agg_result, $63, $64, $70);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_numeric($mrb) {
  var label = 0;
  var $1;
  var $numeric;
  var $integer;
  var $fixnum;
  var $fl;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((111932)|0), $5);
  $numeric=$6;
  var $7=$1;
  var $8=$numeric;
  var $9=$1;
  var $10=_mrb_class_get($9, ((111356)|0));
  _mrb_include_module($7, $8, $10);
  var $11=$1;
  var $12=$numeric;
  _mrb_define_method($11, $12, ((110856)|0), 74, 262144);
  var $13=$1;
  var $14=$numeric;
  _mrb_define_method($13, $14, ((110428)|0), 492, 262144);
  var $15=$1;
  var $16=$numeric;
  _mrb_define_method($15, $16, ((110016)|0), 62, 262144);
  var $17=$1;
  var $18=$numeric;
  _mrb_define_method($17, $18, ((109568)|0), 410, 262144);
  var $19=$1;
  var $20=$numeric;
  _mrb_define_method($19, $20, ((109072)|0), 410, 262144);
  var $21=$1;
  var $22=$numeric;
  _mrb_define_method($21, $22, ((108540)|0), 396, 0);
  var $23=$1;
  var $24=$numeric;
  _mrb_define_method($23, $24, ((108224)|0), 310, 262144);
  var $25=$1;
  var $26=$numeric;
  var $27=_mrb_define_class($25, ((107660)|0), $26);
  $integer=$27;
  var $28=$1;
  var $29=$integer;
  _mrb_undef_class_method($28, $29, ((107372)|0));
  var $30=$1;
  var $31=$integer;
  _mrb_define_method($30, $31, ((107004)|0), 436, 0);
  var $32=$1;
  var $33=$integer;
  _mrb_define_method($32, $33, ((106532)|0), 436, 0);
  var $34=$1;
  var $35=$integer;
  var $36=_mrb_define_class($34, ((106140)|0), $35);
  var $37=$1;
  var $38=(($37+76)|0);
  HEAP32[(($38)>>2)]=$36;
  $fixnum=$36;
  var $39=$1;
  var $40=$fixnum;
  _mrb_undef_class_method($39, $40, ((107372)|0));
  var $41=$1;
  var $42=$fixnum;
  _mrb_define_method($41, $42, ((105820)|0), 662, 262144);
  var $43=$1;
  var $44=$fixnum;
  _mrb_define_method($43, $44, ((105532)|0), 386, 262144);
  var $45=$1;
  var $46=$fixnum;
  _mrb_define_method($45, $46, ((110428)|0), 352, 262144);
  var $47=$1;
  var $48=$fixnum;
  _mrb_define_method($47, $48, ((105208)|0), 24, 262144);
  var $49=$1;
  var $50=$fixnum;
  _mrb_define_method($49, $50, ((104912)|0), 244, 262144);
  var $51=$1;
  var $52=$fixnum;
  _mrb_define_method($51, $52, ((104608)|0), 314, 262144);
  var $53=$1;
  var $54=$fixnum;
  _mrb_define_method($53, $54, ((104044)|0), 136, 0);
  var $55=$1;
  var $56=$fixnum;
  _mrb_define_method($55, $56, ((103800)|0), 44, 262144);
  var $57=$1;
  var $58=$fixnum;
  _mrb_define_method($57, $58, ((103588)|0), 204, 262144);
  var $59=$1;
  var $60=$fixnum;
  _mrb_define_method($59, $60, ((103376)|0), 316, 262144);
  var $61=$1;
  var $62=$fixnum;
  _mrb_define_method($61, $62, ((103172)|0), 598, 262144);
  var $63=$1;
  var $64=$fixnum;
  _mrb_define_method($63, $64, ((102888)|0), 578, 262144);
  var $65=$1;
  var $66=$fixnum;
  _mrb_define_method($65, $66, ((102708)|0), 122, 262144);
  var $67=$1;
  var $68=$fixnum;
  _mrb_define_method($67, $68, ((102380)|0), 274, 0);
  var $69=$1;
  var $70=$fixnum;
  _mrb_define_method($69, $70, ((102072)|0), 524, 0);
  var $71=$1;
  var $72=$fixnum;
  _mrb_define_method($71, $72, ((101820)|0), 648, 0);
  var $73=$1;
  var $74=$fixnum;
  _mrb_define_method($73, $74, ((101328)|0), 394, 0);
  var $75=$1;
  var $76=$fixnum;
  _mrb_define_method($75, $76, ((101012)|0), 384, 0);
  var $77=$1;
  var $78=$fixnum;
  _mrb_define_method($77, $78, ((100748)|0), 384, 0);
  var $79=$1;
  var $80=$fixnum;
  _mrb_define_method($79, $80, ((100488)|0), 374, 262144);
  var $81=$1;
  var $82=$numeric;
  var $83=_mrb_define_class($81, ((100284)|0), $82);
  var $84=$1;
  var $85=(($84+72)|0);
  HEAP32[(($85)>>2)]=$83;
  $fl=$83;
  var $86=$1;
  var $87=$fl;
  _mrb_undef_class_method($86, $87, ((107372)|0));
  var $88=$1;
  var $89=$fl;
  _mrb_define_method($88, $89, ((105820)|0), 206, 262144);
  var $90=$1;
  var $91=$fl;
  _mrb_define_method($90, $91, ((105532)|0), 512, 262144);
  var $92=$1;
  var $93=$fl;
  _mrb_define_method($92, $93, ((105208)|0), 36, 262144);
  var $94=$1;
  var $95=$fl;
  _mrb_define_method($94, $95, ((104912)|0), 624, 262144);
  var $96=$1;
  var $97=$fl;
  _mrb_define_method($96, $97, ((104608)|0), 164, 262144);
  var $98=$1;
  var $99=$fl;
  _mrb_define_method($98, $99, ((100112)|0), 594, 0);
  var $100=$1;
  var $101=$fl;
  _mrb_define_method($100, $101, ((99896)|0), 484, 0);
  var $102=$1;
  var $103=$fl;
  _mrb_define_method($102, $103, ((99708)|0), 478, 0);
  var $104=$1;
  var $105=$fl;
  _mrb_define_method($104, $105, ((99444)|0), 232, 0);
  var $106=$1;
  var $107=$fl;
  _mrb_define_method($106, $107, ((99172)|0), 560, 0);
  var $108=$1;
  var $109=$fl;
  _mrb_define_method($108, $109, ((101328)|0), 542, 0);
  var $110=$1;
  var $111=$fl;
  _mrb_define_method($110, $111, ((107004)|0), 566, 0);
  var $112=$1;
  var $113=$fl;
  _mrb_define_method($112, $113, ((106532)|0), 566, 0);
  var $114=$1;
  var $115=$fl;
  _mrb_define_method($114, $115, ((98680)|0), 566, 0);
  var $116=$1;
  var $117=$fl;
  _mrb_define_method($116, $117, ((101012)|0), 546, 0);
  var $118=$1;
  var $119=$fl;
  _mrb_define_method($118, $119, ((100748)|0), 546, 0);
  return;
}
function _num_uplus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$num;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _num_uminus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_to_flo($2, $num);
  var $4=(-$3);
  _mrb_float_value1215($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _num_pow($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $both_int;
      var $d;
      $1=$mrb;
      $both_int=0;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $4=(($x+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=(($y+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==3;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $both_int=1;
      label = 4; break;
    case 4: 
      var $13=$1;
      var $14=_mrb_to_flo($13, $x);
      var $15=$1;
      var $16=_mrb_to_flo($15, $y);
      var $17=Math.pow($14, $16);
      $d=$17;
      var $18=$both_int;
      var $19=(($18)|(0))!=0;
      if ($19) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $21=$d;
      var $22=$21 <= 2147483647;
      if ($22) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $24=$d;
      var $25=$24 >= -2147483648;
      if ($25) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $27=$d;
      var $28=(($27)&-1);
      _mrb_fixnum_value1216($agg_result, $28);
      label = 9; break;
    case 8: 
      var $30=$d;
      _mrb_float_value1215($agg_result, $30);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_div($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((97732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $4=$1;
  var $5=_mrb_to_flo($4, $x);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $7=($5)/($6);
  _mrb_float_value1215($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _num_abs($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_to_flo($2, $num);
      var $4=$3 < 0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$1;
      _num_uminus($agg_result, $6, $num);
      label = 4; break;
    case 3: 
      var $8=$agg_result;
      var $9=$num;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_cmp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $other=__stackBase__;
      var $x;
      var $y;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $4=$1;
      var $5=_mrb_to_flo($4, $self);
      $x=$5;
      var $6=(($other+8)|0);
      var $7=HEAP32[(($6)>>2)];
      if ((($7)|(0))==3) {
        label = 2; break;
      }
      else if ((($7)|(0))==6) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      var $9=(($other)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0));
      $y=$12;
      label = 5; break;
    case 3: 
      var $14=(($other)|0);
      var $15=$14;
      var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $y=$16;
      label = 5; break;
    case 4: 
      _mrb_nil_value1221($agg_result);
      label = 10; break;
    case 5: 
      var $19=$x;
      var $20=$y;
      var $21=$19 > $20;
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_fixnum_value1216($agg_result, 1);
      label = 10; break;
    case 7: 
      var $24=$x;
      var $25=$y;
      var $26=$24 < $25;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      _mrb_fixnum_value1216($agg_result, -1);
      label = 10; break;
    case 9: 
      _mrb_fixnum_value1216($agg_result, 0);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _int_to_i($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$num;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _fix_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $other=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $4=$1;
  _mrb_fixnum_plus($agg_result, $4, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_minus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $other=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
  var $4=$1;
  _mrb_fixnum_minus($agg_result, $4, $self, $other);
  STACKTOP = __stackBase__;
  return;
}
function _fix_uminus($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($num)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(((-$4))|0);
  _mrb_fixnum_value1216($agg_result, $5);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mul($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $4=$1;
  _mrb_fixnum_mul($agg_result, $4, $x, $y);
  STACKTOP = __stackBase__;
  return;
}
function _fix_mod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $a;
      var $b;
      var $mod=(__stackBase__)+(12);
      var $mod1=(__stackBase__)+(16);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $4=(($x)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      $a=$6;
      var $7=(($y+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==3;
      if ($9) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $11=(($y)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $b=$13;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $16=(($y)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))==0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=_strtod(((97920)|0), 0);
      _mrb_float_value1215($agg_result, $21);
      label = 7; break;
    case 5: 
      var $23=$1;
      var $24=$a;
      var $25=(($y)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      _fixdivmod($23, $24, $27, 0, $mod);
      var $28=HEAP32[(($mod)>>2)];
      _mrb_fixnum_value1216($agg_result, $28);
      label = 7; break;
    case 6: 
      var $30=$1;
      var $31=$a;
      var $32=(($31)|(0));
      var $33=$1;
      var $34=_mrb_to_flo($33, $y);
      _flodivmod($30, $32, $34, 0, $mod1);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1215($agg_result, $35);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_equal($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $equal_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $x, $y);
      var $6=(($5)|(0))!=0;
      if ($6) { var $23 = 1;label = 5; break; } else { label = 2; break; }
    case 2: 
      var $8=(($y+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==6;
      if ($10) { label = 3; break; } else { var $21 = 0;label = 4; break; }
    case 3: 
      var $12=(($x)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0));
      var $16=(($y)|0);
      var $17=$16;
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($17)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($17)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=$15 == $18;
      var $21 = $19;label = 4; break;
    case 4: 
      var $21;
      var $23 = $21;label = 5; break;
    case 5: 
      var $23;
      var $24=(($23)&(1));
      var $25=(($24) & 255);
      $equal_p=$25;
      var $26=$equal_p;
      _mrb_bool_value1222($agg_result, $26);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_rev($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $val;
  $1=$mrb;
  var $2=(($num)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  $val=$4;
  var $5=$val;
  var $6=$5 ^ -1;
  $val=$6;
  var $7=$val;
  _mrb_fixnum_value1216($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _fix_and($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  var $val;
  var $2=(__stackBase__)+(12);
  $1=$mrb;
  var $3=$1;
  var $4=_mrb_get_args($3, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $5=$1;
  _bit_coerce($2, $5, $y);
  var $6=$y;
  var $7=$2;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=(($x)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=(($y)|0);
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  var $14=$10 & $13;
  $val=$14;
  var $15=$val;
  _mrb_fixnum_value1216($agg_result, $15);
  STACKTOP = __stackBase__;
  return;
}
function _fix_or($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  var $val;
  var $2=(__stackBase__)+(12);
  $1=$mrb;
  var $3=$1;
  var $4=_mrb_get_args($3, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $5=$1;
  _bit_coerce($2, $5, $y);
  var $6=$y;
  var $7=$2;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=(($x)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=(($y)|0);
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  var $14=$10 | $13;
  $val=$14;
  var $15=$val;
  _mrb_fixnum_value1216($agg_result, $15);
  STACKTOP = __stackBase__;
  return;
}
function _fix_xor($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  var $val;
  var $2=(__stackBase__)+(12);
  $1=$mrb;
  var $3=$1;
  var $4=_mrb_get_args($3, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $5=$1;
  _bit_coerce($2, $5, $y);
  var $6=$y;
  var $7=$2;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=(($x)|0);
  var $9=$8;
  var $10=HEAP32[(($9)>>2)];
  var $11=(($y)|0);
  var $12=$11;
  var $13=HEAP32[(($12)>>2)];
  var $14=$10 ^ $13;
  $val=$14;
  var $15=$val;
  _mrb_fixnum_value1216($agg_result, $15);
  STACKTOP = __stackBase__;
  return;
}
function _fix_lshift($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $width=__stackBase__;
      var $result=(__stackBase__)+(4);
      var $val;
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      $1=$mrb;
      var $4=$1;
      _fix_shift_get_width($4, $width);
      var $5=HEAP32[(($width)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$result;
      var $9=$x;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 3: 
      var $11=(($x)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $val=$13;
      var $14=HEAP32[(($width)>>2)];
      var $15=(($14)|(0)) < 0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$val;
      var $18=HEAP32[(($width)>>2)];
      var $19=(((-$18))|0);
      _rshift($2, $17, $19);
      var $20=$result;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $23=$1;
      var $24=$val;
      var $25=HEAP32[(($width)>>2)];
      _lshift($3, $23, $24, $25);
      var $26=$result;
      var $27=$3;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$agg_result;
      var $31=$result;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_rshift($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 40)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $width=__stackBase__;
      var $result=(__stackBase__)+(4);
      var $val;
      var $2=(__stackBase__)+(16);
      var $3=(__stackBase__)+(28);
      $1=$mrb;
      var $4=$1;
      _fix_shift_get_width($4, $width);
      var $5=HEAP32[(($width)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$result;
      var $9=$x;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 7; break;
    case 3: 
      var $11=(($x)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $val=$13;
      var $14=HEAP32[(($width)>>2)];
      var $15=(($14)|(0)) < 0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      var $18=$val;
      var $19=HEAP32[(($width)>>2)];
      var $20=(((-$19))|0);
      _lshift($2, $17, $18, $20);
      var $21=$result;
      var $22=$2;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $24=$val;
      var $25=HEAP32[(($width)>>2)];
      _rshift($3, $24, $25);
      var $26=$result;
      var $27=$3;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$agg_result;
      var $31=$result;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_eql($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $eql_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $4=(($x+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($y+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($5)|(0))!=(($7)|(0));
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $eql_p=0;
      label = 4; break;
    case 3: 
      var $11=$1;
      var $12=_mrb_equal($11, $x, $y);
      var $13=(($12) & 255);
      $eql_p=$13;
      label = 4; break;
    case 4: 
      var $15=$eql_p;
      _mrb_bool_value1222($agg_result, $15);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_hash($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $d=__stackBase__;
      var $c;
      var $i;
      var $hash;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0));
      (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($d)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($d)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$6 == 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($d)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($d)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $10=$d;
      $c=$10;
      $hash=0;
      $i=0;
      label = 4; break;
    case 4: 
      var $12=$i;
      var $13=(($12)>>>(0)) < 8;
      if ($13) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $15=$hash;
      var $16=((($15)*(971))&-1);
      var $17=$i;
      var $18=$c;
      var $19=(($18+$17)|0);
      var $20=HEAP8[($19)];
      var $21=(($20)&(255));
      var $22=$16 ^ $21;
      $hash=$22;
      label = 6; break;
    case 6: 
      var $24=$i;
      var $25=((($24)+(1))|0);
      $i=$25;
      label = 4; break;
    case 7: 
      var $27=$hash;
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $30=$hash;
      var $31=(((-$30))|0);
      $hash=$31;
      label = 9; break;
    case 9: 
      var $33=$hash;
      _mrb_fixnum_value1216($agg_result, $33);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _int_succ($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      $1=$mrb;
      var $3=(($num+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==3;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      _fix_succ($agg_result, $7, $num);
      label = 4; break;
    case 3: 
      var $9=$1;
      _mrb_fixnum_value1216($2, 1);
      _mrb_funcall($agg_result, $9, $num, ((105820)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_succ($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($num)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=((($4)+(1))|0);
  _mrb_fixnum_value1216($agg_result, $5);
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_f($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $val;
  $1=$mrb;
  var $2=(($num)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=(($4)|(0));
  $val=$5;
  var $6=$val;
  _mrb_float_value1215($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _fix_to_s($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $base=__stackBase__;
  $1=$mrb;
  HEAP32[(($base)>>2)]=10;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$base,tempInt));
  var $4=$1;
  var $5=HEAP32[(($base)>>2)];
  _mrb_fixnum_to_str($agg_result, $4, $self, $5);
  STACKTOP = __stackBase__;
  return;
}
function _fix_divmod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $div=(__stackBase__)+(12);
      var $mod=(__stackBase__)+(16);
      var $2=(__stackBase__)+(20);
      var $3=(__stackBase__)+(32);
      var $4=(__stackBase__)+(44);
      var $5=(__stackBase__)+(56);
      var $div1=(__stackBase__)+(68);
      var $mod2=(__stackBase__)+(76);
      var $a=(__stackBase__)+(84);
      var $b=(__stackBase__)+(96);
      var $6=(__stackBase__)+(108);
      var $7=(__stackBase__)+(120);
      $1=$mrb;
      var $8=$1;
      var $9=_mrb_get_args($8, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $10=(($y+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==3;
      if ($12) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $14=(($y)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))==0;
      if ($17) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $19=$1;
      var $20=_strtod(((97016)|0), 0);
      _mrb_float_value1215($2, $20);
      var $21=_strtod(((97920)|0), 0);
      _mrb_float_value1215($3, $21);
      _mrb_assoc_new($agg_result, $19, $2, $3);
      label = 6; break;
    case 4: 
      var $23=$1;
      var $24=(($x)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=(($y)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      _fixdivmod($23, $26, $29, $div, $mod);
      var $30=$1;
      var $31=HEAP32[(($div)>>2)];
      _mrb_fixnum_value1216($4, $31);
      var $32=HEAP32[(($mod)>>2)];
      _mrb_fixnum_value1216($5, $32);
      _mrb_assoc_new($agg_result, $30, $4, $5);
      label = 6; break;
    case 5: 
      var $34=$1;
      var $35=(($x)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0));
      var $39=$1;
      var $40=_mrb_to_flo($39, $y);
      _flodivmod($34, $38, $40, $div1, $mod2);
      var $41=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($div1)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($div1)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $42=(($41)&-1);
      var $43=(($42)|(0));
      _mrb_float_value1215($6, $43);
      var $44=$a;
      var $45=$6;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1215($7, $46);
      var $47=$b;
      var $48=$7;
      assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
      var $49=$1;
      _mrb_assoc_new($agg_result, $49, $a, $b);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x;
  var $y=__stackBase__;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  $x=$4;
  var $5=$1;
  var $6=_mrb_get_args($5, ((97732)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $7=$x;
  var $8=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $9=($7)+($8);
  _mrb_float_value1215($agg_result, $9);
  STACKTOP = __stackBase__;
  return;
}
function _flo_minus($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $4=(($x)|0);
  var $5=$4;
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $7=$1;
  var $8=_mrb_to_flo($7, $y);
  var $9=($6)-($8);
  _mrb_float_value1215($agg_result, $9);
  STACKTOP = __stackBase__;
  return;
}
function _fixdivmod($mrb, $x, $y, $divp, $modp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $div;
      var $mod;
      $1=$mrb;
      $2=$x;
      $3=$y;
      $4=$divp;
      $5=$modp;
      var $6=$3;
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=$2;
      var $10=(($9)|(0)) < 0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$2;
      var $13=(((-$12))|0);
      var $14=$3;
      var $15=(((-$14))|0);
      var $16=((((($13)|(0)))/((($15)|(0))))&-1);
      $div=$16;
      label = 5; break;
    case 4: 
      var $18=$2;
      var $19=$3;
      var $20=(((-$19))|0);
      var $21=((((($18)|(0)))/((($20)|(0))))&-1);
      var $22=(((-$21))|0);
      $div=$22;
      label = 5; break;
    case 5: 
      label = 10; break;
    case 6: 
      var $25=$2;
      var $26=(($25)|(0)) < 0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$2;
      var $29=(((-$28))|0);
      var $30=$3;
      var $31=((((($29)|(0)))/((($30)|(0))))&-1);
      var $32=(((-$31))|0);
      $div=$32;
      label = 9; break;
    case 8: 
      var $34=$2;
      var $35=$3;
      var $36=((((($34)|(0)))/((($35)|(0))))&-1);
      $div=$36;
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $39=$2;
      var $40=$div;
      var $41=$3;
      var $42=Math.imul($40,$41);
      var $43=((($39)-($42))|0);
      $mod=$43;
      var $44=$mod;
      var $45=(($44)|(0)) < 0;
      if ($45) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $47=$3;
      var $48=(($47)|(0)) > 0;
      if ($48) { label = 14; break; } else { label = 12; break; }
    case 12: 
      var $50=$mod;
      var $51=(($50)|(0)) > 0;
      if ($51) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $53=$3;
      var $54=(($53)|(0)) < 0;
      if ($54) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $56=$3;
      var $57=$mod;
      var $58=((($57)+($56))|0);
      $mod=$58;
      var $59=$div;
      var $60=((($59)-(1))|0);
      $div=$60;
      label = 15; break;
    case 15: 
      var $62=$4;
      var $63=(($62)|(0))!=0;
      if ($63) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $65=$div;
      var $66=$4;
      HEAP32[(($66)>>2)]=$65;
      label = 17; break;
    case 17: 
      var $68=$5;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $71=$mod;
      var $72=$5;
      HEAP32[(($72)>>2)]=$71;
      label = 19; break;
    case 19: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_eq($mrb, $v1, $v2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($v1+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($v2+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($4)|(0))!=(($6)|(0));
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 9; break;
    case 3: 
      var $10=(($v1+8)|0);
      var $11=HEAP32[(($10)>>2)];
      if ((($11)|(0))==2) {
        label = 4; break;
      }
      else if ((($11)|(0))==0 | (($11)|(0))==3) {
        label = 5; break;
      }
      else if ((($11)|(0))==4) {
        label = 6; break;
      }
      else if ((($11)|(0))==6) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 4: 
      $1=1;
      label = 9; break;
    case 5: 
      var $14=(($v1)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=(($v2)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16)|(0))==(($19)|(0));
      var $21=(($20)&(1));
      $1=$21;
      label = 9; break;
    case 6: 
      var $23=(($v1)|0);
      var $24=$23;
      var $25=HEAP16[(($24)>>1)];
      var $26=(($25 << 16) >> 16);
      var $27=(($v2)|0);
      var $28=$27;
      var $29=HEAP16[(($28)>>1)];
      var $30=(($29 << 16) >> 16);
      var $31=(($26)|(0))==(($30)|(0));
      var $32=(($31)&(1));
      $1=$32;
      label = 9; break;
    case 7: 
      var $34=(($v1)|0);
      var $35=$34;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=(($v2)|0);
      var $38=$37;
      var $39=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($38)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($38)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $40=$36 == $39;
      var $41=(($40)&(1));
      $1=$41;
      label = 9; break;
    case 8: 
      var $43=(($v1)|0);
      var $44=$43;
      var $45=HEAP32[(($44)>>2)];
      var $46=(($v2)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=(($45)|(0))==(($48)|(0));
      var $50=(($49)&(1));
      $1=$50;
      label = 9; break;
    case 9: 
      var $52=$1;
      STACKTOP = __stackBase__;
      return $52;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_mul($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $4=(($x)|0);
  var $5=$4;
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $7=$1;
  var $8=_mrb_to_flo($7, $y);
  var $9=($6)*($8);
  _mrb_float_value1215($agg_result, $9);
  STACKTOP = __stackBase__;
  return;
}
function _flo_mod($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $y=__stackBase__;
  var $fy;
  var $mod=(__stackBase__)+(12);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $4=$1;
  var $5=_mrb_to_flo($4, $y);
  $fy=$5;
  var $6=$1;
  var $7=(($x)|0);
  var $8=$7;
  var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $10=$fy;
  _flodivmod($6, $9, $10, 0, $mod);
  var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($mod)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($mod)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1215($agg_result, $11);
  STACKTOP = __stackBase__;
  return;
}
function _flo_eq($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y=__stackBase__;
      var $a;
      var $b;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
      var $4=(($y+8)|0);
      var $5=HEAP32[(($4)>>2)];
      if ((($5)|(0))==3) {
        label = 2; break;
      }
      else if ((($5)|(0))==6) {
        label = 3; break;
      }
      else {
      label = 4; break;
      }
    case 2: 
      var $7=(($y)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0));
      $b=$10;
      label = 5; break;
    case 3: 
      var $12=(($y)|0);
      var $13=$12;
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $b=$14;
      label = 5; break;
    case 4: 
      var $16=$1;
      _num_equal($agg_result, $16, $x, $y);
      label = 6; break;
    case 5: 
      var $18=(($x)|0);
      var $19=$18;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $a=$20;
      var $21=$a;
      var $22=$b;
      var $23=$21 == $22;
      var $24=(($23)&(1));
      var $25=(($24) & 255);
      _mrb_bool_value1222($agg_result, $25);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_ceil($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=Math.ceil($4);
      $f=$5;
      var $6=$f;
      var $7=$6 <= 2147483647;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$f;
      var $10=$9 >= -2147483648;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$f;
      _mrb_float_value1215($agg_result, $12);
      label = 5; break;
    case 4: 
      var $14=$f;
      var $15=(($14)&-1);
      _mrb_fixnum_value1216($agg_result, $15);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_finite_p($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $value;
      var $finite_p;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $value=$4;
      var $5=$value;
      var $6=___fpclassifyf($5);
      var $7=(($6)|(0))==1;
      if ($7) { var $13 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=$value;
      var $10=___fpclassifyf($9);
      var $11=(($10)|(0))==0;
      var $13 = $11;label = 3; break;
    case 3: 
      var $13;
      var $14=$13 ^ 1;
      var $15=(($14)&(1));
      var $16=(($15) & 255);
      $finite_p=$16;
      var $17=$finite_p;
      _mrb_bool_value1222($agg_result, $17);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_floor($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=Math.floor($4);
      $f=$5;
      var $6=$f;
      var $7=$6 <= 2147483647;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$f;
      var $10=$9 >= -2147483648;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$f;
      _mrb_float_value1215($agg_result, $12);
      label = 5; break;
    case 4: 
      var $14=$f;
      var $15=(($14)&-1);
      _mrb_fixnum_value1216($agg_result, $15);
      label = 5; break;
    case 5: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_infinite_p($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $value;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $value=$4;
      var $5=$value;
      var $6=___fpclassifyf($5);
      var $7=(($6)|(0))==1;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$value;
      var $10=$9 < 0;
      var $11=$10 ? -1 : 1;
      _mrb_fixnum_value1216($agg_result, $11);
      label = 4; break;
    case 3: 
      _mrb_nil_value1221($agg_result);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_round($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $number;
      var $f;
      var $ndigits=__stackBase__;
      var $i;
      var $d;
      $1=$mrb;
      HEAP32[(($ndigits)>>2)]=0;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98436)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ndigits,tempInt));
      var $4=(($num)|0);
      var $5=$4;
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $number=$6;
      $f=1;
      var $7=HEAP32[(($ndigits)>>2)];
      var $8=Math.abs($7);
      $i=$8;
      label = 2; break;
    case 2: 
      var $10=$i;
      var $11=((($10)-(1))|0);
      $i=$11;
      var $12=(($11)|(0)) >= 0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$f;
      var $15=($14)*(10);
      $f=$15;
      label = 2; break;
    case 4: 
      var $17=$f;
      var $18=___fpclassifyf($17);
      var $19=(($18)|(0))==1;
      if ($19) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $21=HEAP32[(($ndigits)>>2)];
      var $22=(($21)|(0)) < 0;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $number=0;
      label = 7; break;
    case 7: 
      label = 20; break;
    case 8: 
      var $26=HEAP32[(($ndigits)>>2)];
      var $27=(($26)|(0)) < 0;
      if ($27) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $29=$f;
      var $30=$number;
      var $31=($30)/($29);
      $number=$31;
      label = 11; break;
    case 10: 
      var $33=$f;
      var $34=$number;
      var $35=($34)*($33);
      $number=$35;
      label = 11; break;
    case 11: 
      var $37=$number;
      var $38=$37 > 0;
      if ($38) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $40=$number;
      var $41=Math.floor($40);
      $d=$41;
      var $42=$d;
      var $43=$number;
      var $44=$d;
      var $45=($43)-($44);
      var $46=$45 >= 0.5;
      var $47=(($46)&(1));
      var $48=(($47)|(0));
      var $49=($42)+($48);
      $number=$49;
      label = 16; break;
    case 13: 
      var $51=$number;
      var $52=$51 < 0;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $54=$number;
      var $55=Math.ceil($54);
      $d=$55;
      var $56=$d;
      var $57=$d;
      var $58=$number;
      var $59=($57)-($58);
      var $60=$59 >= 0.5;
      var $61=(($60)&(1));
      var $62=(($61)|(0));
      var $63=($56)-($62);
      $number=$63;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $66=HEAP32[(($ndigits)>>2)];
      var $67=(($66)|(0)) < 0;
      if ($67) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $69=$f;
      var $70=$number;
      var $71=($70)*($69);
      $number=$71;
      label = 19; break;
    case 18: 
      var $73=$f;
      var $74=$number;
      var $75=($74)/($73);
      $number=$75;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $78=HEAP32[(($ndigits)>>2)];
      var $79=(($78)|(0)) > 0;
      if ($79) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $81=$number;
      _mrb_float_value1215($agg_result, $81);
      label = 23; break;
    case 22: 
      var $83=$number;
      var $84=(($83)&-1);
      _mrb_fixnum_value1216($agg_result, $84);
      label = 23; break;
    case 23: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_to_f($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$num;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _flo_truncate($agg_result, $mrb, $num) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $num; $num = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($num)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($num)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($num)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f;
      $1=$mrb;
      var $2=(($num)|0);
      var $3=$2;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $f=$4;
      var $5=$f;
      var $6=$5 > 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$f;
      var $9=Math.floor($8);
      $f=$9;
      label = 3; break;
    case 3: 
      var $11=$f;
      var $12=$11 < 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$f;
      var $15=Math.ceil($14);
      $f=$15;
      label = 5; break;
    case 5: 
      var $17=$f;
      var $18=$17 <= 2147483647;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $20=$f;
      var $21=$20 >= -2147483648;
      if ($21) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $23=$f;
      _mrb_float_value1215($agg_result, $23);
      label = 9; break;
    case 8: 
      var $25=$f;
      var $26=(($25)&-1);
      _mrb_fixnum_value1216($agg_result, $26);
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flo_to_s($agg_result, $mrb, $flt) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $flt; $flt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($flt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($flt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($flt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_flo_to_str($agg_result, $2, $flt, 14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_nil_value1221($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1222($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_equal($agg_result, $mrb, $x, $y) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $y; $y = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($y)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($y)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($y)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_obj_equal($2, $x, $y);
      var $4=(($3)|(0))!=0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_true_value1223($agg_result);
      label = 4; break;
    case 3: 
      var $7=$1;
      _mrb_funcall($agg_result, $7, $y, ((104608)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1223($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _flodivmod($mrb, $x, $y, $divp, $modp) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $div;
      var $mod;
      $1=$mrb;
      $2=$x;
      $3=$y;
      $4=$divp;
      $5=$modp;
      var $6=$3;
      var $7=$6 == 0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_strtod(((97016)|0), 0);
      $div=$9;
      var $10=_strtod(((97920)|0), 0);
      $mod=$10;
      label = 11; break;
    case 3: 
      var $12=$2;
      var $13=$3;
      var $14=_fmod($12, $13);
      $mod=$14;
      var $15=$2;
      var $16=___fpclassifyf($15);
      var $17=(($16)|(0))==1;
      if ($17) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $19=$3;
      var $20=___fpclassifyf($19);
      var $21=(($20)|(0))==1;
      if ($21) { label = 7; break; } else { label = 5; break; }
    case 5: 
      var $23=$3;
      var $24=___fpclassifyf($23);
      var $25=(($24)|(0))==0;
      if ($25) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $27=$2;
      $div=$27;
      label = 8; break;
    case 7: 
      var $29=$2;
      var $30=$mod;
      var $31=($29)-($30);
      var $32=$3;
      var $33=($31)/($32);
      $div=$33;
      label = 8; break;
    case 8: 
      var $35=$3;
      var $36=$mod;
      var $37=($35)*($36);
      var $38=$37 < 0;
      if ($38) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $40=$3;
      var $41=$mod;
      var $42=($41)+($40);
      $mod=$42;
      var $43=$div;
      var $44=($43)-(1);
      $div=$44;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $47=$5;
      var $48=(($47)|(0))!=0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $50=$mod;
      var $51=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$50,HEAP32[(($51)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($51)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 13; break;
    case 13: 
      var $53=$4;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $56=$div;
      var $57=$4;
      (HEAPF64[(tempDoublePtr)>>3]=$56,HEAP32[(($57)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($57)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 15; break;
    case 15: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fix_shift_get_width($mrb, $width) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $y=__stackBase__;
  var $3=(__stackBase__)+(12);
  $1=$mrb;
  $2=$width;
  var $4=$1;
  var $5=_mrb_get_args($4, ((98168)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$y,tempInt));
  var $6=$1;
  _bit_coerce($3, $6, $y);
  var $7=$y;
  var $8=$3;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  var $9=(($y)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$2;
  HEAP32[(($12)>>2)]=$11;
  STACKTOP = __stackBase__;
  return;
}
function _lshift($agg_result, $mrb, $val, $width) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$val;
      $3=$width;
      var $6=$3;
      var $7=(($6)>>>(0)) > 31;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_class_get($10, ((112900)|0));
      var $12=$3;
      _mrb_fixnum_value1216($4, $12);
      _mrb_fixnum_value1216($5, 31);
      _mrb_raisef($9, $11, ((97476)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $14=$2;
      var $15=$3;
      var $16=$14 << $15;
      $2=$16;
      var $17=$2;
      _mrb_fixnum_value1216($agg_result, $17);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _rshift($agg_result, $val, $width) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$val;
      $2=$width;
      var $3=$2;
      var $4=(($3)>>>(0)) >= 31;
      if ($4) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $6=$1;
      var $7=(($6)|(0)) < 0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=-1;
      label = 5; break;
    case 4: 
      $1=0;
      label = 5; break;
    case 5: 
      label = 7; break;
    case 6: 
      var $12=$1;
      var $13=$2;
      var $14=$12 >> (($13)|(0));
      $1=$14;
      label = 7; break;
    case 7: 
      var $16=$1;
      _mrb_fixnum_value1216($agg_result, $16);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _bit_coerce($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      $1=$mrb;
      label = 2; break;
    case 2: 
      var $4=(($x+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      var $7=$6 ^ 1;
      if ($7) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $9=(($x+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==6;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((108144)|0));
      _mrb_raise($13, $15, ((97336)|0));
      label = 5; break;
    case 5: 
      var $17=$1;
      _mrb_to_int($2, $17, $x);
      var $18=$x;
      var $19=$2;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 2; break;
    case 6: 
      var $21=$agg_result;
      var $22=$x;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_equal($mrb, $v1, $v2) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v1; $v1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $v2; $v2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_obj_eq($2, $v1, $v2);
  STACKTOP = __stackBase__;
  return $3;
}
function _mrb_class1294($mrb, $v) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $v; $v = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($v)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($v)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($v)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $2=$mrb;
      var $3=(($v+8)|0);
      var $4=HEAP32[(($3)>>2)];
      if ((($4)|(0))==0) {
        label = 2; break;
      }
      else if ((($4)|(0))==2) {
        label = 5; break;
      }
      else if ((($4)|(0))==4) {
        label = 6; break;
      }
      else if ((($4)|(0))==3) {
        label = 7; break;
      }
      else if ((($4)|(0))==6) {
        label = 8; break;
      }
      else {
      label = 9; break;
      }
    case 2: 
      var $6=(($v)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $12=(($11+84)|0);
      var $13=HEAP32[(($12)>>2)];
      $1=$13;
      label = 10; break;
    case 4: 
      var $15=$2;
      var $16=(($15+88)|0);
      var $17=HEAP32[(($16)>>2)];
      $1=$17;
      label = 10; break;
    case 5: 
      var $19=$2;
      var $20=(($19+80)|0);
      var $21=HEAP32[(($20)>>2)];
      $1=$21;
      label = 10; break;
    case 6: 
      var $23=$2;
      var $24=(($23+92)|0);
      var $25=HEAP32[(($24)>>2)];
      $1=$25;
      label = 10; break;
    case 7: 
      var $27=$2;
      var $28=(($27+76)|0);
      var $29=HEAP32[(($28)>>2)];
      $1=$29;
      label = 10; break;
    case 8: 
      var $31=$2;
      var $32=(($31+72)|0);
      var $33=HEAP32[(($32)>>2)];
      $1=$33;
      label = 10; break;
    case 9: 
      var $35=(($v)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      $1=$40;
      label = 10; break;
    case 10: 
      var $42=$1;
      STACKTOP = __stackBase__;
      return $42;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_equal($mrb, $obj1, $obj2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $result=__stackBase__;
      var $3=(__stackBase__)+(12);
      $2=$mrb;
      var $4=$2;
      var $5=_mrb_obj_eq($4, $obj1, $obj2);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 6; break;
    case 3: 
      var $9=$2;
      _mrb_funcall($3, $9, $obj1, ((112164)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
      var $10=$result;
      var $11=$3;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($result+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 6; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $18=$1;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_object($mrb) {
  var label = 0;
  var $1;
  var $n;
  var $t;
  var $f;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((113124)|0), $5);
  var $7=$1;
  var $8=(($7+88)|0);
  HEAP32[(($8)>>2)]=$6;
  $n=$6;
  var $9=$1;
  var $10=$n;
  _mrb_undef_class_method($9, $10, ((108072)|0));
  var $11=$1;
  var $12=$n;
  _mrb_define_method($11, $12, ((104536)|0), 646, 262144);
  var $13=$1;
  var $14=$n;
  _mrb_define_method($13, $14, ((101760)|0), 288, 262144);
  var $15=$1;
  var $16=$n;
  _mrb_define_method($15, $16, ((99096)|0), 660, 262144);
  var $17=$1;
  var $18=$n;
  _mrb_define_method($17, $18, ((96984)|0), 508, 0);
  var $19=$1;
  var $20=$n;
  _mrb_define_method($19, $20, ((95792)|0), 6, 0);
  var $21=$1;
  var $22=$n;
  _mrb_define_method($21, $22, ((94776)|0), 78, 0);
  var $23=$1;
  var $24=$1;
  var $25=(($24+44)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=_mrb_define_class($23, ((93968)|0), $26);
  var $28=$1;
  var $29=(($28+80)|0);
  HEAP32[(($29)>>2)]=$27;
  $t=$27;
  var $30=$1;
  var $31=$t;
  _mrb_undef_class_method($30, $31, ((108072)|0));
  var $32=$1;
  var $33=$t;
  _mrb_define_method($32, $33, ((104536)|0), 650, 262144);
  var $34=$1;
  var $35=$t;
  _mrb_define_method($34, $35, ((101760)|0), 348, 262144);
  var $36=$1;
  var $37=$t;
  _mrb_define_method($36, $37, ((95792)|0), 572, 0);
  var $38=$1;
  var $39=$t;
  _mrb_define_method($38, $39, ((99096)|0), 456, 262144);
  var $40=$1;
  var $41=$t;
  _mrb_define_method($40, $41, ((94776)|0), 572, 0);
  var $42=$1;
  var $43=$1;
  var $44=(($43+44)|0);
  var $45=HEAP32[(($44)>>2)];
  var $46=_mrb_define_class($42, ((113932)|0), $45);
  var $47=$1;
  var $48=(($47+84)|0);
  HEAP32[(($48)>>2)]=$46;
  $f=$46;
  var $49=$1;
  var $50=$f;
  _mrb_undef_class_method($49, $50, ((108072)|0));
  var $51=$1;
  var $52=$f;
  _mrb_define_method($51, $52, ((104536)|0), 646, 262144);
  var $53=$1;
  var $54=$f;
  _mrb_define_method($53, $54, ((101760)|0), 288, 262144);
  var $55=$1;
  var $56=$f;
  _mrb_define_method($55, $56, ((95792)|0), 188, 0);
  var $57=$1;
  var $58=$f;
  _mrb_define_method($57, $58, ((99096)|0), 660, 262144);
  var $59=$1;
  var $60=$f;
  _mrb_define_method($59, $60, ((94776)|0), 188, 0);
  return;
}
function _false_and($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  _mrb_false_value1305($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_xor($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $4=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _false_or($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $4=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_true($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _nil_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_str_new($agg_result, $2, 0, 0);
  STACKTOP = __stackBase__;
  return;
}
function _nil_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_str_new($agg_result, $2, ((111352)|0), 3);
  STACKTOP = __stackBase__;
  return;
}
function _true_and($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $4=HEAP8[($obj2)];
  _mrb_bool_value1304($agg_result, $4);
  STACKTOP = __stackBase__;
  return;
}
function _true_xor($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  var $4=HEAP8[($obj2)];
  var $5=(($4 << 24) >> 24)!=0;
  var $6=$5 ^ 1;
  var $7=(($6)&(1));
  var $8=(($7) & 255);
  _mrb_bool_value1304($agg_result, $8);
  STACKTOP = __stackBase__;
  return;
}
function _true_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_str_new($agg_result, $2, ((103580)|0), 4);
  STACKTOP = __stackBase__;
  return;
}
function _true_or($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $obj2=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj2,tempInt));
  _mrb_true_value1303($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _false_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_str_new($agg_result, $2, ((103792)|0), 5);
  STACKTOP = __stackBase__;
  return;
}
function _convert_type($agg_result, $mrb, $val, $tname, $method, $raise) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $m;
      var $5=__stackBase__;
      $1=$mrb;
      $2=$tname;
      $3=$method;
      $4=$raise;
      $m=0;
      var $6=$1;
      var $7=$3;
      var $8=_mrb_intern1302($6, $7);
      $m=$8;
      var $9=$1;
      var $10=$m;
      var $11=_mrb_respond_to($9, $val, $10);
      var $12=(($11)|(0))!=0;
      if ($12) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $14=$4;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((112456)|0));
      var $20=$1;
      var $21=$2;
      _mrb_str_new_cstr($5, $20, $21);
      _mrb_raisef($17, $19, ((100084)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      _mrb_nil_value1281($agg_result);
      label = 6; break;
    case 4: 
      _mrb_nil_value1281($agg_result);
      label = 6; break;
    case 5: 
      var $24=$1;
      var $25=$m;
      _mrb_funcall_argv($agg_result, $24, $val, $25, 0, 0);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1281($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $v=__stackBase__;
      var $5=(__stackBase__)+(12);
      var $6=(__stackBase__)+(24);
      var $7=(__stackBase__)+(36);
      $1=$mrb;
      $2=$type;
      $3=$tname;
      $4=$method;
      var $8=(($val+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=(($9)|(0))==(($10)|(0));
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$agg_result;
      var $14=$val;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $16=$1;
      var $17=$3;
      var $18=$4;
      _convert_type($5, $16, $val, $17, $18, 1);
      var $19=$v;
      var $20=$5;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=(($v+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$2;
      var $24=(($22)|(0))!=(($23)|(0));
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=$1;
      var $27=$1;
      var $28=_mrb_class_get($27, ((112456)|0));
      var $29=$1;
      var $30=$3;
      _mrb_str_new_cstr($6, $29, $30);
      var $31=$1;
      var $32=$4;
      _mrb_str_new_cstr($7, $31, $32);
      _mrb_raisef($26, $28, ((111872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 36)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($6)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($6)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($7)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $34=$agg_result;
      var $35=$v;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_convert_type($agg_result, $mrb, $val, $type, $tname, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $v=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$type;
      $3=$tname;
      $4=$method;
      var $6=(($val+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$2;
      var $9=(($7)|(0))==(($8)|(0));
      if ($9) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $11=$2;
      var $12=(($11)|(0))!=21;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$agg_result;
      var $15=$val;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      label = 9; break;
    case 4: 
      var $17=$1;
      var $18=$3;
      var $19=$4;
      _convert_type($5, $17, $val, $18, $19, 0);
      var $20=$v;
      var $21=$5;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=(($v+8)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))==0;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=(($v)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))!=0;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $31=(($v+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$2;
      var $34=(($32)|(0))!=(($33)|(0));
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_nil_value1281($agg_result);
      label = 9; break;
    case 8: 
      var $37=$agg_result;
      var $38=$v;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_check_type($mrb, $x, $t) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $type;
      var $s;
      var $xt;
      var $etype;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      var $7=(__stackBase__)+(48);
      $1=$mrb;
      $2=$t;
      $type=((92932)|0);
      var $8=(($x+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $xt=$9;
      var $10=$xt;
      var $11=$2;
      var $12=(($10)|(0))!=(($11)|(0));
      if ($12) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $14=$xt;
      var $15=(($14)|(0))==21;
      if ($15) { label = 3; break; } else { label = 22; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $18=$type;
      var $19=(($18)|0);
      var $20=HEAP8[($19)];
      var $21=(($20)&(255));
      var $22=(($21)|(0)) < 23;
      if ($22) { label = 5; break; } else { label = 21; break; }
    case 5: 
      var $24=$type;
      var $25=(($24)|0);
      var $26=HEAP8[($25)];
      var $27=(($26)&(255));
      var $28=$2;
      var $29=(($27)|(0))==(($28)|(0));
      if ($29) { label = 6; break; } else { label = 20; break; }
    case 6: 
      var $31=(($x+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))==0;
      if ($33) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $35=(($x)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 9; break; } else { label = 8; break; }
    case 8: 
      $etype=((111352)|0);
      label = 19; break;
    case 9: 
      var $41=(($x+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))==3;
      if ($43) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $etype=((110848)|0);
      label = 18; break;
    case 11: 
      var $46=(($x+8)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($47)|(0))==4;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $etype=((110420)|0);
      label = 17; break;
    case 13: 
      var $51=(($x+8)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)>>>(0)) <= 7;
      if ($53) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $55=$1;
      _mrb_obj_as_string($3, $55, $x);
      var $56=(($3)|0);
      var $57=$56;
      var $58=HEAP32[(($57)>>2)];
      var $59=$58;
      $s=$59;
      var $60=$s;
      var $61=(($60+20)|0);
      var $62=HEAP32[(($61)>>2)];
      $etype=$62;
      label = 16; break;
    case 15: 
      var $64=$1;
      var $65=_mrb_obj_classname($64, $x);
      $etype=$65;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $70=$1;
      var $71=$1;
      var $72=_mrb_class_get($71, ((112456)|0));
      var $73=$1;
      var $74=$etype;
      _mrb_str_new_cstr($4, $73, $74);
      var $75=$1;
      var $76=$type;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      _mrb_str_new_cstr($5, $75, $78);
      _mrb_raisef($70, $72, ((109976)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 20; break;
    case 20: 
      var $80=$type;
      var $81=(($80+8)|0);
      $type=$81;
      label = 4; break;
    case 21: 
      var $83=$1;
      var $84=$1;
      var $85=_mrb_class_get($84, ((112456)|0));
      var $86=$2;
      _mrb_fixnum_value1288($6, $86);
      var $87=(($x+8)|0);
      var $88=HEAP32[(($87)>>2)];
      _mrb_fixnum_value1288($7, $88);
      _mrb_raisef($83, $85, ((109540)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($7)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($7)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($7)+(8))>>2)],tempInt));
      label = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1288($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_any_to_s($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $cname;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  var $4=(__stackBase__)+(36);
  var $5=(__stackBase__)+(48);
  var $6=(__stackBase__)+(60);
  $1=$mrb;
  var $7=$1;
  _mrb_str_buf_new($str, $7, 20);
  var $8=$1;
  var $9=_mrb_obj_classname($8, $obj);
  $cname=$9;
  var $10=$1;
  _mrb_str_buf_cat($2, $10, $str, ((109068)|0), 2);
  var $11=$1;
  var $12=$cname;
  _mrb_str_cat21291($3, $11, $str, $12);
  var $13=$1;
  _mrb_str_cat($4, $13, $str, ((108536)|0), 1);
  var $14=$1;
  var $15=$1;
  var $16=(($obj)|0);
  var $17=$16;
  var $18=HEAP32[(($17)>>2)];
  _mrb_ptr_to_str($5, $15, $18);
  _mrb_str_concat($14, $str, $5);
  var $19=$1;
  _mrb_str_buf_cat($6, $19, $str, ((108212)|0), 1);
  var $20=$agg_result;
  var $21=$str;
  assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_cat21291($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$ptr;
  var $3=$1;
  var $4=$2;
  _mrb_str_cat_cstr($agg_result, $3, $str, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_obj_is_kind_of($mrb, $obj, $c) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $cl;
      $2=$mrb;
      $3=$c;
      var $4=$2;
      var $5=_mrb_class1294($4, $obj);
      $cl=$5;
      var $6=$3;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & 255;
      if ((($9)|(0))==10 | (($9)|(0))==9 | (($9)|(0))==11) {
        label = 2; break;
      }
      else {
      label = 3; break;
      }
    case 2: 
      label = 4; break;
    case 3: 
      var $12=$2;
      var $13=$2;
      var $14=_mrb_class_get($13, ((112456)|0));
      _mrb_raise($12, $14, ((107632)|0));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $17=$cl;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $20=$cl;
      var $21=$3;
      var $22=(($20)|(0))==(($21)|(0));
      if ($22) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $24=$cl;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$3;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($26)|(0))==(($29)|(0));
      if ($30) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=1;
      label = 11; break;
    case 9: 
      var $33=$cl;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      $cl=$35;
      label = 5; break;
    case 10: 
      $1=0;
      label = 11; break;
    case 11: 
      var $38=$1;
      STACKTOP = __stackBase__;
      return $38;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_to_int($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_to_integer($agg_result, $2, $val, ((107364)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_to_integer($agg_result, $mrb, $val, $method) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $v=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$method;
      var $5=(($val+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==3;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=$agg_result;
      var $10=$val;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $12=$1;
      var $13=$2;
      _convert_type($3, $12, $val, ((113328)|0), $13, 1);
      var $14=$v;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=$1;
      var $17=$1;
      var $18=(($17+76)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_mrb_obj_is_kind_of($16, $v, $19);
      var $21=(($20)|(0))!=0;
      if ($21) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $23=$1;
      var $24=$1;
      var $25=_mrb_class_get($24, ((112456)|0));
      var $26=$1;
      var $27=$2;
      _mrb_str_new_cstr($4, $26, $27);
      _mrb_raisef($23, $25, ((103996)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 48)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($val)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($val)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($val)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($val)+(8))>>2)],HEAP32[(((tempInt)+(24))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(24))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(24))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(36))>>2)]=HEAP32[(($v)>>2)],HEAP32[((((tempInt)+(36))+(4))>>2)]=HEAP32[((($v)+(4))>>2)],HEAP32[((((tempInt)+(36))+(8))>>2)]=HEAP32[((($v)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $29=$agg_result;
      var $30=$v;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_Integer($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_convert_to_integer($agg_result, $2, $val, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_convert_to_integer($agg_result, $mrb, $val, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $tmp=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$base;
      var $5=(($val+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=(($val)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $14=$2;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      label = 24; break;
    case 5: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((112456)|0));
      _mrb_raise($18, $20, ((105500)|0));
      label = 6; break;
    case 6: 
      var $22=(($val+8)|0);
      var $23=HEAP32[(($22)>>2)];
      if ((($23)|(0))==6) {
        label = 7; break;
      }
      else if ((($23)|(0))==3) {
        label = 13; break;
      }
      else if ((($23)|(0))==16) {
        label = 16; break;
      }
      else {
      label = 18; break;
      }
    case 7: 
      var $25=$2;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 24; break;
    case 9: 
      var $29=(($val)|0);
      var $30=$29;
      var $31=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $32=$31 <= 2147483647;
      if ($32) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $34=(($val)|0);
      var $35=$34;
      var $36=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($35)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($35)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $37=$36 >= -2147483648;
      if ($37) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 19; break;
    case 12: 
      var $40=$1;
      _mrb_flo_to_fixnum($agg_result, $40, $val);
      label = 29; break;
    case 13: 
      var $42=$2;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 24; break;
    case 15: 
      var $46=$agg_result;
      var $47=$val;
      assert(12 % 1 === 0);HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)];HEAP32[((($46)+(8))>>2)]=HEAP32[((($47)+(8))>>2)];
      label = 29; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $50=$1;
      var $51=$2;
      _mrb_str_to_inum($agg_result, $50, $val, $51, 1);
      label = 29; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $54=$2;
      var $55=(($54)|(0))!=0;
      if ($55) { label = 20; break; } else { label = 25; break; }
    case 20: 
      var $57=$1;
      _mrb_check_string_type($3, $57, $val);
      var $58=$tmp;
      var $59=$3;
      assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
      var $60=(($tmp+8)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=(($61)|(0))==0;
      if ($62) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $64=(($tmp)|0);
      var $65=$64;
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|(0))!=0;
      if ($67) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 17; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $71=$1;
      var $72=$1;
      var $73=_mrb_class_get($72, ((105192)|0));
      _mrb_raise($71, $73, ((104876)|0));
      label = 25; break;
    case 25: 
      var $75=$1;
      _convert_type($4, $75, $val, ((113328)|0), ((107364)|0), 0);
      var $76=$tmp;
      var $77=$4;
      assert(12 % 1 === 0);HEAP32[(($76)>>2)]=HEAP32[(($77)>>2)];HEAP32[((($76)+(4))>>2)]=HEAP32[((($77)+(4))>>2)];HEAP32[((($76)+(8))>>2)]=HEAP32[((($77)+(8))>>2)];
      var $78=(($tmp+8)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79)|(0))==0;
      if ($80) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $82=(($tmp)|0);
      var $83=$82;
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84)|(0))!=0;
      if ($85) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $87=$1;
      _mrb_to_integer($agg_result, $87, $val, ((104600)|0));
      label = 29; break;
    case 28: 
      var $89=$agg_result;
      var $90=$tmp;
      assert(12 % 1 === 0);HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)];HEAP32[((($89)+(8))>>2)]=HEAP32[((($90)+(8))>>2)];
      label = 29; break;
    case 29: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_Float($agg_result, $mrb, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$mrb;
      var $2=(($val+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $6=(($val)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_get($12, ((112456)|0));
      _mrb_raise($11, $13, ((106972)|0));
      label = 4; break;
    case 4: 
      var $15=(($val+8)|0);
      var $16=HEAP32[(($15)>>2)];
      if ((($16)|(0))==3) {
        label = 5; break;
      }
      else if ((($16)|(0))==6) {
        label = 6; break;
      }
      else if ((($16)|(0))==16) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 5: 
      var $18=(($val)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0));
      _mrb_float_value1297($agg_result, $21);
      label = 9; break;
    case 6: 
      var $23=$agg_result;
      var $24=$val;
      assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
      label = 9; break;
    case 7: 
      var $26=$1;
      var $27=_mrb_str_to_dbl($26, $val, 1);
      _mrb_float_value1297($agg_result, $27);
      label = 9; break;
    case 8: 
      var $29=$1;
      _mrb_convert_type($agg_result, $29, $val, 6, ((106524)|0), ((106132)|0));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1297($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_inspect($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  var $4=$1;
  _mrb_funcall($2, $4, $obj, ((94776)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
  _mrb_obj_as_string($agg_result, $3, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_eql($mrb, $obj1, $obj2) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj1; $obj1 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj1)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj1)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj1)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $obj2; $obj2 = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj2)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj2)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj2)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      $2=$mrb;
      var $4=$2;
      var $5=_mrb_obj_eq($4, $obj1, $obj2);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 4; break;
    case 3: 
      var $9=$2;
      _mrb_funcall($3, $9, $obj1, ((105812)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($obj2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($obj2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($obj2)+(8))>>2)],tempInt));
      var $10=(($3+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      var $13=(($12)&(1));
      $1=$13;
      label = 4; break;
    case 4: 
      var $15=$1;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1302($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_true_value1303($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1304($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1305($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_open($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $pool;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_malloc($2, 8);
      var $4=$3;
      $pool=$4;
      var $5=$pool;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$pool;
      var $10=(($9)|0);
      HEAP32[(($10)>>2)]=$8;
      var $11=$pool;
      var $12=(($11+4)|0);
      HEAP32[(($12)>>2)]=0;
      label = 3; break;
    case 3: 
      var $14=$pool;
      return $14;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_close($pool) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $page;
      var $tmp;
      $1=$pool;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 3; break; } else { label = 2; break; }
    case 2: 
      label = 7; break;
    case 3: 
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      $page=$8;
      label = 4; break;
    case 4: 
      var $10=$page;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=$page;
      $tmp=$13;
      var $14=$page;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      $page=$16;
      var $17=$1;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$tmp;
      var $21=$20;
      _mrb_free($19, $21);
      label = 4; break;
    case 6: 
      var $23=$1;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$1;
      var $27=$26;
      _mrb_free($25, $27);
      label = 7; break;
    case 7: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_pool_alloc($pool, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $page;
      var $n;
      $2=$pool;
      $3=$len;
      var $4=$2;
      var $5=(($4)|(0))!=0;
      if ($5) { label = 3; break; } else { label = 2; break; }
    case 2: 
      $1=0;
      label = 11; break;
    case 3: 
      var $8=$3;
      var $9=(((-$8))|0);
      var $10=$9 & 3;
      var $11=$3;
      var $12=((($11)+($10))|0);
      $3=$12;
      var $13=$2;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      $page=$15;
      label = 4; break;
    case 4: 
      var $17=$page;
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $20=$page;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$3;
      var $24=((($22)+($23))|0);
      var $25=$page;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24)>>>(0)) <= (($27)>>>(0));
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=$page;
      var $31=(($30+4)|0);
      var $32=HEAP32[(($31)>>2)];
      $n=$32;
      var $33=$3;
      var $34=$page;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+($33))|0);
      HEAP32[(($35)>>2)]=$37;
      var $38=$page;
      var $39=(($38+16)|0);
      var $40=(($39)|0);
      var $41=$n;
      var $42=(($40+$41)|0);
      var $43=$page;
      var $44=(($43+12)|0);
      HEAP32[(($44)>>2)]=$42;
      var $45=$page;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      $1=$47;
      label = 11; break;
    case 7: 
      var $49=$page;
      var $50=(($49)|0);
      var $51=HEAP32[(($50)>>2)];
      $page=$51;
      label = 4; break;
    case 8: 
      var $53=$2;
      var $54=$3;
      var $55=_page_alloc($53, $54);
      $page=$55;
      var $56=$page;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 10; break; } else { label = 9; break; }
    case 9: 
      $1=0;
      label = 11; break;
    case 10: 
      var $60=$3;
      var $61=$page;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=$60;
      var $63=$2;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$page;
      var $67=(($66)|0);
      HEAP32[(($67)>>2)]=$65;
      var $68=$page;
      var $69=$2;
      var $70=(($69+4)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$page;
      var $72=(($71+16)|0);
      var $73=(($72)|0);
      var $74=$page;
      var $75=(($74+12)|0);
      HEAP32[(($75)>>2)]=$73;
      var $76=$page;
      var $77=(($76+12)|0);
      var $78=HEAP32[(($77)>>2)];
      $1=$78;
      label = 11; break;
    case 11: 
      var $80=$1;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _page_alloc($pool, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $page;
      $1=$pool;
      $2=$len;
      var $3=$2;
      var $4=(($3)>>>(0)) < 16000;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $2=16000;
      label = 3; break;
    case 3: 
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$2;
      var $11=((($10)+(16))|0);
      var $12=_mrb_malloc($9, $11);
      var $13=$12;
      $page=$13;
      var $14=$page;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$page;
      var $18=(($17+4)|0);
      HEAP32[(($18)>>2)]=0;
      var $19=$2;
      var $20=$page;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=$19;
      label = 5; break;
    case 5: 
      var $23=$page;
      return $23;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_new($agg_result, $mrb, $beg, $end, $excl) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  var $r;
  $1=$mrb;
  $2=$excl;
  var $3=$1;
  var $4=$1;
  var $5=_mrb_class_get($4, ((111924)|0));
  var $6=_mrb_obj_alloc($3, 17, $5);
  var $7=$6;
  $r=$7;
  var $8=$1;
  _range_check($8, $beg, $end);
  var $9=$1;
  var $10=_mrb_malloc($9, 24);
  var $11=$10;
  var $12=$r;
  var $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=$r;
  var $15=(($14+12)|0);
  var $16=HEAP32[(($15)>>2)];
  var $17=(($16)|0);
  var $18=$17;
  var $19=$beg;
  assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
  var $20=$r;
  var $21=(($20+12)|0);
  var $22=HEAP32[(($21)>>2)];
  var $23=(($22+12)|0);
  var $24=$23;
  var $25=$end;
  assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
  var $26=$2;
  var $27=$r;
  var $28=(($27+16)|0);
  HEAP32[(($28)>>2)]=$26;
  var $29=$r;
  var $30=$29;
  _mrb_obj_value1340($agg_result, $30);
  STACKTOP = __stackBase__;
  return;
}
function _range_check($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ans=__stackBase__;
      var $ta;
      var $tb;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=(($a+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $ta=$4;
      var $5=(($b+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $tb=$6;
      var $7=$ta;
      var $8=(($7)|(0))==3;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$ta;
      var $11=(($10)|(0))==6;
      if ($11) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $13=$tb;
      var $14=(($13)|(0))==3;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=$tb;
      var $17=(($16)|(0))==6;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 9; break;
    case 6: 
      var $20=$1;
      _mrb_funcall($2, $20, $a, ((107360)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $21=$ans;
      var $22=$2;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      var $23=(($ans+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))==0;
      if ($25) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $27=(($ans)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|(0))!=0;
      if ($30) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $32=$1;
      var $33=$1;
      var $34=_mrb_class_get($33, ((106956)|0));
      _mrb_raise($32, $34, ((106504)|0));
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1340($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_beg($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $r;
  $1=$mrb;
  var $2=(($range)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $r=$5;
  var $6=$r;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8)|0);
  var $10=$agg_result;
  var $11=$9;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_end($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $r;
  $1=$mrb;
  var $2=(($range)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $r=$5;
  var $6=$r;
  var $7=(($6+12)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8+12)|0);
  var $10=$agg_result;
  var $11=$9;
  assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_excl($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $r;
  $1=$mrb;
  var $2=(($range)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $r=$5;
  var $6=$r;
  var $7=(($6+16)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($8) & 255);
  _mrb_bool_value1341($agg_result, $9);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_bool_value1341($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_initialize($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $beg=__stackBase__;
      var $end=(__stackBase__)+(12);
      var $exclusive=(__stackBase__)+(24);
      var $n;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((113068)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$beg,HEAP32[(((tempInt)+(4))>>2)]=$end,HEAP32[(((tempInt)+(8))>>2)]=$exclusive,tempInt));
      $n=$3;
      var $4=$n;
      var $5=(($4)|(0))!=3;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      HEAP8[($exclusive)]=0;
      label = 3; break;
    case 3: 
      var $8=$1;
      var $9=HEAP8[($exclusive)];
      var $10=(($9)&(255));
      _range_init($8, $range, $beg, $end, $10);
      var $11=$agg_result;
      var $12=$range;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _range_init($mrb, $range, $beg, $end, $exclude_end) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $beg; $beg = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($beg)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($beg)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($beg)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $end; $end = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($end)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($end)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($end)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r;
      $1=$mrb;
      $2=$exclude_end;
      var $3=(($range)|0);
      var $4=$3;
      var $5=HEAP32[(($4)>>2)];
      var $6=$5;
      $r=$6;
      var $7=$1;
      _range_check($7, $beg, $end);
      var $8=$2;
      var $9=$r;
      var $10=(($9+16)|0);
      HEAP32[(($10)>>2)]=$8;
      var $11=$r;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $16=$1;
      var $17=_mrb_malloc($16, 24);
      var $18=$17;
      var $19=$r;
      var $20=(($19+12)|0);
      HEAP32[(($20)>>2)]=$18;
      label = 3; break;
    case 3: 
      var $22=$r;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0);
      var $26=$25;
      var $27=$beg;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      var $28=$r;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=(($30+12)|0);
      var $32=$31;
      var $33=$end;
      assert(12 % 1 === 0);HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)];HEAP32[((($32)+(8))>>2)]=HEAP32[((($33)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_eq($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $rr;
      var $ro;
      var $obj=__stackBase__;
      var $eq_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((108028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $range, $obj);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $eq_p=1;
      label = 12; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_obj_class($10, $range);
      var $12=_mrb_obj_is_instance_of($9, $obj, $11);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $eq_p=0;
      label = 11; break;
    case 5: 
      var $16=(($range)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      $rr=$19;
      var $20=(($obj)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      $ro=$23;
      var $24=$1;
      var $25=$rr;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|0);
      var $29=$ro;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0);
      var $33=_mrb_obj_equal($24, $28, $32);
      var $34=(($33)|(0))!=0;
      if ($34) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $36=$1;
      var $37=$rr;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=(($39+12)|0);
      var $41=$ro;
      var $42=(($41+12)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43+12)|0);
      var $45=_mrb_obj_equal($36, $40, $44);
      var $46=(($45)|(0))!=0;
      if ($46) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $48=$rr;
      var $49=(($48+16)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=$ro;
      var $52=(($51+16)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=(($50)|(0))!=(($53)|(0));
      if ($54) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $eq_p=0;
      label = 10; break;
    case 9: 
      $eq_p=1;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $60=$eq_p;
      _mrb_bool_value1341($agg_result, $60);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_include($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $val=__stackBase__;
      var $r;
      var $beg=(__stackBase__)+(12);
      var $end=(__stackBase__)+(24);
      var $include_p;
      $1=$mrb;
      var $2=(($range)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $r=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((108028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
      var $8=$r;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=$beg;
      var $13=$11;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$r;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+12)|0);
      var $18=$end;
      var $19=$17;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      var $20=$1;
      var $21=_r_le($20, $beg, $val);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { var $39 = 0;label = 6; break; }
    case 2: 
      var $24=$r;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $29=$1;
      var $30=_r_gt($29, $end, $val);
      var $31=(($30)|(0))!=0;
      if ($31) { var $37 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $33=$1;
      var $34=_r_ge($33, $end, $val);
      var $35=(($34)|(0))!=0;
      var $37 = $35;label = 5; break;
    case 5: 
      var $37;
      var $39 = $37;label = 6; break;
    case 6: 
      var $39;
      var $40=(($39)&(1));
      var $41=(($40) & 255);
      $include_p=$41;
      var $42=$include_p;
      _mrb_bool_value1341($agg_result, $42);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _r_le($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r=__stackBase__;
      var $c;
      $2=$mrb;
      var $3=$2;
      _mrb_funcall($r, $3, $a, ((107360)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $4=(($r+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=(($r)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      $c=$10;
      var $11=$c;
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$c;
      var $15=(($14)|(0))==-1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _r_gt($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r=__stackBase__;
      $2=$mrb;
      var $3=$2;
      _mrb_funcall($r, $3, $a, ((107360)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $4=(($r+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=(($r)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==1;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=1;
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $16=$1;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _r_ge($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r=__stackBase__;
      var $c;
      $2=$mrb;
      var $3=$2;
      _mrb_funcall($r, $3, $a, ((107360)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $4=(($r+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=(($r)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      $c=$10;
      var $11=$c;
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$c;
      var $15=(($14)|(0))==1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_each($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$agg_result;
  var $3=$range;
  assert(12 % 1 === 0);HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];HEAP32[((($2)+(8))>>2)]=HEAP32[((($3)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_range_beg_len($mrb, $range, $begp, $lenp, $len) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $beg;
      var $end;
      var $b;
      var $e;
      var $r;
      $2=$mrb;
      $3=$begp;
      $4=$lenp;
      $5=$len;
      var $6=(($range)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $r=$9;
      var $10=(($range+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=17;
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$2;
      var $15=$2;
      var $16=_mrb_class_get($15, ((104500)|0));
      _mrb_raise($14, $16, ((101720)|0));
      label = 3; break;
    case 3: 
      var $18=$r;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      $b=$24;
      $beg=$24;
      var $25=$r;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27+12)|0);
      var $29=(($28)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      $e=$31;
      $end=$31;
      var $32=$beg;
      var $33=(($32)|(0)) < 0;
      if ($33) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $35=$5;
      var $36=$beg;
      var $37=((($36)+($35))|0);
      $beg=$37;
      var $38=$beg;
      var $39=(($38)|(0)) < 0;
      if ($39) { label = 5; break; } else { label = 6; break; }
    case 5: 
      label = 19; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $43=$beg;
      var $44=$5;
      var $45=(($43)|(0)) > (($44)|(0));
      if ($45) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 19; break;
    case 9: 
      var $48=$end;
      var $49=$5;
      var $50=(($48)|(0)) > (($49)|(0));
      if ($50) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $52=$5;
      $end=$52;
      label = 11; break;
    case 11: 
      var $54=$end;
      var $55=(($54)|(0)) < 0;
      if ($55) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $57=$5;
      var $58=$end;
      var $59=((($58)+($57))|0);
      $end=$59;
      label = 13; break;
    case 13: 
      var $61=$r;
      var $62=(($61+16)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 16; break; } else { label = 14; break; }
    case 14: 
      var $66=$end;
      var $67=$5;
      var $68=(($66)|(0)) < (($67)|(0));
      if ($68) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $70=$end;
      var $71=((($70)+(1))|0);
      $end=$71;
      label = 16; break;
    case 16: 
      var $73=$end;
      var $74=$beg;
      var $75=((($73)-($74))|0);
      $5=$75;
      var $76=$5;
      var $77=(($76)|(0)) < 0;
      if ($77) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $5=0;
      label = 18; break;
    case 18: 
      var $80=$beg;
      var $81=$3;
      HEAP32[(($81)>>2)]=$80;
      var $82=$5;
      var $83=$4;
      HEAP32[(($83)>>2)]=$82;
      $1=1;
      label = 20; break;
    case 19: 
      $1=0;
      label = 20; break;
    case 20: 
      var $86=$1;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + label);
  }
}
function _range_initialize_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $src=__stackBase__;
      var $r;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((108028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$src,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $copy, $src);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$copy;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 6; break;
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_obj_class($12, $copy);
      var $14=_mrb_obj_is_instance_of($11, $src, $13);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((104500)|0));
      _mrb_raise($17, $19, ((99048)|0));
      label = 5; break;
    case 5: 
      var $21=(($src)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      $r=$24;
      var $25=$1;
      var $26=$r;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0);
      var $30=$r;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32+12)|0);
      var $34=$r;
      var $35=(($34+16)|0);
      var $36=HEAP32[(($35)>>2)];
      _range_init($25, $copy, $29, $33, $36);
      var $37=$agg_result;
      var $38=$copy;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_range($mrb) {
  var label = 0;
  var $1;
  var $r;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((111924)|0), $5);
  $r=$6;
  var $7=$r;
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9 >>> 11;
  var $11=$10 & 2097151;
  var $12=$11 & -256;
  var $13=$12 | 17;
  var $14=$r;
  var $15=$13 & 2097151;
  var $16=$14;
  var $17=$15 & 2097151;
  var $18=$17 << 11;
  var $19=HEAP32[(($16)>>2)];
  var $20=$19 & 2047;
  var $21=$20 | $18;
  HEAP32[(($16)>>2)]=$21;
  var $22=$1;
  var $23=$r;
  var $24=$1;
  var $25=_mrb_class_get($24, ((96964)|0));
  _mrb_include_module($22, $23, $25);
  var $26=$1;
  var $27=$r;
  _mrb_define_method($26, $27, ((95776)|0), 628, 0);
  var $28=$1;
  var $29=$r;
  _mrb_define_method($28, $29, ((94756)|0), 606, 0);
  var $30=$1;
  var $31=$r;
  _mrb_define_method($30, $31, ((93948)|0), 658, 262144);
  var $32=$1;
  var $33=$r;
  _mrb_define_method($32, $33, ((113916)|0), 180, 262144);
  var $34=$1;
  var $35=$r;
  _mrb_define_method($34, $35, ((113320)|0), 76, 0);
  var $36=$1;
  var $37=$r;
  _mrb_define_method($36, $37, ((112440)|0), 124, 0);
  var $38=$1;
  var $39=$r;
  _mrb_define_method($38, $39, ((111864)|0), 628, 0);
  var $40=$1;
  var $41=$r;
  _mrb_define_method($40, $41, ((111340)|0), 180, 262144);
  var $42=$1;
  var $43=$r;
  _mrb_define_method($42, $43, ((110836)|0), 388, 4096);
  var $44=$1;
  var $45=$r;
  _mrb_define_method($44, $45, ((110412)|0), 606, 0);
  var $46=$1;
  var $47=$r;
  _mrb_define_method($46, $47, ((109968)|0), 180, 262144);
  var $48=$1;
  var $49=$r;
  _mrb_define_method($48, $49, ((109532)|0), 196, 0);
  var $50=$1;
  var $51=$r;
  _mrb_define_method($50, $51, ((109060)|0), 252, 0);
  var $52=$1;
  var $53=$r;
  _mrb_define_method($52, $53, ((108528)|0), 92, 262144);
  var $54=$1;
  var $55=$r;
  _mrb_define_method($54, $55, ((108196)|0), 710, 262144);
  return;
}
function _range_to_s($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $str2=(__stackBase__)+(12);
  var $r;
  var $2=(__stackBase__)+(24);
  var $3=(__stackBase__)+(36);
  var $4=(__stackBase__)+(48);
  var $5=(__stackBase__)+(60);
  var $6=(__stackBase__)+(72);
  $1=$mrb;
  var $7=(($range)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  $r=$10;
  var $11=$1;
  var $12=$r;
  var $13=(($12+12)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14)|0);
  _mrb_obj_as_string($2, $11, $15);
  var $16=$str;
  var $17=$2;
  assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
  var $18=$1;
  var $19=$r;
  var $20=(($19+12)|0);
  var $21=HEAP32[(($20)>>2)];
  var $22=(($21+12)|0);
  _mrb_obj_as_string($3, $18, $22);
  var $23=$str2;
  var $24=$3;
  assert(12 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($24)+(8))>>2)];
  var $25=$1;
  _mrb_str_dup($4, $25, $str);
  var $26=$str;
  var $27=$4;
  assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
  var $28=$1;
  var $29=$r;
  var $30=(($29+16)|0);
  var $31=HEAP32[(($30)>>2)];
  var $32=(($31)|(0))!=0;
  var $33=$32 ? 3 : 2;
  _mrb_str_cat($5, $28, $str, ((107628)|0), $33);
  var $34=$1;
  _mrb_str_append($6, $34, $str, $str2);
  var $35=$agg_result;
  var $36=$str;
  assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _range_inspect($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _inspect_range($agg_result, $2, $range, 0);
  STACKTOP = __stackBase__;
  return;
}
function _range_eql($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj=__stackBase__;
      var $r;
      var $o;
      var $eql_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((108028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$obj,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $range, $obj);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $eql_p=1;
      label = 15; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_class_get($10, ((111924)|0));
      var $12=_mrb_obj_is_kind_of($9, $obj, $11);
      var $13=(($12)|(0))!=0;
      if ($13) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $eql_p=0;
      label = 14; break;
    case 5: 
      var $16=(($range)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      $r=$19;
      var $20=(($obj+8)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21)|(0))!=17;
      if ($22) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $eql_p=0;
      label = 13; break;
    case 7: 
      var $25=(($obj)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27;
      $o=$28;
      var $29=$1;
      var $30=$r;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0);
      var $34=$o;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|0);
      var $38=_mrb_eql($29, $33, $37);
      var $39=(($38)|(0))!=0;
      if ($39) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $41=$1;
      var $42=$r;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44+12)|0);
      var $46=$o;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48+12)|0);
      var $50=_mrb_eql($41, $45, $49);
      var $51=(($50)|(0))!=0;
      if ($51) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $53=$r;
      var $54=(($53+16)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$o;
      var $57=(($56+16)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($55)|(0))!=(($58)|(0));
      if ($59) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $eql_p=0;
      label = 12; break;
    case 11: 
      $eql_p=1;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $66=$eql_p;
      _mrb_bool_value1341($agg_result, $66);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_range($agg_result, $mrb, $range, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 84)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $str=__stackBase__;
      var $str2=(__stackBase__)+(12);
      var $r;
      var $idx;
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(60);
      var $7=(__stackBase__)+(72);
      $1=$mrb;
      $2=$recur;
      var $8=(($range)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      $r=$11;
      var $12=$2;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $15=$r;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      var $19=$18 ? 0 : 1;
      $idx=$19;
      var $20=$1;
      var $21=$idx;
      var $22=((80392+((($21)*(14))&-1))|0);
      var $23=(($22)|0);
      var $24=$idx;
      var $25=((80420+($24<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      _mrb_str_new($agg_result, $20, $23, $26);
      label = 4; break;
    case 3: 
      var $28=$1;
      var $29=$r;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|0);
      _mrb_inspect($3, $28, $32);
      var $33=$str;
      var $34=$3;
      assert(12 % 1 === 0);HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)];HEAP32[((($33)+(8))>>2)]=HEAP32[((($34)+(8))>>2)];
      var $35=$1;
      var $36=$r;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      _mrb_inspect($4, $35, $39);
      var $40=$str2;
      var $41=$4;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      var $42=$1;
      _mrb_str_dup($5, $42, $str);
      var $43=$str;
      var $44=$5;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      var $45=$1;
      var $46=$r;
      var $47=(($46+16)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|(0))!=0;
      var $50=$49 ? 3 : 2;
      _mrb_str_cat($6, $45, $str, ((107628)|0), $50);
      var $51=$1;
      _mrb_str_append($7, $51, $str, $str2);
      var $52=$agg_result;
      var $53=$str;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_init_mrbgems($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _GENERATED_TMP_mrb_mruby_sprintf_gem_init($2);
  var $3=$1;
  _GENERATED_TMP_mrb_mruby_print_gem_init($3);
  var $4=$1;
  _GENERATED_TMP_mrb_mruby_fiber_gem_init($4);
  var $5=$1;
  _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($5);
  var $6=$1;
  _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($6);
  var $7=$1;
  _GENERATED_TMP_mrb_mruby_range_ext_gem_init($7);
  var $8=$1;
  _GENERATED_TMP_mrb_mruby_eval_gem_init($8);
  var $9=$1;
  _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($9);
  var $10=$1;
  _GENERATED_TMP_mrb_mruby_objectspace_gem_init($10);
  var $11=$1;
  _GENERATED_TMP_mrb_mruby_string_ext_gem_init($11);
  var $12=$1;
  _GENERATED_TMP_mrb_mruby_random_gem_init($12);
  var $13=$1;
  _GENERATED_TMP_mrb_mruby_struct_gem_init($13);
  var $14=$1;
  _GENERATED_TMP_mrb_mruby_math_gem_init($14);
  var $15=$1;
  _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($15);
  var $16=$1;
  _GENERATED_TMP_mrb_mruby_array_ext_gem_init($16);
  var $17=$1;
  _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($17);
  var $18=$1;
  _GENERATED_TMP_mrb_mruby_time_gem_init($18);
  var $19=$1;
  _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($19);
  var $20=$1;
  _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($20);
  var $21=$1;
  _GENERATED_TMP_mrb_webruby_multiline_parse_gem_init($21);
  var $22=$1;
  _GENERATED_TMP_mrb_mruby_js_gem_init($22);
  return;
}
function _mrb_final_mrbgems($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _GENERATED_TMP_mrb_mruby_sprintf_gem_final($2);
  var $3=$1;
  _GENERATED_TMP_mrb_mruby_print_gem_final($3);
  var $4=$1;
  _GENERATED_TMP_mrb_mruby_fiber_gem_final($4);
  var $5=$1;
  _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($5);
  var $6=$1;
  _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($6);
  var $7=$1;
  _GENERATED_TMP_mrb_mruby_range_ext_gem_final($7);
  var $8=$1;
  _GENERATED_TMP_mrb_mruby_eval_gem_final($8);
  var $9=$1;
  _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($9);
  var $10=$1;
  _GENERATED_TMP_mrb_mruby_objectspace_gem_final($10);
  var $11=$1;
  _GENERATED_TMP_mrb_mruby_string_ext_gem_final($11);
  var $12=$1;
  _GENERATED_TMP_mrb_mruby_random_gem_final($12);
  var $13=$1;
  _GENERATED_TMP_mrb_mruby_struct_gem_final($13);
  var $14=$1;
  _GENERATED_TMP_mrb_mruby_math_gem_final($14);
  var $15=$1;
  _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($15);
  var $16=$1;
  _GENERATED_TMP_mrb_mruby_array_ext_gem_final($16);
  var $17=$1;
  _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($17);
  var $18=$1;
  _GENERATED_TMP_mrb_mruby_time_gem_final($18);
  var $19=$1;
  _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($19);
  var $20=$1;
  _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($20);
  var $21=$1;
  _GENERATED_TMP_mrb_webruby_multiline_parse_gem_final($21);
  var $22=$1;
  _GENERATED_TMP_mrb_mruby_js_gem_final($22);
  return;
}
function _mrb_obj_value1352($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_array_ext_gem_final($2);
  return;
}
function _mrb_mruby_array_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $a;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+64)|0);
  var $4=HEAP32[(($3)>>2)];
  $a=$4;
  var $5=$1;
  var $6=$a;
  _mrb_define_class_method($5, $6, ((111548)|0), 294, 262144);
  var $7=$1;
  var $8=$a;
  _mrb_define_method($7, $8, ((113060)|0), 20, 262144);
  var $9=$1;
  var $10=$a;
  _mrb_define_method($9, $10, ((108024)|0), 474, 262144);
  var $11=$1;
  var $12=$a;
  _mrb_define_method($11, $12, ((104492)|0), 522, 262144);
  return;
}
function _mrb_ary_s_try_convert($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ary=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((101712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ary,tempInt));
  var $4=$1;
  _mrb_check_array_type($agg_result, $4, $ary);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_array_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_array_ext_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((90648)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1352($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_array_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_math_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_numeric_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_ary_assoc($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $v=__stackBase__;
      var $k=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      $1=$mrb;
      var $3=$1;
      var $4=_mrb_get_args($3, ((101712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$k,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $6=$i;
      var $7=(($ary)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($6)|(0)) < (($12)|(0));
      if ($13) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $15=$1;
      var $16=$i;
      var $17=(($ary)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=$19;
      var $21=(($20+20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+((($16)*(12))&-1))|0);
      _mrb_check_array_type($2, $15, $23);
      var $24=$v;
      var $25=$2;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      var $26=(($v+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0))==0;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=(($v)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|(0))!=0;
      if ($33) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $35=(($v)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|(0)) > 0;
      if ($41) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $43=$1;
      var $44=(($v)|0);
      var $45=$44;
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=(($47+20)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=(($49)|0);
      var $51=_mrb_equal($43, $50, $k);
      var $52=(($51)|(0))!=0;
      if ($52) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $54=$agg_result;
      var $55=$v;
      assert(12 % 1 === 0);HEAP32[(($54)>>2)]=HEAP32[(($55)>>2)];HEAP32[((($54)+(4))>>2)]=HEAP32[((($55)+(4))>>2)];HEAP32[((($54)+(8))>>2)]=HEAP32[((($55)+(8))>>2)];
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $58=$i;
      var $59=((($58)+(1))|0);
      $i=$59;
      label = 2; break;
    case 10: 
      _mrb_nil_value1365($agg_result);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_ary_at($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $pos=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((99044)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
  var $4=HEAP32[(($pos)>>2)];
  _mrb_ary_entry($agg_result, $ary, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_ary_rassoc($agg_result, $mrb, $ary) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $ary; $ary = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($ary)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ary)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ary)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $v=__stackBase__;
      var $value=(__stackBase__)+(12);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((101712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$value,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=(($ary)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9+12)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($5)|(0)) < (($11)|(0));
      if ($12) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $14=$i;
      var $15=(($ary)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20+((($14)*(12))&-1))|0);
      var $22=$v;
      var $23=$21;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=(($v+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))==14;
      if ($26) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $28=(($v)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0)) > 1;
      if ($34) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $36=$1;
      var $37=(($v)|0);
      var $38=$37;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39;
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+12)|0);
      var $44=_mrb_equal($36, $43, $value);
      var $45=(($44)|(0))!=0;
      if ($45) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $47=$agg_result;
      var $48=$v;
      assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $51=$i;
      var $52=((($51)+(1))|0);
      $i=$52;
      label = 2; break;
    case 9: 
      _mrb_nil_value1365($agg_result);
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1365($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1368($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1373($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_hash_ext_gem_final($2);
  return;
}
function _GENERATED_TMP_mrb_mruby_math_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_math_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_math_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_math_gem_final($2);
  return;
}
function _mrb_mruby_math_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $mrb_math;
  var $2=__stackBase__;
  var $3=(__stackBase__)+(12);
  var $4=(__stackBase__)+(24);
  $1=$mrb;
  var $5=$1;
  var $6=_mrb_define_module($5, ((111460)|0));
  $mrb_math=$6;
  var $7=$1;
  var $8=$mrb_math;
  _mrb_float_value1414($2, 3.141592653589793);
  _mrb_define_const($7, $8, ((113056)|0), $2);
  var $9=$1;
  var $10=$mrb_math;
  _mrb_float_value1414($3, 2.718281828459045);
  _mrb_define_const($9, $10, ((108020)|0), $3);
  var $11=$1;
  var $12=$mrb_math;
  _mrb_float_value1414($4, 1e-12);
  _mrb_define_const($11, $12, ((104480)|0), $4);
  var $13=$1;
  var $14=$mrb_math;
  _mrb_define_module_function($13, $14, ((101708)|0), 158, 262144);
  var $15=$1;
  var $16=$mrb_math;
  _mrb_define_module_function($15, $16, ((99040)|0), 254, 262144);
  var $17=$1;
  var $18=$mrb_math;
  _mrb_define_module_function($17, $18, ((96960)|0), 276, 262144);
  var $19=$1;
  var $20=$mrb_math;
  _mrb_define_module_function($19, $20, ((95768)|0), 622, 262144);
  var $21=$1;
  var $22=$mrb_math;
  _mrb_define_module_function($21, $22, ((94748)|0), 490, 262144);
  var $23=$1;
  var $24=$mrb_math;
  _mrb_define_module_function($23, $24, ((93940)|0), 378, 262144);
  var $25=$1;
  var $26=$mrb_math;
  _mrb_define_module_function($25, $26, ((113908)|0), 166, 524288);
  var $27=$1;
  var $28=$mrb_math;
  _mrb_define_module_function($27, $28, ((113292)|0), 550, 262144);
  var $29=$1;
  var $30=$mrb_math;
  _mrb_define_module_function($29, $30, ((112416)|0), 174, 262144);
  var $31=$1;
  var $32=$mrb_math;
  _mrb_define_module_function($31, $32, ((111812)|0), 284, 262144);
  var $33=$1;
  var $34=$mrb_math;
  _mrb_define_module_function($33, $34, ((111292)|0), 162, 262144);
  var $35=$1;
  var $36=$mrb_math;
  _mrb_define_module_function($35, $36, ((110780)|0), 178, 262144);
  var $37=$1;
  var $38=$mrb_math;
  _mrb_define_module_function($37, $38, ((110404)|0), 610, 262144);
  var $39=$1;
  var $40=$mrb_math;
  _mrb_define_module_function($39, $40, ((109964)|0), 238, 262144);
  var $41=$1;
  var $42=$mrb_math;
  _mrb_define_module_function($41, $42, ((109528)|0), 146, 270336);
  var $43=$1;
  var $44=$mrb_math;
  _mrb_define_module_function($43, $44, ((109052)|0), 702, 262144);
  var $45=$1;
  var $46=$mrb_math;
  _mrb_define_module_function($45, $46, ((108520)|0), 14, 262144);
  var $47=$1;
  var $48=$mrb_math;
  _mrb_define_module_function($47, $48, ((108188)|0), 172, 262144);
  var $49=$1;
  var $50=$mrb_math;
  _mrb_define_module_function($49, $50, ((107620)|0), 242, 262144);
  var $51=$1;
  var $52=$mrb_math;
  _mrb_define_module_function($51, $52, ((107352)|0), 118, 262144);
  var $53=$1;
  var $54=$mrb_math;
  _mrb_define_module_function($53, $54, ((106948)|0), 144, 524288);
  var $55=$1;
  var $56=$mrb_math;
  _mrb_define_module_function($55, $56, ((106496)|0), 186, 524288);
  var $57=$1;
  var $58=$mrb_math;
  _mrb_define_module_function($57, $58, ((106128)|0), 382, 262144);
  var $59=$1;
  var $60=$mrb_math;
  _mrb_define_module_function($59, $60, ((105804)|0), 88, 262144);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_float_value1414($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _math_sin($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.sin($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_cos($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.cos($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_tan($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.tan($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_asin($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.asin($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_acos($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.acos($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.atan($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_atan2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  var $y=(__stackBase__)+(8);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $6=Math.atan2($4, $5);
  (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _math_sinh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_sinh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_cosh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_cosh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_tanh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_tanh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_asinh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_asinh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_acosh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_acosh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_atanh($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_atanh($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_exp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.exp($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_log($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $x=__stackBase__;
      var $base=(__stackBase__)+(8);
      var $argc;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((104596)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$base,tempInt));
      $argc=$3;
      var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $5=Math.log($4);
      (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $6=$argc;
      var $7=(($6)|(0))==2;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($base)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($base)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $10=Math.log($9);
      var $11=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $12=($11)/($10);
      (HEAPF64[(tempDoublePtr)>>3]=$12,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $14=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1414($agg_result, $14);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _math_log2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.log($4);
  var $6=($5)/(0.6931471805599453);
  (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _math_log10($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_log10($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_sqrt($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=Math.sqrt($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_cbrt($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_cbrt($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_frexp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  var $exp=(__stackBase__)+(8);
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  var $5=_mrb_get_args($4, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $7=_frexp($6, $exp);
  (HEAPF64[(tempDoublePtr)>>3]=$7,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $8=$1;
  var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($2, $9);
  var $10=HEAP32[(($exp)>>2)];
  _mrb_fixnum_value1417($3, $10);
  _mrb_assoc_new($agg_result, $8, $2, $3);
  STACKTOP = __stackBase__;
  return;
}
function _math_ldexp($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  var $i=(__stackBase__)+(8);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((104872)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$i,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=HEAP32[(($i)>>2)];
  var $6=_ldexp($4, $5);
  (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _math_hypot($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  var $y=(__stackBase__)+(8);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105188)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,HEAP32[(((tempInt)+(4))>>2)]=$y,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($y)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($y)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $6=_hypot($4, $5);
  (HEAPF64[(tempDoublePtr)>>3]=$6,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $7=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $7);
  STACKTOP = __stackBase__;
  return;
}
function _math_erf($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_erf($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _math_erfc($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $x=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((105496)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$x,tempInt));
  var $4=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $5=_erfc($4);
  (HEAPF64[(tempDoublePtr)>>3]=$5,HEAP32[(($x)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_float_value1414($agg_result, $6);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_fixnum_value1417($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_numeric_ext_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_numeric_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_numeric_ext_gem_final($2);
  return;
}
function _mrb_mruby_numeric_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $i;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_class_get($2, ((111180)|0));
  $i=$3;
  var $4=$1;
  var $5=$i;
  _mrb_define_method($4, $5, ((113008)|0), 516, 0);
  return;
}
function _mrb_int_chr($agg_result, $mrb, $x) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $chr;
      var $c=__stackBase__;
      $1=$mrb;
      var $2=(($x)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      $chr=$4;
      var $5=$chr;
      var $6=(($5)|(0)) >= 256;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$1;
      var $10=_mrb_class_get($9, ((108004)|0));
      _mrb_raisef($8, $10, ((104444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($x)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($x)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($x)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $12=$chr;
      var $13=(($12) & 255);
      HEAP8[($c)]=$13;
      var $14=$1;
      _mrb_str_new($agg_result, $14, $c, 1);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1432($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_enum_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_load_irep($2, $6, ((88424)|0));
      var $7=$1;
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      _mrb_print_backtrace($12);
      var $13=$1;
      var $14=$1;
      var $15=(($14+16)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      _mrb_obj_value1368($3, $17);
      _mrb_p($13, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $19=$1;
      var $20=$ai;
      _mrb_gc_arena_restore($19, $20);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_hash_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_hash_ext_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((87896)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1373($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_print_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_print_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((83964)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1432($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_print_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_random_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_print_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_print_gem_final($2);
  return;
}
function _mrb_printstr($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $argv=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((111152)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,tempInt));
  var $4=$1;
  _printstr1437($4, $argv);
  var $5=$agg_result;
  var $6=$argv;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _printstr1437($mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $str;
      var $s;
      var $len;
      $1=$mrb;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      var $4=(($3)|(0))==16;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=(($obj)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      $str=$9;
      var $10=$str;
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      $s=$12;
      var $13=$str;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      $len=$15;
      var $16=$s;
      var $17=$len;
      var $18=HEAP32[((_stdout)>>2)];
      var $19=_fwrite($16, $17, 1, $18);
      label = 3; break;
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_print_gem_init($mrb) {
  var label = 0;
  var $1;
  var $krn;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+96)|0);
  var $4=HEAP32[(($3)>>2)];
  $krn=$4;
  var $5=$1;
  var $6=$krn;
  _mrb_define_method($5, $6, ((112992)|0), 72, 262144);
  return;
}
function _GENERATED_TMP_mrb_mruby_random_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_random_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_random_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_random_gem_final($2);
  return;
}
function _mrb_mruby_random_gem_init($mrb) {
  var label = 0;
  var $1;
  var $random;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+96)|0);
  var $5=HEAP32[(($4)>>2)];
  _mrb_define_method($2, $5, ((111132)|0), 302, 8192);
  var $6=$1;
  var $7=$1;
  var $8=(($7+96)|0);
  var $9=HEAP32[(($8)>>2)];
  _mrb_define_method($6, $9, ((112984)|0), 428, 8192);
  var $10=$1;
  var $11=$1;
  var $12=(($11+44)|0);
  var $13=HEAP32[(($12)>>2)];
  var $14=_mrb_define_class($10, ((107996)|0), $13);
  $random=$14;
  var $15=$1;
  var $16=$random;
  _mrb_define_class_method($15, $16, ((111132)|0), 302, 8192);
  var $17=$1;
  var $18=$random;
  _mrb_define_class_method($17, $18, ((112984)|0), 428, 8192);
  var $19=$1;
  var $20=$random;
  _mrb_define_method($19, $20, ((104432)|0), 454, 8192);
  var $21=$1;
  var $22=$random;
  _mrb_define_method($21, $22, ((111132)|0), 346, 8192);
  var $23=$1;
  var $24=$random;
  _mrb_define_method($23, $24, ((112984)|0), 280, 8192);
  return;
}
function _mrb_random_g_rand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $max=__stackBase__;
      var $seed=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(60);
      $1=$mrb;
      var $6=$1;
      _get_opt($2, $6);
      var $7=$max;
      var $8=$2;
      assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
      var $9=$1;
      var $10=$1;
      var $11=_mrb_intern1464($10, ((111792)|0));
      _mrb_gv_get($3, $9, $11);
      var $12=$seed;
      var $13=$3;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=(($seed+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))==0;
      if ($16) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $18=(($seed)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))!=0;
      if ($21) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $23=$1;
      _mrb_nil_value1466($4);
      _mrb_random_mt_g_srand($5, $23, $4);
      label = 4; break;
    case 4: 
      var $25=$1;
      _mrb_random_mt_g_rand($agg_result, $25, $max);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_g_srand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $seed=__stackBase__;
  var $old_seed=(__stackBase__)+(12);
  var $2=(__stackBase__)+(24);
  var $3=(__stackBase__)+(36);
  var $4=(__stackBase__)+(48);
  $1=$mrb;
  var $5=$1;
  _get_opt($2, $5);
  var $6=$seed;
  var $7=$2;
  assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
  var $8=$1;
  _mrb_random_mt_g_srand($3, $8, $seed);
  var $9=$seed;
  var $10=$3;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  var $11=$1;
  var $12=$1;
  var $13=_mrb_intern1464($12, ((111792)|0));
  _mrb_gv_get($4, $11, $13);
  var $14=$old_seed;
  var $15=$4;
  assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
  var $16=$1;
  var $17=$1;
  var $18=_mrb_intern1464($17, ((111792)|0));
  _mrb_gv_set($16, $18, $seed);
  var $19=$agg_result;
  var $20=$old_seed;
  assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $seed=__stackBase__;
  var $t;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  var $4=(__stackBase__)+(36);
  $1=$mrb;
  var $5=$1;
  var $6=_mrb_malloc($5, 2508);
  var $7=$6;
  $t=$7;
  var $8=$t;
  var $9=(($8+2496)|0);
  HEAP32[(($9)>>2)]=625;
  var $10=$1;
  _get_opt($2, $10);
  var $11=$seed;
  var $12=$2;
  assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
  var $13=$1;
  var $14=$t;
  _mrb_random_mt_srand($3, $13, $14, $seed);
  var $15=$seed;
  var $16=$3;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  var $17=$1;
  var $18=$1;
  var $19=_mrb_intern1464($18, ((101676)|0));
  _mrb_iv_set($17, $self, $19, $seed);
  var $20=$1;
  var $21=$1;
  var $22=_mrb_intern1464($21, ((113892)|0));
  var $23=$1;
  var $24=$1;
  var $25=(($24+44)|0);
  var $26=HEAP32[(($25)>>2)];
  var $27=$t;
  var $28=$27;
  var $29=_mrb_data_object_alloc($23, $26, $28, 60084);
  var $30=$29;
  _mrb_obj_value1468($4, $30);
  _mrb_iv_set($20, $self, $22, $4);
  var $31=$agg_result;
  var $32=$self;
  assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_random_rand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $max=__stackBase__;
      var $seed=(__stackBase__)+(12);
      var $t;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(60);
      $1=$mrb;
      var $6=$1;
      var $7=_mrb_mt_get_context($6, $self);
      $t=$7;
      var $8=$1;
      _get_opt($2, $8);
      var $9=$max;
      var $10=$2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=$1;
      var $12=$1;
      var $13=_mrb_intern1464($12, ((101676)|0));
      _mrb_iv_get($3, $11, $self, $13);
      var $14=$seed;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=(($seed+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))==0;
      if ($18) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $20=(($seed)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))!=0;
      if ($23) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $25=$1;
      var $26=$t;
      _mrb_nil_value1466($4);
      _mrb_random_mt_srand($5, $25, $26, $4);
      label = 4; break;
    case 4: 
      var $28=$1;
      var $29=$t;
      _mrb_random_mt_rand($agg_result, $28, $29, $max);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_srand($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $seed=__stackBase__;
  var $old_seed=(__stackBase__)+(12);
  var $t;
  var $2=(__stackBase__)+(24);
  var $3=(__stackBase__)+(36);
  var $4=(__stackBase__)+(48);
  $1=$mrb;
  var $5=$1;
  var $6=_mrb_mt_get_context($5, $self);
  $t=$6;
  var $7=$1;
  _get_opt($2, $7);
  var $8=$seed;
  var $9=$2;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  var $10=$1;
  var $11=$t;
  _mrb_random_mt_srand($3, $10, $11, $seed);
  var $12=$seed;
  var $13=$3;
  assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
  var $14=$1;
  var $15=$1;
  var $16=_mrb_intern1464($15, ((101676)|0));
  _mrb_iv_get($4, $14, $self, $16);
  var $17=$old_seed;
  var $18=$4;
  assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
  var $19=$1;
  var $20=$1;
  var $21=_mrb_intern1464($20, ((101676)|0));
  _mrb_iv_set($19, $self, $21, $seed);
  var $22=$agg_result;
  var $23=$old_seed;
  assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_mt_get_context($mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $t;
      var $context=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      var $4=$1;
      var $5=_mrb_intern1464($4, ((113892)|0));
      _mrb_iv_get($2, $3, $self, $5);
      var $6=$context;
      var $7=$2;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      var $8=$1;
      var $9=_mrb_data_get_ptr($8, $context, 60084);
      var $10=$9;
      $t=$10;
      var $11=$t;
      var $12=(($11)|(0))!=0;
      if ($12) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $14=$1;
      var $15=$1;
      var $16=_mrb_class_get($15, ((113276)|0));
      _mrb_raise($14, $16, ((112380)|0));
      label = 3; break;
    case 3: 
      var $18=$t;
      STACKTOP = __stackBase__;
      return $18;
    default: assert(0, "bad label: " + label);
  }
}
function _get_opt($agg_result, $mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $arg=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      $1=$mrb;
      _mrb_fixnum_value1465($2, 0);
      var $5=$arg;
      var $6=$2;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$1;
      var $8=_mrb_get_args($7, ((99024)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$arg,tempInt));
      var $9=(($arg+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=(($arg)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $18=(($arg+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==3;
      if ($20) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $22=$1;
      var $23=$1;
      var $24=_mrb_class_get($23, ((96944)|0));
      _mrb_raise($22, $24, ((95744)|0));
      label = 5; break;
    case 5: 
      var $26=$1;
      _mrb_check_convert_type($3, $26, $arg, 3, ((94740)|0), ((93932)|0));
      var $27=$arg;
      var $28=$3;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $29=(($arg)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31)|(0)) < 0;
      if ($32) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=(($arg)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(((-$36))|0);
      _mrb_fixnum_value1465($4, $37);
      var $38=$arg;
      var $39=$4;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $42=$agg_result;
      var $43=$arg;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_srand($agg_result, $mrb, $t, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$t;
      var $5=(($seed+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $9=(($seed)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $14=_time(0);
      var $15=$2;
      var $16=_mt_rand($15);
      var $17=((($14)+($16))|0);
      _mrb_fixnum_value1465($3, $17);
      var $18=$seed;
      var $19=$3;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      var $20=(($seed)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0)) < 0;
      if ($23) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $25=(($seed)|0);
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=(((-$27))|0);
      _mrb_fixnum_value1465($4, $28);
      var $29=$seed;
      var $30=$4;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $33=$2;
      var $34=(($seed)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      _mt_srand($33, $36);
      var $37=$agg_result;
      var $38=$seed;
      assert(12 % 1 === 0);HEAP32[(($37)>>2)]=HEAP32[(($38)>>2)];HEAP32[((($37)+(4))>>2)]=HEAP32[((($38)+(4))>>2)];HEAP32[((($37)+(8))>>2)]=HEAP32[((($38)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1464($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_fixnum_value1465($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_rand($t) {
  var label = 0;
  var $1;
  $1=$t;
  var $2=$1;
  var $3=_mrb_random_genrand_int32($2);
  return $3;
}
function _mrb_mruby_sprintf_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mt_srand($t, $seed) {
  var label = 0;
  var $1;
  var $2;
  $1=$t;
  $2=$seed;
  var $3=$1;
  var $4=$2;
  _mrb_random_init_genrand($3, $4);
  return;
}
function _mrb_nil_value1466($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_rand($agg_result, $mrb, $t, $max) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $value=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$t;
      var $5=(($max)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$2;
      var $11=_mt_rand_real($10);
      _mrb_float_value1467($3, $11);
      var $12=$value;
      var $13=$3;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $15=$2;
      var $16=_mt_rand($15);
      var $17=(($max)|0);
      var $18=$17;
      var $19=HEAP32[(($18)>>2)];
      var $20=((($16)>>>(0)))%((($19)>>>(0)));
      _mrb_fixnum_value1465($4, $20);
      var $21=$value;
      var $22=$4;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $24=$agg_result;
      var $25=$value;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1467($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_rand_real($t) {
  var label = 0;
  var $1;
  $1=$t;
  var $2=$1;
  var $3=_mrb_random_genrand_real1($2);
  return $3;
}
function _mrb_obj_value1468($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_mt_g_srand($agg_result, $mrb, $seed) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $seed; $seed = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($seed)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($seed)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($seed)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=(($seed+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=(($seed)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 6; break; } else { label = 3; break; }
    case 3: 
      var $13=_time(0);
      var $14=_mt_g_rand();
      var $15=((($13)+($14))|0);
      _mrb_fixnum_value1465($2, $15);
      var $16=$seed;
      var $17=$2;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      var $18=(($seed)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0)) < 0;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=(($seed)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=(((-$25))|0);
      _mrb_fixnum_value1465($3, $26);
      var $27=$seed;
      var $28=$3;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $31=(($seed)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      _mt_g_srand($33);
      var $34=$agg_result;
      var $35=$seed;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_g_srand($seed) {
  var label = 0;
  var $1;
  $1=$seed;
  var $2=$1;
  _init_genrand($2);
  return;
}
function _mt_g_rand() {
  var label = 0;
  var $1=_genrand_int32();
  return $1;
}
function _mrb_random_mt_g_rand($agg_result, $mrb, $max) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $max; $max = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($max)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($max)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($max)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $value=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      $1=$mrb;
      var $4=(($max)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $9=_mt_g_rand_real();
      _mrb_float_value1467($2, $9);
      var $10=$value;
      var $11=$2;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $13=_mt_g_rand();
      var $14=(($max)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=((($13)>>>(0)))%((($16)>>>(0)));
      _mrb_fixnum_value1465($3, $17);
      var $18=$value;
      var $19=$3;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $21=$agg_result;
      var $22=$value;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mt_g_rand_real() {
  var label = 0;
  var $1=_genrand_real1();
  return $1;
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_sprintf_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_sprintf_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_sprintf_gem_final($2);
  return;
}
function _mrb_mruby_sprintf_gem_init($mrb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $krn;
      $1=$mrb;
      var $2=$1;
      var $3=(($2+96)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=_mrb_define_module($7, ((111028)|0));
      var $9=$1;
      var $10=(($9+96)|0);
      HEAP32[(($10)>>2)]=$8;
      label = 3; break;
    case 3: 
      var $12=$1;
      var $13=(($12+96)|0);
      var $14=HEAP32[(($13)>>2)];
      $krn=$14;
      var $15=$1;
      var $16=$krn;
      _mrb_define_method($15, $16, ((112976)|0), 226, 4096);
      var $17=$1;
      var $18=$krn;
      _mrb_define_method($17, $18, ((107988)|0), 226, 4096);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_f_sprintf($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argc=__stackBase__;
      var $argv=(__stackBase__)+(4);
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((111012)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      var $4=HEAP32[(($argc)>>2)];
      var $5=(($4)|(0)) <= 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=$1;
      var $8=$1;
      var $9=_mrb_class_get($8, ((112960)|0));
      _mrb_raise($7, $9, ((107968)|0));
      _mrb_nil_value1528($agg_result);
      label = 4; break;
    case 3: 
      var $11=$1;
      var $12=HEAP32[(($argc)>>2)];
      var $13=((($12)-(1))|0);
      var $14=HEAP32[(($argv)>>2)];
      var $15=(($14+12)|0);
      var $16=HEAP32[(($argv)>>2)];
      var $17=(($16)|0);
      _mrb_str_format($agg_result, $11, $13, $15, $17);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1528($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_format($agg_result, $mrb, $argc, $argv, $fmt) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1396)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $fmt; $fmt = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($fmt)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fmt)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fmt)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $p;
      var $end;
      var $buf;
      var $blen;
      var $bsiz;
      var $result=__stackBase__;
      var $n;
      var $width;
      var $prec;
      var $flags;
      var $nextarg;
      var $posarg;
      var $nextvalue=(__stackBase__)+(12);
      var $tmp=(__stackBase__)+(24);
      var $str=(__stackBase__)+(36);
      var $hash=(__stackBase__)+(48);
      var $4=(__stackBase__)+(60);
      var $5=(__stackBase__)+(72);
      var $t;
      var $id;
      var $6=(__stackBase__)+(84);
      var $7=(__stackBase__)+(96);
      var $8=(__stackBase__)+(108);
      var $next_n;
      var $9=(__stackBase__)+(120);
      var $10=(__stackBase__)+(132);
      var $11=(__stackBase__)+(144);
      var $12=(__stackBase__)+(156);
      var $13=(__stackBase__)+(168);
      var $14=(__stackBase__)+(180);
      var $15=(__stackBase__)+(192);
      var $16=(__stackBase__)+(204);
      var $17=(__stackBase__)+(216);
      var $start;
      var $term;
      var $symname=(__stackBase__)+(228);
      var $18=(__stackBase__)+(240);
      var $19=(__stackBase__)+(252);
      var $20=(__stackBase__)+(264);
      var $21=(__stackBase__)+(276);
      var $22=(__stackBase__)+(288);
      var $23=(__stackBase__)+(300);
      var $24=(__stackBase__)+(312);
      var $25=(__stackBase__)+(324);
      var $26=(__stackBase__)+(336);
      var $27=(__stackBase__)+(348);
      var $28=(__stackBase__)+(360);
      var $29=(__stackBase__)+(372);
      var $30=(__stackBase__)+(384);
      var $next_n1;
      var $31=(__stackBase__)+(396);
      var $32=(__stackBase__)+(408);
      var $33=(__stackBase__)+(420);
      var $34=(__stackBase__)+(432);
      var $35=(__stackBase__)+(444);
      var $36=(__stackBase__)+(456);
      var $37=(__stackBase__)+(468);
      var $38=(__stackBase__)+(480);
      var $39=(__stackBase__)+(492);
      var $40=(__stackBase__)+(504);
      var $41=(__stackBase__)+(516);
      var $42=(__stackBase__)+(528);
      var $43=(__stackBase__)+(540);
      var $next_n2;
      var $44=(__stackBase__)+(552);
      var $45=(__stackBase__)+(564);
      var $46=(__stackBase__)+(576);
      var $47=(__stackBase__)+(588);
      var $48=(__stackBase__)+(600);
      var $49=(__stackBase__)+(612);
      var $50=(__stackBase__)+(624);
      var $51=(__stackBase__)+(636);
      var $52=(__stackBase__)+(648);
      var $53=(__stackBase__)+(660);
      var $54=(__stackBase__)+(672);
      var $55=(__stackBase__)+(684);
      var $56=(__stackBase__)+(696);
      var $next_n3;
      var $57=(__stackBase__)+(708);
      var $val=(__stackBase__)+(720);
      var $58=(__stackBase__)+(732);
      var $59=(__stackBase__)+(744);
      var $tmp4=(__stackBase__)+(756);
      var $c;
      var $60=(__stackBase__)+(768);
      var $61=(__stackBase__)+(780);
      var $62=(__stackBase__)+(792);
      var $63=(__stackBase__)+(804);
      var $64=(__stackBase__)+(816);
      var $65=(__stackBase__)+(828);
      var $arg=(__stackBase__)+(840);
      var $66=(__stackBase__)+(852);
      var $67=(__stackBase__)+(864);
      var $len;
      var $slen;
      var $68=(__stackBase__)+(876);
      var $69=(__stackBase__)+(888);
      var $p5;
      var $70=(__stackBase__)+(900);
      var $71=(__stackBase__)+(912);
      var $72=(__stackBase__)+(924);
      var $73=(__stackBase__)+(936);
      var $val6=(__stackBase__)+(948);
      var $74=(__stackBase__)+(960);
      var $75=(__stackBase__)+(972);
      var $fbuf=(__stackBase__)+(984);
      var $nbuf=(__stackBase__)+(1016);
      var $s;
      var $prefix;
      var $sign;
      var $dots;
      var $sc=(__stackBase__)+(1080);
      var $v;
      var $org_v;
      var $base;
      var $len7;
      var $76=(__stackBase__)+(1084);
      var $77=(__stackBase__)+(1096);
      var $78=(__stackBase__)+(1108);
      var $79=(__stackBase__)+(1120);
      var $80=(__stackBase__)+(1132);
      var $81=(__stackBase__)+(1144);
      var $82=(__stackBase__)+(1156);
      var $83=(__stackBase__)+(1168);
      var $84=(__stackBase__)+(1180);
      var $c8;
      var $c9;
      var $d;
      var $size;
      var $pp;
      var $c10;
      var $size11;
      var $85=(__stackBase__)+(1192);
      var $86=(__stackBase__)+(1204);
      var $plen;
      var $87=(__stackBase__)+(1216);
      var $88=(__stackBase__)+(1228);
      var $89=(__stackBase__)+(1240);
      var $c12;
      var $c13;
      var $90=(__stackBase__)+(1252);
      var $91=(__stackBase__)+(1264);
      var $val14=(__stackBase__)+(1276);
      var $92=(__stackBase__)+(1288);
      var $93=(__stackBase__)+(1300);
      var $fval;
      var $i=(__stackBase__)+(1312);
      var $need;
      var $fbuf15=(__stackBase__)+(1316);
      var $94=(__stackBase__)+(1348);
      var $expr;
      var $elen;
      var $95=(__stackBase__)+(1360);
      var $96=(__stackBase__)+(1372);
      var $97=(__stackBase__)+(1384);
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      $flags=0;
      $nextarg=1;
      $posarg=0;
      _mrb_undef_value1529($hash);
      var $98=$2;
      var $99=((($98)+(1))|0);
      $2=$99;
      var $100=$3;
      var $101=((($100)-(12))|0);
      $3=$101;
      var $102=$1;
      _mrb_str_to_str($4, $102, $fmt);
      var $103=$fmt;
      var $104=$4;
      assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
      var $105=(($fmt)|0);
      var $106=$105;
      var $107=HEAP32[(($106)>>2)];
      var $108=$107;
      var $109=(($108+20)|0);
      var $110=HEAP32[(($109)>>2)];
      $p=$110;
      var $111=$p;
      var $112=(($fmt)|0);
      var $113=$112;
      var $114=HEAP32[(($113)>>2)];
      var $115=$114;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($111+$117)|0);
      $end=$118;
      $blen=0;
      $bsiz=120;
      var $119=$1;
      var $120=$bsiz;
      _mrb_str_buf_new($5, $119, $120);
      var $121=$result;
      var $122=$5;
      assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
      var $123=(($result)|0);
      var $124=$123;
      var $125=HEAP32[(($124)>>2)];
      var $126=$125;
      var $127=(($126+20)|0);
      var $128=HEAP32[(($127)>>2)];
      $buf=$128;
      var $129=$buf;
      var $130=$bsiz;
      _memset($129, 0, $130);
      label = 2; break;
    case 2: 
      var $132=$p;
      var $133=$end;
      var $134=(($132)>>>(0)) < (($133)>>>(0));
      if ($134) { label = 3; break; } else { label = 583; break; }
    case 3: 
      $id=0;
      var $136=$p;
      $t=$136;
      label = 4; break;
    case 4: 
      var $138=$t;
      var $139=$end;
      var $140=(($138)>>>(0)) < (($139)>>>(0));
      if ($140) { label = 5; break; } else { var $147 = 0;label = 6; break; }
    case 5: 
      var $142=$t;
      var $143=HEAP8[($142)];
      var $144=(($143 << 24) >> 24);
      var $145=(($144)|(0))!=37;
      var $147 = $145;label = 6; break;
    case 6: 
      var $147;
      if ($147) { label = 7; break; } else { label = 9; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $150=$t;
      var $151=(($150+1)|0);
      $t=$151;
      label = 4; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $156=$blen;
      var $157=$t;
      var $158=$p;
      var $159=$157;
      var $160=$158;
      var $161=((($159)-($160))|0);
      var $162=((($156)+($161))|0);
      var $163=$bsiz;
      var $164=(($162)|(0)) >= (($163)|(0));
      if ($164) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $166=$bsiz;
      var $167=($166<<1);
      $bsiz=$167;
      label = 12; break;
    case 14: 
      var $169=$1;
      var $170=$bsiz;
      _mrb_str_resize($6, $169, $result, $170);
      var $171=(($result)|0);
      var $172=$171;
      var $173=HEAP32[(($172)>>2)];
      var $174=$173;
      var $175=(($174+20)|0);
      var $176=HEAP32[(($175)>>2)];
      $buf=$176;
      label = 15; break;
    case 15: 
      var $178=$blen;
      var $179=$buf;
      var $180=(($179+$178)|0);
      var $181=$p;
      var $182=$t;
      var $183=$p;
      var $184=$182;
      var $185=$183;
      var $186=((($184)-($185))|0);
      assert($186 % 1 === 0);_memcpy($180, $181, $186);
      var $187=$t;
      var $188=$p;
      var $189=$187;
      var $190=$188;
      var $191=((($189)-($190))|0);
      var $192=$blen;
      var $193=((($192)+($191))|0);
      $blen=$193;
      label = 16; break;
    case 16: 
      var $195=$t;
      var $196=$end;
      var $197=(($195)>>>(0)) >= (($196)>>>(0));
      if ($197) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 584; break;
    case 18: 
      var $200=$t;
      var $201=(($200+1)|0);
      $p=$201;
      $prec=-1;
      $width=-1;
      _mrb_undef_value1529($7);
      var $202=$nextvalue;
      var $203=$7;
      assert(12 % 1 === 0);HEAP32[(($202)>>2)]=HEAP32[(($203)>>2)];HEAP32[((($202)+(4))>>2)]=HEAP32[((($203)+(4))>>2)];HEAP32[((($202)+(8))>>2)]=HEAP32[((($203)+(8))>>2)];
      label = 19; break;
    case 19: 
      var $205=$p;
      var $206=HEAP8[($205)];
      var $207=(($206 << 24) >> 24);
      if ((($207)|(0))==32) {
        label = 21; break;
      }
      else if ((($207)|(0))==35) {
        label = 26; break;
      }
      else if ((($207)|(0))==43) {
        label = 31; break;
      }
      else if ((($207)|(0))==45) {
        label = 36; break;
      }
      else if ((($207)|(0))==48) {
        label = 41; break;
      }
      else if ((($207)|(0))==49 | (($207)|(0))==50 | (($207)|(0))==51 | (($207)|(0))==52 | (($207)|(0))==53 | (($207)|(0))==54 | (($207)|(0))==55 | (($207)|(0))==56 | (($207)|(0))==57) {
        label = 46; break;
      }
      else if ((($207)|(0))==60 | (($207)|(0))==123) {
        label = 77; break;
      }
      else if ((($207)|(0))==42) {
        label = 95; break;
      }
      else if ((($207)|(0))==46) {
        label = 141; break;
      }
      else if ((($207)|(0))==10 | (($207)|(0))==0) {
        label = 197; break;
      }
      else if ((($207)|(0))==37) {
        label = 198; break;
      }
      else if ((($207)|(0))==99) {
        label = 208; break;
      }
      else if ((($207)|(0))==115 | (($207)|(0))==112) {
        label = 264; break;
      }
      else if ((($207)|(0))==100 | (($207)|(0))==105 | (($207)|(0))==111 | (($207)|(0))==120 | (($207)|(0))==88 | (($207)|(0))==98 | (($207)|(0))==66 | (($207)|(0))==117) {
        label = 322; break;
      }
      else if ((($207)|(0))==102 | (($207)|(0))==103 | (($207)|(0))==71 | (($207)|(0))==101 | (($207)|(0))==69 | (($207)|(0))==97 | (($207)|(0))==65) {
        label = 512; break;
      }
      else {
      label = 20; break;
      }
    case 20: 
      var $209=$1;
      var $210=$1;
      var $211=_mrb_class_get($210, ((112960)|0));
      var $212=$1;
      var $213=$p;
      _mrb_str_new($8, $212, $213, 1);
      _mrb_raisef($209, $211, ((104400)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($8)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($8)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($8)+(8))>>2)],tempInt));
      label = 581; break;
    case 21: 
      var $215=$flags;
      var $216=$215 & 32;
      var $217=(($216)|(0))!=0;
      if ($217) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $219=$1;
      var $220=$1;
      var $221=_mrb_class_get($220, ((112960)|0));
      _mrb_raise($219, $221, ((101656)|0));
      label = 23; break;
    case 23: 
      var $223=$flags;
      var $224=$223 & 128;
      var $225=(($224)|(0))!=0;
      if ($225) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $227=$1;
      var $228=$1;
      var $229=_mrb_class_get($228, ((112960)|0));
      _mrb_raise($227, $229, ((99000)|0));
      label = 25; break;
    case 25: 
      var $231=$flags;
      var $232=$231 | 16;
      $flags=$232;
      var $233=$p;
      var $234=(($233+1)|0);
      $p=$234;
      label = 19; break;
    case 26: 
      var $236=$flags;
      var $237=$236 & 32;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $240=$1;
      var $241=$1;
      var $242=_mrb_class_get($241, ((112960)|0));
      _mrb_raise($240, $242, ((101656)|0));
      label = 28; break;
    case 28: 
      var $244=$flags;
      var $245=$244 & 128;
      var $246=(($245)|(0))!=0;
      if ($246) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $248=$1;
      var $249=$1;
      var $250=_mrb_class_get($249, ((112960)|0));
      _mrb_raise($248, $250, ((99000)|0));
      label = 30; break;
    case 30: 
      var $252=$flags;
      var $253=$252 | 1;
      $flags=$253;
      var $254=$p;
      var $255=(($254+1)|0);
      $p=$255;
      label = 19; break;
    case 31: 
      var $257=$flags;
      var $258=$257 & 32;
      var $259=(($258)|(0))!=0;
      if ($259) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $261=$1;
      var $262=$1;
      var $263=_mrb_class_get($262, ((112960)|0));
      _mrb_raise($261, $263, ((101656)|0));
      label = 33; break;
    case 33: 
      var $265=$flags;
      var $266=$265 & 128;
      var $267=(($266)|(0))!=0;
      if ($267) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $269=$1;
      var $270=$1;
      var $271=_mrb_class_get($270, ((112960)|0));
      _mrb_raise($269, $271, ((99000)|0));
      label = 35; break;
    case 35: 
      var $273=$flags;
      var $274=$273 | 4;
      $flags=$274;
      var $275=$p;
      var $276=(($275+1)|0);
      $p=$276;
      label = 19; break;
    case 36: 
      var $278=$flags;
      var $279=$278 & 32;
      var $280=(($279)|(0))!=0;
      if ($280) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $282=$1;
      var $283=$1;
      var $284=_mrb_class_get($283, ((112960)|0));
      _mrb_raise($282, $284, ((101656)|0));
      label = 38; break;
    case 38: 
      var $286=$flags;
      var $287=$286 & 128;
      var $288=(($287)|(0))!=0;
      if ($288) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $290=$1;
      var $291=$1;
      var $292=_mrb_class_get($291, ((112960)|0));
      _mrb_raise($290, $292, ((99000)|0));
      label = 40; break;
    case 40: 
      var $294=$flags;
      var $295=$294 | 2;
      $flags=$295;
      var $296=$p;
      var $297=(($296+1)|0);
      $p=$297;
      label = 19; break;
    case 41: 
      var $299=$flags;
      var $300=$299 & 32;
      var $301=(($300)|(0))!=0;
      if ($301) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $303=$1;
      var $304=$1;
      var $305=_mrb_class_get($304, ((112960)|0));
      _mrb_raise($303, $305, ((101656)|0));
      label = 43; break;
    case 43: 
      var $307=$flags;
      var $308=$307 & 128;
      var $309=(($308)|(0))!=0;
      if ($309) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $311=$1;
      var $312=$1;
      var $313=_mrb_class_get($312, ((112960)|0));
      _mrb_raise($311, $313, ((99000)|0));
      label = 45; break;
    case 45: 
      var $315=$flags;
      var $316=$315 | 8;
      $flags=$316;
      var $317=$p;
      var $318=(($317+1)|0);
      $p=$318;
      label = 19; break;
    case 46: 
      $n=0;
      label = 47; break;
    case 47: 
      var $321=$p;
      var $322=$end;
      var $323=(($321)>>>(0)) < (($322)>>>(0));
      if ($323) { label = 48; break; } else { var $331 = 0;label = 49; break; }
    case 48: 
      var $325=$p;
      var $326=HEAP8[($325)];
      var $327=(($326)&(255));
      var $328=_isdigit($327);
      var $329=(($328)|(0))!=0;
      var $331 = $329;label = 49; break;
    case 49: 
      var $331;
      if ($331) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $333=$n;
      var $334=((($333)*(10))&-1);
      var $335=$p;
      var $336=HEAP8[($335)];
      var $337=(($336 << 24) >> 24);
      var $338=((($337)-(48))|0);
      var $339=((($334)+($338))|0);
      $next_n=$339;
      var $340=$next_n;
      var $341=((((($340)|(0)))/(10))&-1);
      var $342=$n;
      var $343=(($341)|(0))!=(($342)|(0));
      if ($343) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $345=$1;
      var $346=$1;
      var $347=_mrb_class_get($346, ((112960)|0));
      _mrb_raise($345, $347, ((96928)|0));
      label = 52; break;
    case 52: 
      var $349=$next_n;
      $n=$349;
      label = 53; break;
    case 53: 
      var $351=$p;
      var $352=(($351+1)|0);
      $p=$352;
      label = 47; break;
    case 54: 
      var $354=$p;
      var $355=$end;
      var $356=(($354)>>>(0)) >= (($355)>>>(0));
      if ($356) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $358=$1;
      var $359=$1;
      var $360=_mrb_class_get($359, ((112960)|0));
      _mrb_raise($358, $360, ((95708)|0));
      label = 56; break;
    case 56: 
      var $362=$p;
      var $363=HEAP8[($362)];
      var $364=(($363 << 24) >> 24);
      var $365=(($364)|(0))==36;
      if ($365) { label = 57; break; } else { label = 72; break; }
    case 57: 
      var $367=(($nextvalue+8)|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=(($368)|(0))==5;
      if ($369) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $371=$1;
      var $372=$1;
      var $373=_mrb_class_get($372, ((112960)|0));
      var $374=$n;
      _mrb_fixnum_value1530($9, $374);
      _mrb_raisef($371, $373, ((94716)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($9)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($9)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($9)+(8))>>2)],tempInt));
      label = 59; break;
    case 59: 
      var $376=$posarg;
      var $377=(($376)|(0)) > 0;
      if ($377) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $379=$1;
      var $380=$1;
      var $381=_mrb_class_get($380, ((112960)|0));
      var $382=$n;
      _mrb_fixnum_value1530($10, $382);
      var $383=$posarg;
      _mrb_fixnum_value1530($11, $383);
      _mrb_raisef($379, $381, ((93896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($10)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($10)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($10)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($11)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($11)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($11)+(8))>>2)],tempInt));
      _mrb_undef_value1529($12);
      var $384=$nextvalue;
      var $385=$12;
      assert(12 % 1 === 0);HEAP32[(($384)>>2)]=HEAP32[(($385)>>2)];HEAP32[((($384)+(4))>>2)]=HEAP32[((($385)+(4))>>2)];HEAP32[((($384)+(8))>>2)]=HEAP32[((($385)+(8))>>2)];
      label = 71; break;
    case 61: 
      var $387=$posarg;
      var $388=(($387)|(0))==-2;
      if ($388) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $390=$1;
      var $391=$1;
      var $392=_mrb_class_get($391, ((112960)|0));
      var $393=$n;
      _mrb_fixnum_value1530($13, $393);
      _mrb_raisef($390, $392, ((113864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($13)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($13)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($13)+(8))>>2)],tempInt));
      _mrb_undef_value1529($14);
      var $394=$nextvalue;
      var $395=$14;
      assert(12 % 1 === 0);HEAP32[(($394)>>2)]=HEAP32[(($395)>>2)];HEAP32[((($394)+(4))>>2)]=HEAP32[((($395)+(4))>>2)];HEAP32[((($394)+(8))>>2)]=HEAP32[((($395)+(8))>>2)];
      label = 70; break;
    case 63: 
      var $397=$n;
      var $398=(($397)|(0)) < 1;
      if ($398) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $400=$1;
      var $401=$1;
      var $402=_mrb_class_get($401, ((112960)|0));
      var $403=$n;
      _mrb_fixnum_value1530($15, $403);
      _mrb_raisef($400, $402, ((113256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($15)+(8))>>2)],tempInt));
      _mrb_undef_value1529($16);
      var $404=$nextvalue;
      var $405=$16;
      assert(12 % 1 === 0);HEAP32[(($404)>>2)]=HEAP32[(($405)>>2)];HEAP32[((($404)+(4))>>2)]=HEAP32[((($405)+(4))>>2)];HEAP32[((($404)+(8))>>2)]=HEAP32[((($405)+(8))>>2)];
      label = 69; break;
    case 65: 
      $posarg=-1;
      var $407=$n;
      var $408=$2;
      var $409=(($407)|(0)) >= (($408)|(0));
      if ($409) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $411=$1;
      var $412=$1;
      var $413=_mrb_class_get($412, ((112960)|0));
      _mrb_raise($411, $413, ((107968)|0));
      _mrb_undef_value1529($17);
      var $414=$nextvalue;
      var $415=$17;
      assert(12 % 1 === 0);HEAP32[(($414)>>2)]=HEAP32[(($415)>>2)];HEAP32[((($414)+(4))>>2)]=HEAP32[((($415)+(4))>>2)];HEAP32[((($414)+(8))>>2)]=HEAP32[((($415)+(8))>>2)];
      label = 68; break;
    case 67: 
      var $417=$n;
      var $418=$3;
      var $419=(($418+((($417)*(12))&-1))|0);
      var $420=$nextvalue;
      var $421=$419;
      assert(12 % 1 === 0);HEAP32[(($420)>>2)]=HEAP32[(($421)>>2)];HEAP32[((($420)+(4))>>2)]=HEAP32[((($421)+(4))>>2)];HEAP32[((($420)+(8))>>2)]=HEAP32[((($421)+(8))>>2)];
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $426=$p;
      var $427=(($426+1)|0);
      $p=$427;
      label = 19; break;
    case 72: 
      var $429=$flags;
      var $430=$429 & 32;
      var $431=(($430)|(0))!=0;
      if ($431) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $433=$1;
      var $434=$1;
      var $435=_mrb_class_get($434, ((112960)|0));
      _mrb_raise($433, $435, ((112360)|0));
      label = 74; break;
    case 74: 
      var $437=$flags;
      var $438=$437 & 128;
      var $439=(($438)|(0))!=0;
      if ($439) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $441=$1;
      var $442=$1;
      var $443=_mrb_class_get($442, ((112960)|0));
      _mrb_raise($441, $443, ((111768)|0));
      label = 76; break;
    case 76: 
      var $445=$n;
      $width=$445;
      var $446=$flags;
      var $447=$446 | 32;
      $flags=$447;
      label = 19; break;
    case 77: 
      var $449=$p;
      $start=$449;
      var $450=$p;
      var $451=HEAP8[($450)];
      var $452=(($451 << 24) >> 24);
      var $453=(($452)|(0))==60;
      var $454=$453 ? 62 : 125;
      var $455=(($454) & 255);
      $term=$455;
      label = 78; break;
    case 78: 
      var $457=$p;
      var $458=$end;
      var $459=(($457)>>>(0)) < (($458)>>>(0));
      if ($459) { label = 79; break; } else { var $468 = 0;label = 80; break; }
    case 79: 
      var $461=$p;
      var $462=HEAP8[($461)];
      var $463=(($462 << 24) >> 24);
      var $464=$term;
      var $465=(($464 << 24) >> 24);
      var $466=(($463)|(0))!=(($465)|(0));
      var $468 = $466;label = 80; break;
    case 80: 
      var $468;
      if ($468) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $470=$p;
      var $471=(($470+1)|0);
      $p=$471;
      label = 78; break;
    case 82: 
      var $473=$id;
      var $474=(($473 << 16) >> 16)!=0;
      if ($474) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $476=$1;
      var $477=$1;
      var $478=_mrb_class_get($477, ((112960)|0));
      var $479=$1;
      var $480=$start;
      var $481=$p;
      var $482=$start;
      var $483=$481;
      var $484=$482;
      var $485=((($483)-($484))|0);
      var $486=((($485)+(1))|0);
      _mrb_str_new($18, $479, $480, $486);
      var $487=$1;
      var $488=$id;
      _mrb_sym2str($19, $487, $488);
      _mrb_raisef($476, $478, ((111272)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($18)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($18)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($18)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($19)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($19)+(8))>>2)],tempInt));
      label = 84; break;
    case 84: 
      var $490=$1;
      var $491=$start;
      var $492=(($491+1)|0);
      var $493=$p;
      var $494=$start;
      var $495=$493;
      var $496=$494;
      var $497=((($495)-($496))|0);
      var $498=((($497)-(1))|0);
      _mrb_str_new($20, $490, $492, $498);
      var $499=$symname;
      var $500=$20;
      assert(12 % 1 === 0);HEAP32[(($499)>>2)]=HEAP32[(($500)>>2)];HEAP32[((($499)+(4))>>2)]=HEAP32[((($500)+(4))>>2)];HEAP32[((($499)+(8))>>2)]=HEAP32[((($500)+(8))>>2)];
      var $501=$1;
      var $502=_mrb_intern_str($501, $symname);
      $id=$502;
      var $503=$posarg;
      var $504=(($503)|(0)) > 0;
      if ($504) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $506=$1;
      var $507=$1;
      var $508=_mrb_class_get($507, ((112960)|0));
      var $509=$1;
      var $510=$start;
      var $511=$p;
      var $512=$start;
      var $513=$511;
      var $514=$512;
      var $515=((($513)-($514))|0);
      var $516=((($515)+(1))|0);
      _mrb_str_new($21, $509, $510, $516);
      var $517=$posarg;
      _mrb_fixnum_value1530($22, $517);
      _mrb_raisef($506, $508, ((110748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($21)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($21)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($21)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($22)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($22)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($22)+(8))>>2)],tempInt));
      _mrb_undef_value1529($23);
      var $518=$nextvalue;
      var $519=$23;
      assert(12 % 1 === 0);HEAP32[(($518)>>2)]=HEAP32[(($519)>>2)];HEAP32[((($518)+(4))>>2)]=HEAP32[((($519)+(4))>>2)];HEAP32[((($518)+(8))>>2)]=HEAP32[((($519)+(8))>>2)];
      label = 90; break;
    case 86: 
      var $521=$posarg;
      var $522=(($521)|(0))==-1;
      if ($522) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $524=$1;
      var $525=$1;
      var $526=_mrb_class_get($525, ((112960)|0));
      var $527=$1;
      var $528=$start;
      var $529=$p;
      var $530=$start;
      var $531=$529;
      var $532=$530;
      var $533=((($531)-($532))|0);
      var $534=((($533)+(1))|0);
      _mrb_str_new($24, $527, $528, $534);
      _mrb_raisef($524, $526, ((110380)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($24)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($24)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($24)+(8))>>2)],tempInt));
      _mrb_undef_value1529($25);
      var $535=$nextvalue;
      var $536=$25;
      assert(12 % 1 === 0);HEAP32[(($535)>>2)]=HEAP32[(($536)>>2)];HEAP32[((($535)+(4))>>2)]=HEAP32[((($536)+(4))>>2)];HEAP32[((($535)+(8))>>2)]=HEAP32[((($536)+(8))>>2)];
      label = 89; break;
    case 88: 
      $posarg=-2;
      var $538=$1;
      var $539=$1;
      var $540=$2;
      var $541=$3;
      _get_hash($26, $539, $hash, $540, $541);
      var $542=$id;
      _mrb_symbol_value1531($27, $542);
      _mrb_undef_value1529($28);
      _mrb_hash_fetch($29, $538, $26, $27, $28);
      var $543=$nextvalue;
      var $544=$29;
      assert(12 % 1 === 0);HEAP32[(($543)>>2)]=HEAP32[(($544)>>2)];HEAP32[((($543)+(4))>>2)]=HEAP32[((($544)+(4))>>2)];HEAP32[((($543)+(8))>>2)]=HEAP32[((($544)+(8))>>2)];
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $547=(($nextvalue+8)|0);
      var $548=HEAP32[(($547)>>2)];
      var $549=(($548)|(0))==5;
      if ($549) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $551=$1;
      var $552=$1;
      var $553=_mrb_class_get($552, ((109952)|0));
      var $554=$1;
      var $555=$start;
      var $556=$p;
      var $557=$start;
      var $558=$556;
      var $559=$557;
      var $560=((($558)-($559))|0);
      var $561=((($560)+(1))|0);
      _mrb_str_new($30, $554, $555, $561);
      _mrb_raisef($551, $553, ((109512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($30)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($30)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($30)+(8))>>2)],tempInt));
      label = 92; break;
    case 92: 
      var $563=$term;
      var $564=(($563 << 24) >> 24);
      var $565=(($564)|(0))==125;
      if ($565) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 265; break;
    case 94: 
      var $568=$p;
      var $569=(($568+1)|0);
      $p=$569;
      label = 19; break;
    case 95: 
      var $571=$flags;
      var $572=$571 & 32;
      var $573=(($572)|(0))!=0;
      if ($573) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $575=$1;
      var $576=$1;
      var $577=_mrb_class_get($576, ((112960)|0));
      _mrb_raise($575, $577, ((112360)|0));
      label = 97; break;
    case 97: 
      var $579=$flags;
      var $580=$579 & 128;
      var $581=(($580)|(0))!=0;
      if ($581) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $583=$1;
      var $584=$1;
      var $585=_mrb_class_get($584, ((112960)|0));
      _mrb_raise($583, $585, ((111768)|0));
      label = 99; break;
    case 99: 
      var $587=$flags;
      var $588=$587 | 32;
      $flags=$588;
      label = 100; break;
    case 100: 
      var $590=$p;
      var $591=(($590+1)|0);
      $p=$591;
      $t=$590;
      $n=0;
      label = 101; break;
    case 101: 
      var $593=$p;
      var $594=$end;
      var $595=(($593)>>>(0)) < (($594)>>>(0));
      if ($595) { label = 102; break; } else { var $603 = 0;label = 103; break; }
    case 102: 
      var $597=$p;
      var $598=HEAP8[($597)];
      var $599=(($598)&(255));
      var $600=_isdigit($599);
      var $601=(($600)|(0))!=0;
      var $603 = $601;label = 103; break;
    case 103: 
      var $603;
      if ($603) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $605=$n;
      var $606=((($605)*(10))&-1);
      var $607=$p;
      var $608=HEAP8[($607)];
      var $609=(($608 << 24) >> 24);
      var $610=((($609)-(48))|0);
      var $611=((($606)+($610))|0);
      $next_n1=$611;
      var $612=$next_n1;
      var $613=((((($612)|(0)))/(10))&-1);
      var $614=$n;
      var $615=(($613)|(0))!=(($614)|(0));
      if ($615) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $617=$1;
      var $618=$1;
      var $619=_mrb_class_get($618, ((112960)|0));
      _mrb_raise($617, $619, ((109040)|0));
      label = 106; break;
    case 106: 
      var $621=$next_n1;
      $n=$621;
      label = 107; break;
    case 107: 
      var $623=$p;
      var $624=(($623+1)|0);
      $p=$624;
      label = 101; break;
    case 108: 
      var $626=$p;
      var $627=$end;
      var $628=(($626)>>>(0)) >= (($627)>>>(0));
      if ($628) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $630=$1;
      var $631=$1;
      var $632=_mrb_class_get($631, ((112960)|0));
      _mrb_raise($630, $632, ((95708)|0));
      label = 110; break;
    case 110: 
      var $634=$p;
      var $635=HEAP8[($634)];
      var $636=(($635 << 24) >> 24);
      var $637=(($636)|(0))==36;
      if ($637) { label = 111; break; } else { label = 124; break; }
    case 111: 
      var $639=$posarg;
      var $640=(($639)|(0)) > 0;
      if ($640) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $642=$1;
      var $643=$1;
      var $644=_mrb_class_get($643, ((112960)|0));
      var $645=$n;
      _mrb_fixnum_value1530($31, $645);
      var $646=$posarg;
      _mrb_fixnum_value1530($32, $646);
      _mrb_raisef($642, $644, ((93896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($31)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($31)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($31)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($32)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($32)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($32)+(8))>>2)],tempInt));
      _mrb_undef_value1529($33);
      var $647=$tmp;
      var $648=$33;
      assert(12 % 1 === 0);HEAP32[(($647)>>2)]=HEAP32[(($648)>>2)];HEAP32[((($647)+(4))>>2)]=HEAP32[((($648)+(4))>>2)];HEAP32[((($647)+(8))>>2)]=HEAP32[((($648)+(8))>>2)];
      label = 123; break;
    case 113: 
      var $650=$posarg;
      var $651=(($650)|(0))==-2;
      if ($651) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $653=$1;
      var $654=$1;
      var $655=_mrb_class_get($654, ((112960)|0));
      var $656=$n;
      _mrb_fixnum_value1530($34, $656);
      _mrb_raisef($653, $655, ((113864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($34)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($34)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($34)+(8))>>2)],tempInt));
      _mrb_undef_value1529($35);
      var $657=$tmp;
      var $658=$35;
      assert(12 % 1 === 0);HEAP32[(($657)>>2)]=HEAP32[(($658)>>2)];HEAP32[((($657)+(4))>>2)]=HEAP32[((($658)+(4))>>2)];HEAP32[((($657)+(8))>>2)]=HEAP32[((($658)+(8))>>2)];
      label = 122; break;
    case 115: 
      var $660=$n;
      var $661=(($660)|(0)) < 1;
      if ($661) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $663=$1;
      var $664=$1;
      var $665=_mrb_class_get($664, ((112960)|0));
      var $666=$n;
      _mrb_fixnum_value1530($36, $666);
      _mrb_raisef($663, $665, ((113256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($36)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($36)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($36)+(8))>>2)],tempInt));
      _mrb_undef_value1529($37);
      var $667=$tmp;
      var $668=$37;
      assert(12 % 1 === 0);HEAP32[(($667)>>2)]=HEAP32[(($668)>>2)];HEAP32[((($667)+(4))>>2)]=HEAP32[((($668)+(4))>>2)];HEAP32[((($667)+(8))>>2)]=HEAP32[((($668)+(8))>>2)];
      label = 121; break;
    case 117: 
      $posarg=-1;
      var $670=$n;
      var $671=$2;
      var $672=(($670)|(0)) >= (($671)|(0));
      if ($672) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $674=$1;
      var $675=$1;
      var $676=_mrb_class_get($675, ((112960)|0));
      _mrb_raise($674, $676, ((107968)|0));
      _mrb_undef_value1529($38);
      var $677=$tmp;
      var $678=$38;
      assert(12 % 1 === 0);HEAP32[(($677)>>2)]=HEAP32[(($678)>>2)];HEAP32[((($677)+(4))>>2)]=HEAP32[((($678)+(4))>>2)];HEAP32[((($677)+(8))>>2)]=HEAP32[((($678)+(8))>>2)];
      label = 120; break;
    case 119: 
      var $680=$n;
      var $681=$3;
      var $682=(($681+((($680)*(12))&-1))|0);
      var $683=$tmp;
      var $684=$682;
      assert(12 % 1 === 0);HEAP32[(($683)>>2)]=HEAP32[(($684)>>2)];HEAP32[((($683)+(4))>>2)]=HEAP32[((($684)+(4))>>2)];HEAP32[((($683)+(8))>>2)]=HEAP32[((($684)+(8))>>2)];
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 137; break;
    case 124: 
      var $690=(($nextvalue+8)|0);
      var $691=HEAP32[(($690)>>2)];
      var $692=(($691)|(0))==5;
      if ($692) { label = 126; break; } else { label = 125; break; }
    case 125: 
      var $694=$tmp;
      var $695=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($694)>>2)]=HEAP32[(($695)>>2)];HEAP32[((($694)+(4))>>2)]=HEAP32[((($695)+(4))>>2)];HEAP32[((($694)+(8))>>2)]=HEAP32[((($695)+(8))>>2)];
      label = 136; break;
    case 126: 
      var $697=$posarg;
      var $698=(($697)|(0))==-1;
      if ($698) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $700=$1;
      var $701=$1;
      var $702=_mrb_class_get($701, ((112960)|0));
      var $703=$nextarg;
      _mrb_fixnum_value1530($39, $703);
      _mrb_raisef($700, $702, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($39)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($39)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($39)+(8))>>2)],tempInt));
      _mrb_undef_value1529($40);
      var $704=$tmp;
      var $705=$40;
      assert(12 % 1 === 0);HEAP32[(($704)>>2)]=HEAP32[(($705)>>2)];HEAP32[((($704)+(4))>>2)]=HEAP32[((($705)+(4))>>2)];HEAP32[((($704)+(8))>>2)]=HEAP32[((($705)+(8))>>2)];
      label = 135; break;
    case 128: 
      var $707=$posarg;
      var $708=(($707)|(0))==-2;
      if ($708) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $710=$1;
      var $711=$1;
      var $712=_mrb_class_get($711, ((112960)|0));
      var $713=$nextarg;
      _mrb_fixnum_value1530($41, $713);
      _mrb_raisef($710, $712, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($41)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($41)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($41)+(8))>>2)],tempInt));
      _mrb_undef_value1529($42);
      var $714=$tmp;
      var $715=$42;
      assert(12 % 1 === 0);HEAP32[(($714)>>2)]=HEAP32[(($715)>>2)];HEAP32[((($714)+(4))>>2)]=HEAP32[((($715)+(4))>>2)];HEAP32[((($714)+(8))>>2)]=HEAP32[((($715)+(8))>>2)];
      label = 134; break;
    case 130: 
      var $717=$nextarg;
      var $718=((($717)+(1))|0);
      $nextarg=$718;
      $posarg=$717;
      var $719=$posarg;
      var $720=$2;
      var $721=(($719)|(0)) >= (($720)|(0));
      if ($721) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $723=$1;
      var $724=$1;
      var $725=_mrb_class_get($724, ((112960)|0));
      _mrb_raise($723, $725, ((107968)|0));
      _mrb_undef_value1529($43);
      var $726=$tmp;
      var $727=$43;
      assert(12 % 1 === 0);HEAP32[(($726)>>2)]=HEAP32[(($727)>>2)];HEAP32[((($726)+(4))>>2)]=HEAP32[((($727)+(4))>>2)];HEAP32[((($726)+(8))>>2)]=HEAP32[((($727)+(8))>>2)];
      label = 133; break;
    case 132: 
      var $729=$posarg;
      var $730=$3;
      var $731=(($730+((($729)*(12))&-1))|0);
      var $732=$tmp;
      var $733=$731;
      assert(12 % 1 === 0);HEAP32[(($732)>>2)]=HEAP32[(($733)>>2)];HEAP32[((($732)+(4))>>2)]=HEAP32[((($733)+(4))>>2)];HEAP32[((($732)+(8))>>2)]=HEAP32[((($733)+(8))>>2)];
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      var $738=$t;
      $p=$738;
      label = 137; break;
    case 137: 
      var $740=(($tmp)|0);
      var $741=$740;
      var $742=HEAP32[(($741)>>2)];
      $width=$742;
      label = 138; break;
    case 138: 
      var $744=$width;
      var $745=(($744)|(0)) < 0;
      if ($745) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $747=$flags;
      var $748=$747 | 2;
      $flags=$748;
      var $749=$width;
      var $750=(((-$749))|0);
      $width=$750;
      label = 140; break;
    case 140: 
      var $752=$p;
      var $753=(($752+1)|0);
      $p=$753;
      label = 19; break;
    case 141: 
      var $755=$flags;
      var $756=$755 & 128;
      var $757=(($756)|(0))!=0;
      if ($757) { label = 142; break; } else { label = 143; break; }
    case 142: 
      var $759=$1;
      var $760=$1;
      var $761=_mrb_class_get($760, ((112960)|0));
      _mrb_raise($759, $761, ((107596)|0));
      label = 143; break;
    case 143: 
      var $763=$flags;
      var $764=$763 | 192;
      $flags=$764;
      $prec=0;
      var $765=$p;
      var $766=(($765+1)|0);
      $p=$766;
      var $767=$p;
      var $768=HEAP8[($767)];
      var $769=(($768 << 24) >> 24);
      var $770=(($769)|(0))==42;
      if ($770) { label = 144; break; } else { label = 186; break; }
    case 144: 
      label = 145; break;
    case 145: 
      var $773=$p;
      var $774=(($773+1)|0);
      $p=$774;
      $t=$773;
      $n=0;
      label = 146; break;
    case 146: 
      var $776=$p;
      var $777=$end;
      var $778=(($776)>>>(0)) < (($777)>>>(0));
      if ($778) { label = 147; break; } else { var $786 = 0;label = 148; break; }
    case 147: 
      var $780=$p;
      var $781=HEAP8[($780)];
      var $782=(($781)&(255));
      var $783=_isdigit($782);
      var $784=(($783)|(0))!=0;
      var $786 = $784;label = 148; break;
    case 148: 
      var $786;
      if ($786) { label = 149; break; } else { label = 153; break; }
    case 149: 
      var $788=$n;
      var $789=((($788)*(10))&-1);
      var $790=$p;
      var $791=HEAP8[($790)];
      var $792=(($791 << 24) >> 24);
      var $793=((($792)-(48))|0);
      var $794=((($789)+($793))|0);
      $next_n2=$794;
      var $795=$next_n2;
      var $796=((((($795)|(0)))/(10))&-1);
      var $797=$n;
      var $798=(($796)|(0))!=(($797)|(0));
      if ($798) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $800=$1;
      var $801=$1;
      var $802=_mrb_class_get($801, ((112960)|0));
      _mrb_raise($800, $802, ((109040)|0));
      label = 151; break;
    case 151: 
      var $804=$next_n2;
      $n=$804;
      label = 152; break;
    case 152: 
      var $806=$p;
      var $807=(($806+1)|0);
      $p=$807;
      label = 146; break;
    case 153: 
      var $809=$p;
      var $810=$end;
      var $811=(($809)>>>(0)) >= (($810)>>>(0));
      if ($811) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $813=$1;
      var $814=$1;
      var $815=_mrb_class_get($814, ((112960)|0));
      _mrb_raise($813, $815, ((95708)|0));
      label = 155; break;
    case 155: 
      var $817=$p;
      var $818=HEAP8[($817)];
      var $819=(($818 << 24) >> 24);
      var $820=(($819)|(0))==36;
      if ($820) { label = 156; break; } else { label = 169; break; }
    case 156: 
      var $822=$posarg;
      var $823=(($822)|(0)) > 0;
      if ($823) { label = 157; break; } else { label = 158; break; }
    case 157: 
      var $825=$1;
      var $826=$1;
      var $827=_mrb_class_get($826, ((112960)|0));
      var $828=$n;
      _mrb_fixnum_value1530($44, $828);
      var $829=$posarg;
      _mrb_fixnum_value1530($45, $829);
      _mrb_raisef($825, $827, ((93896)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($44)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($44)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($44)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($45)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($45)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($45)+(8))>>2)],tempInt));
      _mrb_undef_value1529($46);
      var $830=$tmp;
      var $831=$46;
      assert(12 % 1 === 0);HEAP32[(($830)>>2)]=HEAP32[(($831)>>2)];HEAP32[((($830)+(4))>>2)]=HEAP32[((($831)+(4))>>2)];HEAP32[((($830)+(8))>>2)]=HEAP32[((($831)+(8))>>2)];
      label = 168; break;
    case 158: 
      var $833=$posarg;
      var $834=(($833)|(0))==-2;
      if ($834) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $836=$1;
      var $837=$1;
      var $838=_mrb_class_get($837, ((112960)|0));
      var $839=$n;
      _mrb_fixnum_value1530($47, $839);
      _mrb_raisef($836, $838, ((113864)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($47)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($47)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($47)+(8))>>2)],tempInt));
      _mrb_undef_value1529($48);
      var $840=$tmp;
      var $841=$48;
      assert(12 % 1 === 0);HEAP32[(($840)>>2)]=HEAP32[(($841)>>2)];HEAP32[((($840)+(4))>>2)]=HEAP32[((($841)+(4))>>2)];HEAP32[((($840)+(8))>>2)]=HEAP32[((($841)+(8))>>2)];
      label = 167; break;
    case 160: 
      var $843=$n;
      var $844=(($843)|(0)) < 1;
      if ($844) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $846=$1;
      var $847=$1;
      var $848=_mrb_class_get($847, ((112960)|0));
      var $849=$n;
      _mrb_fixnum_value1530($49, $849);
      _mrb_raisef($846, $848, ((113256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($49)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($49)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($49)+(8))>>2)],tempInt));
      _mrb_undef_value1529($50);
      var $850=$tmp;
      var $851=$50;
      assert(12 % 1 === 0);HEAP32[(($850)>>2)]=HEAP32[(($851)>>2)];HEAP32[((($850)+(4))>>2)]=HEAP32[((($851)+(4))>>2)];HEAP32[((($850)+(8))>>2)]=HEAP32[((($851)+(8))>>2)];
      label = 166; break;
    case 162: 
      $posarg=-1;
      var $853=$n;
      var $854=$2;
      var $855=(($853)|(0)) >= (($854)|(0));
      if ($855) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $857=$1;
      var $858=$1;
      var $859=_mrb_class_get($858, ((112960)|0));
      _mrb_raise($857, $859, ((107968)|0));
      _mrb_undef_value1529($51);
      var $860=$tmp;
      var $861=$51;
      assert(12 % 1 === 0);HEAP32[(($860)>>2)]=HEAP32[(($861)>>2)];HEAP32[((($860)+(4))>>2)]=HEAP32[((($861)+(4))>>2)];HEAP32[((($860)+(8))>>2)]=HEAP32[((($861)+(8))>>2)];
      label = 165; break;
    case 164: 
      var $863=$n;
      var $864=$3;
      var $865=(($864+((($863)*(12))&-1))|0);
      var $866=$tmp;
      var $867=$865;
      assert(12 % 1 === 0);HEAP32[(($866)>>2)]=HEAP32[(($867)>>2)];HEAP32[((($866)+(4))>>2)]=HEAP32[((($867)+(4))>>2)];HEAP32[((($866)+(8))>>2)]=HEAP32[((($867)+(8))>>2)];
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 182; break;
    case 169: 
      var $873=(($nextvalue+8)|0);
      var $874=HEAP32[(($873)>>2)];
      var $875=(($874)|(0))==5;
      if ($875) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $877=$tmp;
      var $878=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($877)>>2)]=HEAP32[(($878)>>2)];HEAP32[((($877)+(4))>>2)]=HEAP32[((($878)+(4))>>2)];HEAP32[((($877)+(8))>>2)]=HEAP32[((($878)+(8))>>2)];
      label = 181; break;
    case 171: 
      var $880=$posarg;
      var $881=(($880)|(0))==-1;
      if ($881) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $883=$1;
      var $884=$1;
      var $885=_mrb_class_get($884, ((112960)|0));
      var $886=$nextarg;
      _mrb_fixnum_value1530($52, $886);
      _mrb_raisef($883, $885, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($52)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($52)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($52)+(8))>>2)],tempInt));
      _mrb_undef_value1529($53);
      var $887=$tmp;
      var $888=$53;
      assert(12 % 1 === 0);HEAP32[(($887)>>2)]=HEAP32[(($888)>>2)];HEAP32[((($887)+(4))>>2)]=HEAP32[((($888)+(4))>>2)];HEAP32[((($887)+(8))>>2)]=HEAP32[((($888)+(8))>>2)];
      label = 180; break;
    case 173: 
      var $890=$posarg;
      var $891=(($890)|(0))==-2;
      if ($891) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $893=$1;
      var $894=$1;
      var $895=_mrb_class_get($894, ((112960)|0));
      var $896=$nextarg;
      _mrb_fixnum_value1530($54, $896);
      _mrb_raisef($893, $895, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($54)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($54)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($54)+(8))>>2)],tempInt));
      _mrb_undef_value1529($55);
      var $897=$tmp;
      var $898=$55;
      assert(12 % 1 === 0);HEAP32[(($897)>>2)]=HEAP32[(($898)>>2)];HEAP32[((($897)+(4))>>2)]=HEAP32[((($898)+(4))>>2)];HEAP32[((($897)+(8))>>2)]=HEAP32[((($898)+(8))>>2)];
      label = 179; break;
    case 175: 
      var $900=$nextarg;
      var $901=((($900)+(1))|0);
      $nextarg=$901;
      $posarg=$900;
      var $902=$posarg;
      var $903=$2;
      var $904=(($902)|(0)) >= (($903)|(0));
      if ($904) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $906=$1;
      var $907=$1;
      var $908=_mrb_class_get($907, ((112960)|0));
      _mrb_raise($906, $908, ((107968)|0));
      _mrb_undef_value1529($56);
      var $909=$tmp;
      var $910=$56;
      assert(12 % 1 === 0);HEAP32[(($909)>>2)]=HEAP32[(($910)>>2)];HEAP32[((($909)+(4))>>2)]=HEAP32[((($910)+(4))>>2)];HEAP32[((($909)+(8))>>2)]=HEAP32[((($910)+(8))>>2)];
      label = 178; break;
    case 177: 
      var $912=$posarg;
      var $913=$3;
      var $914=(($913+((($912)*(12))&-1))|0);
      var $915=$tmp;
      var $916=$914;
      assert(12 % 1 === 0);HEAP32[(($915)>>2)]=HEAP32[(($916)>>2)];HEAP32[((($915)+(4))>>2)]=HEAP32[((($916)+(4))>>2)];HEAP32[((($915)+(8))>>2)]=HEAP32[((($916)+(8))>>2)];
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 181; break;
    case 181: 
      var $921=$t;
      $p=$921;
      label = 182; break;
    case 182: 
      var $923=(($tmp)|0);
      var $924=$923;
      var $925=HEAP32[(($924)>>2)];
      $prec=$925;
      label = 183; break;
    case 183: 
      var $927=$prec;
      var $928=(($927)|(0)) < 0;
      if ($928) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $930=$flags;
      var $931=$930 & -65;
      $flags=$931;
      label = 185; break;
    case 185: 
      var $933=$p;
      var $934=(($933+1)|0);
      $p=$934;
      label = 19; break;
    case 186: 
      label = 187; break;
    case 187: 
      var $937=$p;
      var $938=$end;
      var $939=(($937)>>>(0)) < (($938)>>>(0));
      if ($939) { label = 188; break; } else { var $947 = 0;label = 189; break; }
    case 188: 
      var $941=$p;
      var $942=HEAP8[($941)];
      var $943=(($942)&(255));
      var $944=_isdigit($943);
      var $945=(($944)|(0))!=0;
      var $947 = $945;label = 189; break;
    case 189: 
      var $947;
      if ($947) { label = 190; break; } else { label = 194; break; }
    case 190: 
      var $949=$prec;
      var $950=((($949)*(10))&-1);
      var $951=$p;
      var $952=HEAP8[($951)];
      var $953=(($952 << 24) >> 24);
      var $954=((($953)-(48))|0);
      var $955=((($950)+($954))|0);
      $next_n3=$955;
      var $956=$next_n3;
      var $957=((((($956)|(0)))/(10))&-1);
      var $958=$prec;
      var $959=(($957)|(0))!=(($958)|(0));
      if ($959) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $961=$1;
      var $962=$1;
      var $963=_mrb_class_get($962, ((112960)|0));
      _mrb_raise($961, $963, ((107332)|0));
      label = 192; break;
    case 192: 
      var $965=$next_n3;
      $prec=$965;
      label = 193; break;
    case 193: 
      var $967=$p;
      var $968=(($967+1)|0);
      $p=$968;
      label = 187; break;
    case 194: 
      var $970=$p;
      var $971=$end;
      var $972=(($970)>>>(0)) >= (($971)>>>(0));
      if ($972) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $974=$1;
      var $975=$1;
      var $976=_mrb_class_get($975, ((112960)|0));
      _mrb_raise($974, $976, ((95708)|0));
      label = 196; break;
    case 196: 
      label = 19; break;
    case 197: 
      var $979=$p;
      var $980=((($979)-(1))|0);
      $p=$980;
      label = 198; break;
    case 198: 
      var $982=$flags;
      var $983=(($982)|(0))!=0;
      if ($983) { label = 199; break; } else { label = 200; break; }
    case 199: 
      var $985=$1;
      var $986=$1;
      var $987=_mrb_class_get($986, ((112960)|0));
      _mrb_raise($985, $987, ((106916)|0));
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      label = 203; break;
    case 203: 
      var $992=$blen;
      var $993=((($992)+(1))|0);
      var $994=$bsiz;
      var $995=(($993)|(0)) >= (($994)|(0));
      if ($995) { label = 204; break; } else { label = 205; break; }
    case 204: 
      var $997=$bsiz;
      var $998=($997<<1);
      $bsiz=$998;
      label = 203; break;
    case 205: 
      var $1000=$1;
      var $1001=$bsiz;
      _mrb_str_resize($57, $1000, $result, $1001);
      var $1002=(($result)|0);
      var $1003=$1002;
      var $1004=HEAP32[(($1003)>>2)];
      var $1005=$1004;
      var $1006=(($1005+20)|0);
      var $1007=HEAP32[(($1006)>>2)];
      $buf=$1007;
      label = 206; break;
    case 206: 
      var $1009=$blen;
      var $1010=$buf;
      var $1011=(($1010+$1009)|0);
      assert(1 % 1 === 0);HEAP8[($1011)]=HEAP8[((((106492)|0))|0)];
      var $1012=$blen;
      var $1013=((($1012)+(1))|0);
      $blen=$1013;
      label = 207; break;
    case 207: 
      label = 581; break;
    case 208: 
      var $1016=(($nextvalue+8)|0);
      var $1017=HEAP32[(($1016)>>2)];
      var $1018=(($1017)|(0))==5;
      if ($1018) { label = 210; break; } else { label = 209; break; }
    case 209: 
      var $1020=$val;
      var $1021=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($1020)>>2)]=HEAP32[(($1021)>>2)];HEAP32[((($1020)+(4))>>2)]=HEAP32[((($1021)+(4))>>2)];HEAP32[((($1020)+(8))>>2)]=HEAP32[((($1021)+(8))>>2)];
      label = 220; break;
    case 210: 
      var $1023=$posarg;
      var $1024=(($1023)|(0))==-1;
      if ($1024) { label = 211; break; } else { label = 212; break; }
    case 211: 
      var $1026=$1;
      var $1027=$1;
      var $1028=_mrb_class_get($1027, ((112960)|0));
      var $1029=$nextarg;
      _mrb_fixnum_value1530($58, $1029);
      _mrb_raisef($1026, $1028, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($58)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($58)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($58)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val);
      label = 219; break;
    case 212: 
      var $1031=$posarg;
      var $1032=(($1031)|(0))==-2;
      if ($1032) { label = 213; break; } else { label = 214; break; }
    case 213: 
      var $1034=$1;
      var $1035=$1;
      var $1036=_mrb_class_get($1035, ((112960)|0));
      var $1037=$nextarg;
      _mrb_fixnum_value1530($59, $1037);
      _mrb_raisef($1034, $1036, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($59)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($59)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($59)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val);
      label = 218; break;
    case 214: 
      var $1039=$nextarg;
      var $1040=((($1039)+(1))|0);
      $nextarg=$1040;
      $posarg=$1039;
      var $1041=$posarg;
      var $1042=$2;
      var $1043=(($1041)|(0)) >= (($1042)|(0));
      if ($1043) { label = 215; break; } else { label = 216; break; }
    case 215: 
      var $1045=$1;
      var $1046=$1;
      var $1047=_mrb_class_get($1046, ((112960)|0));
      _mrb_raise($1045, $1047, ((107968)|0));
      _mrb_undef_value1529($val);
      label = 217; break;
    case 216: 
      var $1049=$posarg;
      var $1050=$3;
      var $1051=(($1050+((($1049)*(12))&-1))|0);
      var $1052=$val;
      var $1053=$1051;
      assert(12 % 1 === 0);HEAP32[(($1052)>>2)]=HEAP32[(($1053)>>2)];HEAP32[((($1052)+(4))>>2)]=HEAP32[((($1053)+(4))>>2)];HEAP32[((($1052)+(8))>>2)]=HEAP32[((($1053)+(8))>>2)];
      label = 217; break;
    case 217: 
      label = 218; break;
    case 218: 
      label = 219; break;
    case 219: 
      label = 220; break;
    case 220: 
      var $1058=$1;
      _mrb_check_string_type($60, $1058, $val);
      var $1059=$tmp4;
      var $1060=$60;
      assert(12 % 1 === 0);HEAP32[(($1059)>>2)]=HEAP32[(($1060)>>2)];HEAP32[((($1059)+(4))>>2)]=HEAP32[((($1060)+(4))>>2)];HEAP32[((($1059)+(8))>>2)]=HEAP32[((($1060)+(8))>>2)];
      var $1061=(($tmp4+8)|0);
      var $1062=HEAP32[(($1061)>>2)];
      var $1063=(($1062)|(0))==0;
      if ($1063) { label = 221; break; } else { label = 222; break; }
    case 221: 
      var $1065=(($tmp4)|0);
      var $1066=$1065;
      var $1067=HEAP32[(($1066)>>2)];
      var $1068=(($1067)|(0))!=0;
      if ($1068) { label = 222; break; } else { label = 225; break; }
    case 222: 
      var $1070=(($tmp4)|0);
      var $1071=$1070;
      var $1072=HEAP32[(($1071)>>2)];
      var $1073=$1072;
      var $1074=(($1073+12)|0);
      var $1075=HEAP32[(($1074)>>2)];
      var $1076=(($1075)|(0))!=1;
      if ($1076) { label = 223; break; } else { label = 224; break; }
    case 223: 
      var $1078=$1;
      var $1079=$1;
      var $1080=_mrb_class_get($1079, ((112960)|0));
      _mrb_raise($1078, $1080, ((106104)|0));
      label = 224; break;
    case 224: 
      var $1082=(($tmp4)|0);
      var $1083=$1082;
      var $1084=HEAP32[(($1083)>>2)];
      var $1085=$1084;
      var $1086=(($1085+20)|0);
      var $1087=HEAP32[(($1086)>>2)];
      var $1088=(($1087)|0);
      var $1089=HEAP8[($1088)];
      var $1090=(($1089 << 24) >> 24);
      $c=$1090;
      $n=1;
      label = 226; break;
    case 225: 
      var $1092=(($val)|0);
      var $1093=$1092;
      var $1094=HEAP32[(($1093)>>2)];
      $c=$1094;
      $n=1;
      label = 226; break;
    case 226: 
      var $1096=$n;
      var $1097=(($1096)|(0)) <= 0;
      if ($1097) { label = 227; break; } else { label = 228; break; }
    case 227: 
      var $1099=$1;
      var $1100=$1;
      var $1101=_mrb_class_get($1100, ((112960)|0));
      _mrb_raise($1099, $1101, ((105784)|0));
      label = 228; break;
    case 228: 
      var $1103=$flags;
      var $1104=$1103 & 32;
      var $1105=(($1104)|(0))!=0;
      if ($1105) { label = 235; break; } else { label = 229; break; }
    case 229: 
      label = 230; break;
    case 230: 
      label = 231; break;
    case 231: 
      var $1109=$blen;
      var $1110=$n;
      var $1111=((($1109)+($1110))|0);
      var $1112=$bsiz;
      var $1113=(($1111)|(0)) >= (($1112)|(0));
      if ($1113) { label = 232; break; } else { label = 233; break; }
    case 232: 
      var $1115=$bsiz;
      var $1116=($1115<<1);
      $bsiz=$1116;
      label = 231; break;
    case 233: 
      var $1118=$1;
      var $1119=$bsiz;
      _mrb_str_resize($61, $1118, $result, $1119);
      var $1120=(($result)|0);
      var $1121=$1120;
      var $1122=HEAP32[(($1121)>>2)];
      var $1123=$1122;
      var $1124=(($1123+20)|0);
      var $1125=HEAP32[(($1124)>>2)];
      $buf=$1125;
      label = 234; break;
    case 234: 
      var $1127=$c;
      var $1128=(($1127) & 255);
      var $1129=$blen;
      var $1130=$buf;
      var $1131=(($1130+$1129)|0);
      HEAP8[($1131)]=$1128;
      var $1132=$n;
      var $1133=$blen;
      var $1134=((($1133)+($1132))|0);
      $blen=$1134;
      label = 263; break;
    case 235: 
      var $1136=$flags;
      var $1137=$1136 & 2;
      var $1138=(($1137)|(0))!=0;
      if ($1138) { label = 236; break; } else { label = 249; break; }
    case 236: 
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      var $1142=$blen;
      var $1143=$n;
      var $1144=((($1142)+($1143))|0);
      var $1145=$bsiz;
      var $1146=(($1144)|(0)) >= (($1145)|(0));
      if ($1146) { label = 239; break; } else { label = 240; break; }
    case 239: 
      var $1148=$bsiz;
      var $1149=($1148<<1);
      $bsiz=$1149;
      label = 238; break;
    case 240: 
      var $1151=$1;
      var $1152=$bsiz;
      _mrb_str_resize($62, $1151, $result, $1152);
      var $1153=(($result)|0);
      var $1154=$1153;
      var $1155=HEAP32[(($1154)>>2)];
      var $1156=$1155;
      var $1157=(($1156+20)|0);
      var $1158=HEAP32[(($1157)>>2)];
      $buf=$1158;
      label = 241; break;
    case 241: 
      var $1160=$c;
      var $1161=(($1160) & 255);
      var $1162=$blen;
      var $1163=$buf;
      var $1164=(($1163+$1162)|0);
      HEAP8[($1164)]=$1161;
      var $1165=$n;
      var $1166=$blen;
      var $1167=((($1166)+($1165))|0);
      $blen=$1167;
      label = 242; break;
    case 242: 
      label = 243; break;
    case 243: 
      label = 244; break;
    case 244: 
      var $1171=$blen;
      var $1172=$width;
      var $1173=((($1172)-(1))|0);
      var $1174=((($1171)+($1173))|0);
      var $1175=$bsiz;
      var $1176=(($1174)|(0)) >= (($1175)|(0));
      if ($1176) { label = 245; break; } else { label = 246; break; }
    case 245: 
      var $1178=$bsiz;
      var $1179=($1178<<1);
      $bsiz=$1179;
      label = 244; break;
    case 246: 
      var $1181=$1;
      var $1182=$bsiz;
      _mrb_str_resize($63, $1181, $result, $1182);
      var $1183=(($result)|0);
      var $1184=$1183;
      var $1185=HEAP32[(($1184)>>2)];
      var $1186=$1185;
      var $1187=(($1186+20)|0);
      var $1188=HEAP32[(($1187)>>2)];
      $buf=$1188;
      label = 247; break;
    case 247: 
      var $1190=$blen;
      var $1191=$buf;
      var $1192=(($1191+$1190)|0);
      var $1193=$width;
      var $1194=((($1193)-(1))|0);
      _memset($1192, 32, $1194);
      var $1195=$width;
      var $1196=((($1195)-(1))|0);
      var $1197=$blen;
      var $1198=((($1197)+($1196))|0);
      $blen=$1198;
      label = 248; break;
    case 248: 
      label = 262; break;
    case 249: 
      label = 250; break;
    case 250: 
      label = 251; break;
    case 251: 
      label = 252; break;
    case 252: 
      var $1204=$blen;
      var $1205=$width;
      var $1206=((($1205)-(1))|0);
      var $1207=((($1204)+($1206))|0);
      var $1208=$bsiz;
      var $1209=(($1207)|(0)) >= (($1208)|(0));
      if ($1209) { label = 253; break; } else { label = 254; break; }
    case 253: 
      var $1211=$bsiz;
      var $1212=($1211<<1);
      $bsiz=$1212;
      label = 252; break;
    case 254: 
      var $1214=$1;
      var $1215=$bsiz;
      _mrb_str_resize($64, $1214, $result, $1215);
      var $1216=(($result)|0);
      var $1217=$1216;
      var $1218=HEAP32[(($1217)>>2)];
      var $1219=$1218;
      var $1220=(($1219+20)|0);
      var $1221=HEAP32[(($1220)>>2)];
      $buf=$1221;
      label = 255; break;
    case 255: 
      var $1223=$blen;
      var $1224=$buf;
      var $1225=(($1224+$1223)|0);
      var $1226=$width;
      var $1227=((($1226)-(1))|0);
      _memset($1225, 32, $1227);
      var $1228=$width;
      var $1229=((($1228)-(1))|0);
      var $1230=$blen;
      var $1231=((($1230)+($1229))|0);
      $blen=$1231;
      label = 256; break;
    case 256: 
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      var $1235=$blen;
      var $1236=$n;
      var $1237=((($1235)+($1236))|0);
      var $1238=$bsiz;
      var $1239=(($1237)|(0)) >= (($1238)|(0));
      if ($1239) { label = 259; break; } else { label = 260; break; }
    case 259: 
      var $1241=$bsiz;
      var $1242=($1241<<1);
      $bsiz=$1242;
      label = 258; break;
    case 260: 
      var $1244=$1;
      var $1245=$bsiz;
      _mrb_str_resize($65, $1244, $result, $1245);
      var $1246=(($result)|0);
      var $1247=$1246;
      var $1248=HEAP32[(($1247)>>2)];
      var $1249=$1248;
      var $1250=(($1249+20)|0);
      var $1251=HEAP32[(($1250)>>2)];
      $buf=$1251;
      label = 261; break;
    case 261: 
      var $1253=$c;
      var $1254=(($1253) & 255);
      var $1255=$blen;
      var $1256=$buf;
      var $1257=(($1256+$1255)|0);
      HEAP8[($1257)]=$1254;
      var $1258=$n;
      var $1259=$blen;
      var $1260=((($1259)+($1258))|0);
      $blen=$1260;
      label = 262; break;
    case 262: 
      label = 263; break;
    case 263: 
      label = 581; break;
    case 264: 
      label = 265; break;
    case 265: 
      var $1265=(($nextvalue+8)|0);
      var $1266=HEAP32[(($1265)>>2)];
      var $1267=(($1266)|(0))==5;
      if ($1267) { label = 267; break; } else { label = 266; break; }
    case 266: 
      var $1269=$arg;
      var $1270=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($1269)>>2)]=HEAP32[(($1270)>>2)];HEAP32[((($1269)+(4))>>2)]=HEAP32[((($1270)+(4))>>2)];HEAP32[((($1269)+(8))>>2)]=HEAP32[((($1270)+(8))>>2)];
      label = 277; break;
    case 267: 
      var $1272=$posarg;
      var $1273=(($1272)|(0))==-1;
      if ($1273) { label = 268; break; } else { label = 269; break; }
    case 268: 
      var $1275=$1;
      var $1276=$1;
      var $1277=_mrb_class_get($1276, ((112960)|0));
      var $1278=$nextarg;
      _mrb_fixnum_value1530($66, $1278);
      _mrb_raisef($1275, $1277, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($66)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($66)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($66)+(8))>>2)],tempInt));
      _mrb_undef_value1529($arg);
      label = 276; break;
    case 269: 
      var $1280=$posarg;
      var $1281=(($1280)|(0))==-2;
      if ($1281) { label = 270; break; } else { label = 271; break; }
    case 270: 
      var $1283=$1;
      var $1284=$1;
      var $1285=_mrb_class_get($1284, ((112960)|0));
      var $1286=$nextarg;
      _mrb_fixnum_value1530($67, $1286);
      _mrb_raisef($1283, $1285, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($67)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($67)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($67)+(8))>>2)],tempInt));
      _mrb_undef_value1529($arg);
      label = 275; break;
    case 271: 
      var $1288=$nextarg;
      var $1289=((($1288)+(1))|0);
      $nextarg=$1289;
      $posarg=$1288;
      var $1290=$posarg;
      var $1291=$2;
      var $1292=(($1290)|(0)) >= (($1291)|(0));
      if ($1292) { label = 272; break; } else { label = 273; break; }
    case 272: 
      var $1294=$1;
      var $1295=$1;
      var $1296=_mrb_class_get($1295, ((112960)|0));
      _mrb_raise($1294, $1296, ((107968)|0));
      _mrb_undef_value1529($arg);
      label = 274; break;
    case 273: 
      var $1298=$posarg;
      var $1299=$3;
      var $1300=(($1299+((($1298)*(12))&-1))|0);
      var $1301=$arg;
      var $1302=$1300;
      assert(12 % 1 === 0);HEAP32[(($1301)>>2)]=HEAP32[(($1302)>>2)];HEAP32[((($1301)+(4))>>2)]=HEAP32[((($1302)+(4))>>2)];HEAP32[((($1301)+(8))>>2)]=HEAP32[((($1302)+(8))>>2)];
      label = 274; break;
    case 274: 
      label = 275; break;
    case 275: 
      label = 276; break;
    case 276: 
      label = 277; break;
    case 277: 
      var $1307=$p;
      var $1308=HEAP8[($1307)];
      var $1309=(($1308 << 24) >> 24);
      var $1310=(($1309)|(0))==112;
      if ($1310) { label = 278; break; } else { label = 279; break; }
    case 278: 
      var $1312=$1;
      _mrb_inspect($68, $1312, $arg);
      var $1313=$arg;
      var $1314=$68;
      assert(12 % 1 === 0);HEAP32[(($1313)>>2)]=HEAP32[(($1314)>>2)];HEAP32[((($1313)+(4))>>2)]=HEAP32[((($1314)+(4))>>2)];HEAP32[((($1313)+(8))>>2)]=HEAP32[((($1314)+(8))>>2)];
      label = 279; break;
    case 279: 
      var $1316=$1;
      _mrb_obj_as_string($69, $1316, $arg);
      var $1317=$str;
      var $1318=$69;
      assert(12 % 1 === 0);HEAP32[(($1317)>>2)]=HEAP32[(($1318)>>2)];HEAP32[((($1317)+(4))>>2)]=HEAP32[((($1318)+(4))>>2)];HEAP32[((($1317)+(8))>>2)]=HEAP32[((($1318)+(8))>>2)];
      var $1319=(($str)|0);
      var $1320=$1319;
      var $1321=HEAP32[(($1320)>>2)];
      var $1322=$1321;
      var $1323=(($1322+12)|0);
      var $1324=HEAP32[(($1323)>>2)];
      $len=$1324;
      var $1325=$blen;
      var $1326=(($result)|0);
      var $1327=$1326;
      var $1328=HEAP32[(($1327)>>2)];
      var $1329=$1328;
      var $1330=(($1329+12)|0);
      HEAP32[(($1330)>>2)]=$1325;
      var $1331=$flags;
      var $1332=$1331 & 96;
      var $1333=(($1332)|(0))!=0;
      if ($1333) { label = 280; break; } else { label = 314; break; }
    case 280: 
      var $1335=(($str)|0);
      var $1336=$1335;
      var $1337=HEAP32[(($1336)>>2)];
      var $1338=$1337;
      var $1339=(($1338+12)|0);
      var $1340=HEAP32[(($1339)>>2)];
      $slen=$1340;
      var $1341=$slen;
      var $1342=(($1341)|(0)) < 0;
      if ($1342) { label = 281; break; } else { label = 282; break; }
    case 281: 
      var $1344=$1;
      var $1345=$1;
      var $1346=_mrb_class_get($1345, ((112960)|0));
      _mrb_raise($1344, $1346, ((105468)|0));
      label = 282; break;
    case 282: 
      var $1348=$flags;
      var $1349=$1348 & 64;
      var $1350=(($1349)|(0))!=0;
      if ($1350) { label = 283; break; } else { label = 285; break; }
    case 283: 
      var $1352=$prec;
      var $1353=$slen;
      var $1354=(($1352)|(0)) < (($1353)|(0));
      if ($1354) { label = 284; break; } else { label = 285; break; }
    case 284: 
      var $1356=(($str)|0);
      var $1357=$1356;
      var $1358=HEAP32[(($1357)>>2)];
      var $1359=$1358;
      var $1360=(($1359+20)|0);
      var $1361=HEAP32[(($1360)>>2)];
      var $1362=$prec;
      var $1363=(($1361+$1362)|0);
      $p5=$1363;
      var $1364=$prec;
      $slen=$1364;
      var $1365=$p5;
      var $1366=(($str)|0);
      var $1367=$1366;
      var $1368=HEAP32[(($1367)>>2)];
      var $1369=$1368;
      var $1370=(($1369+20)|0);
      var $1371=HEAP32[(($1370)>>2)];
      var $1372=$1365;
      var $1373=$1371;
      var $1374=((($1372)-($1373))|0);
      $len=$1374;
      label = 285; break;
    case 285: 
      var $1376=$flags;
      var $1377=$1376 & 32;
      var $1378=(($1377)|(0))!=0;
      if ($1378) { label = 286; break; } else { label = 313; break; }
    case 286: 
      var $1380=$width;
      var $1381=$slen;
      var $1382=(($1380)|(0)) > (($1381)|(0));
      if ($1382) { label = 287; break; } else { label = 313; break; }
    case 287: 
      var $1384=$slen;
      var $1385=$width;
      var $1386=((($1385)-($1384))|0);
      $width=$1386;
      var $1387=$flags;
      var $1388=$1387 & 2;
      var $1389=(($1388)|(0))!=0;
      if ($1389) { label = 297; break; } else { label = 288; break; }
    case 288: 
      label = 289; break;
    case 289: 
      label = 290; break;
    case 290: 
      var $1393=$blen;
      var $1394=$width;
      var $1395=((($1393)+($1394))|0);
      var $1396=$bsiz;
      var $1397=(($1395)|(0)) >= (($1396)|(0));
      if ($1397) { label = 291; break; } else { label = 292; break; }
    case 291: 
      var $1399=$bsiz;
      var $1400=($1399<<1);
      $bsiz=$1400;
      label = 290; break;
    case 292: 
      var $1402=$1;
      var $1403=$bsiz;
      _mrb_str_resize($70, $1402, $result, $1403);
      var $1404=(($result)|0);
      var $1405=$1404;
      var $1406=HEAP32[(($1405)>>2)];
      var $1407=$1406;
      var $1408=(($1407+20)|0);
      var $1409=HEAP32[(($1408)>>2)];
      $buf=$1409;
      label = 293; break;
    case 293: 
      label = 294; break;
    case 294: 
      var $1412=$width;
      var $1413=((($1412)-(1))|0);
      $width=$1413;
      var $1414=(($1412)|(0))!=0;
      if ($1414) { label = 295; break; } else { label = 296; break; }
    case 295: 
      var $1416=$blen;
      var $1417=((($1416)+(1))|0);
      $blen=$1417;
      var $1418=$buf;
      var $1419=(($1418+$1416)|0);
      HEAP8[($1419)]=32;
      label = 294; break;
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      var $1424=$blen;
      var $1425=$len;
      var $1426=((($1424)+($1425))|0);
      var $1427=$bsiz;
      var $1428=(($1426)|(0)) >= (($1427)|(0));
      if ($1428) { label = 300; break; } else { label = 301; break; }
    case 300: 
      var $1430=$bsiz;
      var $1431=($1430<<1);
      $bsiz=$1431;
      label = 299; break;
    case 301: 
      var $1433=$1;
      var $1434=$bsiz;
      _mrb_str_resize($71, $1433, $result, $1434);
      var $1435=(($result)|0);
      var $1436=$1435;
      var $1437=HEAP32[(($1436)>>2)];
      var $1438=$1437;
      var $1439=(($1438+20)|0);
      var $1440=HEAP32[(($1439)>>2)];
      $buf=$1440;
      label = 302; break;
    case 302: 
      var $1442=$blen;
      var $1443=$buf;
      var $1444=(($1443+$1442)|0);
      var $1445=(($str)|0);
      var $1446=$1445;
      var $1447=HEAP32[(($1446)>>2)];
      var $1448=$1447;
      var $1449=(($1448+20)|0);
      var $1450=HEAP32[(($1449)>>2)];
      var $1451=$len;
      assert($1451 % 1 === 0);_memcpy($1444, $1450, $1451);
      var $1452=$len;
      var $1453=$blen;
      var $1454=((($1453)+($1452))|0);
      $blen=$1454;
      var $1455=$flags;
      var $1456=$1455 & 2;
      var $1457=(($1456)|(0))!=0;
      if ($1457) { label = 303; break; } else { label = 312; break; }
    case 303: 
      label = 304; break;
    case 304: 
      label = 305; break;
    case 305: 
      var $1461=$blen;
      var $1462=$width;
      var $1463=((($1461)+($1462))|0);
      var $1464=$bsiz;
      var $1465=(($1463)|(0)) >= (($1464)|(0));
      if ($1465) { label = 306; break; } else { label = 307; break; }
    case 306: 
      var $1467=$bsiz;
      var $1468=($1467<<1);
      $bsiz=$1468;
      label = 305; break;
    case 307: 
      var $1470=$1;
      var $1471=$bsiz;
      _mrb_str_resize($72, $1470, $result, $1471);
      var $1472=(($result)|0);
      var $1473=$1472;
      var $1474=HEAP32[(($1473)>>2)];
      var $1475=$1474;
      var $1476=(($1475+20)|0);
      var $1477=HEAP32[(($1476)>>2)];
      $buf=$1477;
      label = 308; break;
    case 308: 
      label = 309; break;
    case 309: 
      var $1480=$width;
      var $1481=((($1480)-(1))|0);
      $width=$1481;
      var $1482=(($1480)|(0))!=0;
      if ($1482) { label = 310; break; } else { label = 311; break; }
    case 310: 
      var $1484=$blen;
      var $1485=((($1484)+(1))|0);
      $blen=$1485;
      var $1486=$buf;
      var $1487=(($1486+$1484)|0);
      HEAP8[($1487)]=32;
      label = 309; break;
    case 311: 
      label = 312; break;
    case 312: 
      label = 581; break;
    case 313: 
      label = 314; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      label = 317; break;
    case 317: 
      var $1495=$blen;
      var $1496=$len;
      var $1497=((($1495)+($1496))|0);
      var $1498=$bsiz;
      var $1499=(($1497)|(0)) >= (($1498)|(0));
      if ($1499) { label = 318; break; } else { label = 319; break; }
    case 318: 
      var $1501=$bsiz;
      var $1502=($1501<<1);
      $bsiz=$1502;
      label = 317; break;
    case 319: 
      var $1504=$1;
      var $1505=$bsiz;
      _mrb_str_resize($73, $1504, $result, $1505);
      var $1506=(($result)|0);
      var $1507=$1506;
      var $1508=HEAP32[(($1507)>>2)];
      var $1509=$1508;
      var $1510=(($1509+20)|0);
      var $1511=HEAP32[(($1510)>>2)];
      $buf=$1511;
      label = 320; break;
    case 320: 
      var $1513=$blen;
      var $1514=$buf;
      var $1515=(($1514+$1513)|0);
      var $1516=(($str)|0);
      var $1517=$1516;
      var $1518=HEAP32[(($1517)>>2)];
      var $1519=$1518;
      var $1520=(($1519+20)|0);
      var $1521=HEAP32[(($1520)>>2)];
      var $1522=$len;
      assert($1522 % 1 === 0);_memcpy($1515, $1521, $1522);
      var $1523=$len;
      var $1524=$blen;
      var $1525=((($1524)+($1523))|0);
      $blen=$1525;
      label = 321; break;
    case 321: 
      label = 581; break;
    case 322: 
      var $1528=(($nextvalue+8)|0);
      var $1529=HEAP32[(($1528)>>2)];
      var $1530=(($1529)|(0))==5;
      if ($1530) { label = 324; break; } else { label = 323; break; }
    case 323: 
      var $1532=$val6;
      var $1533=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($1532)>>2)]=HEAP32[(($1533)>>2)];HEAP32[((($1532)+(4))>>2)]=HEAP32[((($1533)+(4))>>2)];HEAP32[((($1532)+(8))>>2)]=HEAP32[((($1533)+(8))>>2)];
      label = 334; break;
    case 324: 
      var $1535=$posarg;
      var $1536=(($1535)|(0))==-1;
      if ($1536) { label = 325; break; } else { label = 326; break; }
    case 325: 
      var $1538=$1;
      var $1539=$1;
      var $1540=_mrb_class_get($1539, ((112960)|0));
      var $1541=$nextarg;
      _mrb_fixnum_value1530($74, $1541);
      _mrb_raisef($1538, $1540, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($74)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($74)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($74)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val6);
      label = 333; break;
    case 326: 
      var $1543=$posarg;
      var $1544=(($1543)|(0))==-2;
      if ($1544) { label = 327; break; } else { label = 328; break; }
    case 327: 
      var $1546=$1;
      var $1547=$1;
      var $1548=_mrb_class_get($1547, ((112960)|0));
      var $1549=$nextarg;
      _mrb_fixnum_value1530($75, $1549);
      _mrb_raisef($1546, $1548, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($75)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($75)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($75)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val6);
      label = 332; break;
    case 328: 
      var $1551=$nextarg;
      var $1552=((($1551)+(1))|0);
      $nextarg=$1552;
      $posarg=$1551;
      var $1553=$posarg;
      var $1554=$2;
      var $1555=(($1553)|(0)) >= (($1554)|(0));
      if ($1555) { label = 329; break; } else { label = 330; break; }
    case 329: 
      var $1557=$1;
      var $1558=$1;
      var $1559=_mrb_class_get($1558, ((112960)|0));
      _mrb_raise($1557, $1559, ((107968)|0));
      _mrb_undef_value1529($val6);
      label = 331; break;
    case 330: 
      var $1561=$posarg;
      var $1562=$3;
      var $1563=(($1562+((($1561)*(12))&-1))|0);
      var $1564=$val6;
      var $1565=$1563;
      assert(12 % 1 === 0);HEAP32[(($1564)>>2)]=HEAP32[(($1565)>>2)];HEAP32[((($1564)+(4))>>2)]=HEAP32[((($1565)+(4))>>2)];HEAP32[((($1564)+(8))>>2)]=HEAP32[((($1565)+(8))>>2)];
      label = 331; break;
    case 331: 
      label = 332; break;
    case 332: 
      label = 333; break;
    case 333: 
      label = 334; break;
    case 334: 
      $prefix=0;
      $sign=0;
      $dots=0;
      HEAP8[($sc)]=0;
      $v=0;
      $org_v=0;
      var $1570=$p;
      var $1571=HEAP8[($1570)];
      var $1572=(($1571 << 24) >> 24);
      if ((($1572)|(0))==100 | (($1572)|(0))==105 | (($1572)|(0))==117) {
        label = 335; break;
      }
      else if ((($1572)|(0))==111 | (($1572)|(0))==120 | (($1572)|(0))==88 | (($1572)|(0))==98 | (($1572)|(0))==66) {
        label = 336; break;
      }
      else {
      label = 339; break;
      }
    case 335: 
      $sign=1;
      label = 340; break;
    case 336: 
      var $1575=$flags;
      var $1576=$1575 & 20;
      var $1577=(($1576)|(0))!=0;
      if ($1577) { label = 337; break; } else { label = 338; break; }
    case 337: 
      $sign=1;
      label = 338; break;
    case 338: 
      label = 340; break;
    case 339: 
      label = 340; break;
    case 340: 
      var $1582=$flags;
      var $1583=$1582 & 1;
      var $1584=(($1583)|(0))!=0;
      if ($1584) { label = 341; break; } else { label = 349; break; }
    case 341: 
      var $1586=$p;
      var $1587=HEAP8[($1586)];
      var $1588=(($1587 << 24) >> 24);
      if ((($1588)|(0))==111) {
        label = 342; break;
      }
      else if ((($1588)|(0))==120) {
        label = 343; break;
      }
      else if ((($1588)|(0))==88) {
        label = 344; break;
      }
      else if ((($1588)|(0))==98) {
        label = 345; break;
      }
      else if ((($1588)|(0))==66) {
        label = 346; break;
      }
      else {
      label = 347; break;
      }
    case 342: 
      $prefix=((105184)|0);
      label = 348; break;
    case 343: 
      $prefix=((104868)|0);
      label = 348; break;
    case 344: 
      $prefix=((104592)|0);
      label = 348; break;
    case 345: 
      $prefix=((103992)|0);
      label = 348; break;
    case 346: 
      $prefix=((103788)|0);
      label = 348; break;
    case 347: 
      label = 348; break;
    case 348: 
      label = 349; break;
    case 349: 
      label = 350; break;
    case 350: 
      var $1598=(($val6+8)|0);
      var $1599=HEAP32[(($1598)>>2)];
      if ((($1599)|(0))==6) {
        label = 351; break;
      }
      else if ((($1599)|(0))==16) {
        label = 357; break;
      }
      else if ((($1599)|(0))==3) {
        label = 358; break;
      }
      else {
      label = 359; break;
      }
    case 351: 
      var $1601=(($val6)|0);
      var $1602=$1601;
      var $1603=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1602)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1602)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1604=$1603 <= 2147483647;
      if ($1604) { label = 352; break; } else { label = 354; break; }
    case 352: 
      var $1606=(($val6)|0);
      var $1607=$1606;
      var $1608=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1607)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1607)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1609=$1608 >= -2147483648;
      if ($1609) { label = 353; break; } else { label = 354; break; }
    case 353: 
      var $1611=(($val6)|0);
      var $1612=$1611;
      var $1613=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($1612)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($1612)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $1614=(($1613)&-1);
      _mrb_fixnum_value1530($76, $1614);
      var $1615=$val6;
      var $1616=$76;
      assert(12 % 1 === 0);HEAP32[(($1615)>>2)]=HEAP32[(($1616)>>2)];HEAP32[((($1615)+(4))>>2)]=HEAP32[((($1616)+(4))>>2)];HEAP32[((($1615)+(8))>>2)]=HEAP32[((($1616)+(8))>>2)];
      label = 350; break;
    case 354: 
      var $1618=$1;
      _mrb_flo_to_fixnum($77, $1618, $val6);
      var $1619=$val6;
      var $1620=$77;
      assert(12 % 1 === 0);HEAP32[(($1619)>>2)]=HEAP32[(($1620)>>2)];HEAP32[((($1619)+(4))>>2)]=HEAP32[((($1620)+(4))>>2)];HEAP32[((($1619)+(8))>>2)]=HEAP32[((($1620)+(8))>>2)];
      var $1621=(($val6+8)|0);
      var $1622=HEAP32[(($1621)>>2)];
      var $1623=(($1622)|(0))==3;
      if ($1623) { label = 355; break; } else { label = 356; break; }
    case 355: 
      label = 350; break;
    case 356: 
      label = 360; break;
    case 357: 
      var $1627=$1;
      _mrb_str_to_inum($78, $1627, $val6, 0, 1);
      var $1628=$val6;
      var $1629=$78;
      assert(12 % 1 === 0);HEAP32[(($1628)>>2)]=HEAP32[(($1629)>>2)];HEAP32[((($1628)+(4))>>2)]=HEAP32[((($1629)+(4))>>2)];HEAP32[((($1628)+(8))>>2)]=HEAP32[((($1629)+(8))>>2)];
      label = 350; break;
    case 358: 
      var $1631=(($val6)|0);
      var $1632=$1631;
      var $1633=HEAP32[(($1632)>>2)];
      $v=$1633;
      label = 360; break;
    case 359: 
      var $1635=$1;
      _mrb_Integer($79, $1635, $val6);
      var $1636=$val6;
      var $1637=$79;
      assert(12 % 1 === 0);HEAP32[(($1636)>>2)]=HEAP32[(($1637)>>2)];HEAP32[((($1636)+(4))>>2)]=HEAP32[((($1637)+(4))>>2)];HEAP32[((($1636)+(8))>>2)]=HEAP32[((($1637)+(8))>>2)];
      label = 350; break;
    case 360: 
      var $1639=$p;
      var $1640=HEAP8[($1639)];
      var $1641=(($1640 << 24) >> 24);
      if ((($1641)|(0))==111) {
        label = 361; break;
      }
      else if ((($1641)|(0))==120 | (($1641)|(0))==88) {
        label = 362; break;
      }
      else if ((($1641)|(0))==98 | (($1641)|(0))==66) {
        label = 363; break;
      }
      else if ((($1641)|(0))==117 | (($1641)|(0))==100 | (($1641)|(0))==105) {
        label = 364; break;
      }
      else {
      label = 365; break;
      }
    case 361: 
      $base=8;
      label = 366; break;
    case 362: 
      $base=16;
      label = 366; break;
    case 363: 
      $base=2;
      label = 366; break;
    case 364: 
      label = 365; break;
    case 365: 
      $base=10;
      label = 366; break;
    case 366: 
      var $1648=$base;
      var $1649=(($1648)|(0))==2;
      if ($1649) { label = 367; break; } else { label = 372; break; }
    case 367: 
      var $1651=$v;
      $org_v=$1651;
      var $1652=$v;
      var $1653=(($1652)|(0)) < 0;
      if ($1653) { label = 368; break; } else { label = 370; break; }
    case 368: 
      var $1655=$sign;
      var $1656=(($1655)|(0))!=0;
      if ($1656) { label = 370; break; } else { label = 369; break; }
    case 369: 
      var $1658=$1;
      var $1659=$v;
      _mrb_fixnum_value1530($80, $1659);
      var $1660=$base;
      _mrb_fix2binstr($81, $1658, $80, $1660);
      var $1661=$val6;
      var $1662=$81;
      assert(12 % 1 === 0);HEAP32[(($1661)>>2)]=HEAP32[(($1662)>>2)];HEAP32[((($1661)+(4))>>2)]=HEAP32[((($1662)+(4))>>2)];HEAP32[((($1661)+(8))>>2)]=HEAP32[((($1662)+(8))>>2)];
      $dots=1;
      label = 371; break;
    case 370: 
      var $1664=$1;
      var $1665=$v;
      _mrb_fixnum_value1530($82, $1665);
      var $1666=$base;
      _mrb_fixnum_to_str($83, $1664, $82, $1666);
      var $1667=$val6;
      var $1668=$83;
      assert(12 % 1 === 0);HEAP32[(($1667)>>2)]=HEAP32[(($1668)>>2)];HEAP32[((($1667)+(4))>>2)]=HEAP32[((($1668)+(4))>>2)];HEAP32[((($1667)+(8))>>2)]=HEAP32[((($1668)+(8))>>2)];
      label = 371; break;
    case 371: 
      var $1670=$1;
      _mrb_str_to_inum($84, $1670, $val6, 10, 0);
      var $1671=(($84)|0);
      var $1672=$1671;
      var $1673=HEAP32[(($1672)>>2)];
      $v=$1673;
      label = 372; break;
    case 372: 
      var $1675=$sign;
      var $1676=(($1675)|(0))!=0;
      if ($1676) { label = 373; break; } else { label = 386; break; }
    case 373: 
      var $1678=$p;
      var $1679=HEAP8[($1678)];
      $c8=$1679;
      var $1680=$c8;
      var $1681=(($1680 << 24) >> 24);
      var $1682=(($1681)|(0))==105;
      if ($1682) { label = 374; break; } else { label = 375; break; }
    case 374: 
      $c8=100;
      label = 375; break;
    case 375: 
      var $1685=$base;
      var $1686=(($1685)|(0))==2;
      if ($1686) { label = 376; break; } else { label = 377; break; }
    case 376: 
      $c8=100;
      label = 377; break;
    case 377: 
      var $1689=$v;
      var $1690=(($1689)|(0)) < 0;
      if ($1690) { label = 378; break; } else { label = 379; break; }
    case 378: 
      var $1692=$v;
      var $1693=(((-$1692))|0);
      $v=$1693;
      HEAP8[($sc)]=45;
      var $1694=$width;
      var $1695=((($1694)-(1))|0);
      $width=$1695;
      label = 385; break;
    case 379: 
      var $1697=$flags;
      var $1698=$1697 & 4;
      var $1699=(($1698)|(0))!=0;
      if ($1699) { label = 380; break; } else { label = 381; break; }
    case 380: 
      HEAP8[($sc)]=43;
      var $1701=$width;
      var $1702=((($1701)-(1))|0);
      $width=$1702;
      label = 384; break;
    case 381: 
      var $1704=$flags;
      var $1705=$1704 & 16;
      var $1706=(($1705)|(0))!=0;
      if ($1706) { label = 382; break; } else { label = 383; break; }
    case 382: 
      HEAP8[($sc)]=32;
      var $1708=$width;
      var $1709=((($1708)-(1))|0);
      $width=$1709;
      label = 383; break;
    case 383: 
      label = 384; break;
    case 384: 
      label = 385; break;
    case 385: 
      var $1713=(($fbuf)|0);
      var $1714=$c8;
      var $1715=(($1714 << 24) >> 24);
      var $1716=_snprintf($1713, 32, ((103572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1715,tempInt));
      var $1717=(($nbuf)|0);
      var $1718=(($fbuf)|0);
      var $1719=$v;
      var $1720=_snprintf($1717, 64, $1718, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1719,tempInt));
      var $1721=(($nbuf)|0);
      $s=$1721;
      label = 403; break;
    case 386: 
      var $1723=$p;
      var $1724=HEAP8[($1723)];
      $c9=$1724;
      var $1725=$c9;
      var $1726=(($1725 << 24) >> 24);
      var $1727=(($1726)|(0))==88;
      if ($1727) { label = 387; break; } else { label = 388; break; }
    case 387: 
      $c9=120;
      label = 388; break;
    case 388: 
      var $1730=$base;
      var $1731=(($1730)|(0))==2;
      if ($1731) { label = 389; break; } else { label = 390; break; }
    case 389: 
      $c9=100;
      label = 390; break;
    case 390: 
      var $1734=(($nbuf)|0);
      $s=$1734;
      var $1735=$v;
      var $1736=(($1735)|(0)) < 0;
      if ($1736) { label = 391; break; } else { label = 392; break; }
    case 391: 
      $dots=1;
      label = 392; break;
    case 392: 
      var $1739=(($fbuf)|0);
      var $1740=$c9;
      var $1741=(($1740 << 24) >> 24);
      var $1742=_snprintf($1739, 32, ((103572)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1741,tempInt));
      var $1743=$s;
      var $1744=(($1743+1)|0);
      $s=$1744;
      var $1745=(($fbuf)|0);
      var $1746=$v;
      var $1747=_snprintf($1744, 63, $1745, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$1746,tempInt));
      var $1748=$v;
      var $1749=(($1748)|(0)) < 0;
      if ($1749) { label = 393; break; } else { label = 402; break; }
    case 393: 
      var $1751=$s;
      var $1752=$base;
      var $1753=_remove_sign_bits($1751, $1752);
      $s=$1753;
      var $1754=$base;
      if ((($1754)|(0))==16) {
        label = 394; break;
      }
      else if ((($1754)|(0))==8) {
        label = 395; break;
      }
      else if ((($1754)|(0))==2) {
        label = 396; break;
      }
      else {
      label = 397; break;
      }
    case 394: 
      $d=102;
      label = 398; break;
    case 395: 
      $d=55;
      label = 398; break;
    case 396: 
      $d=49;
      label = 398; break;
    case 397: 
      $d=0;
      label = 398; break;
    case 398: 
      var $1760=$d;
      var $1761=(($1760 << 24) >> 24);
      var $1762=(($1761)|(0))!=0;
      if ($1762) { label = 399; break; } else { label = 401; break; }
    case 399: 
      var $1764=$s;
      var $1765=HEAP8[($1764)];
      var $1766=(($1765 << 24) >> 24);
      var $1767=$d;
      var $1768=(($1767 << 24) >> 24);
      var $1769=(($1766)|(0))!=(($1768)|(0));
      if ($1769) { label = 400; break; } else { label = 401; break; }
    case 400: 
      var $1771=$d;
      var $1772=$s;
      var $1773=((($1772)-(1))|0);
      $s=$1773;
      HEAP8[($1773)]=$1771;
      label = 401; break;
    case 401: 
      label = 402; break;
    case 402: 
      label = 403; break;
    case 403: 
      var $1777=$s;
      var $1778=_strlen($1777);
      $size=$1778;
      var $1779=$size;
      $len7=$1779;
      var $1780=$dots;
      var $1781=(($1780)|(0))!=0;
      if ($1781) { label = 404; break; } else { label = 405; break; }
    case 404: 
      var $1783=$prec;
      var $1784=((($1783)-(2))|0);
      $prec=$1784;
      var $1785=$width;
      var $1786=((($1785)-(2))|0);
      $width=$1786;
      label = 405; break;
    case 405: 
      var $1788=$p;
      var $1789=HEAP8[($1788)];
      var $1790=(($1789 << 24) >> 24);
      var $1791=(($1790)|(0))==88;
      if ($1791) { label = 406; break; } else { label = 410; break; }
    case 406: 
      var $1793=$s;
      $pp=$1793;
      label = 407; break;
    case 407: 
      var $1795=$pp;
      var $1796=HEAP8[($1795)];
      var $1797=(($1796)&(255));
      $c10=$1797;
      var $1798=(($1797)|(0))!=0;
      if ($1798) { label = 408; break; } else { label = 409; break; }
    case 408: 
      var $1800=$c10;
      var $1801=_toupper($1800);
      var $1802=(($1801) & 255);
      var $1803=$pp;
      HEAP8[($1803)]=$1802;
      var $1804=$pp;
      var $1805=(($1804+1)|0);
      $pp=$1805;
      label = 407; break;
    case 409: 
      label = 410; break;
    case 410: 
      var $1808=$prefix;
      var $1809=(($1808)|(0))!=0;
      if ($1809) { label = 411; break; } else { label = 425; break; }
    case 411: 
      var $1811=$prefix;
      var $1812=(($1811+1)|0);
      var $1813=HEAP8[($1812)];
      var $1814=(($1813 << 24) >> 24)!=0;
      if ($1814) { label = 425; break; } else { label = 412; break; }
    case 412: 
      var $1816=$dots;
      var $1817=(($1816)|(0))!=0;
      if ($1817) { label = 413; break; } else { label = 414; break; }
    case 413: 
      $prefix=0;
      label = 424; break;
    case 414: 
      var $1820=$len7;
      var $1821=(($1820)|(0))==1;
      if ($1821) { label = 415; break; } else { label = 419; break; }
    case 415: 
      var $1823=$s;
      var $1824=HEAP8[($1823)];
      var $1825=(($1824 << 24) >> 24);
      var $1826=(($1825)|(0))==48;
      if ($1826) { label = 416; break; } else { label = 419; break; }
    case 416: 
      $len7=0;
      var $1828=$flags;
      var $1829=$1828 & 64;
      var $1830=(($1829)|(0))!=0;
      if ($1830) { label = 417; break; } else { label = 418; break; }
    case 417: 
      var $1832=$prec;
      var $1833=((($1832)-(1))|0);
      $prec=$1833;
      label = 418; break;
    case 418: 
      label = 423; break;
    case 419: 
      var $1836=$flags;
      var $1837=$1836 & 64;
      var $1838=(($1837)|(0))!=0;
      if ($1838) { label = 420; break; } else { label = 422; break; }
    case 420: 
      var $1840=$prec;
      var $1841=$len7;
      var $1842=(($1840)|(0)) > (($1841)|(0));
      if ($1842) { label = 421; break; } else { label = 422; break; }
    case 421: 
      $prefix=0;
      label = 422; break;
    case 422: 
      label = 423; break;
    case 423: 
      label = 424; break;
    case 424: 
      label = 429; break;
    case 425: 
      var $1848=$len7;
      var $1849=(($1848)|(0))==1;
      if ($1849) { label = 426; break; } else { label = 428; break; }
    case 426: 
      var $1851=$s;
      var $1852=HEAP8[($1851)];
      var $1853=(($1852 << 24) >> 24);
      var $1854=(($1853)|(0))==48;
      if ($1854) { label = 427; break; } else { label = 428; break; }
    case 427: 
      $prefix=0;
      label = 428; break;
    case 428: 
      label = 429; break;
    case 429: 
      var $1858=$prefix;
      var $1859=(($1858)|(0))!=0;
      if ($1859) { label = 430; break; } else { label = 431; break; }
    case 430: 
      var $1861=$prefix;
      var $1862=_strlen($1861);
      $size11=$1862;
      var $1863=$size11;
      var $1864=$width;
      var $1865=((($1864)-($1863))|0);
      $width=$1865;
      label = 431; break;
    case 431: 
      var $1867=$flags;
      var $1868=$1867 & 74;
      var $1869=(($1868)|(0))==8;
      if ($1869) { label = 432; break; } else { label = 433; break; }
    case 432: 
      var $1871=$width;
      $prec=$1871;
      $width=0;
      label = 441; break;
    case 433: 
      var $1873=$prec;
      var $1874=$len7;
      var $1875=(($1873)|(0)) < (($1874)|(0));
      if ($1875) { label = 434; break; } else { label = 440; break; }
    case 434: 
      var $1877=$prefix;
      var $1878=(($1877)|(0))!=0;
      if ($1878) { label = 439; break; } else { label = 435; break; }
    case 435: 
      var $1880=$prec;
      var $1881=(($1880)|(0))==0;
      if ($1881) { label = 436; break; } else { label = 439; break; }
    case 436: 
      var $1883=$len7;
      var $1884=(($1883)|(0))==1;
      if ($1884) { label = 437; break; } else { label = 439; break; }
    case 437: 
      var $1886=$s;
      var $1887=HEAP8[($1886)];
      var $1888=(($1887 << 24) >> 24);
      var $1889=(($1888)|(0))==48;
      if ($1889) { label = 438; break; } else { label = 439; break; }
    case 438: 
      $len7=0;
      label = 439; break;
    case 439: 
      var $1892=$len7;
      $prec=$1892;
      label = 440; break;
    case 440: 
      var $1894=$prec;
      var $1895=$width;
      var $1896=((($1895)-($1894))|0);
      $width=$1896;
      label = 441; break;
    case 441: 
      var $1898=$flags;
      var $1899=$1898 & 2;
      var $1900=(($1899)|(0))!=0;
      if ($1900) { label = 451; break; } else { label = 442; break; }
    case 442: 
      label = 443; break;
    case 443: 
      label = 444; break;
    case 444: 
      var $1904=$blen;
      var $1905=$width;
      var $1906=((($1904)+($1905))|0);
      var $1907=$bsiz;
      var $1908=(($1906)|(0)) >= (($1907)|(0));
      if ($1908) { label = 445; break; } else { label = 446; break; }
    case 445: 
      var $1910=$bsiz;
      var $1911=($1910<<1);
      $bsiz=$1911;
      label = 444; break;
    case 446: 
      var $1913=$1;
      var $1914=$bsiz;
      _mrb_str_resize($85, $1913, $result, $1914);
      var $1915=(($result)|0);
      var $1916=$1915;
      var $1917=HEAP32[(($1916)>>2)];
      var $1918=$1917;
      var $1919=(($1918+20)|0);
      var $1920=HEAP32[(($1919)>>2)];
      $buf=$1920;
      label = 447; break;
    case 447: 
      label = 448; break;
    case 448: 
      var $1923=$width;
      var $1924=((($1923)-(1))|0);
      $width=$1924;
      var $1925=(($1923)|(0)) > 0;
      if ($1925) { label = 449; break; } else { label = 450; break; }
    case 449: 
      var $1927=$blen;
      var $1928=((($1927)+(1))|0);
      $blen=$1928;
      var $1929=$buf;
      var $1930=(($1929+$1927)|0);
      HEAP8[($1930)]=32;
      label = 448; break;
    case 450: 
      label = 451; break;
    case 451: 
      var $1933=HEAP8[($sc)];
      var $1934=(($1933 << 24) >> 24)!=0;
      if ($1934) { label = 452; break; } else { label = 460; break; }
    case 452: 
      label = 453; break;
    case 453: 
      label = 454; break;
    case 454: 
      label = 455; break;
    case 455: 
      var $1939=$blen;
      var $1940=((($1939)+(1))|0);
      var $1941=$bsiz;
      var $1942=(($1940)|(0)) >= (($1941)|(0));
      if ($1942) { label = 456; break; } else { label = 457; break; }
    case 456: 
      var $1944=$bsiz;
      var $1945=($1944<<1);
      $bsiz=$1945;
      label = 455; break;
    case 457: 
      var $1947=$1;
      var $1948=$bsiz;
      _mrb_str_resize($86, $1947, $result, $1948);
      var $1949=(($result)|0);
      var $1950=$1949;
      var $1951=HEAP32[(($1950)>>2)];
      var $1952=$1951;
      var $1953=(($1952+20)|0);
      var $1954=HEAP32[(($1953)>>2)];
      $buf=$1954;
      label = 458; break;
    case 458: 
      var $1956=$blen;
      var $1957=$buf;
      var $1958=(($1957+$1956)|0);
      assert(1 % 1 === 0);HEAP8[($1958)]=HEAP8[($sc)];
      var $1959=$blen;
      var $1960=((($1959)+(1))|0);
      $blen=$1960;
      label = 459; break;
    case 459: 
      label = 460; break;
    case 460: 
      var $1963=$prefix;
      var $1964=(($1963)|(0))!=0;
      if ($1964) { label = 461; break; } else { label = 469; break; }
    case 461: 
      var $1966=$prefix;
      var $1967=_strlen($1966);
      $plen=$1967;
      label = 462; break;
    case 462: 
      label = 463; break;
    case 463: 
      label = 464; break;
    case 464: 
      var $1971=$blen;
      var $1972=$plen;
      var $1973=((($1971)+($1972))|0);
      var $1974=$bsiz;
      var $1975=(($1973)|(0)) >= (($1974)|(0));
      if ($1975) { label = 465; break; } else { label = 466; break; }
    case 465: 
      var $1977=$bsiz;
      var $1978=($1977<<1);
      $bsiz=$1978;
      label = 464; break;
    case 466: 
      var $1980=$1;
      var $1981=$bsiz;
      _mrb_str_resize($87, $1980, $result, $1981);
      var $1982=(($result)|0);
      var $1983=$1982;
      var $1984=HEAP32[(($1983)>>2)];
      var $1985=$1984;
      var $1986=(($1985+20)|0);
      var $1987=HEAP32[(($1986)>>2)];
      $buf=$1987;
      label = 467; break;
    case 467: 
      var $1989=$blen;
      var $1990=$buf;
      var $1991=(($1990+$1989)|0);
      var $1992=$prefix;
      var $1993=$plen;
      assert($1993 % 1 === 0);_memcpy($1991, $1992, $1993);
      var $1994=$plen;
      var $1995=$blen;
      var $1996=((($1995)+($1994))|0);
      $blen=$1996;
      label = 468; break;
    case 468: 
      label = 469; break;
    case 469: 
      label = 470; break;
    case 470: 
      label = 471; break;
    case 471: 
      var $2001=$blen;
      var $2002=$prec;
      var $2003=$len7;
      var $2004=((($2002)-($2003))|0);
      var $2005=((($2001)+($2004))|0);
      var $2006=$bsiz;
      var $2007=(($2005)|(0)) >= (($2006)|(0));
      if ($2007) { label = 472; break; } else { label = 473; break; }
    case 472: 
      var $2009=$bsiz;
      var $2010=($2009<<1);
      $bsiz=$2010;
      label = 471; break;
    case 473: 
      var $2012=$1;
      var $2013=$bsiz;
      _mrb_str_resize($88, $2012, $result, $2013);
      var $2014=(($result)|0);
      var $2015=$2014;
      var $2016=HEAP32[(($2015)>>2)];
      var $2017=$2016;
      var $2018=(($2017+20)|0);
      var $2019=HEAP32[(($2018)>>2)];
      $buf=$2019;
      label = 474; break;
    case 474: 
      var $2021=$dots;
      var $2022=(($2021)|(0))!=0;
      if ($2022) { label = 475; break; } else { label = 483; break; }
    case 475: 
      label = 476; break;
    case 476: 
      label = 477; break;
    case 477: 
      label = 478; break;
    case 478: 
      var $2027=$blen;
      var $2028=((($2027)+(2))|0);
      var $2029=$bsiz;
      var $2030=(($2028)|(0)) >= (($2029)|(0));
      if ($2030) { label = 479; break; } else { label = 480; break; }
    case 479: 
      var $2032=$bsiz;
      var $2033=($2032<<1);
      $bsiz=$2033;
      label = 478; break;
    case 480: 
      var $2035=$1;
      var $2036=$bsiz;
      _mrb_str_resize($89, $2035, $result, $2036);
      var $2037=(($result)|0);
      var $2038=$2037;
      var $2039=HEAP32[(($2038)>>2)];
      var $2040=$2039;
      var $2041=(($2040+20)|0);
      var $2042=HEAP32[(($2041)>>2)];
      $buf=$2042;
      label = 481; break;
    case 481: 
      var $2044=$blen;
      var $2045=$buf;
      var $2046=(($2045+$2044)|0);
      assert(2 % 1 === 0);HEAP8[($2046)]=HEAP8[((((103364)|0))|0)];HEAP8[((($2046)+(1))|0)]=HEAP8[(((((103364)|0))+(1))|0)];
      var $2047=$blen;
      var $2048=((($2047)+(2))|0);
      $blen=$2048;
      label = 482; break;
    case 482: 
      label = 483; break;
    case 483: 
      var $2051=$v;
      var $2052=(($2051)|(0)) < 0;
      if ($2052) { label = 486; break; } else { label = 484; break; }
    case 484: 
      var $2054=$base;
      var $2055=(($2054)|(0))==2;
      if ($2055) { label = 485; break; } else { label = 490; break; }
    case 485: 
      var $2057=$org_v;
      var $2058=(($2057)|(0)) < 0;
      if ($2058) { label = 486; break; } else { label = 490; break; }
    case 486: 
      var $2060=$base;
      var $2061=$p;
      var $2062=_sign_bits($2060, $2061);
      $c12=$2062;
      label = 487; break;
    case 487: 
      var $2064=$len7;
      var $2065=$prec;
      var $2066=((($2065)-(1))|0);
      $prec=$2066;
      var $2067=(($2064)|(0)) < (($2065)|(0));
      if ($2067) { label = 488; break; } else { label = 489; break; }
    case 488: 
      var $2069=$c12;
      var $2070=$blen;
      var $2071=((($2070)+(1))|0);
      $blen=$2071;
      var $2072=$buf;
      var $2073=(($2072+$2070)|0);
      HEAP8[($2073)]=$2069;
      label = 487; break;
    case 489: 
      label = 496; break;
    case 490: 
      var $2076=$flags;
      var $2077=$2076 & 66;
      var $2078=(($2077)|(0))!=2;
      if ($2078) { label = 491; break; } else { label = 495; break; }
    case 491: 
      $c13=48;
      label = 492; break;
    case 492: 
      var $2081=$len7;
      var $2082=$prec;
      var $2083=((($2082)-(1))|0);
      $prec=$2083;
      var $2084=(($2081)|(0)) < (($2082)|(0));
      if ($2084) { label = 493; break; } else { label = 494; break; }
    case 493: 
      var $2086=$c13;
      var $2087=$blen;
      var $2088=((($2087)+(1))|0);
      $blen=$2088;
      var $2089=$buf;
      var $2090=(($2089+$2087)|0);
      HEAP8[($2090)]=$2086;
      label = 492; break;
    case 494: 
      label = 495; break;
    case 495: 
      label = 496; break;
    case 496: 
      label = 497; break;
    case 497: 
      label = 498; break;
    case 498: 
      label = 499; break;
    case 499: 
      var $2097=$blen;
      var $2098=$len7;
      var $2099=((($2097)+($2098))|0);
      var $2100=$bsiz;
      var $2101=(($2099)|(0)) >= (($2100)|(0));
      if ($2101) { label = 500; break; } else { label = 501; break; }
    case 500: 
      var $2103=$bsiz;
      var $2104=($2103<<1);
      $bsiz=$2104;
      label = 499; break;
    case 501: 
      var $2106=$1;
      var $2107=$bsiz;
      _mrb_str_resize($90, $2106, $result, $2107);
      var $2108=(($result)|0);
      var $2109=$2108;
      var $2110=HEAP32[(($2109)>>2)];
      var $2111=$2110;
      var $2112=(($2111+20)|0);
      var $2113=HEAP32[(($2112)>>2)];
      $buf=$2113;
      label = 502; break;
    case 502: 
      var $2115=$blen;
      var $2116=$buf;
      var $2117=(($2116+$2115)|0);
      var $2118=$s;
      var $2119=$len7;
      assert($2119 % 1 === 0);_memcpy($2117, $2118, $2119);
      var $2120=$len7;
      var $2121=$blen;
      var $2122=((($2121)+($2120))|0);
      $blen=$2122;
      label = 503; break;
    case 503: 
      label = 504; break;
    case 504: 
      label = 505; break;
    case 505: 
      var $2126=$blen;
      var $2127=$width;
      var $2128=((($2126)+($2127))|0);
      var $2129=$bsiz;
      var $2130=(($2128)|(0)) >= (($2129)|(0));
      if ($2130) { label = 506; break; } else { label = 507; break; }
    case 506: 
      var $2132=$bsiz;
      var $2133=($2132<<1);
      $bsiz=$2133;
      label = 505; break;
    case 507: 
      var $2135=$1;
      var $2136=$bsiz;
      _mrb_str_resize($91, $2135, $result, $2136);
      var $2137=(($result)|0);
      var $2138=$2137;
      var $2139=HEAP32[(($2138)>>2)];
      var $2140=$2139;
      var $2141=(($2140+20)|0);
      var $2142=HEAP32[(($2141)>>2)];
      $buf=$2142;
      label = 508; break;
    case 508: 
      label = 509; break;
    case 509: 
      var $2145=$width;
      var $2146=((($2145)-(1))|0);
      $width=$2146;
      var $2147=(($2145)|(0)) > 0;
      if ($2147) { label = 510; break; } else { label = 511; break; }
    case 510: 
      var $2149=$blen;
      var $2150=((($2149)+(1))|0);
      $blen=$2150;
      var $2151=$buf;
      var $2152=(($2151+$2149)|0);
      HEAP8[($2152)]=32;
      label = 509; break;
    case 511: 
      label = 581; break;
    case 512: 
      var $2155=(($nextvalue+8)|0);
      var $2156=HEAP32[(($2155)>>2)];
      var $2157=(($2156)|(0))==5;
      if ($2157) { label = 514; break; } else { label = 513; break; }
    case 513: 
      var $2159=$val14;
      var $2160=$nextvalue;
      assert(12 % 1 === 0);HEAP32[(($2159)>>2)]=HEAP32[(($2160)>>2)];HEAP32[((($2159)+(4))>>2)]=HEAP32[((($2160)+(4))>>2)];HEAP32[((($2159)+(8))>>2)]=HEAP32[((($2160)+(8))>>2)];
      label = 524; break;
    case 514: 
      var $2162=$posarg;
      var $2163=(($2162)|(0))==-1;
      if ($2163) { label = 515; break; } else { label = 516; break; }
    case 515: 
      var $2165=$1;
      var $2166=$1;
      var $2167=_mrb_class_get($2166, ((112960)|0));
      var $2168=$nextarg;
      _mrb_fixnum_value1530($92, $2168);
      _mrb_raisef($2165, $2167, ((108484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($92)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($92)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($92)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val14);
      label = 523; break;
    case 516: 
      var $2170=$posarg;
      var $2171=(($2170)|(0))==-2;
      if ($2171) { label = 517; break; } else { label = 518; break; }
    case 517: 
      var $2173=$1;
      var $2174=$1;
      var $2175=_mrb_class_get($2174, ((112960)|0));
      var $2176=$nextarg;
      _mrb_fixnum_value1530($93, $2176);
      _mrb_raisef($2173, $2175, ((108156)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($93)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($93)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($93)+(8))>>2)],tempInt));
      _mrb_undef_value1529($val14);
      label = 522; break;
    case 518: 
      var $2178=$nextarg;
      var $2179=((($2178)+(1))|0);
      $nextarg=$2179;
      $posarg=$2178;
      var $2180=$posarg;
      var $2181=$2;
      var $2182=(($2180)|(0)) >= (($2181)|(0));
      if ($2182) { label = 519; break; } else { label = 520; break; }
    case 519: 
      var $2184=$1;
      var $2185=$1;
      var $2186=_mrb_class_get($2185, ((112960)|0));
      _mrb_raise($2184, $2186, ((107968)|0));
      _mrb_undef_value1529($val14);
      label = 521; break;
    case 520: 
      var $2188=$posarg;
      var $2189=$3;
      var $2190=(($2189+((($2188)*(12))&-1))|0);
      var $2191=$val14;
      var $2192=$2190;
      assert(12 % 1 === 0);HEAP32[(($2191)>>2)]=HEAP32[(($2192)>>2)];HEAP32[((($2191)+(4))>>2)]=HEAP32[((($2192)+(4))>>2)];HEAP32[((($2191)+(8))>>2)]=HEAP32[((($2192)+(8))>>2)];
      label = 521; break;
    case 521: 
      label = 522; break;
    case 522: 
      label = 523; break;
    case 523: 
      label = 524; break;
    case 524: 
      $need=6;
      var $2197=$1;
      _mrb_Float($94, $2197, $val14);
      var $2198=(($94)|0);
      var $2199=$2198;
      var $2200=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($2199)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($2199)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      $fval=$2200;
      var $2201=$fval;
      var $2202=___fpclassifyf($2201);
      var $2203=(($2202)|(0))==0;
      if ($2203) { label = 526; break; } else { label = 525; break; }
    case 525: 
      var $2205=$fval;
      var $2206=___fpclassifyf($2205);
      var $2207=(($2206)|(0))==1;
      if ($2207) { label = 526; break; } else { label = 564; break; }
    case 526: 
      $elen=3;
      var $2209=$fval;
      var $2210=___fpclassifyf($2209);
      var $2211=(($2210)|(0))==0;
      if ($2211) { label = 527; break; } else { label = 528; break; }
    case 527: 
      $expr=((103160)|0);
      label = 529; break;
    case 528: 
      $expr=((102876)|0);
      label = 529; break;
    case 529: 
      $need=3;
      var $2215=$fval;
      var $2216=___fpclassifyf($2215);
      var $2217=(($2216)|(0))==0;
      if ($2217) { label = 531; break; } else { label = 530; break; }
    case 530: 
      var $2219=$fval;
      var $2220=$2219 < 0;
      if ($2220) { label = 532; break; } else { label = 531; break; }
    case 531: 
      var $2222=$flags;
      var $2223=$2222 & 4;
      var $2224=(($2223)|(0))!=0;
      if ($2224) { label = 532; break; } else { label = 533; break; }
    case 532: 
      var $2226=$need;
      var $2227=((($2226)+(1))|0);
      $need=$2227;
      label = 533; break;
    case 533: 
      var $2229=$flags;
      var $2230=$2229 & 32;
      var $2231=(($2230)|(0))!=0;
      if ($2231) { label = 534; break; } else { label = 536; break; }
    case 534: 
      var $2233=$need;
      var $2234=$width;
      var $2235=(($2233)|(0)) < (($2234)|(0));
      if ($2235) { label = 535; break; } else { label = 536; break; }
    case 535: 
      var $2237=$width;
      $need=$2237;
      label = 536; break;
    case 536: 
      label = 537; break;
    case 537: 
      label = 538; break;
    case 538: 
      var $2241=$blen;
      var $2242=$need;
      var $2243=((($2242)+(1))|0);
      var $2244=((($2241)+($2243))|0);
      var $2245=$bsiz;
      var $2246=(($2244)|(0)) >= (($2245)|(0));
      if ($2246) { label = 539; break; } else { label = 540; break; }
    case 539: 
      var $2248=$bsiz;
      var $2249=($2248<<1);
      $bsiz=$2249;
      label = 538; break;
    case 540: 
      var $2251=$1;
      var $2252=$bsiz;
      _mrb_str_resize($95, $2251, $result, $2252);
      var $2253=(($result)|0);
      var $2254=$2253;
      var $2255=HEAP32[(($2254)>>2)];
      var $2256=$2255;
      var $2257=(($2256+20)|0);
      var $2258=HEAP32[(($2257)>>2)];
      $buf=$2258;
      label = 541; break;
    case 541: 
      var $2260=$blen;
      var $2261=$buf;
      var $2262=(($2261+$2260)|0);
      var $2263=$need;
      var $2264=((($2263)+(1))|0);
      var $2265=$need;
      var $2266=_snprintf($2262, $2264, ((102696)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$2265,HEAP32[(((tempInt)+(4))>>2)]=((102368)|0),tempInt));
      var $2267=$flags;
      var $2268=$2267 & 2;
      var $2269=(($2268)|(0))!=0;
      if ($2269) { label = 542; break; } else { label = 552; break; }
    case 542: 
      var $2271=$fval;
      var $2272=___fpclassifyf($2271);
      var $2273=(($2272)|(0))==0;
      if ($2273) { label = 545; break; } else { label = 543; break; }
    case 543: 
      var $2275=$fval;
      var $2276=$2275 < 0;
      if ($2276) { label = 544; break; } else { label = 545; break; }
    case 544: 
      var $2278=$blen;
      var $2279=((($2278)+(1))|0);
      $blen=$2279;
      var $2280=$buf;
      var $2281=(($2280+$2278)|0);
      HEAP8[($2281)]=45;
      label = 551; break;
    case 545: 
      var $2283=$flags;
      var $2284=$2283 & 4;
      var $2285=(($2284)|(0))!=0;
      if ($2285) { label = 546; break; } else { label = 547; break; }
    case 546: 
      var $2287=$blen;
      var $2288=((($2287)+(1))|0);
      $blen=$2288;
      var $2289=$buf;
      var $2290=(($2289+$2287)|0);
      HEAP8[($2290)]=43;
      label = 550; break;
    case 547: 
      var $2292=$flags;
      var $2293=$2292 & 16;
      var $2294=(($2293)|(0))!=0;
      if ($2294) { label = 548; break; } else { label = 549; break; }
    case 548: 
      var $2296=$blen;
      var $2297=((($2296)+(1))|0);
      $blen=$2297;
      label = 549; break;
    case 549: 
      label = 550; break;
    case 550: 
      label = 551; break;
    case 551: 
      var $2301=$blen;
      var $2302=$buf;
      var $2303=(($2302+$2301)|0);
      var $2304=$expr;
      assert(3 % 1 === 0);HEAP8[($2303)]=HEAP8[($2304)];HEAP8[((($2303)+(1))|0)]=HEAP8[((($2304)+(1))|0)];HEAP8[((($2303)+(2))|0)]=HEAP8[((($2304)+(2))|0)];
      label = 563; break;
    case 552: 
      var $2306=$fval;
      var $2307=___fpclassifyf($2306);
      var $2308=(($2307)|(0))==0;
      if ($2308) { label = 555; break; } else { label = 553; break; }
    case 553: 
      var $2310=$fval;
      var $2311=$2310 < 0;
      if ($2311) { label = 554; break; } else { label = 555; break; }
    case 554: 
      var $2313=$blen;
      var $2314=$need;
      var $2315=((($2313)+($2314))|0);
      var $2316=((($2315)-(3))|0);
      var $2317=((($2316)-(1))|0);
      var $2318=$buf;
      var $2319=(($2318+$2317)|0);
      HEAP8[($2319)]=45;
      label = 562; break;
    case 555: 
      var $2321=$flags;
      var $2322=$2321 & 4;
      var $2323=(($2322)|(0))!=0;
      if ($2323) { label = 556; break; } else { label = 557; break; }
    case 556: 
      var $2325=$blen;
      var $2326=$need;
      var $2327=((($2325)+($2326))|0);
      var $2328=((($2327)-(3))|0);
      var $2329=((($2328)-(1))|0);
      var $2330=$buf;
      var $2331=(($2330+$2329)|0);
      HEAP8[($2331)]=43;
      label = 561; break;
    case 557: 
      var $2333=$flags;
      var $2334=$2333 & 16;
      var $2335=(($2334)|(0))!=0;
      if ($2335) { label = 558; break; } else { label = 560; break; }
    case 558: 
      var $2337=$need;
      var $2338=$width;
      var $2339=(($2337)|(0)) > (($2338)|(0));
      if ($2339) { label = 559; break; } else { label = 560; break; }
    case 559: 
      var $2341=$blen;
      var $2342=((($2341)+(1))|0);
      $blen=$2342;
      label = 560; break;
    case 560: 
      label = 561; break;
    case 561: 
      label = 562; break;
    case 562: 
      var $2346=$blen;
      var $2347=$need;
      var $2348=((($2346)+($2347))|0);
      var $2349=((($2348)-(3))|0);
      var $2350=$buf;
      var $2351=(($2350+$2349)|0);
      var $2352=$expr;
      assert(3 % 1 === 0);HEAP8[($2351)]=HEAP8[($2352)];HEAP8[((($2351)+(1))|0)]=HEAP8[((($2352)+(1))|0)];HEAP8[((($2351)+(2))|0)]=HEAP8[((($2352)+(2))|0)];
      label = 563; break;
    case 563: 
      var $2354=$blen;
      var $2355=$buf;
      var $2356=(($2355+$2354)|0);
      var $2357=_strlen($2356);
      var $2358=$blen;
      var $2359=((($2358)+($2357))|0);
      $blen=$2359;
      label = 581; break;
    case 564: 
      var $2361=(($fbuf15)|0);
      var $2362=$p;
      var $2363=HEAP8[($2362)];
      var $2364=(($2363 << 24) >> 24);
      var $2365=$flags;
      var $2366=$width;
      var $2367=$prec;
      _fmt_setup($2361, 32, $2364, $2365, $2366, $2367);
      $need=0;
      var $2368=$p;
      var $2369=HEAP8[($2368)];
      var $2370=(($2369 << 24) >> 24);
      var $2371=(($2370)|(0))!=101;
      if ($2371) { label = 565; break; } else { label = 569; break; }
    case 565: 
      var $2373=$p;
      var $2374=HEAP8[($2373)];
      var $2375=(($2374 << 24) >> 24);
      var $2376=(($2375)|(0))!=69;
      if ($2376) { label = 566; break; } else { label = 569; break; }
    case 566: 
      HEAP32[(($i)>>2)]=-2147483648;
      var $2378=$fval;
      var $2379=_frexp($2378, $i);
      var $2380=HEAP32[(($i)>>2)];
      var $2381=(($2380)|(0)) > 0;
      if ($2381) { label = 567; break; } else { label = 568; break; }
    case 567: 
      var $2383=HEAP32[(($i)>>2)];
      var $2384=((($2383)*(146))&-1);
      var $2385=((((($2384)|(0)))/(485))&-1);
      var $2386=((($2385)+(1))|0);
      $need=$2386;
      label = 568; break;
    case 568: 
      label = 569; break;
    case 569: 
      var $2389=$flags;
      var $2390=$2389 & 64;
      var $2391=(($2390)|(0))!=0;
      if ($2391) { label = 570; break; } else { label = 571; break; }
    case 570: 
      var $2393=$prec;
      var $2396 = $2393;label = 572; break;
    case 571: 
      var $2396 = 6;label = 572; break;
    case 572: 
      var $2396;
      var $2397=$need;
      var $2398=((($2397)+($2396))|0);
      $need=$2398;
      var $2399=$flags;
      var $2400=$2399 & 32;
      var $2401=(($2400)|(0))!=0;
      if ($2401) { label = 573; break; } else { label = 575; break; }
    case 573: 
      var $2403=$need;
      var $2404=$width;
      var $2405=(($2403)|(0)) < (($2404)|(0));
      if ($2405) { label = 574; break; } else { label = 575; break; }
    case 574: 
      var $2407=$width;
      $need=$2407;
      label = 575; break;
    case 575: 
      var $2409=$need;
      var $2410=((($2409)+(20))|0);
      $need=$2410;
      label = 576; break;
    case 576: 
      label = 577; break;
    case 577: 
      var $2413=$blen;
      var $2414=$need;
      var $2415=((($2413)+($2414))|0);
      var $2416=$bsiz;
      var $2417=(($2415)|(0)) >= (($2416)|(0));
      if ($2417) { label = 578; break; } else { label = 579; break; }
    case 578: 
      var $2419=$bsiz;
      var $2420=($2419<<1);
      $bsiz=$2420;
      label = 577; break;
    case 579: 
      var $2422=$1;
      var $2423=$bsiz;
      _mrb_str_resize($96, $2422, $result, $2423);
      var $2424=(($result)|0);
      var $2425=$2424;
      var $2426=HEAP32[(($2425)>>2)];
      var $2427=$2426;
      var $2428=(($2427+20)|0);
      var $2429=HEAP32[(($2428)>>2)];
      $buf=$2429;
      label = 580; break;
    case 580: 
      var $2431=$blen;
      var $2432=$buf;
      var $2433=(($2432+$2431)|0);
      var $2434=$need;
      var $2435=(($fbuf15)|0);
      var $2436=$fval;
      var $2437=_snprintf($2433, $2434, $2435, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),(HEAPF64[(tempDoublePtr)>>3]=$2436,HEAP32[((tempInt)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]),tempInt));
      $n=$2437;
      var $2438=$n;
      var $2439=$blen;
      var $2440=((($2439)+($2438))|0);
      $blen=$2440;
      label = 581; break;
    case 581: 
      $flags=0;
      label = 582; break;
    case 582: 
      var $2443=$p;
      var $2444=(($2443+1)|0);
      $p=$2444;
      label = 2; break;
    case 583: 
      label = 584; break;
    case 584: 
      var $2447=$1;
      var $2448=$blen;
      _mrb_str_resize($97, $2447, $result, $2448);
      var $2449=$agg_result;
      var $2450=$result;
      assert(12 % 1 === 0);HEAP32[(($2449)>>2)]=HEAP32[(($2450)>>2)];HEAP32[((($2449)+(4))>>2)]=HEAP32[((($2450)+(4))>>2)];HEAP32[((($2449)+(8))>>2)]=HEAP32[((($2450)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sign_bits($base, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $c;
      $1=$base;
      $2=$p;
      var $3=$1;
      if ((($3)|(0))==16) {
        label = 2; break;
      }
      else if ((($3)|(0))==8) {
        label = 6; break;
      }
      else if ((($3)|(0))==2) {
        label = 7; break;
      }
      else {
      label = 8; break;
      }
    case 2: 
      var $5=$2;
      var $6=HEAP8[($5)];
      var $7=(($6 << 24) >> 24);
      var $8=(($7)|(0))==88;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $c=70;
      label = 5; break;
    case 4: 
      $c=102;
      label = 5; break;
    case 5: 
      label = 9; break;
    case 6: 
      $c=55;
      label = 9; break;
    case 7: 
      $c=49;
      label = 9; break;
    case 8: 
      $c=46;
      label = 9; break;
    case 9: 
      var $16=$c;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_undef_value1529($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=5;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1530($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _get_hash($agg_result, $mrb, $hash, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tmp=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$hash;
      $3=$argc;
      $4=$argv;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))==5;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$2;
      var $12=$agg_result;
      var $13=$11;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      label = 9; break;
    case 3: 
      var $15=$3;
      var $16=(($15)|(0))!=2;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $18=$1;
      var $19=$1;
      var $20=_mrb_class_get($19, ((112960)|0));
      _mrb_raise($18, $20, ((100984)|0));
      label = 5; break;
    case 5: 
      var $22=$1;
      var $23=$4;
      var $24=(($23+12)|0);
      _mrb_check_convert_type($5, $22, $24, 15, ((100732)|0), ((100472)|0));
      var $25=$tmp;
      var $26=$5;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=(($tmp+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==0;
      if ($29) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $31=(($tmp)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|(0))!=0;
      if ($34) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $36=$1;
      var $37=$1;
      var $38=_mrb_class_get($37, ((112960)|0));
      _mrb_raise($36, $38, ((100984)|0));
      label = 8; break;
    case 8: 
      var $40=$2;
      var $41=$40;
      var $42=$tmp;
      assert(12 % 1 === 0);HEAP32[(($41)>>2)]=HEAP32[(($42)>>2)];HEAP32[((($41)+(4))>>2)]=HEAP32[((($42)+(4))>>2)];HEAP32[((($41)+(8))>>2)]=HEAP32[((($42)+(8))>>2)];
      var $43=$agg_result;
      var $44=$40;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      label = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1531($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fix2binstr($agg_result, $mrb, $x, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 76)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $x; $x = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($x)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($x)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($x)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $buf=__stackBase__;
      var $b;
      var $num;
      var $val;
      var $d;
      var $3=(__stackBase__)+(64);
      $1=$mrb;
      $2=$base;
      var $4=(($buf)|0);
      var $5=(($4+64)|0);
      $b=$5;
      var $6=(($x)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      $num=$8;
      var $9=$num;
      $val=$9;
      var $10=$2;
      var $11=(($10)|(0))!=2;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((112960)|0));
      var $16=$2;
      _mrb_fixnum_value1530($3, $16);
      _mrb_raisef($13, $15, ((101300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $18=$val;
      var $19=(($18)>>>(0)) >= 1024;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$val;
      var $22=$21 & 1023;
      $val=$22;
      label = 5; break;
    case 5: 
      var $24=$val;
      var $25=(($24)|(0))==0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$1;
      _mrb_str_new($agg_result, $27, ((105184)|0), 1);
      label = 21; break;
    case 7: 
      var $29=$b;
      var $30=((($29)-(1))|0);
      $b=$30;
      HEAP8[($30)]=0;
      label = 8; break;
    case 8: 
      var $32=$val;
      var $33=$2;
      var $34=((($32)>>>(0)))%((($33)>>>(0)));
      var $35=((79872+$34)|0);
      var $36=HEAP8[($35)];
      var $37=$b;
      var $38=((($37)-(1))|0);
      $b=$38;
      HEAP8[($38)]=$36;
      label = 9; break;
    case 9: 
      var $40=$2;
      var $41=$val;
      var $42=Math.floor(((($41)>>>(0)))/((($40)>>>(0))));
      $val=$42;
      var $43=(($42)|(0))!=0;
      if ($43) { label = 8; break; } else { label = 10; break; }
    case 10: 
      var $45=$num;
      var $46=(($45)|(0)) < 0;
      if ($46) { label = 11; break; } else { label = 20; break; }
    case 11: 
      var $48=$b;
      var $49=$2;
      var $50=_remove_sign_bits($48, $49);
      $b=$50;
      var $51=$2;
      if ((($51)|(0))==16) {
        label = 12; break;
      }
      else if ((($51)|(0))==8) {
        label = 13; break;
      }
      else if ((($51)|(0))==2) {
        label = 14; break;
      }
      else {
      label = 15; break;
      }
    case 12: 
      $d=102;
      label = 16; break;
    case 13: 
      $d=55;
      label = 16; break;
    case 14: 
      $d=49;
      label = 16; break;
    case 15: 
      $d=0;
      label = 16; break;
    case 16: 
      var $57=$d;
      var $58=(($57 << 24) >> 24);
      var $59=(($58)|(0))!=0;
      if ($59) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $61=$b;
      var $62=HEAP8[($61)];
      var $63=(($62 << 24) >> 24);
      var $64=$d;
      var $65=(($64 << 24) >> 24);
      var $66=(($63)|(0))!=(($65)|(0));
      if ($66) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $68=$d;
      var $69=$b;
      var $70=((($69)-(1))|0);
      $b=$70;
      HEAP8[($70)]=$68;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $73=$1;
      var $74=$b;
      _mrb_str_new_cstr($agg_result, $73, $74);
      label = 21; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _remove_sign_bits($str, $base) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      $1=$str;
      $2=$base;
      var $3=$1;
      $t=$3;
      var $4=$2;
      var $5=(($4)|(0))==16;
      if ($5) { label = 2; break; } else { label = 6; break; }
    case 2: 
      label = 3; break;
    case 3: 
      var $8=$t;
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24);
      var $11=(($10)|(0))==102;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$t;
      var $14=(($13+1)|0);
      $t=$14;
      label = 3; break;
    case 5: 
      label = 18; break;
    case 6: 
      var $17=$2;
      var $18=(($17)|(0))==8;
      if ($18) { label = 7; break; } else { label = 11; break; }
    case 7: 
      var $20=$t;
      var $21=_strlen($20);
      var $22=((($21)*(3))&-1);
      var $23=((($22)>>>(0)))%(32);
      var $24=-8 >> (($23)|(0));
      var $25=$24 & 7;
      var $26=$t;
      var $27=HEAP8[($26)];
      var $28=(($27 << 24) >> 24);
      var $29=$28 | $25;
      var $30=(($29) & 255);
      HEAP8[($26)]=$30;
      label = 8; break;
    case 8: 
      var $32=$t;
      var $33=HEAP8[($32)];
      var $34=(($33 << 24) >> 24);
      var $35=(($34)|(0))==55;
      if ($35) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $37=$t;
      var $38=(($37+1)|0);
      $t=$38;
      label = 8; break;
    case 10: 
      label = 17; break;
    case 11: 
      var $41=$2;
      var $42=(($41)|(0))==2;
      if ($42) { label = 12; break; } else { label = 16; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $45=$t;
      var $46=HEAP8[($45)];
      var $47=(($46 << 24) >> 24);
      var $48=(($47)|(0))==49;
      if ($48) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $50=$t;
      var $51=(($50+1)|0);
      $t=$51;
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $56=$t;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _fmt_setup($buf, $size, $c, $flags, $width, $prec) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $end;
      var $n;
      $1=$buf;
      $2=$size;
      $3=$c;
      $4=$flags;
      $5=$width;
      $6=$prec;
      var $7=$1;
      var $8=$2;
      var $9=(($7+$8)|0);
      $end=$9;
      var $10=$1;
      var $11=(($10+1)|0);
      $1=$11;
      HEAP8[($10)]=37;
      var $12=$4;
      var $13=$12 & 1;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $16=$1;
      var $17=(($16+1)|0);
      $1=$17;
      HEAP8[($16)]=35;
      label = 3; break;
    case 3: 
      var $19=$4;
      var $20=$19 & 4;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$1;
      var $24=(($23+1)|0);
      $1=$24;
      HEAP8[($23)]=43;
      label = 5; break;
    case 5: 
      var $26=$4;
      var $27=$26 & 2;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $30=$1;
      var $31=(($30+1)|0);
      $1=$31;
      HEAP8[($30)]=45;
      label = 7; break;
    case 7: 
      var $33=$4;
      var $34=$33 & 8;
      var $35=(($34)|(0))!=0;
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=$1;
      var $38=(($37+1)|0);
      $1=$38;
      HEAP8[($37)]=48;
      label = 9; break;
    case 9: 
      var $40=$4;
      var $41=$40 & 16;
      var $42=(($41)|(0))!=0;
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$1;
      var $45=(($44+1)|0);
      $1=$45;
      HEAP8[($44)]=32;
      label = 11; break;
    case 11: 
      var $47=$4;
      var $48=$47 & 32;
      var $49=(($48)|(0))!=0;
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $51=$1;
      var $52=$end;
      var $53=$1;
      var $54=$52;
      var $55=$53;
      var $56=((($54)-($55))|0);
      var $57=$5;
      var $58=_snprintf($51, $56, ((102060)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$57,tempInt));
      $n=$58;
      var $59=$n;
      var $60=$1;
      var $61=(($60+$59)|0);
      $1=$61;
      label = 13; break;
    case 13: 
      var $63=$4;
      var $64=$63 & 64;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $67=$1;
      var $68=$end;
      var $69=$1;
      var $70=$68;
      var $71=$69;
      var $72=((($70)-($71))|0);
      var $73=$6;
      var $74=_snprintf($67, $72, ((101808)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$73,tempInt));
      $n=$74;
      var $75=$n;
      var $76=$1;
      var $77=(($76+$75)|0);
      $1=$77;
      label = 15; break;
    case 15: 
      var $79=$3;
      var $80=(($79) & 255);
      var $81=$1;
      var $82=(($81+1)|0);
      $1=$82;
      HEAP8[($81)]=$80;
      var $83=$1;
      HEAP8[($83)]=0;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1534($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_string_ext_gem_final($2);
  return;
}
function _mrb_mruby_string_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $s;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+60)|0);
  var $4=HEAP32[(($3)>>2)];
  $s=$4;
  var $5=$1;
  var $6=$s;
  _mrb_define_method($5, $6, ((110648)|0), 580, 0);
  var $7=$1;
  var $8=$s;
  _mrb_define_method($7, $8, ((112912)|0), 526, 262144);
  var $9=$1;
  var $10=$s;
  _mrb_define_method($9, $10, ((107932)|0), 590, 0);
  var $11=$1;
  var $12=$s;
  _mrb_define_method($11, $12, ((104360)|0), 264, 0);
  var $13=$1;
  var $14=$s;
  _mrb_define_method($13, $14, ((101612)|0), 134, 262144);
  var $15=$1;
  var $16=$s;
  _mrb_define_method($15, $16, ((98976)|0), 134, 262144);
  var $17=$1;
  var $18=$s;
  _mrb_define_method($17, $18, ((96908)|0), 250, 4096);
  var $19=$1;
  var $20=$s;
  _mrb_define_method($19, $20, ((95696)|0), 698, 4096);
  return;
}
function _mrb_str_getbyte($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $pos=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((113860)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$pos,tempInt));
      var $4=HEAP32[(($pos)>>2)];
      var $5=(($4)|(0)) < 0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $7=(($str)|0);
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9;
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=HEAP32[(($pos)>>2)];
      var $14=((($13)+($12))|0);
      HEAP32[(($pos)>>2)]=$14;
      label = 3; break;
    case 3: 
      var $16=HEAP32[(($pos)>>2)];
      var $17=(($16)|(0)) < 0;
      if ($17) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $19=(($str)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=HEAP32[(($pos)>>2)];
      var $26=(($24)|(0)) <= (($25)|(0));
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_nil_value1554($agg_result);
      label = 7; break;
    case 6: 
      var $29=HEAP32[(($pos)>>2)];
      var $30=(($str)|0);
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32;
      var $34=(($33+20)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35+$29)|0);
      var $37=HEAP8[($36)];
      var $38=(($37)&(255));
      _mrb_fixnum_value1555($agg_result, $38);
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_swapcase_bang($agg_result, $mrb, $str) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $pend;
      var $modify;
      var $s;
      $1=$mrb;
      $modify=0;
      var $2=(($str)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $s=$5;
      var $6=$1;
      var $7=$s;
      _mrb_str_modify($6, $7);
      var $8=$s;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $p=$10;
      var $11=$s;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$s;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($13+$16)|0);
      $pend=$17;
      label = 2; break;
    case 2: 
      var $19=$p;
      var $20=$pend;
      var $21=(($19)>>>(0)) < (($20)>>>(0));
      if ($21) { label = 3; break; } else { label = 9; break; }
    case 3: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $25=(($24)&(255));
      var $26=_isupper($25);
      var $27=(($26)|(0))!=0;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$p;
      var $30=HEAP8[($29)];
      var $31=(($30)&(255));
      var $32=_tolower($31);
      var $33=(($32) & 255);
      var $34=$p;
      HEAP8[($34)]=$33;
      $modify=1;
      label = 8; break;
    case 5: 
      var $36=$p;
      var $37=HEAP8[($36)];
      var $38=(($37)&(255));
      var $39=_islower($38);
      var $40=(($39)|(0))!=0;
      if ($40) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $42=$p;
      var $43=HEAP8[($42)];
      var $44=(($43)&(255));
      var $45=_toupper($44);
      var $46=(($45) & 255);
      var $47=$p;
      HEAP8[($47)]=$46;
      $modify=1;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $50=$p;
      var $51=(($50+1)|0);
      $p=$51;
      label = 2; break;
    case 9: 
      var $53=$modify;
      var $54=(($53)|(0))!=0;
      if ($54) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $56=$agg_result;
      var $57=$str;
      assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
      label = 12; break;
    case 11: 
      _mrb_nil_value1554($agg_result);
      label = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_swapcase($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  var $2=(__stackBase__)+(12);
  var $3=(__stackBase__)+(24);
  $1=$mrb;
  var $4=$1;
  _mrb_str_dup($2, $4, $self);
  var $5=$str;
  var $6=$2;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  var $7=$1;
  _mrb_str_swapcase_bang($3, $7, $str);
  var $8=$agg_result;
  var $9=$str;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_concat2($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $str=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((93892)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$str,tempInt));
  var $4=$1;
  _mrb_str_concat($4, $self, $str);
  var $5=$agg_result;
  var $6=$self;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_str_start_with($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $len_l;
      var $len_r;
      var $len_cmp;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=HEAP32[(($argc)>>2)];
      var $7=(($5)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=(($self)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      $len_l=$14;
      var $15=$i;
      var $16=HEAP32[(($argv)>>2)];
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      $len_r=$23;
      var $24=$len_l;
      var $25=$len_r;
      var $26=(($24)>>>(0)) > (($25)>>>(0));
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$len_r;
      var $32 = $28;label = 6; break;
    case 5: 
      var $30=$len_l;
      var $32 = $30;label = 6; break;
    case 6: 
      var $32;
      $len_cmp=$32;
      var $33=(($self)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$i;
      var $40=HEAP32[(($argv)>>2)];
      var $41=(($40+((($39)*(12))&-1))|0);
      var $42=(($41)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$len_cmp;
      var $49=_memcmp($38, $47, $48);
      var $50=(($49)|(0))==0;
      if ($50) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_true_value1552($agg_result);
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $54=$i;
      var $55=((($54)+(1))|0);
      $i=$55;
      label = 2; break;
    case 10: 
      _mrb_false_value1553($agg_result);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_string_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_string_ext_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((81668)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1534($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_string_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_is_local_id($id) {
  var label = 0;
  var $1;
  $1=$id;
  var $2=$1;
  var $3=(($2 << 16) >> 16);
  return $3;
}
function _mrb_is_const_id($id) {
  var label = 0;
  var $1;
  $1=$id;
  var $2=$1;
  var $3=(($2 << 16) >> 16);
  return $3;
}
function _mrb_str_end_with($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $argc=(__stackBase__)+(4);
      var $i;
      var $len_l;
      var $len_r;
      var $len_cmp;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94712)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
      $i=0;
      label = 2; break;
    case 2: 
      var $5=$i;
      var $6=HEAP32[(($argc)>>2)];
      var $7=(($5)|(0)) < (($6)|(0));
      if ($7) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $9=(($self)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      $len_l=$14;
      var $15=$i;
      var $16=HEAP32[(($argv)>>2)];
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      $len_r=$23;
      var $24=$len_l;
      var $25=$len_r;
      var $26=(($24)>>>(0)) > (($25)>>>(0));
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$len_r;
      var $32 = $28;label = 6; break;
    case 5: 
      var $30=$len_l;
      var $32 = $30;label = 6; break;
    case 6: 
      var $32;
      $len_cmp=$32;
      var $33=(($self)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$len_l;
      var $40=$len_cmp;
      var $41=((($39)-($40))|0);
      var $42=(($38+$41)|0);
      var $43=$i;
      var $44=HEAP32[(($argv)>>2)];
      var $45=(($44+((($43)*(12))&-1))|0);
      var $46=(($45)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=(($49+20)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$len_r;
      var $53=$len_cmp;
      var $54=((($52)-($53))|0);
      var $55=(($51+$54)|0);
      var $56=$len_cmp;
      var $57=_memcmp($42, $55, $56);
      var $58=(($57)|(0))==0;
      if ($58) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_true_value1552($agg_result);
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $62=$i;
      var $63=((($62)+(1))|0);
      $i=$63;
      label = 2; break;
    case 10: 
      _mrb_false_value1553($agg_result);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1552($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1553($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1554($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1555($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1558($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_struct_gem_final($2);
  return;
}
function _struct_ivar_get($agg_result, $mrb, $c, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $c; $c = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($c)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($c)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($c)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $kclass;
      var $sclass;
      var $ans=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$id;
      var $5=$1;
      var $6=_struct_class($5);
      $sclass=$6;
      label = 2; break;
    case 2: 
      var $8=$1;
      var $9=$2;
      _mrb_iv_get($3, $8, $c, $9);
      var $10=$ans;
      var $11=$3;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($ans+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=(($ans)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|(0))!=0;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$agg_result;
      var $22=$ans;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      label = 9; break;
    case 5: 
      var $24=(($c)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=(($27+20)|0);
      var $29=HEAP32[(($28)>>2)];
      $kclass=$29;
      var $30=$kclass;
      var $31=(($30)|(0))==0;
      if ($31) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $33=$kclass;
      var $34=$sclass;
      var $35=(($33)|(0))==(($34)|(0));
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_nil_value1606($agg_result);
      label = 9; break;
    case 8: 
      var $38=$kclass;
      var $39=$38;
      _mrb_obj_value1603($4, $39);
      var $40=$c;
      var $41=$4;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      label = 2; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_s_members($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $members=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=$1;
      var $4=_mrb_intern2($3, ((110556)|0), 11);
      _struct_ivar_get($members, $2, $klass, $4);
      var $5=(($members+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($members)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$1;
      var $15=$1;
      var $16=_mrb_class_get($15, ((112888)|0));
      _mrb_raise($14, $16, ((107908)|0));
      label = 4; break;
    case 4: 
      var $18=(($members+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|(0))==14;
      if ($20) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $22=$1;
      var $23=$1;
      var $24=_mrb_class_get($23, ((112888)|0));
      _mrb_raise($22, $24, ((104340)|0));
      label = 6; break;
    case 6: 
      var $26=$agg_result;
      var $27=$members;
      assert(12 % 1 === 0);HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];HEAP32[((($26)+(8))>>2)]=HEAP32[((($27)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_members($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $members=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      $1=$mrb;
      var $5=$1;
      var $6=$1;
      var $7=_mrb_obj_class($6, $s);
      var $8=$7;
      _mrb_obj_value1603($2, $8);
      _mrb_struct_s_members($members, $5, $2);
      var $9=$1;
      var $10=$1;
      var $11=_mrb_obj_class($10, $s);
      var $12=_mrb_class_name($9, $11);
      var $13=_strcmp($12, ((101604)|0));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 2; break; }
    case 2: 
      var $16=(($s)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($members)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24;
      var $26=(($25+12)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($21)|(0))!=(($27)|(0));
      if ($28) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $30=$1;
      var $31=$1;
      var $32=_mrb_class_get($31, ((112888)|0));
      var $33=(($members)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      _mrb_fixnum_value1604($3, $38);
      var $39=(($s)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      _mrb_fixnum_value1604($4, $44);
      _mrb_raisef($30, $32, ((98932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $47=$agg_result;
      var $48=$members;
      assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1603($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1604($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_getmember($agg_result, $mrb, $obj, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $members=__stackBase__;
      var $slot=(__stackBase__)+(12);
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      $1=$mrb;
      $2=$id;
      var $6=(($obj)|0);
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8;
      var $10=(($9+20)|0);
      var $11=HEAP32[(($10)>>2)];
      $ptr=$11;
      var $12=$1;
      _mrb_struct_members($3, $12, $obj);
      var $13=$members;
      var $14=$3;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      var $15=(($members)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+20)|0);
      var $20=HEAP32[(($19)>>2)];
      $ptr_members=$20;
      var $21=$2;
      _mrb_symbol_value1605($4, $21);
      var $22=$slot;
      var $23=$4;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=(($members)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      $len=$29;
      $i=0;
      label = 2; break;
    case 2: 
      var $31=$i;
      var $32=$len;
      var $33=(($31)|(0)) < (($32)|(0));
      if ($33) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $35=$1;
      var $36=$i;
      var $37=$ptr_members;
      var $38=(($37+((($36)*(12))&-1))|0);
      var $39=_mrb_obj_equal($35, $38, $slot);
      var $40=(($39)|(0))!=0;
      if ($40) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $42=$i;
      var $43=$ptr;
      var $44=(($43+((($42)*(12))&-1))|0);
      var $45=$agg_result;
      var $46=$44;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      label = 2; break;
    case 7: 
      var $52=$1;
      var $53=$1;
      var $54=_mrb_class_get($53, ((96880)|0));
      var $55=$1;
      var $56=$2;
      _mrb_sym2str($5, $55, $56);
      _mrb_raisef($52, $54, ((95668)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($5)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      _mrb_nil_value1606($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1605($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1606($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_id_attrset($mrb, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $name;
  var $buf;
  var $len=__stackBase__;
  var $mid;
  $1=$mrb;
  $2=$id;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_sym2name_len($3, $4, $len);
  $name=$5;
  var $6=$1;
  var $7=HEAP32[(($len)>>2)];
  var $8=((($7)+(2))|0);
  var $9=_mrb_malloc($6, $8);
  $buf=$9;
  var $10=$buf;
  var $11=$name;
  var $12=HEAP32[(($len)>>2)];
  assert($12 % 1 === 0);_memcpy($10, $11, $12);
  var $13=HEAP32[(($len)>>2)];
  var $14=$buf;
  var $15=(($14+$13)|0);
  HEAP8[($15)]=61;
  var $16=HEAP32[(($len)>>2)];
  var $17=((($16)+(1))|0);
  var $18=$buf;
  var $19=(($18+$17)|0);
  HEAP8[($19)]=0;
  var $20=$1;
  var $21=$buf;
  var $22=HEAP32[(($len)>>2)];
  var $23=((($22)+(1))|0);
  var $24=_mrb_intern2($20, $21, $23);
  $mid=$24;
  var $25=$1;
  var $26=$buf;
  _mrb_free($25, $26);
  var $27=$mid;
  STACKTOP = __stackBase__;
  return $27;
}
function _make_struct($agg_result, $mrb, $name, $members, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $members; $members = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($members)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($members)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($members)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $nstr=__stackBase__;
      var $ptr_members;
      var $id;
      var $i;
      var $len;
      var $c;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $id1;
      $1=$mrb;
      $2=$klass;
      var $5=(($name+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|(0))==0;
      if ($7) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $9=(($name)|0);
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))!=0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$1;
      var $15=$2;
      var $16=_mrb_class_new($14, $15);
      $c=$16;
      label = 9; break;
    case 4: 
      var $18=$1;
      _mrb_str_to_str($3, $18, $name);
      var $19=$name;
      var $20=$3;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=$1;
      var $22=_mrb_obj_to_sym($21, $name);
      $id=$22;
      var $23=$id;
      var $24=_mrb_is_const_id($23);
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $27=$1;
      var $28=$id;
      _mrb_name_error($27, $28, ((102660)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
      label = 6; break;
    case 6: 
      var $30=$1;
      var $31=$2;
      var $32=$id;
      var $33=_mrb_const_defined_at($30, $31, $32);
      var $34=(($33)|(0))!=0;
      if ($34) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $36=$1;
      _mrb_warn($36, ((102336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($name)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($name)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($name)+(8))>>2)],tempInt));
      label = 8; break;
    case 8: 
      var $38=$1;
      var $39=$2;
      var $40=(($name)|0);
      var $41=$40;
      var $42=HEAP32[(($41)>>2)];
      var $43=$42;
      var $44=(($43+20)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$2;
      var $47=_mrb_define_class_under($38, $39, $45, $46);
      $c=$47;
      label = 9; break;
    case 9: 
      var $49=$c;
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 >>> 11;
      var $53=$52 & 2097151;
      var $54=$53 & -256;
      var $55=$54 | 14;
      var $56=$c;
      var $57=$55 & 2097151;
      var $58=$56;
      var $59=$57 & 2097151;
      var $60=$59 << 11;
      var $61=HEAP32[(($58)>>2)];
      var $62=$61 & 2047;
      var $63=$62 | $60;
      HEAP32[(($58)>>2)]=$63;
      var $64=$c;
      var $65=$64;
      _mrb_obj_value1603($4, $65);
      var $66=$nstr;
      var $67=$4;
      assert(12 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];
      var $68=$1;
      var $69=$1;
      var $70=_mrb_intern2($69, ((110556)|0), 11);
      _mrb_iv_set($68, $nstr, $70, $members);
      var $71=$1;
      var $72=$c;
      _mrb_define_class_method($71, $72, ((110744)|0), 608, 4096);
      var $73=$1;
      var $74=$c;
      _mrb_define_class_method($73, $74, ((109948)|0), 608, 4096);
      var $75=$1;
      var $76=$c;
      _mrb_define_class_method($75, $76, ((109020)|0), 520, 0);
      var $77=(($members)|0);
      var $78=$77;
      var $79=HEAP32[(($78)>>2)];
      var $80=$79;
      var $81=(($80+20)|0);
      var $82=HEAP32[(($81)>>2)];
      $ptr_members=$82;
      var $83=(($members)|0);
      var $84=$83;
      var $85=HEAP32[(($84)>>2)];
      var $86=$85;
      var $87=(($86+12)|0);
      var $88=HEAP32[(($87)>>2)];
      $len=$88;
      $i=0;
      label = 10; break;
    case 10: 
      var $90=$i;
      var $91=$len;
      var $92=(($90)|(0)) < (($91)|(0));
      if ($92) { label = 11; break; } else { label = 19; break; }
    case 11: 
      var $94=$i;
      var $95=$ptr_members;
      var $96=(($95+((($94)*(12))&-1))|0);
      var $97=(($96)|0);
      var $98=$97;
      var $99=HEAP16[(($98)>>1)];
      $id1=$99;
      var $100=$id1;
      var $101=_mrb_is_local_id($100);
      var $102=(($101)|(0))!=0;
      if ($102) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $104=$id1;
      var $105=_mrb_is_const_id($104);
      var $106=(($105)|(0))!=0;
      if ($106) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $108=$i;
      var $109=(($108)|(0)) < 10;
      if ($109) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $111=$1;
      var $112=$c;
      var $113=$id1;
      var $114=$i;
      var $115=((59872+($114<<2))|0);
      var $116=HEAP32[(($115)>>2)];
      _mrb_define_method_id($111, $112, $113, $116, 0);
      label = 16; break;
    case 15: 
      var $118=$1;
      var $119=$c;
      var $120=$id1;
      _mrb_define_method_id($118, $119, $120, 216, 0);
      label = 16; break;
    case 16: 
      var $122=$1;
      var $123=$c;
      var $124=$1;
      var $125=$id1;
      var $126=_mrb_id_attrset($124, $125);
      _mrb_define_method_id($122, $123, $126, 318, 262144);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $129=$i;
      var $130=((($129)+(1))|0);
      $i=$130;
      label = 10; break;
    case 19: 
      var $132=$agg_result;
      var $133=$nstr;
      assert(12 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($132)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _struct_class($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_class_get($2, ((101604)|0));
  return $3;
}
function _mrb_struct_initialize_withArg($agg_result, $mrb, $argc, $argv, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $klass;
      var $i;
      var $n;
      var $4=__stackBase__;
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      var $5=$1;
      var $6=_mrb_obj_class($5, $self);
      $klass=$6;
      var $7=$1;
      var $8=$klass;
      var $9=_num_members($7, $8);
      $n=$9;
      var $10=$n;
      var $11=$2;
      var $12=(($10)|(0)) < (($11)|(0));
      if ($12) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $14=$1;
      var $15=$1;
      var $16=_mrb_class_get($15, ((103348)|0));
      _mrb_raise($14, $16, ((103140)|0));
      label = 3; break;
    case 3: 
      $i=0;
      label = 4; break;
    case 4: 
      var $19=$i;
      var $20=$2;
      var $21=(($19)|(0)) < (($20)|(0));
      if ($21) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $23=$1;
      var $24=$i;
      var $25=$i;
      var $26=$3;
      var $27=(($26+((($25)*(12))&-1))|0);
      _mrb_ary_set($23, $self, $24, $27);
      label = 6; break;
    case 6: 
      var $29=$i;
      var $30=((($29)+(1))|0);
      $i=$30;
      label = 4; break;
    case 7: 
      var $32=$2;
      $i=$32;
      label = 8; break;
    case 8: 
      var $34=$i;
      var $35=$n;
      var $36=(($34)|(0)) < (($35)|(0));
      if ($36) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $38=$1;
      var $39=$i;
      _mrb_nil_value1606($4);
      _mrb_ary_set($38, $self, $39, $4);
      label = 10; break;
    case 10: 
      var $41=$i;
      var $42=((($41)+(1))|0);
      $i=$42;
      label = 8; break;
    case 11: 
      var $44=$agg_result;
      var $45=$self;
      assert(12 % 1 === 0);HEAP32[(($44)>>2)]=HEAP32[(($45)>>2)];HEAP32[((($44)+(4))>>2)]=HEAP32[((($45)+(4))>>2)];HEAP32[((($44)+(8))>>2)]=HEAP32[((($45)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_struct_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_struct_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((80964)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1558($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_init_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s=__stackBase__;
      var $i;
      var $len;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $copy, $s);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$copy;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 14; break;
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_obj_class($12, $copy);
      var $14=_mrb_obj_is_instance_of($11, $s, $13);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((112888)|0));
      _mrb_raise($17, $19, ((93868)|0));
      label = 5; break;
    case 5: 
      var $21=(($s+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0))==14;
      if ($23) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $25=$1;
      var $26=$1;
      var $27=_mrb_class_get($26, ((112888)|0));
      _mrb_raise($25, $27, ((104340)|0));
      label = 7; break;
    case 7: 
      var $29=(($copy)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($s)|0);
      var $36=$35;
      var $37=HEAP32[(($36)>>2)];
      var $38=$37;
      var $39=(($38+12)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($34)|(0))!=(($40)|(0));
      if ($41) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $43=$1;
      var $44=$1;
      var $45=_mrb_class_get($44, ((112888)|0));
      _mrb_raise($43, $45, ((113836)|0));
      label = 9; break;
    case 9: 
      var $47=(($copy)|0);
      var $48=$47;
      var $49=HEAP32[(($48)>>2)];
      var $50=$49;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      $len=$52;
      $i=0;
      label = 10; break;
    case 10: 
      var $54=$i;
      var $55=$len;
      var $56=(($54)|(0)) < (($55)|(0));
      if ($56) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $58=$1;
      var $59=$i;
      var $60=$i;
      var $61=(($s)|0);
      var $62=$61;
      var $63=HEAP32[(($62)>>2)];
      var $64=$63;
      var $65=(($64+20)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66+((($60)*(12))&-1))|0);
      _mrb_ary_set($58, $copy, $59, $67);
      label = 12; break;
    case 12: 
      var $69=$i;
      var $70=((($69)+(1))|0);
      $i=$70;
      label = 10; break;
    case 13: 
      var $72=$agg_result;
      var $73=$copy;
      assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($73)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($73)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($73)+(8))>>2)];
      label = 14; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref_n($agg_result, $mrb, $s, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $idx; $idx = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($idx)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($idx)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($idx)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $sym=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      $1=$mrb;
      var $6=(($idx+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==16;
      if ($8) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $10=$1;
      _mrb_check_intern_str($sym, $10, $idx);
      var $11=(($sym+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==0;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=(($sym)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=$1;
      var $21=$1;
      var $22=_mrb_class_get($21, ((96880)|0));
      _mrb_raisef($20, $22, ((113204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($idx)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($idx)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($idx)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $24=$idx;
      var $25=$sym;
      assert(12 % 1 === 0);HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)];HEAP32[((($24)+(8))>>2)]=HEAP32[((($25)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $27=(($idx+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|(0))==4;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $31=$1;
      var $32=(($idx)|0);
      var $33=$32;
      var $34=HEAP16[(($33)>>1)];
      _mrb_struct_aref_id($agg_result, $31, $s, $34);
      label = 15; break;
    case 8: 
      var $36=(($idx)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      $i=$38;
      var $39=$i;
      var $40=(($39)|(0)) < 0;
      if ($40) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $42=(($s)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$i;
      var $49=((($47)+($48))|0);
      $i=$49;
      label = 10; break;
    case 10: 
      var $51=$i;
      var $52=(($51)|(0)) < 0;
      if ($52) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $54=$1;
      var $55=$1;
      var $56=_mrb_class_get($55, ((96880)|0));
      var $57=$i;
      _mrb_fixnum_value1604($2, $57);
      var $58=(($s)|0);
      var $59=$58;
      var $60=HEAP32[(($59)>>2)];
      var $61=$60;
      var $62=(($61+12)|0);
      var $63=HEAP32[(($62)>>2)];
      _mrb_fixnum_value1604($3, $63);
      _mrb_raisef($54, $56, ((112320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($3)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 12; break;
    case 12: 
      var $65=(($s)|0);
      var $66=$65;
      var $67=HEAP32[(($66)>>2)];
      var $68=$67;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$i;
      var $72=(($70)|(0)) <= (($71)|(0));
      if ($72) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $74=$1;
      var $75=$1;
      var $76=_mrb_class_get($75, ((96880)|0));
      var $77=$i;
      _mrb_fixnum_value1604($4, $77);
      var $78=(($s)|0);
      var $79=$78;
      var $80=HEAP32[(($79)>>2)];
      var $81=$80;
      var $82=(($81+12)|0);
      var $83=HEAP32[(($82)>>2)];
      _mrb_fixnum_value1604($5, $83);
      _mrb_raisef($74, $76, ((111728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 14; break;
    case 14: 
      var $85=$i;
      var $86=(($s)|0);
      var $87=$86;
      var $88=HEAP32[(($87)>>2)];
      var $89=$88;
      var $90=(($89+20)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+((($85)*(12))&-1))|0);
      var $93=$agg_result;
      var $94=$92;
      assert(12 % 1 === 0);HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($94)+(4))>>2)];HEAP32[((($93)+(8))>>2)]=HEAP32[((($94)+(8))>>2)];
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref_id($agg_result, $mrb, $s, $id) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $ptr;
      var $members=__stackBase__;
      var $ptr_members;
      var $i;
      var $len;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$id;
      var $5=(($s)|0);
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      var $9=(($8+20)|0);
      var $10=HEAP32[(($9)>>2)];
      $ptr=$10;
      var $11=$1;
      _mrb_struct_members($3, $11, $s);
      var $12=$members;
      var $13=$3;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=(($members)|0);
      var $15=$14;
      var $16=HEAP32[(($15)>>2)];
      var $17=$16;
      var $18=(($17+20)|0);
      var $19=HEAP32[(($18)>>2)];
      $ptr_members=$19;
      var $20=(($members)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      $len=$25;
      $i=0;
      label = 2; break;
    case 2: 
      var $27=$i;
      var $28=$len;
      var $29=(($27)|(0)) < (($28)|(0));
      if ($29) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $31=$i;
      var $32=$ptr_members;
      var $33=(($32+((($31)*(12))&-1))|0);
      var $34=(($33)|0);
      var $35=$34;
      var $36=HEAP16[(($35)>>1)];
      var $37=(($36 << 16) >> 16);
      var $38=$2;
      var $39=(($38 << 16) >> 16);
      var $40=(($37)|(0))==(($39)|(0));
      if ($40) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $42=$i;
      var $43=$ptr;
      var $44=(($43+((($42)*(12))&-1))|0);
      var $45=$agg_result;
      var $46=$44;
      assert(12 % 1 === 0);HEAP32[(($45)>>2)]=HEAP32[(($46)>>2)];HEAP32[((($45)+(4))>>2)]=HEAP32[((($46)+(4))>>2)];HEAP32[((($45)+(8))>>2)]=HEAP32[((($46)+(8))>>2)];
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $49=$i;
      var $50=((($49)+(1))|0);
      $i=$50;
      label = 2; break;
    case 7: 
      var $52=$1;
      var $53=$1;
      var $54=_mrb_class_get($53, ((96880)|0));
      var $55=$1;
      var $56=$2;
      _mrb_sym2str($4, $55, $56);
      _mrb_raisef($52, $54, ((113204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
      _mrb_nil_value1606($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aref($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $idx=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((94708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$idx,tempInt));
  var $4=$1;
  _mrb_struct_aref_n($agg_result, $4, $s, $idx);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_aset($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $idx=__stackBase__;
      var $val=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      var $4=(__stackBase__)+(48);
      var $5=(__stackBase__)+(60);
      $1=$mrb;
      var $6=$1;
      var $7=_mrb_get_args($6, ((111268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$idx,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
      var $8=(($idx+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==16;
      if ($10) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $12=(($idx+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==4;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_obj_to_sym($17, $idx);
      _mrb_struct_aset_id($agg_result, $16, $s, $18, $val);
      label = 11; break;
    case 4: 
      var $20=(($idx)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      $i=$22;
      var $23=$i;
      var $24=(($23)|(0)) < 0;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $26=(($s)|0);
      var $27=$26;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28;
      var $30=(($29+12)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$i;
      var $33=((($31)+($32))|0);
      $i=$33;
      label = 6; break;
    case 6: 
      var $35=$i;
      var $36=(($35)|(0)) < 0;
      if ($36) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $38=$1;
      var $39=$1;
      var $40=_mrb_class_get($39, ((96880)|0));
      var $41=$i;
      _mrb_fixnum_value1604($2, $41);
      var $42=(($s)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+12)|0);
      var $47=HEAP32[(($46)>>2)];
      _mrb_fixnum_value1604($3, $47);
      _mrb_raisef($38, $40, ((112320)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($2)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($2)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($2)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($3)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 8; break;
    case 8: 
      var $49=(($s)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=(($52+12)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$i;
      var $56=(($54)|(0)) <= (($55)|(0));
      if ($56) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $58=$1;
      var $59=$1;
      var $60=_mrb_class_get($59, ((96880)|0));
      var $61=$i;
      _mrb_fixnum_value1604($4, $61);
      var $62=(($s)|0);
      var $63=$62;
      var $64=HEAP32[(($63)>>2)];
      var $65=$64;
      var $66=(($65+12)|0);
      var $67=HEAP32[(($66)>>2)];
      _mrb_fixnum_value1604($5, $67);
      _mrb_raisef($58, $60, ((111728)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 10; break;
    case 10: 
      var $69=$i;
      var $70=(($s)|0);
      var $71=$70;
      var $72=HEAP32[(($71)>>2)];
      var $73=$72;
      var $74=(($73+20)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($75+((($69)*(12))&-1))|0);
      var $77=$76;
      var $78=$val;
      assert(12 % 1 === 0);HEAP32[(($77)>>2)]=HEAP32[(($78)>>2)];HEAP32[((($77)+(4))>>2)]=HEAP32[((($78)+(4))>>2)];HEAP32[((($77)+(8))>>2)]=HEAP32[((($78)+(8))>>2)];
      var $79=$agg_result;
      var $80=$76;
      assert(12 % 1 === 0);HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];HEAP32[((($79)+(8))>>2)]=HEAP32[((($80)+(8))>>2)];
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_aset_id($agg_result, $mrb, $s, $id, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $members=__stackBase__;
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      var $5=(__stackBase__)+(36);
      var $6=(__stackBase__)+(48);
      $1=$mrb;
      $2=$id;
      var $7=$1;
      _mrb_struct_members($3, $7, $s);
      var $8=$members;
      var $9=$3;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      var $10=(($members)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=$12;
      var $14=(($13+12)|0);
      var $15=HEAP32[(($14)>>2)];
      $len=$15;
      var $16=(($s)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$len;
      var $23=(($21)|(0))!=(($22)|(0));
      if ($23) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $25=$1;
      var $26=$1;
      var $27=_mrb_class_get($26, ((112888)|0));
      var $28=$len;
      _mrb_fixnum_value1604($4, $28);
      var $29=(($s)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      _mrb_fixnum_value1604($5, $34);
      _mrb_raisef($25, $27, ((98932)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($4)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($4)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($5)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($5)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($5)+(8))>>2)],tempInt));
      label = 3; break;
    case 3: 
      var $36=(($s)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      $ptr=$41;
      var $42=(($members)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      $ptr_members=$47;
      $i=0;
      label = 4; break;
    case 4: 
      var $49=$i;
      var $50=$len;
      var $51=(($49)|(0)) < (($50)|(0));
      if ($51) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $53=$i;
      var $54=$ptr_members;
      var $55=(($54+((($53)*(12))&-1))|0);
      var $56=(($55)|0);
      var $57=$56;
      var $58=HEAP16[(($57)>>1)];
      var $59=(($58 << 16) >> 16);
      var $60=$2;
      var $61=(($60 << 16) >> 16);
      var $62=(($59)|(0))==(($61)|(0));
      if ($62) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $64=$i;
      var $65=$ptr;
      var $66=(($65+((($64)*(12))&-1))|0);
      var $67=$66;
      var $68=$val;
      assert(12 % 1 === 0);HEAP32[(($67)>>2)]=HEAP32[(($68)>>2)];HEAP32[((($67)+(4))>>2)]=HEAP32[((($68)+(4))>>2)];HEAP32[((($67)+(8))>>2)]=HEAP32[((($68)+(8))>>2)];
      var $69=$agg_result;
      var $70=$val;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      label = 10; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $73=$i;
      var $74=((($73)+(1))|0);
      $i=$74;
      label = 4; break;
    case 9: 
      var $76=$1;
      var $77=$1;
      var $78=_mrb_class_get($77, ((96880)|0));
      var $79=$1;
      var $80=$2;
      _mrb_sym2str($6, $79, $80);
      _mrb_raisef($76, $78, ((113204)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($6)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($6)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($6)+(8))>>2)],tempInt));
      var $81=$agg_result;
      var $82=$val;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_struct_gem_init($mrb) {
  var label = 0;
  var $1;
  var $st;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((101604)|0), $5);
  $st=$6;
  var $7=$1;
  var $8=$st;
  _mrb_define_class_method($7, $8, ((110744)|0), 514, 4096);
  var $9=$1;
  var $10=$st;
  _mrb_define_method($9, $10, ((110376)|0), 720, 262144);
  var $11=$1;
  var $12=$st;
  _mrb_define_method($11, $12, ((109948)|0), 488, 262144);
  var $13=$1;
  var $14=$st;
  _mrb_define_method($13, $14, ((109508)|0), 632, 524288);
  var $15=$1;
  var $16=$st;
  _mrb_define_method($15, $16, ((109020)|0), 708, 0);
  var $17=$1;
  var $18=$st;
  _mrb_define_method($17, $18, ((108472)|0), 230, 4096);
  var $19=$1;
  var $20=$st;
  _mrb_define_method($19, $20, ((108128)|0), 28, 262144);
  var $21=$1;
  var $22=$st;
  _mrb_define_method($21, $22, ((107588)|0), 368, 0);
  var $23=$1;
  var $24=$st;
  _mrb_define_alias($23, $24, ((107324)|0), ((107588)|0));
  var $25=$1;
  var $26=$st;
  _mrb_define_method($25, $26, ((106908)|0), 210, 262144);
  return;
}
function _mrb_struct_s_def($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 176)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $name=__stackBase__;
      var $rest=(__stackBase__)+(12);
      var $pargv;
      var $argcnt;
      var $i;
      var $b=(__stackBase__)+(24);
      var $st=(__stackBase__)+(36);
      var $id;
      var $argv=(__stackBase__)+(48);
      var $argc=(__stackBase__)+(52);
      var $2=(__stackBase__)+(56);
      var $3=(__stackBase__)+(68);
      var $4=(__stackBase__)+(80);
      var $5=(__stackBase__)+(92);
      var $6=(__stackBase__)+(104);
      var $7=(__stackBase__)+(116);
      var $8=(__stackBase__)+(128);
      var $9=(__stackBase__)+(140);
      var $10=(__stackBase__)+(152);
      var $11=(__stackBase__)+(164);
      $1=$mrb;
      _mrb_nil_value1606($2);
      var $12=$name;
      var $13=$2;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      _mrb_nil_value1606($3);
      var $14=$rest;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=$1;
      var $17=_mrb_get_args($16, ((103784)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,HEAP32[(((tempInt)+(8))>>2)]=$b,tempInt));
      var $18=HEAP32[(($argc)>>2)];
      var $19=(($18)|(0))==0;
      if ($19) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $21=$1;
      _mrb_ary_new($4, $21);
      var $22=$rest;
      var $23=$4;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      label = 23; break;
    case 3: 
      var $25=HEAP32[(($argc)>>2)];
      var $26=(($25)|(0)) > 0;
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=HEAP32[(($argv)>>2)];
      var $29=(($28)|0);
      var $30=$name;
      var $31=$29;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $33=HEAP32[(($argc)>>2)];
      var $34=(($33)|(0)) > 1;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $36=HEAP32[(($argv)>>2)];
      var $37=(($36+12)|0);
      var $38=$rest;
      var $39=$37;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $41=(($rest+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|(0))==14;
      if ($43) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $45=(($name+8)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($46)|(0))==0;
      if ($47) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $49=(($name)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=(($51)|(0))!=0;
      if ($52) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $54=(($name+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|(0))==4;
      if ($56) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $58=$1;
      _mrb_ary_unshift($5, $58, $rest, $name);
      _mrb_nil_value1606($6);
      var $59=$name;
      var $60=$6;
      assert(12 % 1 === 0);HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($59)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];
      label = 12; break;
    case 12: 
      label = 18; break;
    case 13: 
      var $63=HEAP32[(($argv)>>2)];
      var $64=(($63+12)|0);
      $pargv=$64;
      var $65=HEAP32[(($argc)>>2)];
      var $66=((($65)-(1))|0);
      $argcnt=$66;
      var $67=(($name+8)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($68)|(0))==0;
      if ($69) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $71=(($name)|0);
      var $72=$71;
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|(0))!=0;
      if ($74) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $76=(($name+8)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77)|(0))==4;
      if ($78) { label = 16; break; } else { label = 17; break; }
    case 16: 
      _mrb_nil_value1606($7);
      var $80=$name;
      var $81=$7;
      assert(12 % 1 === 0);HEAP32[(($80)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($80)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($80)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];
      var $82=HEAP32[(($argv)>>2)];
      var $83=(($82)|0);
      $pargv=$83;
      var $84=$argcnt;
      var $85=((($84)+(1))|0);
      $argcnt=$85;
      label = 17; break;
    case 17: 
      var $87=$1;
      var $88=$argcnt;
      var $89=$pargv;
      _mrb_ary_new_from_values($8, $87, $88, $89);
      var $90=$rest;
      var $91=$8;
      assert(12 % 1 === 0);HEAP32[(($90)>>2)]=HEAP32[(($91)>>2)];HEAP32[((($90)+(4))>>2)]=HEAP32[((($91)+(4))>>2)];HEAP32[((($90)+(8))>>2)]=HEAP32[((($91)+(8))>>2)];
      label = 18; break;
    case 18: 
      $i=0;
      label = 19; break;
    case 19: 
      var $94=$i;
      var $95=(($rest)|0);
      var $96=$95;
      var $97=HEAP32[(($96)>>2)];
      var $98=$97;
      var $99=(($98+12)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($94)|(0)) < (($100)|(0));
      if ($101) { label = 20; break; } else { label = 22; break; }
    case 20: 
      var $103=$1;
      var $104=$i;
      var $105=(($rest)|0);
      var $106=$105;
      var $107=HEAP32[(($106)>>2)];
      var $108=$107;
      var $109=(($108+20)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110+((($104)*(12))&-1))|0);
      var $112=_mrb_obj_to_sym($103, $111);
      $id=$112;
      var $113=$i;
      var $114=(($rest)|0);
      var $115=$114;
      var $116=HEAP32[(($115)>>2)];
      var $117=$116;
      var $118=(($117+20)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119+((($113)*(12))&-1))|0);
      var $121=$id;
      _mrb_symbol_value1605($9, $121);
      var $122=$120;
      var $123=$9;
      assert(12 % 1 === 0);HEAP32[(($122)>>2)]=HEAP32[(($123)>>2)];HEAP32[((($122)+(4))>>2)]=HEAP32[((($123)+(4))>>2)];HEAP32[((($122)+(8))>>2)]=HEAP32[((($123)+(8))>>2)];
      label = 21; break;
    case 21: 
      var $125=$i;
      var $126=((($125)+(1))|0);
      $i=$126;
      label = 19; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $129=$1;
      var $130=$1;
      var $131=_struct_class($130);
      _make_struct($10, $129, $name, $rest, $131);
      var $132=$st;
      var $133=$10;
      assert(12 % 1 === 0);HEAP32[(($132)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($132)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($132)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
      var $134=(($b+8)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|(0))==0;
      if ($136) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $138=(($b)|0);
      var $139=$138;
      var $140=HEAP32[(($139)>>2)];
      var $141=(($140)|(0))!=0;
      if ($141) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $143=$1;
      _mrb_funcall($11, $143, $b, ((103564)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$st,tempInt));
      label = 26; break;
    case 26: 
      var $145=$agg_result;
      var $146=$st;
      assert(12 % 1 === 0);HEAP32[(($145)>>2)]=HEAP32[(($146)>>2)];HEAP32[((($145)+(4))>>2)]=HEAP32[((($146)+(4))>>2)];HEAP32[((($145)+(8))>>2)]=HEAP32[((($146)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_struct_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_struct_equal($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s2=__stackBase__;
      var $ptr;
      var $ptr2;
      var $i;
      var $len;
      var $equal_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $s, $s2);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $equal_p=1;
      label = 17; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_obj_class($10, $s);
      var $12=_mrb_class_name($9, $11);
      var $13=_strcmp($12, ((101604)|0));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $17=_mrb_obj_class($16, $s);
      var $18=$1;
      var $19=_mrb_obj_class($18, $s2);
      var $20=(($17)|(0))!=(($19)|(0));
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $equal_p=0;
      label = 16; break;
    case 6: 
      var $23=(($s)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($s2)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($28)|(0))!=(($34)|(0));
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $37=$1;
      _mrb_bug($37, ((106472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $equal_p=0;
      label = 15; break;
    case 8: 
      var $39=(($s)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      $ptr=$44;
      var $45=(($s2)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      $ptr2=$50;
      var $51=(($s)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      $len=$56;
      $equal_p=1;
      $i=0;
      label = 9; break;
    case 9: 
      var $58=$i;
      var $59=$len;
      var $60=(($58)|(0)) < (($59)|(0));
      if ($60) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $62=$1;
      var $63=$i;
      var $64=$ptr;
      var $65=(($64+((($63)*(12))&-1))|0);
      var $66=$i;
      var $67=$ptr2;
      var $68=(($67+((($66)*(12))&-1))|0);
      var $69=_mrb_equal($62, $65, $68);
      var $70=(($69)|(0))!=0;
      if ($70) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $equal_p=0;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 9; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $80=$equal_p;
      _mrb_bool_value1611($agg_result, $80);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_members_m($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  var $4=$1;
  var $5=_mrb_obj_class($4, $obj);
  var $6=$5;
  _mrb_obj_value1603($2, $6);
  _mrb_struct_s_members_m($agg_result, $3, $2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_initialize_m($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((103988)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $4=$1;
  var $5=HEAP32[(($argc)>>2)];
  var $6=HEAP32[(($argv)>>2)];
  _mrb_struct_initialize_withArg($agg_result, $4, $5, $6, $self);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_inspect($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  _inspect_struct($agg_result, $2, $s, 0);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_eql($agg_result, $mrb, $s) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $s2=__stackBase__;
      var $ptr;
      var $ptr2;
      var $i;
      var $len;
      var $eql_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((94708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s2,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $s, $s2);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $eql_p=1;
      label = 17; break;
    case 3: 
      var $9=$1;
      var $10=$1;
      var $11=_mrb_obj_class($10, $s2);
      var $12=_mrb_class_name($9, $11);
      var $13=_strcmp($12, ((101604)|0));
      var $14=(($13)|(0))!=0;
      if ($14) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $16=$1;
      var $17=_mrb_obj_class($16, $s);
      var $18=$1;
      var $19=_mrb_obj_class($18, $s2);
      var $20=(($17)|(0))!=(($19)|(0));
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $eql_p=0;
      label = 16; break;
    case 6: 
      var $23=(($s)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($s2)|0);
      var $30=$29;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31;
      var $33=(($32+12)|0);
      var $34=HEAP32[(($33)>>2)];
      var $35=(($28)|(0))!=(($34)|(0));
      if ($35) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $37=$1;
      _mrb_bug($37, ((106472)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      $eql_p=0;
      label = 15; break;
    case 8: 
      var $39=(($s)|0);
      var $40=$39;
      var $41=HEAP32[(($40)>>2)];
      var $42=$41;
      var $43=(($42+20)|0);
      var $44=HEAP32[(($43)>>2)];
      $ptr=$44;
      var $45=(($s2)|0);
      var $46=$45;
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=(($48+20)|0);
      var $50=HEAP32[(($49)>>2)];
      $ptr2=$50;
      var $51=(($s)|0);
      var $52=$51;
      var $53=HEAP32[(($52)>>2)];
      var $54=$53;
      var $55=(($54+12)|0);
      var $56=HEAP32[(($55)>>2)];
      $len=$56;
      $eql_p=1;
      $i=0;
      label = 9; break;
    case 9: 
      var $58=$i;
      var $59=$len;
      var $60=(($58)|(0)) < (($59)|(0));
      if ($60) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $62=$1;
      var $63=$i;
      var $64=$ptr;
      var $65=(($64+((($63)*(12))&-1))|0);
      var $66=$i;
      var $67=$ptr2;
      var $68=(($67+((($66)*(12))&-1))|0);
      var $69=_mrb_eql($62, $65, $68);
      var $70=(($69)|(0))!=0;
      if ($70) { label = 12; break; } else { label = 11; break; }
    case 11: 
      $eql_p=0;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $74=$i;
      var $75=((($74)+(1))|0);
      $i=$75;
      label = 9; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $80=$eql_p;
      _mrb_bool_value1611($agg_result, $80);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1611($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _inspect_struct($agg_result, $mrb, $s, $recur) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 196)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $s; $s = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($s)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($s)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($s)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $cn;
      var $members=__stackBase__;
      var $str=(__stackBase__)+(12);
      var $ptr;
      var $ptr_members;
      var $i;
      var $len;
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      var $slot=(__stackBase__)+(60);
      var $id;
      var $6=(__stackBase__)+(72);
      var $7=(__stackBase__)+(84);
      var $name;
      var $len1=(__stackBase__)+(96);
      var $8=(__stackBase__)+(100);
      var $9=(__stackBase__)+(112);
      var $10=(__stackBase__)+(124);
      var $11=(__stackBase__)+(136);
      var $12=(__stackBase__)+(148);
      var $13=(__stackBase__)+(160);
      var $14=(__stackBase__)+(172);
      var $15=(__stackBase__)+(184);
      $1=$mrb;
      $2=$recur;
      var $16=$1;
      var $17=$1;
      var $18=_mrb_obj_class($17, $s);
      var $19=_mrb_class_name($16, $18);
      $cn=$19;
      var $20=$1;
      _mrb_str_new($str, $20, ((106092)|0), 9);
      var $21=$cn;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $24=$1;
      var $25=$1;
      var $26=$cn;
      _mrb_str_new_cstr($3, $25, $26);
      _mrb_str_append($4, $24, $str, $3);
      label = 3; break;
    case 3: 
      var $28=$2;
      var $29=(($28)|(0))!=0;
      if ($29) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $31=$1;
      _mrb_str_cat21612($agg_result, $31, $str, ((105776)|0));
      label = 19; break;
    case 5: 
      var $33=$1;
      _mrb_struct_members($5, $33, $s);
      var $34=$members;
      var $35=$5;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      var $36=(($members)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      $ptr_members=$41;
      var $42=(($s)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      $ptr=$47;
      var $48=(($s)|0);
      var $49=$48;
      var $50=HEAP32[(($49)>>2)];
      var $51=$50;
      var $52=(($51+12)|0);
      var $53=HEAP32[(($52)>>2)];
      $len=$53;
      $i=0;
      label = 6; break;
    case 6: 
      var $55=$i;
      var $56=$len;
      var $57=(($55)|(0)) < (($56)|(0));
      if ($57) { label = 7; break; } else { label = 18; break; }
    case 7: 
      var $59=$i;
      var $60=(($59)|(0)) > 0;
      if ($60) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $62=$1;
      _mrb_str_cat21612($6, $62, $str, ((105464)|0));
      label = 12; break;
    case 9: 
      var $64=$cn;
      var $65=(($64)|(0))!=0;
      if ($65) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $67=$1;
      _mrb_str_cat21612($7, $67, $str, ((105180)|0));
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $70=$i;
      var $71=$ptr_members;
      var $72=(($71+((($70)*(12))&-1))|0);
      var $73=$slot;
      var $74=$72;
      assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($74)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($74)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($74)+(8))>>2)];
      var $75=(($slot)|0);
      var $76=$75;
      var $77=HEAP16[(($76)>>1)];
      $id=$77;
      var $78=$id;
      var $79=_mrb_is_local_id($78);
      var $80=(($79)|(0))!=0;
      if ($80) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $82=$id;
      var $83=_mrb_is_const_id($82);
      var $84=(($83)|(0))!=0;
      if ($84) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $86=$1;
      var $87=$id;
      var $88=_mrb_sym2name_len($86, $87, $len1);
      $name=$88;
      var $89=$1;
      var $90=$1;
      var $91=$name;
      var $92=HEAP32[(($len1)>>2)];
      _mrb_str_new($8, $90, $91, $92);
      _mrb_str_append($9, $89, $str, $8);
      label = 16; break;
    case 15: 
      var $94=$1;
      var $95=$1;
      _mrb_inspect($10, $95, $slot);
      _mrb_str_append($11, $94, $str, $10);
      label = 16; break;
    case 16: 
      var $97=$1;
      _mrb_str_cat21612($12, $97, $str, ((104864)|0));
      var $98=$1;
      var $99=$1;
      var $100=$i;
      var $101=$ptr;
      var $102=(($101+((($100)*(12))&-1))|0);
      _mrb_inspect($13, $99, $102);
      _mrb_str_append($14, $98, $str, $13);
      label = 17; break;
    case 17: 
      var $104=$i;
      var $105=((($104)+(1))|0);
      $i=$105;
      label = 6; break;
    case 18: 
      var $107=$1;
      _mrb_str_cat21612($15, $107, $str, ((104572)|0));
      var $108=$agg_result;
      var $109=$str;
      assert(12 % 1 === 0);HEAP32[(($108)>>2)]=HEAP32[(($109)>>2)];HEAP32[((($108)+(4))>>2)]=HEAP32[((($109)+(4))>>2)];HEAP32[((($108)+(8))>>2)]=HEAP32[((($109)+(8))>>2)];
      label = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_str_cat21612($agg_result, $mrb, $str, $ptr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $str; $str = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($str)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($str)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($str)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$ptr;
  var $3=$1;
  var $4=$2;
  _mrb_str_cat_cstr($agg_result, $3, $str, $4);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_s_members_m($agg_result, $mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $klass; $klass = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($klass)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($klass)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($klass)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $members=__stackBase__;
      var $ary=(__stackBase__)+(12);
      var $p;
      var $pend;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=$1;
      _mrb_struct_s_members($2, $4, $klass);
      var $5=$members;
      var $6=$2;
      assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
      var $7=$1;
      var $8=(($members)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10;
      var $12=(($11+12)|0);
      var $13=HEAP32[(($12)>>2)];
      _mrb_ary_new_capa($3, $7, $13);
      var $14=$ary;
      var $15=$3;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      var $16=(($members)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+20)|0);
      var $21=HEAP32[(($20)>>2)];
      $p=$21;
      var $22=$p;
      var $23=(($members)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26+12)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($22+((($28)*(12))&-1))|0);
      $pend=$29;
      label = 2; break;
    case 2: 
      var $31=$p;
      var $32=$pend;
      var $33=(($31)>>>(0)) < (($32)>>>(0));
      if ($33) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $35=$1;
      var $36=$p;
      _mrb_ary_push($35, $ary, $36);
      var $37=$p;
      var $38=(($37+12)|0);
      $p=$38;
      label = 2; break;
    case 4: 
      var $40=$agg_result;
      var $41=$ary;
      assert(12 % 1 === 0);HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)];HEAP32[((($40)+(8))>>2)]=HEAP32[((($41)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _num_members($mrb, $klass) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $members=__stackBase__;
      var $3=(__stackBase__)+(12);
      var $4=(__stackBase__)+(24);
      $1=$mrb;
      $2=$klass;
      var $5=$1;
      var $6=$2;
      var $7=$6;
      _mrb_obj_value1603($3, $7);
      var $8=$1;
      var $9=_mrb_intern2($8, ((110556)|0), 11);
      _struct_ivar_get($4, $5, $3, $9);
      var $10=$members;
      var $11=$4;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=(($members+8)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|(0))==14;
      if ($14) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_class_get($17, ((112888)|0));
      _mrb_raise($16, $18, ((102860)|0));
      label = 3; break;
    case 3: 
      var $20=(($members)|0);
      var $21=$20;
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_ref($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+8)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=(($5+16)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=HEAP16[(($8)>>1)];
  _mrb_struct_getmember($agg_result, $2, $obj, $9);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set_m($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $val=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((94708)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
  var $4=$1;
  _mrb_struct_set($agg_result, $4, $obj, $val);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_set($agg_result, $mrb, $obj, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 52)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $val; $val = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($val)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($val)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($val)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $name;
      var $i;
      var $len=__stackBase__;
      var $mid;
      var $members=(__stackBase__)+(4);
      var $slot=(__stackBase__)+(16);
      var $ptr;
      var $ptr_members;
      var $2=(__stackBase__)+(28);
      var $3=(__stackBase__)+(40);
      $1=$mrb;
      var $4=$1;
      var $5=$1;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7+16)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0);
      var $11=HEAP16[(($10)>>1)];
      var $12=_mrb_sym2name_len($4, $11, $len);
      $name=$12;
      var $13=$1;
      var $14=$name;
      var $15=HEAP32[(($len)>>2)];
      var $16=((($15)-(1))|0);
      var $17=_mrb_intern2($13, $14, $16);
      $mid=$17;
      var $18=$1;
      _mrb_struct_members($2, $18, $obj);
      var $19=$members;
      var $20=$2;
      assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
      var $21=(($members)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      $ptr_members=$26;
      var $27=(($members)|0);
      var $28=$27;
      var $29=HEAP32[(($28)>>2)];
      var $30=$29;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      HEAP32[(($len)>>2)]=$32;
      var $33=(($obj)|0);
      var $34=$33;
      var $35=HEAP32[(($34)>>2)];
      var $36=$35;
      var $37=(($36+20)|0);
      var $38=HEAP32[(($37)>>2)];
      $ptr=$38;
      $i=0;
      label = 2; break;
    case 2: 
      var $40=$i;
      var $41=HEAP32[(($len)>>2)];
      var $42=(($40)>>>(0)) < (($41)>>>(0));
      if ($42) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $44=$i;
      var $45=$ptr_members;
      var $46=(($45+((($44)*(12))&-1))|0);
      var $47=$slot;
      var $48=$46;
      assert(12 % 1 === 0);HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)];HEAP32[((($47)+(8))>>2)]=HEAP32[((($48)+(8))>>2)];
      var $49=(($slot)|0);
      var $50=$49;
      var $51=HEAP16[(($50)>>1)];
      var $52=(($51 << 16) >> 16);
      var $53=$mid;
      var $54=(($53 << 16) >> 16);
      var $55=(($52)|(0))==(($54)|(0));
      if ($55) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $57=$i;
      var $58=$ptr;
      var $59=(($58+((($57)*(12))&-1))|0);
      var $60=$59;
      var $61=$val;
      assert(12 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];
      var $62=$agg_result;
      var $63=$59;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      label = 8; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $66=$i;
      var $67=((($66)+(1))|0);
      $i=$67;
      label = 2; break;
    case 7: 
      var $69=$1;
      var $70=$1;
      var $71=_mrb_class_get($70, ((96880)|0));
      var $72=$1;
      var $73=$mid;
      _mrb_sym2str($3, $72, $73);
      _mrb_raisef($69, $71, ((102032)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      _mrb_nil_value1606($agg_result);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_struct_ref0($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref1($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+12)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref2($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+24)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref3($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+36)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref4($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+48)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref5($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+60)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref6($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+72)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref7($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+84)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref8($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+96)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_struct_ref9($agg_result, $mrb, $obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=(($obj)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  var $6=(($5+20)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7+108)|0);
  var $9=$agg_result;
  var $10=$8;
  assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_time_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_time_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_time_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_time_gem_final($2);
  return;
}
function _mrb_mruby_time_gem_init($mrb) {
  var label = 0;
  var $1;
  var $tc;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((110328)|0), $5);
  $tc=$6;
  var $7=$tc;
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9 >>> 11;
  var $11=$10 & 2097151;
  var $12=$11 & -256;
  var $13=$12 | 21;
  var $14=$tc;
  var $15=$13 & 2097151;
  var $16=$14;
  var $17=$15 & 2097151;
  var $18=$17 << 11;
  var $19=HEAP32[(($16)>>2)];
  var $20=$19 & 2047;
  var $21=$20 | $18;
  HEAP32[(($16)>>2)]=$21;
  var $22=$1;
  var $23=$tc;
  var $24=$1;
  var $25=_mrb_class_get($24, ((112864)|0));
  _mrb_include_module($22, $23, $25);
  var $26=$1;
  var $27=$tc;
  _mrb_define_class_method($26, $27, ((107896)|0), 440, 4096);
  var $28=$1;
  var $29=$tc;
  _mrb_define_class_method($28, $29, ((104312)|0), 54, 311296);
  var $30=$1;
  var $31=$tc;
  _mrb_define_class_method($30, $31, ((101580)|0), 442, 311296);
  var $32=$1;
  var $33=$tc;
  _mrb_define_class_method($32, $33, ((98896)|0), 442, 311296);
  var $34=$1;
  var $35=$tc;
  _mrb_define_class_method($34, $35, ((96876)|0), 500, 0);
  var $36=$1;
  var $37=$tc;
  _mrb_define_class_method($36, $37, ((95664)|0), 54, 311296);
  var $38=$1;
  var $39=$tc;
  _mrb_define_method($38, $39, ((94692)|0), 364, 262144);
  var $40=$1;
  var $41=$tc;
  _mrb_define_method($40, $41, ((93800)|0), 366, 262144);
  var $42=$1;
  var $43=$tc;
  _mrb_define_method($42, $43, ((113800)|0), 612, 262144);
  var $44=$1;
  var $45=$tc;
  _mrb_define_method($44, $45, ((113180)|0), 140, 262144);
  var $46=$1;
  var $47=$tc;
  _mrb_define_method($46, $47, ((112308)|0), 218, 0);
  var $48=$1;
  var $49=$tc;
  _mrb_define_method($48, $49, ((111696)|0), 218, 0);
  var $50=$1;
  var $51=$tc;
  _mrb_define_method($50, $51, ((111256)|0), 218, 0);
  var $52=$1;
  var $53=$tc;
  _mrb_define_method($52, $53, ((110736)|0), 218, 0);
  var $54=$1;
  var $55=$tc;
  _mrb_define_method($54, $55, ((110372)|0), 356, 0);
  var $56=$1;
  var $57=$tc;
  _mrb_define_method($56, $57, ((109940)|0), 258, 0);
  var $58=$1;
  var $59=$tc;
  _mrb_define_method($58, $59, ((109500)|0), 292, 0);
  var $60=$1;
  var $61=$tc;
  _mrb_define_method($60, $61, ((109008)|0), 198, 0);
  var $62=$1;
  var $63=$tc;
  _mrb_define_method($62, $63, ((108464)|0), 292, 0);
  var $64=$1;
  var $65=$tc;
  _mrb_define_method($64, $65, ((108120)|0), 616, 0);
  var $66=$1;
  var $67=$tc;
  _mrb_define_method($66, $67, ((107580)|0), 574, 0);
  var $68=$1;
  var $69=$tc;
  _mrb_define_method($68, $69, ((107316)|0), 666, 0);
  var $70=$1;
  var $71=$tc;
  _mrb_define_method($70, $71, ((106896)|0), 682, 0);
  var $72=$1;
  var $73=$tc;
  _mrb_define_method($72, $73, ((106464)|0), 168, 0);
  var $74=$1;
  var $75=$tc;
  _mrb_define_method($74, $75, ((106088)|0), 154, 0);
  var $76=$1;
  var $77=$tc;
  _mrb_define_method($76, $77, ((105772)|0), 718, 0);
  var $78=$1;
  var $79=$tc;
  _mrb_define_method($78, $79, ((105456)|0), 718, 0);
  var $80=$1;
  var $81=$tc;
  _mrb_define_method($80, $81, ((105176)|0), 462, 0);
  var $82=$1;
  var $83=$tc;
  _mrb_define_method($82, $83, ((104856)|0), 418, 0);
  var $84=$1;
  var $85=$tc;
  _mrb_define_method($84, $85, ((104564)|0), 414, 0);
  var $86=$1;
  var $87=$tc;
  _mrb_define_method($86, $87, ((103980)|0), 636, 0);
  var $88=$1;
  var $89=$tc;
  _mrb_define_method($88, $89, ((95664)|0), 574, 0);
  var $90=$1;
  var $91=$tc;
  _mrb_define_method($90, $91, ((103776)|0), 616, 0);
  var $92=$1;
  var $93=$tc;
  _mrb_define_method($92, $93, ((103556)|0), 532, 0);
  var $94=$1;
  var $95=$tc;
  _mrb_define_method($94, $95, ((103340)|0), 422, 0);
  var $96=$1;
  var $97=$tc;
  _mrb_define_method($96, $97, ((103132)|0), 376, 0);
  var $98=$1;
  var $99=$tc;
  _mrb_define_method($98, $99, ((102852)|0), 344, 0);
  var $100=$1;
  var $101=$tc;
  _mrb_define_method($100, $101, ((102648)|0), 152, 262144);
  var $102=$1;
  var $103=$tc;
  _mrb_define_method($102, $103, ((102320)|0), 138, 262144);
  return;
}
function _mrb_time_at($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $f=__stackBase__;
  var $f2=(__stackBase__)+(8);
  $1=$mrb;
  (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($f2)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f2)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $2=$1;
  var $3=_mrb_get_args($2, ((95412)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,HEAP32[(((tempInt)+(4))>>2)]=$f2,tempInt));
  var $4=$1;
  var $5=(($self)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  var $10=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f2)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f2)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  _mrb_time_make($agg_result, $4, $8, $9, $10, 2);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_gm($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ayear=__stackBase__;
  var $amonth=(__stackBase__)+(4);
  var $aday=(__stackBase__)+(8);
  var $ahour=(__stackBase__)+(12);
  var $amin=(__stackBase__)+(16);
  var $asec=(__stackBase__)+(20);
  var $ausec=(__stackBase__)+(24);
  $1=$mrb;
  HEAP32[(($ayear)>>2)]=0;
  HEAP32[(($amonth)>>2)]=1;
  HEAP32[(($aday)>>2)]=1;
  HEAP32[(($ahour)>>2)]=0;
  HEAP32[(($amin)>>2)]=0;
  HEAP32[(($asec)>>2)]=0;
  HEAP32[(($ausec)>>2)]=0;
  var $2=$1;
  var $3=_mrb_get_args($2, ((95484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
  var $4=$1;
  var $5=(($self)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=$1;
  var $10=HEAP32[(($ayear)>>2)];
  var $11=HEAP32[(($amonth)>>2)];
  var $12=HEAP32[(($aday)>>2)];
  var $13=HEAP32[(($ahour)>>2)];
  var $14=HEAP32[(($amin)>>2)];
  var $15=HEAP32[(($asec)>>2)];
  var $16=HEAP32[(($ausec)>>2)];
  var $17=_time_mktime($9, $10, $11, $12, $13, $14, $15, $16, 1);
  _mrb_time_wrap($agg_result, $4, $8, $17);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_local($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ayear=__stackBase__;
  var $amonth=(__stackBase__)+(4);
  var $aday=(__stackBase__)+(8);
  var $ahour=(__stackBase__)+(12);
  var $amin=(__stackBase__)+(16);
  var $asec=(__stackBase__)+(20);
  var $ausec=(__stackBase__)+(24);
  $1=$mrb;
  HEAP32[(($ayear)>>2)]=0;
  HEAP32[(($amonth)>>2)]=1;
  HEAP32[(($aday)>>2)]=1;
  HEAP32[(($ahour)>>2)]=0;
  HEAP32[(($amin)>>2)]=0;
  HEAP32[(($asec)>>2)]=0;
  HEAP32[(($ausec)>>2)]=0;
  var $2=$1;
  var $3=_mrb_get_args($2, ((95484)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
  var $4=$1;
  var $5=(($self)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=$1;
  var $10=HEAP32[(($ayear)>>2)];
  var $11=HEAP32[(($amonth)>>2)];
  var $12=HEAP32[(($aday)>>2)];
  var $13=HEAP32[(($ahour)>>2)];
  var $14=HEAP32[(($amin)>>2)];
  var $15=HEAP32[(($asec)>>2)];
  var $16=HEAP32[(($ausec)>>2)];
  var $17=_time_mktime($9, $10, $11, $12, $13, $14, $15, $16, 2);
  _mrb_time_wrap($agg_result, $4, $8, $17);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_now($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=(($self)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=$1;
  var $8=_current_mrb_time($7);
  _mrb_time_wrap($agg_result, $2, $6, $8);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_time_eq($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $other=__stackBase__;
      var $tm1;
      var $tm2;
      var $eq_p;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((102028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $4=$1;
      var $5=_mrb_data_get_ptr($4, $self, 77364);
      var $6=$5;
      $tm1=$6;
      var $7=$1;
      var $8=_mrb_data_get_ptr($7, $other, 77364);
      var $9=$8;
      $tm2=$9;
      var $10=$tm1;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { var $32 = 0;label = 5; break; }
    case 2: 
      var $13=$tm2;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 3; break; } else { var $32 = 0;label = 5; break; }
    case 3: 
      var $16=$tm1;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$tm2;
      var $20=(($19)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($18)|(0))==(($21)|(0));
      if ($22) { label = 4; break; } else { var $32 = 0;label = 5; break; }
    case 4: 
      var $24=$tm1;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$tm2;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($26)|(0))==(($29)|(0));
      var $32 = $30;label = 5; break;
    case 5: 
      var $32;
      var $33=(($32)&(1));
      var $34=(($33) & 255);
      $eq_p=$34;
      var $35=$eq_p;
      _mrb_bool_value1698($agg_result, $35);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_cmp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $other=__stackBase__;
      var $tm1;
      var $tm2;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((102028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $4=$1;
      var $5=_mrb_data_get_ptr($4, $self, 77364);
      var $6=$5;
      $tm1=$6;
      var $7=$1;
      var $8=_mrb_data_get_ptr($7, $other, 77364);
      var $9=$8;
      $tm2=$9;
      var $10=$tm1;
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$tm2;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 4; break; } else { label = 3; break; }
    case 3: 
      _mrb_nil_value1695($agg_result);
      label = 15; break;
    case 4: 
      var $17=$tm1;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$tm2;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($19)|(0)) > (($22)|(0));
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _mrb_fixnum_value1696($agg_result, 1);
      label = 15; break;
    case 6: 
      var $26=$tm1;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=$tm2;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)|(0)) < (($31)|(0));
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_fixnum_value1696($agg_result, -1);
      label = 15; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$tm1;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$tm2;
      var $40=(($39+4)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=(($38)|(0)) > (($41)|(0));
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      _mrb_fixnum_value1696($agg_result, 1);
      label = 15; break;
    case 11: 
      var $45=$tm1;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$tm2;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($47)|(0)) < (($50)|(0));
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      _mrb_fixnum_value1696($agg_result, -1);
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      _mrb_fixnum_value1696($agg_result, 0);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_plus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f=__stackBase__;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((95816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,tempInt));
      var $4=$1;
      var $5=_mrb_data_get_ptr($4, $self, 77364);
      var $6=$5;
      $tm=$6;
      var $7=$tm;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_obj_class($12, $self);
      var $14=$tm;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0));
      var $18=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $19=($17)+($18);
      var $20=$tm;
      var $21=(($20+4)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22)|(0));
      var $24=$tm;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      _mrb_time_make($agg_result, $11, $13, $19, $23, $26);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_minus($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f=__stackBase__;
      var $other=(__stackBase__)+(8);
      var $tm;
      var $tm2;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((102028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$other,tempInt));
      var $4=$1;
      var $5=_mrb_data_get_ptr($4, $self, 77364);
      var $6=$5;
      $tm=$6;
      var $7=$tm;
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 6; break;
    case 3: 
      var $11=$1;
      var $12=_mrb_data_get_ptr($11, $other, 77364);
      var $13=$12;
      $tm2=$13;
      var $14=$tm2;
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$tm;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$tm2;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=((($19)-($22))|0);
      var $24=(($23)|(0));
      var $25=$tm;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$tm2;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=((($27)-($30))|0);
      var $32=(($31)|(0));
      var $33=($32)/(1000000);
      var $34=($24)+($33);
      (HEAPF64[(tempDoublePtr)>>3]=$34,HEAP32[(($f)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($f)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $35=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      _mrb_float_value1697($agg_result, $35);
      label = 6; break;
    case 5: 
      var $37=$1;
      var $38=_mrb_get_args($37, ((95816)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$f,tempInt));
      var $39=$1;
      var $40=$1;
      var $41=_mrb_obj_class($40, $self);
      var $42=$tm;
      var $43=(($42)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0));
      var $46=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($f)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($f)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $47=($45)-($46);
      var $48=$tm;
      var $49=(($48+4)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|(0));
      var $52=$tm;
      var $53=(($52+8)|0);
      var $54=HEAP32[(($53)>>2)];
      _mrb_time_make($agg_result, $39, $41, $47, $51, $54);
      label = 6; break;
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_asctime($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 256)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      var $d;
      var $buf=__stackBase__;
      var $len;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      $d=$10;
      var $11=(($buf)|0);
      var $12=$d;
      var $13=(($12+24)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((58832+($14<<2))|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$d;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=((79980+($19<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$d;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$d;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$d;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$d;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=$tm;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0))==1;
      var $38=$37 ? (((99436)|0)) : (((99160)|0));
      var $39=$d;
      var $40=(($39+20)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+(1900))|0);
      var $43=_snprintf($11, 256, ((99676)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 32)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$21,HEAP32[(((tempInt)+(8))>>2)]=$24,HEAP32[(((tempInt)+(12))>>2)]=$27,HEAP32[(((tempInt)+(16))>>2)]=$30,HEAP32[(((tempInt)+(20))>>2)]=$33,HEAP32[(((tempInt)+(24))>>2)]=$38,HEAP32[(((tempInt)+(28))>>2)]=$42,tempInt));
      $len=$43;
      var $44=$1;
      var $45=(($buf)|0);
      var $46=$len;
      _mrb_str_new($agg_result, $44, $45, $46);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_day($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_dstp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+32)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12) & 255);
      _mrb_bool_value1698($agg_result, $13);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_getutc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      var $tm2;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $11=$1;
      var $12=_mrb_malloc($11, 56);
      var $13=$12;
      $tm2=$13;
      var $14=$tm2;
      var $15=$tm;
      var $16=$14;
      var $17=$15;
      assert(56 % 1 === 0);_memcpy($16, $17, 56);
      var $18=$tm2;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=1;
      var $20=$tm2;
      var $21=_mrb_time_update_datetime($20);
      var $22=$1;
      var $23=$1;
      var $24=_mrb_obj_class($23, $self);
      var $25=$tm2;
      _mrb_time_wrap($agg_result, $22, $24, $25);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_getlocal($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      var $tm2;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $11=$1;
      var $12=_mrb_malloc($11, 56);
      var $13=$12;
      $tm2=$13;
      var $14=$tm2;
      var $15=$tm;
      var $16=$14;
      var $17=$15;
      assert(56 % 1 === 0);_memcpy($16, $17, 56);
      var $18=$tm2;
      var $19=(($18+8)|0);
      HEAP32[(($19)>>2)]=2;
      var $20=$tm2;
      var $21=_mrb_time_update_datetime($20);
      var $22=$1;
      var $23=$1;
      var $24=_mrb_obj_class($23, $self);
      var $25=$tm2;
      _mrb_time_wrap($agg_result, $22, $24, $25);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_utcp($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0))==1;
      var $13=(($12)&(1));
      var $14=(($13) & 255);
      _mrb_bool_value1698($agg_result, $14);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_utc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$tm;
      var $9=(($8+8)|0);
      HEAP32[(($9)>>2)]=1;
      var $10=$tm;
      var $11=_mrb_time_update_datetime($10);
      label = 3; break;
    case 3: 
      var $13=$agg_result;
      var $14=$self;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_hour($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+8)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_localtime($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$self;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $11=$tm;
      var $12=(($11+8)|0);
      HEAP32[(($12)>>2)]=2;
      var $13=$tm;
      var $14=_mrb_time_update_datetime($13);
      var $15=$agg_result;
      var $16=$self;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_mday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+12)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_min($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_mon($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+(1))|0);
      _mrb_fixnum_value1696($agg_result, $13);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_sec($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_to_i($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      _mrb_fixnum_value1696($agg_result, $11);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_time_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _is_leapyear($y) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$y;
      var $2=$1;
      var $3=((($2)>>>(0)))%(4);
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { var $16 = 0;label = 5; break; }
    case 2: 
      var $6=$1;
      var $7=((($6)>>>(0)))%(100);
      var $8=(($7)|(0))!=0;
      if ($8) { var $14 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $10=$1;
      var $11=((($10)>>>(0)))%(400);
      var $12=(($11)|(0))==0;
      var $14 = $12;label = 4; break;
    case 4: 
      var $14;
      var $16 = $14;label = 5; break;
    case 5: 
      var $16;
      var $17=(($16)&(1));
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_to_f($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)|(0));
      var $13=$tm;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0));
      var $17=($16)/(1000000);
      var $18=($12)+($17);
      _mrb_float_value1697($agg_result, $18);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_usec($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      _mrb_fixnum_value1696($agg_result, $11);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_wday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+24)|0);
      var $12=HEAP32[(($11)>>2)];
      _mrb_fixnum_value1696($agg_result, $12);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_yday($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+28)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+(1))|0);
      _mrb_fixnum_value1696($agg_result, $13);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_year($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 4; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+12)|0);
      var $11=(($10+20)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($12)+(1900))|0);
      _mrb_fixnum_value1696($agg_result, $13);
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_zone($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tm;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_data_get_ptr($2, $self, 77364);
      var $4=$3;
      $tm=$4;
      var $5=$tm;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      _mrb_nil_value1695($agg_result);
      label = 8; break;
    case 3: 
      var $9=$tm;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=(($11)>>>(0)) <= 0;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_nil_value1695($agg_result);
      label = 8; break;
    case 5: 
      var $15=$tm;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)>>>(0)) >= 3;
      if ($18) { label = 6; break; } else { label = 7; break; }
    case 6: 
      _mrb_nil_value1695($agg_result);
      label = 8; break;
    case 7: 
      var $21=$1;
      var $22=$tm;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((58860+($24<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      _mrb_str_new_cstr($agg_result, $21, $26);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ayear=__stackBase__;
      var $amonth=(__stackBase__)+(4);
      var $aday=(__stackBase__)+(8);
      var $ahour=(__stackBase__)+(12);
      var $amin=(__stackBase__)+(16);
      var $asec=(__stackBase__)+(20);
      var $ausec=(__stackBase__)+(24);
      var $n;
      var $tm;
      $1=$mrb;
      HEAP32[(($ayear)>>2)]=0;
      HEAP32[(($amonth)>>2)]=1;
      HEAP32[(($aday)>>2)]=1;
      HEAP32[(($ahour)>>2)]=0;
      HEAP32[(($amin)>>2)]=0;
      HEAP32[(($asec)>>2)]=0;
      HEAP32[(($ausec)>>2)]=0;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      var $6=(($5+20)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $tm=$8;
      var $9=$tm;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$tm;
      var $14=$13;
      _mrb_time_free($12, $14);
      label = 3; break;
    case 3: 
      var $16=(($self)|0);
      var $17=$16;
      var $18=HEAP32[(($17)>>2)];
      var $19=$18;
      var $20=(($19+16)|0);
      HEAP32[(($20)>>2)]=77364;
      var $21=(($self)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=(($24+20)|0);
      HEAP32[(($25)>>2)]=0;
      var $26=$1;
      var $27=_mrb_get_args($26, ((100972)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 28)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$ayear,HEAP32[(((tempInt)+(4))>>2)]=$amonth,HEAP32[(((tempInt)+(8))>>2)]=$aday,HEAP32[(((tempInt)+(12))>>2)]=$ahour,HEAP32[(((tempInt)+(16))>>2)]=$amin,HEAP32[(((tempInt)+(20))>>2)]=$asec,HEAP32[(((tempInt)+(24))>>2)]=$ausec,tempInt));
      $n=$27;
      var $28=$n;
      var $29=(($28)|(0))==0;
      if ($29) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $31=$1;
      var $32=_current_mrb_time($31);
      $tm=$32;
      label = 6; break;
    case 5: 
      var $34=$1;
      var $35=HEAP32[(($ayear)>>2)];
      var $36=HEAP32[(($amonth)>>2)];
      var $37=HEAP32[(($aday)>>2)];
      var $38=HEAP32[(($ahour)>>2)];
      var $39=HEAP32[(($amin)>>2)];
      var $40=HEAP32[(($asec)>>2)];
      var $41=HEAP32[(($ausec)>>2)];
      var $42=_time_mktime($34, $35, $36, $37, $38, $39, $40, $41, 2);
      $tm=$42;
      label = 6; break;
    case 6: 
      var $44=$tm;
      var $45=$44;
      var $46=(($self)|0);
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48;
      var $50=(($49+20)|0);
      HEAP32[(($50)>>2)]=$45;
      var $51=$agg_result;
      var $52=$self;
      assert(12 % 1 === 0);HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];HEAP32[((($51)+(8))>>2)]=HEAP32[((($52)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_initialize_copy($agg_result, $mrb, $copy) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $copy; $copy = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($copy)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($copy)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($copy)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $src=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((102028)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$src,tempInt));
      var $4=$1;
      var $5=_mrb_obj_equal($4, $copy, $src);
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$agg_result;
      var $9=$copy;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      label = 8; break;
    case 3: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_obj_class($12, $copy);
      var $14=_mrb_obj_is_instance_of($11, $src, $13);
      var $15=(($14)|(0))!=0;
      if ($15) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((101792)|0));
      _mrb_raise($17, $19, ((101276)|0));
      label = 5; break;
    case 5: 
      var $21=(($copy)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      var $25=(($24+20)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $29=$1;
      var $30=_mrb_malloc($29, 56);
      var $31=(($copy)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      var $34=$33;
      var $35=(($34+20)|0);
      HEAP32[(($35)>>2)]=$30;
      var $36=(($copy)|0);
      var $37=$36;
      var $38=HEAP32[(($37)>>2)];
      var $39=$38;
      var $40=(($39+16)|0);
      HEAP32[(($40)>>2)]=77364;
      label = 7; break;
    case 7: 
      var $42=(($copy)|0);
      var $43=$42;
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=(($45+20)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$47;
      var $49=(($src)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=(($52+20)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54;
      var $56=$48;
      var $57=$55;
      assert(56 % 1 === 0);_memcpy($56, $57, 56);
      var $58=$agg_result;
      var $59=$copy;
      assert(12 % 1 === 0);HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)];HEAP32[((($58)+(8))>>2)]=HEAP32[((($59)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_free($mrb, $ptr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$ptr;
  var $3=$1;
  var $4=$2;
  _mrb_free($3, $4);
  return;
}
function _current_mrb_time($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $tm;
  var $tv=__stackBase__;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_malloc($2, 56);
  var $4=$3;
  $tm=$4;
  var $5=_gettimeofday($tv, 0);
  var $6=(($tv)|0);
  var $7=HEAP32[(($6)>>2)];
  var $8=$tm;
  var $9=(($8)|0);
  HEAP32[(($9)>>2)]=$7;
  var $10=(($tv+4)|0);
  var $11=HEAP32[(($10)>>2)];
  var $12=$tm;
  var $13=(($12+4)|0);
  HEAP32[(($13)>>2)]=$11;
  var $14=$tm;
  var $15=(($14+8)|0);
  HEAP32[(($15)>>2)]=2;
  var $16=$tm;
  var $17=_mrb_time_update_datetime($16);
  var $18=$tm;
  STACKTOP = __stackBase__;
  return $18;
}
function _time_mktime($mrb, $ayear, $amonth, $aday, $ahour, $amin, $asec, $ausec, $timezone) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 44)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $nowsecs;
      var $nowtime=__stackBase__;
      $1=$mrb;
      $2=$ayear;
      $3=$amonth;
      $4=$aday;
      $5=$ahour;
      $6=$amin;
      $7=$asec;
      $8=$ausec;
      $9=$timezone;
      var $10=$nowtime;
      _memset($10, 0, 44);
      var $11=$2;
      var $12=((($11)-(1900))|0);
      var $13=(($nowtime+20)|0);
      HEAP32[(($13)>>2)]=$12;
      var $14=$3;
      var $15=((($14)-(1))|0);
      var $16=(($nowtime+16)|0);
      HEAP32[(($16)>>2)]=$15;
      var $17=$4;
      var $18=(($nowtime+12)|0);
      HEAP32[(($18)>>2)]=$17;
      var $19=$5;
      var $20=(($nowtime+8)|0);
      HEAP32[(($20)>>2)]=$19;
      var $21=$6;
      var $22=(($nowtime+4)|0);
      HEAP32[(($22)>>2)]=$21;
      var $23=$7;
      var $24=(($nowtime)|0);
      HEAP32[(($24)>>2)]=$23;
      var $25=(($nowtime+32)|0);
      HEAP32[(($25)>>2)]=-1;
      var $26=$9;
      var $27=(($26)|(0))==1;
      if ($27) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $29=_my_timgm($nowtime);
      $nowsecs=$29;
      label = 4; break;
    case 3: 
      var $31=_mktime($nowtime);
      $nowsecs=$31;
      label = 4; break;
    case 4: 
      var $33=$nowsecs;
      var $34=(($33)|(0)) < 0;
      if ($34) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $36=$1;
      var $37=$1;
      var $38=_mrb_class_get($37, ((100716)|0));
      _mrb_raise($36, $38, ((100452)|0));
      label = 6; break;
    case 6: 
      var $40=$1;
      var $41=$nowsecs;
      var $42=(($41)|(0));
      var $43=$8;
      var $44=(($43)|(0));
      var $45=$9;
      var $46=_mrb_time_alloc($40, $42, $44, $45);
      STACKTOP = __stackBase__;
      return $46;
    default: assert(0, "bad label: " + label);
  }
}
function _my_timgm($tm) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $r;
      var $i;
      var $nday;
      $1=$tm;
      $r=0;
      var $2=$1;
      var $3=(($2+20)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=((($4)+(1900))|0);
      var $6=_is_leapyear($5);
      var $7=((59984+((($6)*(48))&-1))|0);
      var $8=(($7)|0);
      $nday=$8;
      $i=70;
      label = 2; break;
    case 2: 
      var $10=$i;
      var $11=$1;
      var $12=(($11+20)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($10)|(0)) < (($13)|(0));
      if ($14) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $16=$i;
      var $17=((($16)+(1900))|0);
      var $18=_is_leapyear($17);
      var $19=(($18)|(0))!=0;
      var $20=$19 ? 31622400 : 31536000;
      var $21=$r;
      var $22=((($21)+($20))|0);
      $r=$22;
      label = 4; break;
    case 4: 
      var $24=$i;
      var $25=((($24)+(1))|0);
      $i=$25;
      label = 2; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $28=$i;
      var $29=$1;
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($28)|(0)) < (($31)|(0));
      if ($32) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $34=$i;
      var $35=$nday;
      var $36=(($35+($34<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)*(24))&-1);
      var $39=((($38)*(60))&-1);
      var $40=((($39)*(60))&-1);
      var $41=$r;
      var $42=((($41)+($40))|0);
      $r=$42;
      label = 8; break;
    case 8: 
      var $44=$i;
      var $45=((($44)+(1))|0);
      $i=$45;
      label = 6; break;
    case 9: 
      var $47=$1;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)-(1))|0);
      var $51=((($50)*(24))&-1);
      var $52=((($51)*(60))&-1);
      var $53=((($52)*(60))&-1);
      var $54=$r;
      var $55=((($54)+($53))|0);
      $r=$55;
      var $56=$1;
      var $57=(($56+8)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)*(60))&-1);
      var $60=((($59)*(60))&-1);
      var $61=$r;
      var $62=((($61)+($60))|0);
      $r=$62;
      var $63=$1;
      var $64=(($63+4)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)*(60))&-1);
      var $67=$r;
      var $68=((($67)+($66))|0);
      $r=$68;
      var $69=$1;
      var $70=(($69)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$r;
      var $73=((($72)+($71))|0);
      $r=$73;
      var $74=$r;
      return $74;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_alloc($mrb, $sec, $usec, $timezone) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tm;
      $1=$mrb;
      $2=$sec;
      $3=$usec;
      $4=$timezone;
      var $5=$1;
      var $6=_mrb_malloc($5, 56);
      var $7=$6;
      $tm=$7;
      var $8=$2;
      var $9=(($8)&-1);
      var $10=$tm;
      var $11=(($10)|0);
      HEAP32[(($11)>>2)]=$9;
      var $12=$2;
      var $13=$tm;
      var $14=(($13)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0));
      var $17=($12)-($16);
      var $18=($17)*(1000000);
      var $19=$3;
      var $20=($18)+($19);
      var $21=(($20)&-1);
      var $22=$tm;
      var $23=(($22+4)|0);
      HEAP32[(($23)>>2)]=$21;
      label = 2; break;
    case 2: 
      var $25=$tm;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($27)|(0)) < 0;
      if ($28) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $30=$tm;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)-(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=$tm;
      var $35=(($34+4)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0));
      var $38=($37)+(1000000);
      var $39=(($38)&-1);
      HEAP32[(($35)>>2)]=$39;
      label = 2; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $42=$tm;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|(0));
      var $46=$45 > 1000000;
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$tm;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=((($50)+(1))|0);
      HEAP32[(($49)>>2)]=$51;
      var $52=$tm;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=(($54)|(0));
      var $56=($55)-(1000000);
      var $57=(($56)&-1);
      HEAP32[(($53)>>2)]=$57;
      label = 5; break;
    case 7: 
      var $59=$4;
      var $60=$tm;
      var $61=(($60+8)|0);
      HEAP32[(($61)>>2)]=$59;
      var $62=$tm;
      var $63=_mrb_time_update_datetime($62);
      var $64=$tm;
      return $64;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_update_datetime($self) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $aid;
      $2=$self;
      var $3=$2;
      var $4=(($3+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==1;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=$2;
      var $11=(($10+12)|0);
      var $12=_gmtime_r($9, $11);
      $aid=$12;
      label = 4; break;
    case 3: 
      var $14=$2;
      var $15=(($14)|0);
      var $16=$2;
      var $17=(($16+12)|0);
      var $18=_localtime_r($15, $17);
      $aid=$18;
      label = 4; break;
    case 4: 
      var $20=$aid;
      var $21=(($20)|(0))!=0;
      if ($21) { label = 6; break; } else { label = 5; break; }
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $24=$2;
      $1=$24;
      label = 7; break;
    case 7: 
      var $26=$1;
      return $26;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1695($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1696($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_float_value1697($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1698($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_wrap($agg_result, $mrb, $tc, $tm) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$tc;
  $3=$tm;
  var $4=$1;
  var $5=$2;
  var $6=$3;
  var $7=$6;
  var $8=_mrb_data_object_alloc($4, $5, $7, 77364);
  var $9=$8;
  _mrb_obj_value1699($agg_result, $9);
  return;
}
function _mrb_obj_value1699($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_time_make($agg_result, $mrb, $c, $sec, $usec, $timezone) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$mrb;
  $2=$c;
  $3=$sec;
  $4=$usec;
  $5=$timezone;
  var $6=$1;
  var $7=$2;
  var $8=$1;
  var $9=$3;
  var $10=$4;
  var $11=$5;
  var $12=_mrb_time_alloc($8, $9, $10, $11);
  _mrb_time_wrap($agg_result, $6, $7, $12);
  return;
}
function _mrb_init_mrblib($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2=__stackBase__;
  $1=$mrb;
  var $3=$1;
  _mrb_load_irep($2, $3, ((62596)|0));
  STACKTOP = __stackBase__;
  return;
}
function _mrb_init_comparable($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((110080)|0));
  return;
}
function _mrb_init_enumerable($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((110068)|0));
  return;
}
function _mrb_data_object_alloc($mrb, $klass, $ptr, $type) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $4;
  var $data;
  $1=$mrb;
  $2=$klass;
  $3=$ptr;
  $4=$type;
  var $5=$1;
  var $6=$2;
  var $7=_mrb_obj_alloc($5, 21, $6);
  var $8=$7;
  $data=$8;
  var $9=$3;
  var $10=$data;
  var $11=(($10+20)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$4;
  var $13=$data;
  var $14=(($13+16)|0);
  HEAP32[(($14)>>2)]=$12;
  var $15=$data;
  return $15;
}
function _mrb_data_get_ptr($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $2=$mrb;
      $3=$type;
      var $4=(($obj+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)>>>(0)) <= 7;
      if ($6) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $8=(($obj+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=21;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 7; break;
    case 4: 
      var $13=(($obj)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=$15;
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=$3;
      var $20=(($18)|(0))!=(($19)|(0));
      if ($20) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 7; break;
    case 6: 
      var $23=(($obj)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=$25;
      var $27=(($26+20)|0);
      var $28=HEAP32[(($27)>>2)];
      $1=$28;
      label = 7; break;
    case 7: 
      var $30=$1;
      STACKTOP = __stackBase__;
      return $30;
    default: assert(0, "bad label: " + label);
  }
}
function _float_id($f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1=__stackBase__;
      var $p;
      var $len;
      var $id;
      (HEAPF64[(tempDoublePtr)>>3]=$f,HEAP32[(($1)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($1)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $2=$1;
      $p=$2;
      $len=8;
      $id=0;
      label = 2; break;
    case 2: 
      var $4=$len;
      var $5=((($4)-(1))|0);
      $len=$5;
      var $6=(($4)|(0))!=0;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=$id;
      var $9=((($8)*(65599))&-1);
      var $10=$p;
      var $11=HEAP8[($10)];
      var $12=(($11 << 24) >> 24);
      var $13=((($9)+($12))|0);
      $id=$13;
      var $14=$p;
      var $15=(($14+1)|0);
      $p=$15;
      label = 2; break;
    case 4: 
      var $17=$id;
      var $18=$id;
      var $19=$18 >> 5;
      var $20=((($17)+($19))|0);
      $id=$20;
      var $21=$id;
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_get_string_len($mrb, $argv, $idx) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  var $s;
  $1=$mrb;
  $2=$argv;
  $3=$idx;
  var $4=$3;
  var $5=$2;
  var $6=(($5+((($4)*(12))&-1))|0);
  var $7=(($6)|0);
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9;
  $s=$10;
  var $11=$s;
  var $12=(($11+12)|0);
  var $13=HEAP32[(($12)>>2)];
  return $13;
}
Module["_mruby_js_get_string_len"] = _mruby_js_get_string_len;
function _mruby_js_invoke_fetch_argp($mrb, $argv, $idx) {
  var label = 0;
  var $1;
  var $2;
  var $3;
  $1=$mrb;
  $2=$argv;
  $3=$idx;
  var $4=$3;
  var $5=$2;
  var $6=(($5+((($4)*(12))&-1))|0);
  return $6;
}
Module["_mruby_js_invoke_fetch_argp"] = _mruby_js_invoke_fetch_argp;
function _mrb_data_check_type($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t2;
      var $3=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$type;
      var $5=(($obj+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)>>>(0)) <= 7;
      if ($7) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $9=(($obj+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=21;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$1;
      _mrb_check_type($13, $obj, 21);
      label = 4; break;
    case 4: 
      var $15=(($obj)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      var $19=(($18+16)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$2;
      var $22=(($20)|(0))!=(($21)|(0));
      if ($22) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $24=(($obj)|0);
      var $25=$24;
      var $26=HEAP32[(($25)>>2)];
      var $27=$26;
      var $28=(($27+16)|0);
      var $29=HEAP32[(($28)>>2)];
      $t2=$29;
      var $30=$t2;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $33=$1;
      var $34=$1;
      var $35=_mrb_class_get($34, ((110056)|0));
      var $36=$1;
      var $37=$t2;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      _mrb_str_new_cstr($3, $36, $39);
      var $40=$1;
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      _mrb_str_new_cstr($4, $40, $43);
      _mrb_raisef($33, $35, ((112772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],HEAP32[(((tempInt)+(12))>>2)]=HEAP32[(($4)>>2)],HEAP32[((((tempInt)+(12))+(4))>>2)]=HEAP32[((($4)+(4))>>2)],HEAP32[((((tempInt)+(12))+(8))>>2)]=HEAP32[((($4)+(8))>>2)],tempInt));
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_data_check_and_get($mrb, $obj, $type) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $2;
  $1=$mrb;
  $2=$type;
  var $3=$1;
  var $4=$2;
  _mrb_data_check_type($3, $obj, $4);
  var $5=(($obj)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=$7;
  var $9=(($8+20)|0);
  var $10=HEAP32[(($9)>>2)];
  STACKTOP = __stackBase__;
  return $10;
}
function _mrb_obj_to_sym($mrb, $name) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $name; $name = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($name)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($name)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($name)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tmp=__stackBase__;
      var $id;
      var $2=(__stackBase__)+(12);
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      $1=$mrb;
      var $5=(($name+8)|0);
      var $6=HEAP32[(($5)>>2)];
      if ((($6)|(0))==16) {
        label = 6; break;
      }
      else if ((($6)|(0))==4) {
        label = 7; break;
      }
      else {
      label = 2; break;
      }
    case 2: 
      var $8=$1;
      _mrb_check_string_type($2, $8, $name);
      var $9=$tmp;
      var $10=$2;
      assert(12 % 1 === 0);HEAP32[(($9)>>2)]=HEAP32[(($10)>>2)];HEAP32[((($9)+(4))>>2)]=HEAP32[((($10)+(4))>>2)];HEAP32[((($9)+(8))>>2)]=HEAP32[((($10)+(8))>>2)];
      var $11=(($tmp+8)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))==0;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=(($tmp)|0);
      var $16=$15;
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|(0))!=0;
      if ($18) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $20=$1;
      _mrb_inspect($3, $20, $name);
      var $21=$tmp;
      var $22=$3;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      var $23=$1;
      var $24=$1;
      var $25=_mrb_class_get($24, ((110056)|0));
      _mrb_raisef($23, $25, ((104268)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($tmp)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)],tempInt));
      label = 5; break;
    case 5: 
      var $27=$name;
      var $28=$tmp;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $30=$1;
      _mrb_str_intern($4, $30, $name);
      var $31=$name;
      var $32=$4;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $34=(($name)|0);
      var $35=$34;
      var $36=HEAP16[(($35)>>1)];
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_id($obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $obj; $obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $tt;
      var $2=(($obj+8)|0);
      var $3=HEAP32[(($2)>>2)];
      $tt=$3;
      var $4=$tt;
      if ((($4)|(0))==1 | (($4)|(0))==5) {
        label = 2; break;
      }
      else if ((($4)|(0))==0) {
        label = 3; break;
      }
      else if ((($4)|(0))==2) {
        label = 7; break;
      }
      else if ((($4)|(0))==4) {
        label = 8; break;
      }
      else if ((($4)|(0))==3) {
        label = 9; break;
      }
      else if ((($4)|(0))==6) {
        label = 10; break;
      }
      else if ((($4)|(0))==16 | (($4)|(0))==8 | (($4)|(0))==9 | (($4)|(0))==10 | (($4)|(0))==11 | (($4)|(0))==12 | (($4)|(0))==13 | (($4)|(0))==14 | (($4)|(0))==15 | (($4)|(0))==17 | (($4)|(0))==18 | (($4)|(0))==19 | (($4)|(0))==21) {
        label = 11; break;
      }
      else {
      label = 12; break;
      }
    case 2: 
      var $6=$tt;
      var $7=0 ^ $6;
      $1=$7;
      label = 13; break;
    case 3: 
      var $9=(($obj+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==0;
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=(($obj)|0);
      var $14=$13;
      var $15=HEAP32[(($14)>>2)];
      var $16=(($15)|(0))!=0;
      if ($16) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $18=$tt;
      var $19=1 ^ $18;
      $1=$19;
      label = 13; break;
    case 6: 
      var $21=$tt;
      var $22=0 ^ $21;
      $1=$22;
      label = 13; break;
    case 7: 
      var $24=$tt;
      var $25=1 ^ $24;
      $1=$25;
      label = 13; break;
    case 8: 
      var $27=(($obj)|0);
      var $28=$27;
      var $29=HEAP16[(($28)>>1)];
      var $30=(($29 << 16) >> 16);
      var $31=$tt;
      var $32=$30 ^ $31;
      $1=$32;
      label = 13; break;
    case 9: 
      var $34=(($obj)|0);
      var $35=$34;
      var $36=HEAP32[(($35)>>2)];
      var $37=(($36)|(0));
      var $38=_float_id($37);
      var $39=$38 ^ 6;
      $1=$39;
      label = 13; break;
    case 10: 
      var $41=(($obj)|0);
      var $42=$41;
      var $43=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($42)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($42)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $44=_float_id($43);
      var $45=$tt;
      var $46=$44 ^ $45;
      $1=$46;
      label = 13; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $49=(($obj)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=$tt;
      var $54=$52 ^ $53;
      $1=$54;
      label = 13; break;
    case 13: 
      var $56=$1;
      STACKTOP = __stackBase__;
      return $56;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1723($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_js_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_js_gem_final($2);
  return;
}
function _mruby_js_argument_type($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $t;
      $2=$mrb;
      $3=$argv;
      $4=$idx;
      var $5=$4;
      var $6=$3;
      var $7=(($6+((($5)*(12))&-1))|0);
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      $t=$9;
      var $10=$t;
      if ((($10)|(0))==0) {
        label = 2; break;
      }
      else if ((($10)|(0))==2) {
        label = 6; break;
      }
      else if ((($10)|(0))==3) {
        label = 7; break;
      }
      else if ((($10)|(0))==6) {
        label = 8; break;
      }
      else if ((($10)|(0))==8) {
        label = 9; break;
      }
      else if ((($10)|(0))==16) {
        label = 10; break;
      }
      else if ((($10)|(0))==13) {
        label = 11; break;
      }
      else if ((($10)|(0))==14) {
        label = 12; break;
      }
      else if ((($10)|(0))==15) {
        label = 13; break;
      }
      else if ((($10)|(0))==4) {
        label = 14; break;
      }
      else {
      label = 15; break;
      }
    case 2: 
      var $12=$4;
      var $13=$3;
      var $14=(($13+((($12)*(12))&-1))|0);
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))==0;
      if ($17) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $19=$4;
      var $20=$3;
      var $21=(($20+((($19)*(12))&-1))|0);
      var $22=(($21)|0);
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 5; break; } else { label = 4; break; }
    case 4: 
      $1=6;
      label = 17; break;
    case 5: 
      $1=0;
      label = 17; break;
    case 6: 
      $1=1;
      label = 17; break;
    case 7: 
      $1=2;
      label = 17; break;
    case 8: 
      $1=3;
      label = 17; break;
    case 9: 
      $1=4;
      label = 17; break;
    case 10: 
      $1=5;
      label = 17; break;
    case 11: 
      $1=7;
      label = 17; break;
    case 12: 
      $1=8;
      label = 17; break;
    case 13: 
      $1=9;
      label = 17; break;
    case 14: 
      $1=10;
      label = 17; break;
    case 15: 
      var $38=$2;
      var $39=$2;
      var $40=_mrb_class_obj_get($39, ((109884)|0));
      var $41=$t;
      _mrb_raisef($38, $40, ((112724)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$41,tempInt));
      label = 16; break;
    case 16: 
      $1=-1;
      label = 17; break;
    case 17: 
      var $44=$1;
      STACKTOP = __stackBase__;
      return $44;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_argument_type"] = _mruby_js_argument_type;
function _mruby_js_get_string_ptr($mrb, $argv, $idx) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $s;
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $4=$3;
      var $5=$2;
      var $6=(($5+((($4)*(12))&-1))|0);
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=16;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_obj_get($12, ((109884)|0));
      _mrb_raise($11, $13, ((107832)|0));
      label = 3; break;
    case 3: 
      var $15=$3;
      var $16=$2;
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      var $21=$20;
      $s=$21;
      var $22=$s;
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      return $24;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_string_ptr"] = _mruby_js_get_string_ptr;
function _mruby_js_get_integer($mrb, $argv, $idx) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $4=$3;
      var $5=$2;
      var $6=(($5+((($4)*(12))&-1))|0);
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=3;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_obj_get($12, ((109884)|0));
      _mrb_raise($11, $13, ((104232)|0));
      label = 3; break;
    case 3: 
      var $15=$3;
      var $16=$2;
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_integer"] = _mruby_js_get_integer;
function _mruby_js_get_float($mrb, $argv, $idx) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $4=$3;
      var $5=$2;
      var $6=(($5+((($4)*(12))&-1))|0);
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=6;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_obj_get($12, ((109884)|0));
      _mrb_raise($11, $13, ((101516)|0));
      label = 3; break;
    case 3: 
      var $15=$3;
      var $16=$2;
      var $17=(($16+((($15)*(12))&-1))|0);
      var $18=(($17)|0);
      var $19=$18;
      var $20=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($19)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($19)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_float"] = _mruby_js_get_float;
function _mruby_js_get_object_handle($mrb, $argv, $idx) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $4=$3;
      var $5=$2;
      var $6=(($5+((($4)*(12))&-1))|0);
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=8;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_obj_get($12, ((109884)|0));
      _mrb_raise($11, $13, ((98828)|0));
      label = 3; break;
    case 3: 
      var $15=$1;
      var $16=$3;
      var $17=$2;
      var $18=(($17+((($16)*(12))&-1))|0);
      var $19=_mruby_js_get_object_handle_value($15, $18);
      return $19;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_object_handle"] = _mruby_js_get_object_handle;
function _mruby_js_get_object_handle_value($mrb, $js_obj) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 28)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $js_obj; $js_obj = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($js_obj)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($js_obj)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($js_obj)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $value_handle=__stackBase__;
      var $handle_p=(__stackBase__)+(12);
      var $2=(__stackBase__)+(16);
      $1=$mrb;
      HEAP32[(($handle_p)>>2)]=0;
      var $3=$1;
      var $4=$1;
      var $5=_mrb_intern1770($4, ((102312)|0));
      _mrb_iv_get($2, $3, $js_obj, $5);
      var $6=$value_handle;
      var $7=$2;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      label = 2; break;
    case 2: 
      var $9=$1;
      var $10=_mrb_data_check_and_get($9, $value_handle, 62588);
      var $11=$handle_p;
      HEAP32[(($11)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $13=HEAP32[(($handle_p)>>2)];
      var $14=(($13)|(0))==0;
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $17=$1;
      var $18=_mrb_class_obj_get($17, ((109884)|0));
      _mrb_raise($16, $18, ((101248)|0));
      label = 5; break;
    case 5: 
      var $20=HEAP32[(($handle_p)>>2)];
      var $21=HEAP32[(($20)>>2)];
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_get_proc($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $6=$3;
      var $7=$2;
      var $8=(($7+((($6)*(12))&-1))|0);
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=13;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_obj_get($14, ((109884)|0));
      _mrb_raise($13, $15, ((96824)|0));
      label = 3; break;
    case 3: 
      var $17=$1;
      var $18=HEAP32[((80028)>>2)];
      var $19=$18;
      _mrb_obj_value1769($4, $19);
      var $20=$1;
      var $21=_mrb_intern1770($20, ((95636)|0));
      var $22=$3;
      var $23=$2;
      var $24=(($23+((($22)*(12))&-1))|0);
      _mrb_funcall_argv($5, $17, $4, $21, 1, $24);
      var $25=$3;
      var $26=$2;
      var $27=(($26+((($25)*(12))&-1))|0);
      var $28=(($27)|0);
      var $29=$28;
      var $30=HEAP32[(($29)>>2)];
      var $31=$30;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_proc"] = _mruby_js_get_proc;
function _mrb_obj_value1769($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1770($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mruby_js_get_array_handle($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $js_array=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $5=$3;
      var $6=$2;
      var $7=(($6+((($5)*(12))&-1))|0);
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=14;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_obj_get($13, ((109884)|0));
      _mrb_raise($12, $14, ((94656)|0));
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=$3;
      var $18=$2;
      var $19=(($18+((($17)*(12))&-1))|0);
      var $20=$1;
      var $21=_mrb_intern1770($20, ((93788)|0));
      _mrb_funcall_argv($4, $16, $19, $21, 0, 0);
      var $22=$js_array;
      var $23=$4;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=$1;
      var $25=_mruby_js_get_object_handle($24, $js_array, 0);
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_array_handle"] = _mruby_js_get_array_handle;
function _mruby_js_get_hash_handle($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $js_object=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $5=$3;
      var $6=$2;
      var $7=(($6+((($5)*(12))&-1))|0);
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=15;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_obj_get($13, ((109884)|0));
      _mrb_raise($12, $14, ((113768)|0));
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=$3;
      var $18=$2;
      var $19=(($18+((($17)*(12))&-1))|0);
      var $20=$1;
      var $21=_mrb_intern1770($20, ((113168)|0));
      _mrb_funcall_argv($4, $16, $19, $21, 0, 0);
      var $22=$js_object;
      var $23=$4;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=$1;
      var $25=_mruby_js_get_object_handle($24, $js_object, 0);
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_get_hash_handle"] = _mruby_js_get_hash_handle;
function _mruby_js_convert_symbol_to_string($mrb, $argv, $idx) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $str=__stackBase__;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argv;
      $3=$idx;
      var $5=$3;
      var $6=$2;
      var $7=(($6+((($5)*(12))&-1))|0);
      var $8=(($7+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))!=4;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$1;
      var $13=$1;
      var $14=_mrb_class_obj_get($13, ((109884)|0));
      _mrb_raise($12, $14, ((112276)|0));
      label = 3; break;
    case 3: 
      var $16=$1;
      var $17=$3;
      var $18=$2;
      var $19=(($18+((($17)*(12))&-1))|0);
      var $20=$1;
      var $21=_mrb_intern1770($20, ((111688)|0));
      _mrb_funcall_argv($4, $16, $19, $21, 0, 0);
      var $22=$str;
      var $23=$4;
      assert(12 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
      var $24=(($str+8)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=16;
      if ($26) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $28=$1;
      var $29=$1;
      var $30=_mrb_class_obj_get($29, ((109884)|0));
      _mrb_raise($28, $30, ((111220)|0));
      label = 5; break;
    case 5: 
      var $32=$3;
      var $33=$2;
      var $34=(($33+((($32)*(12))&-1))|0);
      var $35=$34;
      var $36=$str;
      assert(12 % 1 === 0);HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)];HEAP32[((($35)+(8))>>2)]=HEAP32[((($36)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_convert_symbol_to_string"] = _mruby_js_convert_symbol_to_string;
function _mruby_js_invoke_alloc_argv($mrb, $argc) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$argc;
  var $3=$2;
  var $4=((($3)*(12))&-1);
  var $5=_malloc($4);
  var $6=$5;
  return $6;
}
Module["_mruby_js_invoke_alloc_argv"] = _mruby_js_invoke_alloc_argv;
function _mruby_js_invoke_release_argv($mrb, $argv) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$argv;
  var $3=$2;
  var $4=$3;
  _free($4);
  return;
}
Module["_mruby_js_invoke_release_argv"] = _mruby_js_invoke_release_argv;
function _GENERATED_TMP_mrb_mruby_js_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_js_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((85092)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1723($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_js_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_eval_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mruby_js_invoke_proc($mrb, $proc, $argc, $argv) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p=__stackBase__;
      var $5=(__stackBase__)+(12);
      var $6=(__stackBase__)+(24);
      var $7=(__stackBase__)+(36);
      var $8=(__stackBase__)+(48);
      $1=$mrb;
      $2=$proc;
      $3=$argc;
      $4=$argv;
      var $9=$2;
      var $10=$9;
      _mrb_obj_value1769($p, $10);
      var $11=$1;
      var $12=$3;
      var $13=$4;
      _mrb_yield_argv($5, $11, $p, $12, $13);
      var $14=$1;
      var $15=(($14+48)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $19=$1;
      var $20=$1;
      var $21=(($20+48)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22;
      _mrb_obj_value1769($6, $23);
      _mrb_p($19, $6);
      label = 3; break;
    case 3: 
      var $25=$1;
      var $26=HEAP32[((80028)>>2)];
      var $27=$26;
      _mrb_obj_value1769($7, $27);
      var $28=$1;
      var $29=_mrb_intern1770($28, ((110696)|0));
      _mrb_funcall_argv($8, $25, $7, $29, 1, $p);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_invoke_proc"] = _mruby_js_invoke_proc;
function _mruby_js_name_error($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=_mrb_class_obj_get($3, ((109884)|0));
  _mrb_raise($2, $4, ((110276)|0));
  return;
}
Module["_mruby_js_name_error"] = _mruby_js_name_error;
function _mruby_js_set_integer($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$arg;
  $3=$val;
  var $5=$2;
  var $6=$3;
  _mrb_fixnum_value1771($4, $6);
  var $7=$5;
  var $8=$4;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_integer"] = _mruby_js_set_integer;
function _mrb_fixnum_value1771($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_float($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$arg;
  $3=$val;
  var $5=$2;
  var $6=$3;
  _mrb_float_value1772($4, $6);
  var $7=$5;
  var $8=$4;
  assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($8)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($8)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($8)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_float"] = _mruby_js_set_float;
function _mrb_float_value1772($agg_result, $f) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$f;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=6;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      (HEAPF64[(tempDoublePtr)>>3]=$4,HEAP32[(($6)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($6)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_boolean($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4=__stackBase__;
      var $5=(__stackBase__)+(12);
      $1=$mrb;
      $2=$arg;
      $3=$val;
      var $6=$2;
      var $7=$3;
      var $8=(($7)|(0))==1;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_true_value1773($4);
      var $10=$6;
      var $11=$4;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      label = 4; break;
    case 3: 
      _mrb_false_value1774($5);
      var $13=$6;
      var $14=$5;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_boolean"] = _mruby_js_set_boolean;
function _mrb_true_value1773($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1774($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_nil($mrb, $arg) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3=__stackBase__;
  $1=$mrb;
  $2=$arg;
  var $4=$2;
  _mrb_nil_value1775($3);
  var $5=$4;
  var $6=$3;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_nil"] = _mruby_js_set_nil;
function _mrb_nil_value1775($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mruby_js_set_string($mrb, $arg, $val) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var $1;
  var $2;
  var $3;
  var $4=__stackBase__;
  $1=$mrb;
  $2=$arg;
  $3=$val;
  var $5=$2;
  var $6=$1;
  var $7=$3;
  _mrb_str_new_cstr($4, $6, $7);
  var $8=$5;
  var $9=$4;
  assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
Module["_mruby_js_set_string"] = _mruby_js_set_string;
function _mruby_js_set_object_handle($mrb, $arg, $handle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      $1=$mrb;
      $2=$arg;
      $3=$handle;
      var $7=HEAP32[((80108)>>2)];
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $11=$10 & 2097151;
      var $12=$11 & 255;
      $ttype=$12;
      var $13=$ttype;
      var $14=(($13)|(0))==0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ttype=8;
      label = 3; break;
    case 3: 
      var $17=$1;
      var $18=$ttype;
      var $19=HEAP32[((80108)>>2)];
      var $20=_mrb_obj_alloc($17, $18, $19);
      var $21=$20;
      $o=$21;
      var $22=$2;
      var $23=$o;
      var $24=$23;
      _mrb_obj_value1769($4, $24);
      var $25=$22;
      var $26=$4;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$3;
      _mrb_fixnum_value1771($5, $27);
      var $28=$argv;
      var $29=$5;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      var $30=$1;
      var $31=$2;
      var $32=$1;
      var $33=(($32+68)|0);
      var $34=HEAP16[(($33)>>1)];
      _mrb_funcall_argv($6, $30, $31, $34, 1, $argv);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_object_handle"] = _mruby_js_set_object_handle;
function _mruby_js_set_array_handle($mrb, $arg, $handle) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $4=(__stackBase__)+(12);
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      $1=$mrb;
      $2=$arg;
      $3=$handle;
      var $7=HEAP32[((80116)>>2)];
      var $8=$7;
      var $9=HEAP32[(($8)>>2)];
      var $10=$9 >>> 11;
      var $11=$10 & 2097151;
      var $12=$11 & 255;
      $ttype=$12;
      var $13=$ttype;
      var $14=(($13)|(0))==0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ttype=8;
      label = 3; break;
    case 3: 
      var $17=$1;
      var $18=$ttype;
      var $19=HEAP32[((80116)>>2)];
      var $20=_mrb_obj_alloc($17, $18, $19);
      var $21=$20;
      $o=$21;
      var $22=$2;
      var $23=$o;
      var $24=$23;
      _mrb_obj_value1769($4, $24);
      var $25=$22;
      var $26=$4;
      assert(12 % 1 === 0);HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];HEAP32[((($25)+(8))>>2)]=HEAP32[((($26)+(8))>>2)];
      var $27=$3;
      _mrb_fixnum_value1771($5, $27);
      var $28=$argv;
      var $29=$5;
      assert(12 % 1 === 0);HEAP32[(($28)>>2)]=HEAP32[(($29)>>2)];HEAP32[((($28)+(4))>>2)]=HEAP32[((($29)+(4))>>2)];HEAP32[((($28)+(8))>>2)]=HEAP32[((($29)+(8))>>2)];
      var $30=$1;
      var $31=$2;
      var $32=$1;
      var $33=(($32+68)|0);
      var $34=HEAP16[(($33)>>1)];
      _mrb_funcall_argv($6, $30, $31, $34, 1, $argv);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_array_handle"] = _mruby_js_set_array_handle;
function _mruby_js_set_function_handle($mrb, $arg, $handle, $parent) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 72)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o;
      var $ttype;
      var $argv=__stackBase__;
      var $5=(__stackBase__)+(24);
      var $6=(__stackBase__)+(36);
      var $7=(__stackBase__)+(48);
      var $8=(__stackBase__)+(60);
      $1=$mrb;
      $2=$arg;
      $3=$handle;
      $4=$parent;
      var $9=HEAP32[((80112)>>2)];
      var $10=$9;
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 >>> 11;
      var $13=$12 & 2097151;
      var $14=$13 & 255;
      $ttype=$14;
      var $15=$ttype;
      var $16=(($15)|(0))==0;
      if ($16) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ttype=8;
      label = 3; break;
    case 3: 
      var $19=$1;
      var $20=$ttype;
      var $21=HEAP32[((80112)>>2)];
      var $22=_mrb_obj_alloc($19, $20, $21);
      var $23=$22;
      $o=$23;
      var $24=$2;
      var $25=$o;
      var $26=$25;
      _mrb_obj_value1769($5, $26);
      var $27=$24;
      var $28=$5;
      assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
      var $29=(($argv)|0);
      var $30=$3;
      _mrb_fixnum_value1771($6, $30);
      var $31=$29;
      var $32=$6;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      var $33=$4;
      var $34=(($33)|(0))!=0;
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $36=(($argv+12)|0);
      var $37=$4;
      var $38=$36;
      var $39=$37;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $41=(($argv+12)|0);
      _mrb_nil_value1775($7);
      var $42=$41;
      var $43=$7;
      assert(12 % 1 === 0);HEAP32[(($42)>>2)]=HEAP32[(($43)>>2)];HEAP32[((($42)+(4))>>2)]=HEAP32[((($43)+(4))>>2)];HEAP32[((($42)+(8))>>2)]=HEAP32[((($43)+(8))>>2)];
      label = 6; break;
    case 6: 
      var $45=$1;
      var $46=$2;
      var $47=$1;
      var $48=(($47+68)|0);
      var $49=HEAP16[(($48)>>1)];
      var $50=(($argv)|0);
      _mrb_funcall_argv($8, $45, $46, $49, 2, $50);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
Module["_mruby_js_set_function_handle"] = _mruby_js_set_function_handle;
function _mrb_mruby_js_gem_init($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((109928)|0));
  HEAP32[((80028)>>2)]=$3;
  var $4=$1;
  var $5=HEAP32[((80028)>>2)];
  _mrb_define_class_method($4, $5, ((109480)|0), 420, 0);
  var $6=$1;
  var $7=HEAP32[((80028)>>2)];
  _mrb_define_class_method($6, $7, ((108996)|0), 420, 0);
  var $8=$1;
  var $9=HEAP32[((80028)>>2)];
  _mrb_define_class_method($8, $9, ((108452)|0), 420, 0);
  var $10=$1;
  var $11=HEAP32[((80028)>>2)];
  var $12=$1;
  var $13=(($12+76)|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=_mrb_define_class_under($10, $11, ((108104)|0), $14);
  HEAP32[((80108)>>2)]=$15;
  var $16=$1;
  var $17=HEAP32[((80108)>>2)];
  _mrb_define_method($16, $17, ((107564)|0), 592, 524288);
  var $18=$1;
  var $19=HEAP32[((80108)>>2)];
  _mrb_define_method($18, $19, ((107308)|0), 104, 524288);
  var $20=$1;
  var $21=HEAP32[((80108)>>2)];
  _mrb_define_method($20, $21, ((106888)|0), 692, 1048576);
  var $22=$1;
  var $23=HEAP32[((80108)>>2)];
  _mrb_define_method($22, $23, ((106456)|0), 104, 524288);
  var $24=$1;
  var $25=HEAP32[((80108)>>2)];
  _mrb_define_method($24, $25, ((106080)|0), 692, 1048576);
  var $26=$1;
  var $27=HEAP32[((80108)>>2)];
  _mrb_define_class_method($26, $27, ((105764)|0), 434, 0);
  var $28=$1;
  var $29=HEAP32[((80028)>>2)];
  var $30=HEAP32[((80108)>>2)];
  var $31=_mrb_define_class_under($28, $29, ((105444)|0), $30);
  HEAP32[((80112)>>2)]=$31;
  var $32=$1;
  var $33=HEAP32[((80112)>>2)];
  _mrb_define_method($32, $33, ((105160)|0), 496, 8192);
  var $34=$1;
  var $35=HEAP32[((80028)>>2)];
  var $36=HEAP32[((80108)>>2)];
  var $37=_mrb_define_class_under($34, $35, ((104848)|0), $36);
  HEAP32[((80116)>>2)]=$37;
  var $38=$1;
  var $39=HEAP32[((80116)>>2)];
  _mrb_define_class_method($38, $39, ((105764)|0), 586, 0);
  var $40=$1;
  var $41=$1;
  var $42=(($41+96)|0);
  var $43=HEAP32[(($42)>>2)];
  _mrb_define_method($40, $43, ((93788)|0), 38, 0);
  return;
}
function _mrb_js_get_root_object($agg_result, $mrb, $mod) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $mod; $mod = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($mod)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($mod)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($mod)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $root_sym;
      var $ret=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_intern1770($2, ((101780)|0));
      $root_sym=$3;
      var $4=$1;
      var $5=$root_sym;
      _mrb_iv_get($ret, $4, $mod, $5);
      var $6=(($ret+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))==0;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=(($ret)|0);
      var $11=$10;
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $15=$agg_result;
      var $16=$ret;
      assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
      label = 8; break;
    case 4: 
      var $18=$1;
      _js_get_root_object($18, $ret);
      var $19=(($ret+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|(0))==0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=(($ret)|0);
      var $24=$23;
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|(0))!=0;
      if ($26) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $28=$1;
      var $29=$root_sym;
      _mrb_iv_set($28, $mod, $29, $ret);
      label = 7; break;
    case 7: 
      var $31=$agg_result;
      var $32=$ret;
      assert(12 % 1 === 0);HEAP32[(($31)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($31)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($31)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_obj_initialize($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $handle=__stackBase__;
      var $handle_p;
      var $2=(__stackBase__)+(4);
      $1=$mrb;
      HEAP32[(($handle)>>2)]=-1;
      var $3=$1;
      var $4=_mrb_get_args($3, ((103336)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$handle,tempInt));
      var $5=HEAP32[(($handle)>>2)];
      var $6=(($5)|(0)) <= 0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$1;
      var $10=_mrb_class_obj_get($9, ((109884)|0));
      _mrb_raise($8, $10, ((103100)|0));
      label = 3; break;
    case 3: 
      var $12=_malloc(4);
      var $13=$12;
      $handle_p=$13;
      var $14=$handle_p;
      var $15=(($14)|(0))==0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_obj_get($18, ((102836)|0));
      _mrb_raise($17, $19, ((102624)|0));
      label = 5; break;
    case 5: 
      var $21=HEAP32[(($handle)>>2)];
      var $22=$handle_p;
      HEAP32[(($22)>>2)]=$21;
      var $23=$1;
      var $24=$1;
      var $25=_mrb_intern1770($24, ((102312)|0));
      var $26=$1;
      var $27=$1;
      var $28=(($27+76)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$handle_p;
      var $31=$30;
      var $32=_mrb_data_object_alloc($26, $29, $31, 62588);
      var $33=$32;
      _mrb_obj_value1769($2, $33);
      _mrb_iv_set($23, $self, $25, $2);
      var $34=$agg_result;
      var $35=$self;
      assert(12 % 1 === 0);HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)];HEAP32[((($34)+(8))>>2)]=HEAP32[((($35)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_obj_get($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $field=__stackBase__;
  var $ret=(__stackBase__)+(12);
  $1=$mrb;
  _mrb_nil_value1775($ret);
  var $2=$1;
  var $3=_mrb_get_args($2, ((103552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$field,tempInt));
  var $4=$1;
  _js_get_field($4, $self, $field, $ret);
  var $5=$agg_result;
  var $6=$ret;
  assert(12 % 1 === 0);HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];HEAP32[((($5)+(8))>>2)]=HEAP32[((($6)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_obj_set($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $field=__stackBase__;
  var $val=(__stackBase__)+(12);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((103772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$field,HEAP32[(((tempInt)+(4))>>2)]=$val,tempInt));
  var $4=$1;
  _js_set_field($4, $self, $field, $val);
  _mrb_nil_value1775($agg_result);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_obj_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ret=__stackBase__;
  $1=$mrb;
  _mrb_nil_value1775($ret);
  var $2=$1;
  _js_create_empty_object($2, $ret);
  var $3=$agg_result;
  var $4=$ret;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_js_func_invoke_internal($agg_result, $mrb, $func) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $func; $func = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($func)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($func)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($func)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $argv=__stackBase__;
      var $ret=(__stackBase__)+(4);
      var $this_value=(__stackBase__)+(16);
      var $argc=(__stackBase__)+(28);
      var $type=(__stackBase__)+(32);
      var $2=(__stackBase__)+(36);
      $1=$mrb;
      HEAP32[(($argv)>>2)]=0;
      _mrb_nil_value1775($ret);
      HEAP32[(($argc)>>2)]=0;
      HEAP32[(($type)>>2)]=-1;
      var $3=$1;
      var $4=_mrb_get_args($3, ((104560)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$type,HEAP32[(((tempInt)+(4))>>2)]=$argv,HEAP32[(((tempInt)+(8))>>2)]=$argc,tempInt));
      var $5=HEAP32[(($type)>>2)];
      var $6=(($5)|(0))==2;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=HEAP32[(($argv)>>2)];
      var $9=(($8)|0);
      var $10=$this_value;
      var $11=$9;
      assert(12 % 1 === 0);HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];HEAP32[((($10)+(8))>>2)]=HEAP32[((($11)+(8))>>2)];
      var $12=HEAP32[(($argv)>>2)];
      var $13=(($12+12)|0);
      HEAP32[(($argv)>>2)]=$13;
      var $14=HEAP32[(($argc)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($argc)>>2)]=$15;
      label = 4; break;
    case 3: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_intern1770($18, ((103964)|0));
      _mrb_funcall_argv($2, $17, $func, $19, 0, 0);
      var $20=$this_value;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      label = 4; break;
    case 4: 
      var $23=$1;
      var $24=$1;
      var $25=_mruby_js_get_object_handle_value($24, $func);
      var $26=HEAP32[(($argv)>>2)];
      var $27=HEAP32[(($argc)>>2)];
      var $28=HEAP32[(($type)>>2)];
      _js_invoke($23, $this_value, $25, $26, $27, $ret, $28);
      var $29=$agg_result;
      var $30=$ret;
      assert(12 % 1 === 0);HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];HEAP32[((($29)+(8))>>2)]=HEAP32[((($30)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_js_array_create($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ret=__stackBase__;
  $1=$mrb;
  _mrb_nil_value1775($ret);
  var $2=$1;
  _js_create_array($2, 0, -1, $ret);
  var $3=$agg_result;
  var $4=$ret;
  assert(12 % 1 === 0);HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];HEAP32[((($3)+(8))>>2)]=HEAP32[((($4)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mrb_array_tojs($agg_result, $mrb, $arr) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $arr; $arr = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($arr)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($arr)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($arr)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $ret=__stackBase__;
  $1=$mrb;
  _mrb_nil_value1775($ret);
  var $2=$1;
  var $3=(($arr)|0);
  var $4=$3;
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=(($6+20)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=(($arr)|0);
  var $10=$9;
  var $11=HEAP32[(($10)>>2)];
  var $12=$11;
  var $13=(($12+12)|0);
  var $14=HEAP32[(($13)>>2)];
  _js_create_array($2, $8, $14, $ret);
  var $15=$agg_result;
  var $16=$ret;
  assert(12 % 1 === 0);HEAP32[(($15)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($15)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($15)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
  STACKTOP = __stackBase__;
  return;
}
function _mruby_js_object_handle_free($mrb, $p) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $handle;
      $1=$mrb;
      $2=$p;
      var $3=$2;
      var $4=$3;
      $handle=$4;
      var $5=$handle;
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $8=$1;
      var $9=$handle;
      var $10=HEAP32[(($9)>>2)];
      _js_release_object($8, $10);
      label = 3; break;
    case 3: 
      var $12=$2;
      _free($12);
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_bin_mirb_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  var $5=$ai;
  _mrb_gc_arena_restore($4, $5);
  return;
}
function _GENERATED_TMP_mrb_mruby_bin_mruby_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  var $5=$ai;
  _mrb_gc_arena_restore($4, $5);
  return;
}
function _GENERATED_TMP_mrb_mruby_eval_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_eval_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_eval_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_eval_gem_final($2);
  return;
}
function _mrb_mruby_eval_gem_init($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+96)|0);
  var $5=HEAP32[(($4)>>2)];
  _mrb_define_class_method($2, $5, ((109692)|0), 426, 262144);
  return;
}
function _f_eval($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $s=__stackBase__;
  var $len=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((112720)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$s,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
  var $4=$1;
  var $5=HEAP32[(($s)>>2)];
  var $6=HEAP32[(($len)>>2)];
  _mrb_load_nstring($agg_result, $4, $5, $6);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_fiber_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_fiber_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_fiber_gem_final($2);
  return;
}
function _mrb_mruby_fiber_gem_init($mrb) {
  var label = 0;
  var $1;
  var $c;
  $1=$mrb;
  var $2=$1;
  var $3=$1;
  var $4=(($3+44)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=_mrb_define_class($2, ((109652)|0), $5);
  $c=$6;
  var $7=$c;
  var $8=$7;
  var $9=HEAP32[(($8)>>2)];
  var $10=$9 >>> 11;
  var $11=$10 & 2097151;
  var $12=$11 & -256;
  var $13=$12 | 22;
  var $14=$c;
  var $15=$13 & 2097151;
  var $16=$14;
  var $17=$15 & 2097151;
  var $18=$17 << 11;
  var $19=HEAP32[(($16)>>2)];
  var $20=$19 & 2047;
  var $21=$20 | $18;
  HEAP32[(($16)>>2)]=$21;
  var $22=$1;
  var $23=$c;
  _mrb_define_method($22, $23, ((112700)|0), 248, 0);
  var $24=$1;
  var $25=$c;
  _mrb_define_method($24, $25, ((107820)|0), 228, 4096);
  var $26=$1;
  var $27=$c;
  _mrb_define_class_method($26, $27, ((104216)|0), 82, 4096);
  return;
}
function _mrb_mruby_fiber_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_hash_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _os_count_object_type($mrb, $obj, $data) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $obj_count;
      $1=$mrb;
      $2=$obj;
      $3=$data;
      var $4=$3;
      var $5=$4;
      $obj_count=$5;
      var $6=$2;
      var $7=$6;
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 >>> 8;
      var $10=$9 & 7;
      var $11=$1;
      var $12=(($11+524)|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=$13 ^ 3;
      var $15=$10 & $14;
      var $16=$15 & 3;
      var $17=(($16)|(0))!=0;
      if ($17) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $19=$2;
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      var $22=$21 & 255;
      var $23=(($22)|(0))==1;
      if ($23) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $25=$obj_count;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=((($27)+(1))|0);
      HEAP32[(($26)>>2)]=$28;
      label = 5; break;
    case 4: 
      var $30=$2;
      var $31=$30;
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 & 255;
      var $34=$obj_count;
      var $35=(($34+8)|0);
      var $36=(($35+($33<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)+(1))|0);
      HEAP32[(($36)>>2)]=$38;
      var $39=$obj_count;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)+(1))|0);
      HEAP32[(($40)>>2)]=$42;
      label = 5; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_init($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f;
      var $c;
      var $p;
      var $ci;
      var $blk=__stackBase__;
      $1=$mrb;
      var $2=(($self)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $f=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((113164)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $8=(($blk+8)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $12=(($blk)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|(0))!=0;
      if ($15) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $17=$1;
      var $18=$1;
      var $19=_mrb_class_get($18, ((101496)|0));
      _mrb_raise($17, $19, ((112228)|0));
      label = 4; break;
    case 4: 
      var $21=(($blk)|0);
      var $22=$21;
      var $23=HEAP32[(($22)>>2)];
      var $24=$23;
      $p=$24;
      var $25=$p;
      var $26=$25;
      var $27=HEAP32[(($26)>>2)];
      var $28=$27 >>> 11;
      var $29=$28 & 2097151;
      var $30=$29 & 128;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $33=$1;
      var $34=$1;
      var $35=_mrb_class_get($34, ((101496)|0));
      _mrb_raise($33, $35, ((111644)|0));
      label = 6; break;
    case 6: 
      var $37=$1;
      var $38=_mrb_malloc($37, 52);
      var $39=$38;
      var $40=$f;
      var $41=(($40+12)|0);
      HEAP32[(($41)>>2)]=$39;
      var $42=$f;
      var $43=(($42+12)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      assert(52 % 1 === 0);_memcpy($45, 92872, 52);
      var $46=$f;
      var $47=(($46+12)|0);
      var $48=HEAP32[(($47)>>2)];
      $c=$48;
      var $49=$1;
      var $50=_mrb_calloc($49, 64, 12);
      var $51=$50;
      var $52=$c;
      var $53=(($52+8)|0);
      HEAP32[(($53)>>2)]=$51;
      var $54=$c;
      var $55=(($54+8)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($56+768)|0);
      var $58=$c;
      var $59=(($58+12)|0);
      HEAP32[(($59)>>2)]=$57;
      var $60=$c;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$c;
      var $64=(($63+4)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$c;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0);
      var $69=$1;
      var $70=(($69+8)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($73)|0);
      var $75=$68;
      var $76=$74;
      assert(12 % 1 === 0);HEAP32[(($75)>>2)]=HEAP32[(($76)>>2)];HEAP32[((($75)+(4))>>2)]=HEAP32[((($76)+(4))>>2)];HEAP32[((($75)+(8))>>2)]=HEAP32[((($76)+(8))>>2)];
      var $77=$1;
      var $78=_mrb_calloc($77, 8, 44);
      var $79=$78;
      var $80=$c;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$c;
      var $83=(($82+20)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+352)|0);
      var $86=$c;
      var $87=(($86+24)|0);
      HEAP32[(($87)>>2)]=$85;
      var $88=$c;
      var $89=(($88+20)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$c;
      var $92=(($91+16)|0);
      HEAP32[(($92)>>2)]=$90;
      var $93=$c;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      $ci=$95;
      var $96=$p;
      var $97=(($96+16)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$ci;
      var $100=(($99+28)|0);
      HEAP32[(($100)>>2)]=$98;
      var $101=$p;
      var $102=$ci;
      var $103=(($102+4)|0);
      HEAP32[(($103)>>2)]=$101;
      var $104=$p;
      var $105=(($104+12)|0);
      var $106=$105;
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$ci;
      var $111=(($110+20)|0);
      HEAP32[(($111)>>2)]=$109;
      var $112=$p;
      var $113=(($112+12)|0);
      var $114=$113;
      var $115=HEAP32[(($114)>>2)];
      var $116=(($115+6)|0);
      var $117=HEAP16[(($116)>>1)];
      var $118=(($117)&(65535));
      var $119=$ci;
      var $120=(($119+12)|0);
      HEAP32[(($120)>>2)]=$118;
      var $121=$ci;
      var $122=(($121+44)|0);
      var $123=$ci;
      var $124=(($123)|0);
      var $125=$122;
      var $126=$124;
      assert(44 % 1 === 0);_memcpy($125, $126, 44);
      var $127=$c;
      var $128=(($127+16)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+44)|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=$f;
      var $132=$c;
      var $133=(($132+48)|0);
      HEAP32[(($133)>>2)]=$131;
      var $134=$c;
      var $135=(($134+44)|0);
      HEAP8[($135)]=0;
      var $136=$agg_result;
      var $137=$self;
      assert(12 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];HEAP32[((($136)+(8))>>2)]=HEAP32[((($137)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_resume($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $a=__stackBase__;
      var $len=(__stackBase__)+(4);
      var $b;
      var $e;
      $1=$mrb;
      var $2=$1;
      var $3=_fiber_check($2, $self);
      $c=$3;
      var $4=$c;
      var $5=(($4+44)|0);
      var $6=HEAP8[($5)];
      var $7=(($6)&(255));
      var $8=(($7)|(0))==2;
      if ($8) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $10=$1;
      var $11=$1;
      var $12=_mrb_class_get($11, ((95620)|0));
      _mrb_raise($10, $12, ((94640)|0));
      label = 3; break;
    case 3: 
      var $14=$c;
      var $15=(($14+44)|0);
      var $16=HEAP8[($15)];
      var $17=(($16)&(255));
      var $18=(($17)|(0))==3;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$1;
      var $21=$1;
      var $22=_mrb_class_get($21, ((95620)|0));
      _mrb_raise($20, $22, ((93736)|0));
      label = 5; break;
    case 5: 
      var $24=$1;
      var $25=_mrb_get_args($24, ((96820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $26=$1;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28+44)|0);
      HEAP8[($29)]=2;
      var $30=$c;
      var $31=(($30+44)|0);
      var $32=HEAP8[($31)];
      var $33=(($32)&(255));
      var $34=(($33)|(0))==0;
      if ($34) { label = 6; break; } else { label = 12; break; }
    case 6: 
      var $36=$c;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($38+12)|0);
      $b=$39;
      var $40=$b;
      var $41=HEAP32[(($len)>>2)];
      var $42=(($40+((($41)*(12))&-1))|0);
      $e=$42;
      label = 7; break;
    case 7: 
      var $44=$b;
      var $45=$e;
      var $46=(($44)>>>(0)) < (($45)>>>(0));
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$b;
      var $49=(($48+12)|0);
      $b=$49;
      var $50=HEAP32[(($a)>>2)];
      var $51=(($50+12)|0);
      HEAP32[(($a)>>2)]=$51;
      var $52=$48;
      var $53=$50;
      assert(12 % 1 === 0);HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)];HEAP32[((($52)+(8))>>2)]=HEAP32[((($53)+(8))>>2)];
      label = 7; break;
    case 9: 
      var $55=HEAP32[(($len)>>2)];
      var $56=$c;
      var $57=(($56+20)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($58+16)|0);
      HEAP32[(($59)>>2)]=$55;
      var $60=$1;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$c;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$c;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67+48)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($69)|(0))!=0;
      if ($70) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $72=$1;
      var $73=$c;
      var $74=(($73+48)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75;
      var $77=$c;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=(($79+48)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$81;
      _mrb_field_write_barrier($72, $76, $82);
      label = 11; break;
    case 11: 
      var $84=$c;
      var $85=(($84+44)|0);
      HEAP8[($85)]=1;
      var $86=$c;
      var $87=$1;
      var $88=(($87+8)|0);
      HEAP32[(($88)>>2)]=$86;
      var $89=$c;
      var $90=(($89+16)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($91+28)|0);
      HEAP32[(($92)>>2)]=0;
      var $93=$c;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95+4)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=(($97+20)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=(($99+12)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=(($101)|0);
      var $103=$agg_result;
      var $104=$102;
      assert(12 % 1 === 0);HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)];HEAP32[((($103)+(8))>>2)]=HEAP32[((($104)+(8))>>2)];
      label = 15; break;
    case 12: 
      var $106=$c;
      var $107=(($106+16)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108+28)|0);
      HEAP32[(($109)>>2)]=0;
      var $110=$1;
      var $111=(($110+8)|0);
      var $112=HEAP32[(($111)>>2)];
      var $113=$c;
      var $114=(($113)|0);
      HEAP32[(($114)>>2)]=$112;
      var $115=$c;
      var $116=(($115)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=(($117+48)|0);
      var $119=HEAP32[(($118)>>2)];
      var $120=(($119)|(0))!=0;
      if ($120) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $122=$1;
      var $123=$c;
      var $124=(($123+48)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$125;
      var $127=$c;
      var $128=(($127)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+48)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$131;
      _mrb_field_write_barrier($122, $126, $132);
      label = 14; break;
    case 14: 
      var $134=$c;
      var $135=(($134+44)|0);
      HEAP8[($135)]=1;
      var $136=$c;
      var $137=$1;
      var $138=(($137+8)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$1;
      var $140=HEAP32[(($a)>>2)];
      var $141=HEAP32[(($len)>>2)];
      _fiber_result($agg_result, $139, $140, $141);
      label = 15; break;
    case 15: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_yield($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $c;
      var $a=__stackBase__;
      var $len=(__stackBase__)+(4);
      $1=$mrb;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      $c=$4;
      var $5=$c;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|(0))!=0;
      if ($8) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $10=$1;
      var $11=$1;
      var $12=_mrb_class_get($11, ((101496)|0));
      _mrb_raise($10, $12, ((98792)|0));
      label = 3; break;
    case 3: 
      var $14=$1;
      var $15=_mrb_get_args($14, ((96820)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$a,HEAP32[(((tempInt)+(4))>>2)]=$len,tempInt));
      var $16=$c;
      var $17=(($16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18+44)|0);
      HEAP8[($19)]=1;
      var $20=$c;
      var $21=(($20)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$1;
      var $24=(($23+8)|0);
      HEAP32[(($24)>>2)]=$22;
      var $25=$c;
      var $26=(($25)|0);
      HEAP32[(($26)>>2)]=0;
      var $27=$1;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29+16)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=(($31+28)|0);
      HEAP32[(($32)>>2)]=0;
      var $33=$1;
      var $34=HEAP32[(($a)>>2)];
      var $35=HEAP32[(($len)>>2)];
      _fiber_result($agg_result, $33, $34, $35);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_result($agg_result, $mrb, $a, $len) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      $1=$mrb;
      $2=$a;
      $3=$len;
      var $4=$3;
      var $5=(($4)|(0))==0;
      if ($5) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value1820($agg_result);
      label = 6; break;
    case 3: 
      var $8=$3;
      var $9=(($8)|(0))==1;
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$2;
      var $12=(($11)|0);
      var $13=$agg_result;
      var $14=$12;
      assert(12 % 1 === 0);HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($13)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
      label = 6; break;
    case 5: 
      var $16=$1;
      var $17=$3;
      var $18=$2;
      _mrb_ary_new_from_values($agg_result, $16, $17, $18);
      label = 6; break;
    case 6: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1820($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _fiber_check($mrb, $fib) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $fib; $fib = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($fib)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($fib)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($fib)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $f;
      $1=$mrb;
      var $2=(($fib)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $f=$5;
      var $6=$f;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 2; break; }
    case 2: 
      var $11=$1;
      var $12=$1;
      var $13=_mrb_class_get($12, ((101496)|0));
      _mrb_raise($11, $13, ((113720)|0));
      label = 3; break;
    case 3: 
      var $15=$f;
      var $16=(($15+12)|0);
      var $17=HEAP32[(($16)>>2)];
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_hash_values_at($agg_result, $mrb, $argc, $argv, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $result=__stackBase__;
      var $i;
      var $4=(__stackBase__)+(12);
      $1=$mrb;
      $2=$argc;
      $3=$argv;
      var $5=$1;
      var $6=$2;
      _mrb_ary_new_capa($result, $5, $6);
      $i=0;
      label = 2; break;
    case 2: 
      var $8=$i;
      var $9=$2;
      var $10=(($8)|(0)) < (($9)|(0));
      if ($10) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $12=$1;
      var $13=$1;
      var $14=$i;
      var $15=$3;
      var $16=(($15+((($14)*(12))&-1))|0);
      _mrb_hash_get($4, $13, $hash, $16);
      _mrb_ary_push($12, $result, $4);
      label = 4; break;
    case 4: 
      var $18=$i;
      var $19=((($18)+(1))|0);
      $i=$19;
      label = 2; break;
    case 5: 
      var $21=$agg_result;
      var $22=$result;
      assert(12 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_hash_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $h;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+68)|0);
  var $4=HEAP32[(($3)>>2)];
  $h=$4;
  var $5=$1;
  var $6=$h;
  _mrb_define_method($5, $6, ((109452)|0), 654, 4096);
  return;
}
function _hash_values_at($agg_result, $mrb, $hash) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $hash; $hash = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($hash)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($hash)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($hash)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $argv=__stackBase__;
  var $argc=(__stackBase__)+(4);
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_get_args($2, ((112692)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$argv,HEAP32[(((tempInt)+(4))>>2)]=$argc,tempInt));
  var $4=$1;
  var $5=HEAP32[(($argc)>>2)];
  var $6=HEAP32[(($argv)>>2)];
  _mrb_hash_values_at($agg_result, $4, $5, $6, $hash);
  STACKTOP = __stackBase__;
  return;
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_objectspace_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_objectspace_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_objectspace_gem_final($2);
  return;
}
function _mrb_mruby_objectspace_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_proc_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _os_count_objects($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 500)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $obj_count=__stackBase__;
      var $i;
      var $hash=(__stackBase__)+(104);
      var $2=(__stackBase__)+(116);
      var $3=(__stackBase__)+(128);
      var $4=(__stackBase__)+(140);
      var $5=(__stackBase__)+(152);
      var $6=(__stackBase__)+(164);
      var $7=(__stackBase__)+(176);
      var $8=(__stackBase__)+(188);
      var $type=(__stackBase__)+(200);
      var $9=(__stackBase__)+(212);
      var $10=(__stackBase__)+(224);
      var $11=(__stackBase__)+(236);
      var $12=(__stackBase__)+(248);
      var $13=(__stackBase__)+(260);
      var $14=(__stackBase__)+(272);
      var $15=(__stackBase__)+(284);
      var $16=(__stackBase__)+(296);
      var $17=(__stackBase__)+(308);
      var $18=(__stackBase__)+(320);
      var $19=(__stackBase__)+(332);
      var $20=(__stackBase__)+(344);
      var $21=(__stackBase__)+(356);
      var $22=(__stackBase__)+(368);
      var $23=(__stackBase__)+(380);
      var $24=(__stackBase__)+(392);
      var $25=(__stackBase__)+(404);
      var $26=(__stackBase__)+(416);
      var $27=(__stackBase__)+(428);
      var $28=(__stackBase__)+(440);
      var $29=(__stackBase__)+(452);
      var $30=(__stackBase__)+(464);
      var $31=(__stackBase__)+(476);
      var $32=(__stackBase__)+(488);
      $1=$mrb;
      var $33=$1;
      var $34=_mrb_get_args($33, ((109392)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$hash,tempInt));
      var $35=(($34)|(0))==0;
      if ($35) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $37=$1;
      _mrb_hash_new($2, $37);
      var $38=$hash;
      var $39=$2;
      assert(12 % 1 === 0);HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)];HEAP32[((($38)+(8))>>2)]=HEAP32[((($39)+(8))>>2)];
      label = 3; break;
    case 3: 
      var $41=$1;
      _mrb_hash_empty_p($3, $41, $hash);
      var $42=(($3+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|(0))!=0;
      if ($44) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $46=$1;
      _mrb_hash_clear($4, $46, $hash);
      label = 5; break;
    case 5: 
      $i=0;
      label = 6; break;
    case 6: 
      var $49=$i;
      var $50=(($49)>>>(0)) <= 23;
      if ($50) { label = 7; break; } else { label = 9; break; }
    case 7: 
      var $52=$i;
      var $53=(($obj_count+8)|0);
      var $54=(($53+($52<<2))|0);
      HEAP32[(($54)>>2)]=0;
      label = 8; break;
    case 8: 
      var $56=$i;
      var $57=((($56)+(1))|0);
      $i=$57;
      label = 6; break;
    case 9: 
      var $59=(($obj_count)|0);
      HEAP32[(($59)>>2)]=0;
      var $60=(($obj_count+4)|0);
      HEAP32[(($60)>>2)]=0;
      var $61=$1;
      var $62=$obj_count;
      _mrb_objspace_each_objects($61, 656, $62);
      var $63=$1;
      var $64=$1;
      var $65=_mrb_intern_cstr($64, ((112684)|0));
      _mrb_symbol_value1859($5, $65);
      var $66=(($obj_count)|0);
      var $67=HEAP32[(($66)>>2)];
      _mrb_fixnum_value1860($6, $67);
      _mrb_hash_set($63, $hash, $5, $6);
      var $68=$1;
      var $69=$1;
      var $70=_mrb_intern_cstr($69, ((107788)|0));
      _mrb_symbol_value1859($7, $70);
      var $71=(($obj_count+4)|0);
      var $72=HEAP32[(($71)>>2)];
      _mrb_fixnum_value1860($8, $72);
      _mrb_hash_set($68, $hash, $7, $8);
      $i=0;
      label = 10; break;
    case 10: 
      var $74=$i;
      var $75=(($74)>>>(0)) < 23;
      if ($75) { label = 11; break; } else { label = 39; break; }
    case 11: 
      var $77=$i;
      if ((($77)|(0))==0) {
        label = 12; break;
      }
      else if ((($77)|(0))==1) {
        label = 13; break;
      }
      else if ((($77)|(0))==2) {
        label = 14; break;
      }
      else if ((($77)|(0))==3) {
        label = 15; break;
      }
      else if ((($77)|(0))==4) {
        label = 16; break;
      }
      else if ((($77)|(0))==5) {
        label = 17; break;
      }
      else if ((($77)|(0))==6) {
        label = 18; break;
      }
      else if ((($77)|(0))==7) {
        label = 19; break;
      }
      else if ((($77)|(0))==8) {
        label = 20; break;
      }
      else if ((($77)|(0))==9) {
        label = 21; break;
      }
      else if ((($77)|(0))==10) {
        label = 22; break;
      }
      else if ((($77)|(0))==11) {
        label = 23; break;
      }
      else if ((($77)|(0))==12) {
        label = 24; break;
      }
      else if ((($77)|(0))==13) {
        label = 25; break;
      }
      else if ((($77)|(0))==14) {
        label = 26; break;
      }
      else if ((($77)|(0))==15) {
        label = 27; break;
      }
      else if ((($77)|(0))==16) {
        label = 28; break;
      }
      else if ((($77)|(0))==17) {
        label = 29; break;
      }
      else if ((($77)|(0))==18) {
        label = 30; break;
      }
      else if ((($77)|(0))==19) {
        label = 31; break;
      }
      else if ((($77)|(0))==20) {
        label = 32; break;
      }
      else if ((($77)|(0))==21) {
        label = 33; break;
      }
      else {
      label = 34; break;
      }
    case 12: 
      var $79=$1;
      var $80=_mrb_intern_cstr($79, ((104180)|0));
      _mrb_symbol_value1859($9, $80);
      var $81=$type;
      var $82=$9;
      assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
      label = 35; break;
    case 13: 
      var $84=$1;
      var $85=_mrb_intern_cstr($84, ((101456)|0));
      _mrb_symbol_value1859($10, $85);
      var $86=$type;
      var $87=$10;
      assert(12 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
      label = 35; break;
    case 14: 
      var $89=$1;
      var $90=_mrb_intern_cstr($89, ((98780)|0));
      _mrb_symbol_value1859($11, $90);
      var $91=$type;
      var $92=$11;
      assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
      label = 35; break;
    case 15: 
      var $94=$1;
      var $95=_mrb_intern_cstr($94, ((96804)|0));
      _mrb_symbol_value1859($12, $95);
      var $96=$type;
      var $97=$12;
      assert(12 % 1 === 0);HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];HEAP32[((($96)+(8))>>2)]=HEAP32[((($97)+(8))>>2)];
      label = 35; break;
    case 16: 
      var $99=$1;
      var $100=_mrb_intern_cstr($99, ((95604)|0));
      _mrb_symbol_value1859($13, $100);
      var $101=$type;
      var $102=$13;
      assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($102)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($102)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($102)+(8))>>2)];
      label = 35; break;
    case 17: 
      var $104=$1;
      var $105=_mrb_intern_cstr($104, ((94624)|0));
      _mrb_symbol_value1859($14, $105);
      var $106=$type;
      var $107=$14;
      assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($107)+(8))>>2)];
      label = 35; break;
    case 18: 
      var $109=$1;
      var $110=_mrb_intern_cstr($109, ((93720)|0));
      _mrb_symbol_value1859($15, $110);
      var $111=$type;
      var $112=$15;
      assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($112)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($112)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($112)+(8))>>2)];
      label = 35; break;
    case 19: 
      var $114=$1;
      var $115=_mrb_intern_cstr($114, ((113704)|0));
      _mrb_symbol_value1859($16, $115);
      var $116=$type;
      var $117=$16;
      assert(12 % 1 === 0);HEAP32[(($116)>>2)]=HEAP32[(($117)>>2)];HEAP32[((($116)+(4))>>2)]=HEAP32[((($117)+(4))>>2)];HEAP32[((($116)+(8))>>2)]=HEAP32[((($117)+(8))>>2)];
      label = 35; break;
    case 20: 
      var $119=$1;
      var $120=_mrb_intern_cstr($119, ((113148)|0));
      _mrb_symbol_value1859($17, $120);
      var $121=$type;
      var $122=$17;
      assert(12 % 1 === 0);HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)];HEAP32[((($121)+(8))>>2)]=HEAP32[((($122)+(8))>>2)];
      label = 35; break;
    case 21: 
      var $124=$1;
      var $125=_mrb_intern_cstr($124, ((112212)|0));
      _mrb_symbol_value1859($18, $125);
      var $126=$type;
      var $127=$18;
      assert(12 % 1 === 0);HEAP32[(($126)>>2)]=HEAP32[(($127)>>2)];HEAP32[((($126)+(4))>>2)]=HEAP32[((($127)+(4))>>2)];HEAP32[((($126)+(8))>>2)]=HEAP32[((($127)+(8))>>2)];
      label = 35; break;
    case 22: 
      var $129=$1;
      var $130=_mrb_intern_cstr($129, ((111628)|0));
      _mrb_symbol_value1859($19, $130);
      var $131=$type;
      var $132=$19;
      assert(12 % 1 === 0);HEAP32[(($131)>>2)]=HEAP32[(($132)>>2)];HEAP32[((($131)+(4))>>2)]=HEAP32[((($132)+(4))>>2)];HEAP32[((($131)+(8))>>2)]=HEAP32[((($132)+(8))>>2)];
      label = 35; break;
    case 23: 
      var $134=$1;
      var $135=_mrb_intern_cstr($134, ((111204)|0));
      _mrb_symbol_value1859($20, $135);
      var $136=$type;
      var $137=$20;
      assert(12 % 1 === 0);HEAP32[(($136)>>2)]=HEAP32[(($137)>>2)];HEAP32[((($136)+(4))>>2)]=HEAP32[((($137)+(4))>>2)];HEAP32[((($136)+(8))>>2)]=HEAP32[((($137)+(8))>>2)];
      label = 35; break;
    case 24: 
      var $139=$1;
      var $140=_mrb_intern_cstr($139, ((110680)|0));
      _mrb_symbol_value1859($21, $140);
      var $141=$type;
      var $142=$21;
      assert(12 % 1 === 0);HEAP32[(($141)>>2)]=HEAP32[(($142)>>2)];HEAP32[((($141)+(4))>>2)]=HEAP32[((($142)+(4))>>2)];HEAP32[((($141)+(8))>>2)]=HEAP32[((($142)+(8))>>2)];
      label = 35; break;
    case 25: 
      var $144=$1;
      var $145=_mrb_intern_cstr($144, ((110264)|0));
      _mrb_symbol_value1859($22, $145);
      var $146=$type;
      var $147=$22;
      assert(12 % 1 === 0);HEAP32[(($146)>>2)]=HEAP32[(($147)>>2)];HEAP32[((($146)+(4))>>2)]=HEAP32[((($147)+(4))>>2)];HEAP32[((($146)+(8))>>2)]=HEAP32[((($147)+(8))>>2)];
      label = 35; break;
    case 26: 
      var $149=$1;
      var $150=_mrb_intern_cstr($149, ((109912)|0));
      _mrb_symbol_value1859($23, $150);
      var $151=$type;
      var $152=$23;
      assert(12 % 1 === 0);HEAP32[(($151)>>2)]=HEAP32[(($152)>>2)];HEAP32[((($151)+(4))>>2)]=HEAP32[((($152)+(4))>>2)];HEAP32[((($151)+(8))>>2)]=HEAP32[((($152)+(8))>>2)];
      label = 35; break;
    case 27: 
      var $154=$1;
      var $155=_mrb_intern_cstr($154, ((109468)|0));
      _mrb_symbol_value1859($24, $155);
      var $156=$type;
      var $157=$24;
      assert(12 % 1 === 0);HEAP32[(($156)>>2)]=HEAP32[(($157)>>2)];HEAP32[((($156)+(4))>>2)]=HEAP32[((($157)+(4))>>2)];HEAP32[((($156)+(8))>>2)]=HEAP32[((($157)+(8))>>2)];
      label = 35; break;
    case 28: 
      var $159=$1;
      var $160=_mrb_intern_cstr($159, ((108980)|0));
      _mrb_symbol_value1859($25, $160);
      var $161=$type;
      var $162=$25;
      assert(12 % 1 === 0);HEAP32[(($161)>>2)]=HEAP32[(($162)>>2)];HEAP32[((($161)+(4))>>2)]=HEAP32[((($162)+(4))>>2)];HEAP32[((($161)+(8))>>2)]=HEAP32[((($162)+(8))>>2)];
      label = 35; break;
    case 29: 
      var $164=$1;
      var $165=_mrb_intern_cstr($164, ((108436)|0));
      _mrb_symbol_value1859($26, $165);
      var $166=$type;
      var $167=$26;
      assert(12 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($167)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($167)+(4))>>2)];HEAP32[((($166)+(8))>>2)]=HEAP32[((($167)+(8))>>2)];
      label = 35; break;
    case 30: 
      var $169=$1;
      var $170=_mrb_intern_cstr($169, ((108084)|0));
      _mrb_symbol_value1859($27, $170);
      var $171=$type;
      var $172=$27;
      assert(12 % 1 === 0);HEAP32[(($171)>>2)]=HEAP32[(($172)>>2)];HEAP32[((($171)+(4))>>2)]=HEAP32[((($172)+(4))>>2)];HEAP32[((($171)+(8))>>2)]=HEAP32[((($172)+(8))>>2)];
      label = 35; break;
    case 31: 
      var $174=$1;
      var $175=_mrb_intern_cstr($174, ((107552)|0));
      _mrb_symbol_value1859($28, $175);
      var $176=$type;
      var $177=$28;
      assert(12 % 1 === 0);HEAP32[(($176)>>2)]=HEAP32[(($177)>>2)];HEAP32[((($176)+(4))>>2)]=HEAP32[((($177)+(4))>>2)];HEAP32[((($176)+(8))>>2)]=HEAP32[((($177)+(8))>>2)];
      label = 35; break;
    case 32: 
      var $179=$1;
      var $180=_mrb_intern_cstr($179, ((107296)|0));
      _mrb_symbol_value1859($29, $180);
      var $181=$type;
      var $182=$29;
      assert(12 % 1 === 0);HEAP32[(($181)>>2)]=HEAP32[(($182)>>2)];HEAP32[((($181)+(4))>>2)]=HEAP32[((($182)+(4))>>2)];HEAP32[((($181)+(8))>>2)]=HEAP32[((($182)+(8))>>2)];
      label = 35; break;
    case 33: 
      var $184=$1;
      var $185=_mrb_intern_cstr($184, ((106876)|0));
      _mrb_symbol_value1859($30, $185);
      var $186=$type;
      var $187=$30;
      assert(12 % 1 === 0);HEAP32[(($186)>>2)]=HEAP32[(($187)>>2)];HEAP32[((($186)+(4))>>2)]=HEAP32[((($187)+(4))>>2)];HEAP32[((($186)+(8))>>2)]=HEAP32[((($187)+(8))>>2)];
      label = 35; break;
    case 34: 
      var $189=$i;
      _mrb_fixnum_value1860($31, $189);
      var $190=$type;
      var $191=$31;
      assert(12 % 1 === 0);HEAP32[(($190)>>2)]=HEAP32[(($191)>>2)];HEAP32[((($190)+(4))>>2)]=HEAP32[((($191)+(4))>>2)];HEAP32[((($190)+(8))>>2)]=HEAP32[((($191)+(8))>>2)];
      label = 35; break;
    case 35: 
      var $193=$i;
      var $194=(($obj_count+8)|0);
      var $195=(($194+($193<<2))|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|(0))!=0;
      if ($197) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $199=$1;
      var $200=$i;
      var $201=(($obj_count+8)|0);
      var $202=(($201+($200<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      _mrb_fixnum_value1860($32, $203);
      _mrb_hash_set($199, $hash, $type, $32);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $206=$i;
      var $207=((($206)+(1))|0);
      $i=$207;
      label = 10; break;
    case 39: 
      var $209=$agg_result;
      var $210=$hash;
      assert(12 % 1 === 0);HEAP32[(($209)>>2)]=HEAP32[(($210)>>2)];HEAP32[((($209)+(4))>>2)]=HEAP32[((($210)+(4))>>2)];HEAP32[((($209)+(8))>>2)]=HEAP32[((($210)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1859($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1860($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_objectspace_gem_init($mrb) {
  var label = 0;
  var $1;
  var $os;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_define_module($2, ((106444)|0));
  $os=$3;
  var $4=$1;
  var $5=$os;
  _mrb_define_class_method($4, $5, ((106064)|0), 642, 4096);
  return;
}
function _mrb_obj_value1867($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_proc_ext_gem_final($2);
  return;
}
function _mrb_mruby_proc_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $p;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+56)|0);
  var $4=HEAP32[(($3)>>2)];
  $p=$4;
  var $5=$1;
  var $6=$p;
  _mrb_define_method($5, $6, ((109288)|0), 16, 0);
  var $7=$1;
  var $8=$p;
  _mrb_define_method($7, $8, ((112668)|0), 404, 0);
  var $9=$1;
  var $10=$p;
  _mrb_define_method($9, $10, ((107780)|0), 432, 0);
  var $11=$1;
  var $12=$p;
  _mrb_define_method($11, $12, ((104172)|0), 432, 0);
  var $13=$1;
  var $14=$1;
  var $15=(($14+96)|0);
  var $16=HEAP32[(($15)>>2)];
  _mrb_define_class_method($13, $16, ((101448)|0), 126, 0);
  var $17=$1;
  var $18=$1;
  var $19=(($18+96)|0);
  var $20=HEAP32[(($19)>>2)];
  _mrb_define_method($17, $20, ((101448)|0), 126, 0);
  return;
}
function _mrb_proc_lambda($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var $1;
  var $p;
  $1=$mrb;
  var $2=(($self)|0);
  var $3=$2;
  var $4=HEAP32[(($3)>>2)];
  var $5=$4;
  $p=$5;
  var $6=$p;
  var $7=$6;
  var $8=HEAP32[(($7)>>2)];
  var $9=$8 >>> 11;
  var $10=$9 & 2097151;
  var $11=$10 & 256;
  var $12=(($11)|(0))!=0;
  var $13=(($12)&(1));
  var $14=(($13) & 255);
  _mrb_bool_value1890($agg_result, $14);
  STACKTOP = __stackBase__;
  return;
}
function _mrb_proc_source_location($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $irep;
      var $filename=__stackBase__;
      var $lines=(__stackBase__)+(12);
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=(($self)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=$10 >>> 11;
      var $12=$11 & 2097151;
      var $13=$12 & 128;
      var $14=(($13)|(0))!=0;
      if ($14) { label = 2; break; } else { label = 3; break; }
    case 2: 
      _mrb_nil_value1889($agg_result);
      label = 8; break;
    case 3: 
      var $17=$p;
      var $18=(($17+12)|0);
      var $19=$18;
      var $20=HEAP32[(($19)>>2)];
      $irep=$20;
      _mrb_nil_value1889($filename);
      _mrb_nil_value1889($lines);
      var $21=$irep;
      var $22=(($21+24)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|(0))!=0;
      if ($24) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $26=$1;
      var $27=$irep;
      var $28=(($27+24)|0);
      var $29=HEAP32[(($28)>>2)];
      _mrb_str_new_cstr($2, $26, $29);
      var $30=$filename;
      var $31=$2;
      assert(12 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];
      label = 5; break;
    case 5: 
      var $33=$irep;
      var $34=(($33+28)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|(0))!=0;
      if ($36) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38=$irep;
      var $39=(($38+28)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=HEAP16[(($40)>>1)];
      var $42=(($41)&(65535));
      _mrb_fixnum_value1888($3, $42);
      var $43=$lines;
      var $44=$3;
      assert(12 % 1 === 0);HEAP32[(($43)>>2)]=HEAP32[(($44)>>2)];HEAP32[((($43)+(4))>>2)]=HEAP32[((($44)+(4))>>2)];HEAP32[((($43)+(8))>>2)]=HEAP32[((($44)+(8))>>2)];
      label = 7; break;
    case 7: 
      var $46=$1;
      _mrb_assoc_new($agg_result, $46, $filename, $lines);
      label = 8; break;
    case 8: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_proc_inspect($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 132)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $str=__stackBase__;
      var $2=(__stackBase__)+(12);
      var $irep;
      var $3=(__stackBase__)+(24);
      var $4=(__stackBase__)+(36);
      var $5=(__stackBase__)+(48);
      var $6=(__stackBase__)+(60);
      var $7=(__stackBase__)+(72);
      var $8=(__stackBase__)+(84);
      var $9=(__stackBase__)+(96);
      var $10=(__stackBase__)+(108);
      var $11=(__stackBase__)+(120);
      $1=$mrb;
      var $12=(($self)|0);
      var $13=$12;
      var $14=HEAP32[(($13)>>2)];
      var $15=$14;
      $p=$15;
      var $16=$1;
      _mrb_str_new_cstr($str, $16, ((94596)|0));
      var $17=$1;
      var $18=$1;
      var $19=(($self)|0);
      var $20=$19;
      var $21=HEAP32[(($20)>>2)];
      _mrb_ptr_to_str($2, $18, $21);
      _mrb_str_concat($17, $str, $2);
      var $22=$p;
      var $23=$22;
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 >>> 11;
      var $26=$25 & 2097151;
      var $27=$26 & 128;
      var $28=(($27)|(0))!=0;
      if ($28) { label = 9; break; } else { label = 2; break; }
    case 2: 
      var $30=$p;
      var $31=(($30+12)|0);
      var $32=$31;
      var $33=HEAP32[(($32)>>2)];
      $irep=$33;
      var $34=$1;
      _mrb_str_cat_cstr($3, $34, $str, ((93716)|0));
      var $35=$irep;
      var $36=(($35+24)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37)|(0))!=0;
      if ($38) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $40=$1;
      var $41=$irep;
      var $42=(($41+24)|0);
      var $43=HEAP32[(($42)>>2)];
      _mrb_str_cat_cstr($4, $40, $str, $43);
      label = 5; break;
    case 4: 
      var $45=$1;
      _mrb_str_cat_cstr($5, $45, $str, ((113700)|0));
      label = 5; break;
    case 5: 
      var $47=$1;
      _mrb_str_cat_cstr($6, $47, $str, ((113144)|0));
      var $48=$irep;
      var $49=(($48+28)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|(0))!=0;
      if ($51) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $53=$1;
      var $54=$irep;
      var $55=(($54+28)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=HEAP16[(($56)>>1)];
      var $58=(($57)&(65535));
      _mrb_fixnum_value1888($7, $58);
      _mrb_str_append($8, $53, $str, $7);
      label = 8; break;
    case 7: 
      var $60=$1;
      _mrb_str_cat_cstr($9, $60, $str, ((113700)|0));
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $63=$p;
      var $64=$63;
      var $65=HEAP32[(($64)>>2)];
      var $66=$65 >>> 11;
      var $67=$66 & 2097151;
      var $68=$67 & 256;
      var $69=(($68)|(0))!=0;
      if ($69) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $71=$1;
      _mrb_str_cat_cstr($10, $71, $str, ((112200)|0));
      label = 11; break;
    case 11: 
      var $73=$1;
      _mrb_str_cat_cstr($11, $73, $str, ((111624)|0));
      var $74=$agg_result;
      var $75=$str;
      assert(12 % 1 === 0);HEAP32[(($74)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($74)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];HEAP32[((($74)+(8))>>2)]=HEAP32[((($75)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_kernel_proc($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $blk=__stackBase__;
      $1=$mrb;
      var $2=$1;
      var $3=_mrb_get_args($2, ((98756)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$blk,tempInt));
      var $4=(($blk+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==0;
      if ($6) { label = 2; break; } else { label = 4; break; }
    case 2: 
      var $8=(($blk)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $13=$1;
      var $14=$1;
      var $15=_mrb_class_get($14, ((96776)|0));
      _mrb_raise($13, $15, ((95540)|0));
      label = 4; break;
    case 4: 
      var $17=$agg_result;
      var $18=$blk;
      assert(12 % 1 === 0);HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_fixnum_value1888($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=3;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP32[(($6)>>2)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_nil_value1889($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_bool_value1890($agg_result, $boolean) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$boolean;
      label = 2; break;
    case 2: 
      var $3=$1;
      var $4=(($3)&(255));
      var $5=(($4)|(0))!=0;
      var $6=$5 ? 2 : 0;
      var $7=(($v+8)|0);
      HEAP32[(($7)>>2)]=$6;
      var $8=(($v)|0);
      var $9=$8;
      HEAP32[(($9)>>2)]=1;
      label = 3; break;
    case 3: 
      var $11=$agg_result;
      var $12=$v;
      assert(12 % 1 === 0);HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];HEAP32[((($11)+(8))>>2)]=HEAP32[((($12)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_mruby_range_ext_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_mruby_range_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_range_ext_gem_final($2);
  return;
}
function _mrb_mruby_range_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $s;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_class_get($2, ((109200)|0));
  $s=$3;
  var $4=$1;
  var $5=$s;
  _mrb_define_method($4, $5, ((112660)|0), 46, 262144);
  var $6=$1;
  var $7=$s;
  _mrb_define_method($6, $7, ((107772)|0), 34, 8192);
  var $8=$1;
  var $9=$s;
  _mrb_define_method($8, $9, ((104164)|0), 270, 8192);
  return;
}
function _mrb_range_cover($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $val=__stackBase__;
      var $r;
      var $beg=(__stackBase__)+(12);
      var $end=(__stackBase__)+(24);
      $1=$mrb;
      var $2=(($range)|0);
      var $3=$2;
      var $4=HEAP32[(($3)>>2)];
      var $5=$4;
      $r=$5;
      var $6=$1;
      var $7=_mrb_get_args($6, ((96772)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$val,tempInt));
      var $8=$r;
      var $9=(($8+12)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0);
      var $12=$beg;
      var $13=$11;
      assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($13)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($13)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($13)+(8))>>2)];
      var $14=$r;
      var $15=(($14+12)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16+12)|0);
      var $18=$end;
      var $19=$17;
      assert(12 % 1 === 0);HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($18)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
      var $20=$1;
      var $21=_r_le1907($20, $beg, $val);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 2; break; } else { label = 10; break; }
    case 2: 
      var $24=$r;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|(0))!=0;
      if ($27) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $29=$1;
      var $30=_r_lt($29, $val, $end);
      var $31=(($30)|(0))!=0;
      if ($31) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _mrb_true_value1908($agg_result);
      label = 11; break;
    case 5: 
      label = 9; break;
    case 6: 
      var $35=$1;
      var $36=_r_le1907($35, $val, $end);
      var $37=(($36)|(0))!=0;
      if ($37) { label = 7; break; } else { label = 8; break; }
    case 7: 
      _mrb_true_value1908($agg_result);
      label = 11; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      _mrb_false_value1909($agg_result);
      label = 11; break;
    case 11: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_proc_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_proc_ext_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((82972)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1867($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_mruby_range_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_mruby_symbol_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  return;
}
function _mrb_range_first($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $num=__stackBase__;
      var $array=(__stackBase__)+(12);
      var $r;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=(($range)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $r=$7;
      var $8=$1;
      var $9=_mrb_get_args($8, ((101444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$num,tempInt));
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$r;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0);
      var $16=$agg_result;
      var $17=$15;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $19=$1;
      _mrb_funcall($2, $19, $range, ((98736)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=$array;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=$1;
      var $23=$1;
      _mrb_to_int($3, $23, $num);
      _mrb_funcall($agg_result, $22, $array, ((107772)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_range_last($agg_result, $mrb, $range) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $range; $range = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($range)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($range)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($range)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $num=__stackBase__;
      var $array=(__stackBase__)+(12);
      var $r;
      var $2=(__stackBase__)+(24);
      var $3=(__stackBase__)+(36);
      $1=$mrb;
      var $4=(($range)|0);
      var $5=$4;
      var $6=HEAP32[(($5)>>2)];
      var $7=$6;
      $r=$7;
      var $8=$1;
      var $9=_mrb_get_args($8, ((101444)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$num,tempInt));
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $12=$r;
      var $13=(($12+12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14+12)|0);
      var $16=$agg_result;
      var $17=$15;
      assert(12 % 1 === 0);HEAP32[(($16)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($16)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($16)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
      label = 4; break;
    case 3: 
      var $19=$1;
      _mrb_funcall($2, $19, $range, ((98736)|0), 0, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $20=$array;
      var $21=$2;
      assert(12 % 1 === 0);HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($20)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
      var $22=$1;
      var $23=$1;
      _mrb_to_int($3, $23, $num);
      _mrb_funcall($agg_result, $22, $array, ((104164)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($3)+(8))>>2)],tempInt));
      label = 4; break;
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _r_le1907($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r=__stackBase__;
      var $c;
      $2=$mrb;
      var $3=$2;
      _mrb_funcall($r, $3, $a, ((95536)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $4=(($r+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $8=(($r)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      $c=$10;
      var $11=$c;
      var $12=(($11)|(0))==0;
      if ($12) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $14=$c;
      var $15=(($14)|(0))==-1;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=1;
      label = 7; break;
    case 5: 
      label = 6; break;
    case 6: 
      $1=0;
      label = 7; break;
    case 7: 
      var $20=$1;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + label);
  }
}
function _r_lt($mrb, $a, $b) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $a; $a = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($a)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($a)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($a)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  var tempParam = $b; $b = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($b)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($b)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($b)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $r=__stackBase__;
      $2=$mrb;
      var $3=$2;
      _mrb_funcall($r, $3, $a, ((95536)|0), 1, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=HEAP32[(($b)>>2)],HEAP32[(((tempInt)+(4))>>2)]=HEAP32[((($b)+(4))>>2)],HEAP32[(((tempInt)+(8))>>2)]=HEAP32[((($b)+(8))>>2)],tempInt));
      var $4=(($r+8)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))==3;
      if ($6) { label = 2; break; } else { label = 5; break; }
    case 2: 
      var $8=(($r)|0);
      var $9=$8;
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))==-1;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=1;
      label = 6; break;
    case 4: 
      label = 5; break;
    case 5: 
      $1=0;
      label = 6; break;
    case 6: 
      var $16=$1;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_true_value1908($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=2;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_false_value1909($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=1;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_obj_value1912($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_mruby_symbol_ext_gem_final($2);
  return;
}
function _mrb_mruby_symbol_ext_gem_init($mrb) {
  var label = 0;
  var $1;
  var $s;
  $1=$mrb;
  var $2=$1;
  var $3=(($2+92)|0);
  var $4=HEAP32[(($3)>>2)];
  $s=$4;
  var $5=$1;
  var $6=$s;
  _mrb_define_class_method($5, $6, ((109028)|0), 494, 0);
  return;
}
function _mrb_sym_all_symbols($agg_result, $mrb, $self) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $self; $self = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($self)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($self)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($self)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $k;
      var $sym;
      var $h;
      var $ary=__stackBase__;
      var $2=(__stackBase__)+(12);
      $1=$mrb;
      var $3=$1;
      var $4=(($3+568)|0);
      var $5=HEAP32[(($4)>>2)];
      $h=$5;
      var $6=$1;
      var $7=$h;
      var $8=(($7+4)|0);
      var $9=HEAP32[(($8)>>2)];
      _mrb_ary_new_capa($ary, $6, $9);
      $k=0;
      label = 2; break;
    case 2: 
      var $11=$k;
      var $12=$h;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($11)|(0))!=(($14)|(0));
      if ($15) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $17=$k;
      var $18=Math.floor(((($17)>>>(0)))/(8));
      var $19=$h;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=(($21+$18)|0);
      var $23=HEAP8[($22)];
      var $24=(($23)&(255));
      var $25=$k;
      var $26=((($25)>>>(0)))%(8);
      var $27=((114628+$26)|0);
      var $28=HEAP8[($27)];
      var $29=(($28)&(255));
      var $30=$24 & $29;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 6; break; } else { label = 4; break; }
    case 4: 
      var $33=$k;
      var $34=Math.floor(((($33)>>>(0)))/(8));
      var $35=$h;
      var $36=(($35+20)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=(($37+$34)|0);
      var $39=HEAP8[($38)];
      var $40=(($39)&(255));
      var $41=$k;
      var $42=((($41)>>>(0)))%(8);
      var $43=((114628+$42)|0);
      var $44=HEAP8[($43)];
      var $45=(($44)&(255));
      var $46=$40 & $45;
      var $47=(($46)|(0))!=0;
      if ($47) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $49=$k;
      var $50=$h;
      var $51=(($50+28)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52+($49<<1))|0);
      var $54=HEAP16[(($53)>>1)];
      $sym=$54;
      var $55=$1;
      var $56=$sym;
      _mrb_symbol_value1921($2, $56);
      _mrb_ary_push($55, $ary, $2);
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $59=$k;
      var $60=((($59)+(1))|0);
      $k=$60;
      label = 2; break;
    case 8: 
      var $62=$agg_result;
      var $63=$ary;
      assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_symbol_value1921($agg_result, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      $1=$i;
      label = 2; break;
    case 2: 
      var $3=(($v+8)|0);
      HEAP32[(($3)>>2)]=4;
      var $4=$1;
      var $5=(($v)|0);
      var $6=$5;
      HEAP16[(($6)>>1)]=$4;
      label = 3; break;
    case 3: 
      var $8=$agg_result;
      var $9=$v;
      assert(12 % 1 === 0);HEAP32[(($8)>>2)]=HEAP32[(($9)>>2)];HEAP32[((($8)+(4))>>2)]=HEAP32[((($9)+(4))>>2)];HEAP32[((($8)+(8))>>2)]=HEAP32[((($9)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_webruby_multiline_parse_gem_init($mrb) {
  var label = 0;
  var $1;
  var $ai;
  $1=$mrb;
  var $2=$1;
  var $3=_mrb_gc_arena_save($2);
  $ai=$3;
  var $4=$1;
  _mrb_webruby_multiline_parse_gem_init($4);
  var $5=$1;
  var $6=$ai;
  _mrb_gc_arena_restore($5, $6);
  return;
}
function _GENERATED_TMP_mrb_webruby_multiline_parse_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  _mrb_webruby_multiline_parse_gem_final($2);
  return;
}
function _multiline_parse_run_source($mrb, $src, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 304)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $parser;
      var $code_block_open;
      var $n;
      var $result=__stackBase__;
      var $buf=(__stackBase__)+(12);
      var $4=(__stackBase__)+(268);
      var $5=(__stackBase__)+(280);
      var $6=(__stackBase__)+(292);
      $1=$mrb;
      $2=$src;
      $3=$print_level;
      $code_block_open=0;
      _mrb_nil_value1931($result);
      var $7=$1;
      var $8=_mrb_parser_new($7);
      $parser=$8;
      var $9=$2;
      var $10=$parser;
      var $11=(($10+12)|0);
      HEAP32[(($11)>>2)]=$9;
      var $12=$2;
      var $13=$2;
      var $14=_strlen($13);
      var $15=(($12+$14)|0);
      var $16=$parser;
      var $17=(($16+16)|0);
      HEAP32[(($17)>>2)]=$15;
      var $18=$parser;
      var $19=(($18+32)|0);
      HEAP32[(($19)>>2)]=1;
      var $20=$parser;
      var $21=HEAP32[((59052)>>2)];
      _mrb_parser_parse($20, $21);
      var $22=$parser;
      var $23=_is_code_block_open($22);
      $code_block_open=$23;
      var $24=$code_block_open;
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 2; break; }
    case 2: 
      var $27=$parser;
      var $28=(($27+1128)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)>>>(0)) > 0;
      if ($30) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $32=(($buf)|0);
      var $33=$parser;
      var $34=(($33+1144)|0);
      var $35=(($34)|0);
      var $36=(($35)|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$parser;
      var $39=(($38+1144)|0);
      var $40=(($39)|0);
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=_snprintf($32, 256, ((108928)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$37,HEAP32[(((tempInt)+(4))>>2)]=$42,tempInt));
      $n=$43;
      var $44=$1;
      var $45=$1;
      var $46=_mrb_class_get($45, ((112608)|0));
      var $47=(($buf)|0);
      var $48=$n;
      _mrb_exc_new($4, $44, $46, $47, $48);
      var $49=(($4)|0);
      var $50=$49;
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=$1;
      var $54=(($53+16)|0);
      HEAP32[(($54)>>2)]=$52;
      label = 5; break;
    case 4: 
      var $56=$1;
      var $57=$parser;
      var $58=_mrb_generate_code($56, $57);
      $n=$58;
      var $59=$1;
      var $60=$1;
      var $61=$n;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($64+($61<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=_mrb_proc_new($60, $66);
      var $68=$1;
      _mrb_top_self($5, $68);
      _mrb_run($6, $59, $67, $5);
      var $69=$result;
      var $70=$6;
      assert(12 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $73=$parser;
      _mrb_parser_free($73);
      var $74=$1;
      var $75=$code_block_open;
      var $76=$3;
      var $77=_check_and_print_result($74, $result, $75, $76);
      STACKTOP = __stackBase__;
      return $77;
    default: assert(0, "bad label: " + label);
  }
}
Module["_multiline_parse_run_source"] = _multiline_parse_run_source;
function _mrb_nil_value1931($agg_result) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $v=__stackBase__;
      label = 2; break;
    case 2: 
      var $2=(($v+8)|0);
      HEAP32[(($2)>>2)]=0;
      var $3=(($v)|0);
      var $4=$3;
      HEAP32[(($4)>>2)]=0;
      label = 3; break;
    case 3: 
      var $6=$agg_result;
      var $7=$v;
      assert(12 % 1 === 0);HEAP32[(($6)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($6)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($6)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _is_code_block_open($parser) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $code_block_open;
      var $unexpected_end;
      var $message;
      $2=$parser;
      $code_block_open=0;
      var $3=$2;
      var $4=(($3+1116)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|(0))!=0;
      if ($6) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=1;
      label = 32; break;
    case 3: 
      var $9=$2;
      var $10=$9;
      var $11=(($10+1120)|0);
      var $12=HEAP8[($11)];
      var $13=(($12)&(255)) >>> 1;
      var $14=$13 & 1;
      var $15=(($14 << 24) >> 24)!=0;
      if ($15) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $17=$2;
      var $18=$17;
      var $19=(($18+1120)|0);
      var $20=HEAP8[($19)];
      var $21=$20 & -3;
      HEAP8[($19)]=$21;
      $1=0;
      label = 32; break;
    case 5: 
      var $23=$2;
      var $24=(($23+1128)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=0 < (($25)>>>(0));
      if ($26) { label = 6; break; } else { label = 15; break; }
    case 6: 
      $unexpected_end=((107720)|0);
      var $28=$2;
      var $29=(($28+1144)|0);
      var $30=(($29)|0);
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      $message=$32;
      var $33=$message;
      var $34=$unexpected_end;
      var $35=$unexpected_end;
      var $36=_strlen($35);
      var $37=_strncmp($33, $34, $36);
      var $38=(($37)|(0))==0;
      if ($38) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $code_block_open=1;
      label = 14; break;
    case 8: 
      var $41=$message;
      var $42=_strcmp($41, ((104116)|0));
      var $43=(($42)|(0))==0;
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $code_block_open=0;
      label = 13; break;
    case 10: 
      var $46=$message;
      var $47=_strcmp($46, ((101388)|0));
      var $48=(($47)|(0))==0;
      if ($48) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $code_block_open=0;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $53=$code_block_open;
      $1=$53;
      label = 32; break;
    case 15: 
      var $55=$2;
      var $56=(($55+44)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57)|(0))!=0;
      if ($58) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $1=1;
      label = 32; break;
    case 17: 
      var $61=$2;
      var $62=(($61+40)|0);
      var $63=HEAP32[(($62)>>2)];
      if ((($63)|(0))==0) {
        label = 18; break;
      }
      else if ((($63)|(0))==8) {
        label = 19; break;
      }
      else if ((($63)|(0))==9) {
        label = 20; break;
      }
      else if ((($63)|(0))==7) {
        label = 21; break;
      }
      else if ((($63)|(0))==10) {
        label = 22; break;
      }
      else if ((($63)|(0))==4) {
        label = 23; break;
      }
      else if ((($63)|(0))==5) {
        label = 24; break;
      }
      else if ((($63)|(0))==1) {
        label = 25; break;
      }
      else if ((($63)|(0))==2) {
        label = 26; break;
      }
      else if ((($63)|(0))==3) {
        label = 27; break;
      }
      else if ((($63)|(0))==6) {
        label = 28; break;
      }
      else if ((($63)|(0))==11) {
        label = 29; break;
      }
      else {
      label = 30; break;
      }
    case 18: 
      $code_block_open=1;
      label = 31; break;
    case 19: 
      $code_block_open=1;
      label = 31; break;
    case 20: 
      $code_block_open=1;
      label = 31; break;
    case 21: 
      $code_block_open=1;
      label = 31; break;
    case 22: 
      $code_block_open=1;
      label = 31; break;
    case 23: 
      $code_block_open=0;
      label = 31; break;
    case 24: 
      label = 31; break;
    case 25: 
      label = 31; break;
    case 26: 
      label = 31; break;
    case 27: 
      label = 31; break;
    case 28: 
      label = 31; break;
    case 29: 
      label = 31; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $78=$code_block_open;
      $1=$78;
      label = 32; break;
    case 32: 
      var $80=$1;
      return $80;
    default: assert(0, "bad label: " + label);
  }
}
function _check_and_print_result($mrb, $result, $code_block_open, $print_level) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  var tempParam = $result; $result = STACKTOP;STACKTOP = (STACKTOP + 12)|0;assert((STACKTOP|0) < (STACK_MAX|0));HEAP32[(($result)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($result)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($result)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5=__stackBase__;
      $2=$mrb;
      $3=$code_block_open;
      $4=$print_level;
      var $6=$3;
      var $7=(($6)|(0))!=0;
      if ($7) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=2;
      label = 9; break;
    case 3: 
      var $10=$2;
      var $11=(($10+16)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0))!=0;
      if ($13) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $15=$4;
      var $16=(($15)|(0)) > 0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=$2;
      var $19=$2;
      var $20=(($19+16)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$21;
      _mrb_obj_value1936($5, $22);
      _mrb_p($18, $5);
      var $23=$2;
      var $24=(($23+16)|0);
      HEAP32[(($24)>>2)]=0;
      $1=1;
      label = 9; break;
    case 6: 
      var $26=$4;
      var $27=(($26)|(0)) > 1;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $29=$2;
      _mrb_p($29, $result);
      label = 8; break;
    case 8: 
      $1=0;
      label = 9; break;
    case 9: 
      var $32=$1;
      STACKTOP = __stackBase__;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_webruby_multiline_parse_gem_init($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=_mrbc_context_new($2);
  HEAP32[((59052)>>2)]=$3;
  var $4=HEAP32[((59052)>>2)];
  var $5=$4;
  var $6=(($5+24)|0);
  var $7=HEAP8[($6)];
  var $8=$7 & -2;
  var $9=$8 | 1;
  HEAP8[($6)]=$9;
  return;
}
function _mrb_webruby_multiline_parse_gem_final($mrb) {
  var label = 0;
  var $1;
  $1=$mrb;
  var $2=$1;
  var $3=HEAP32[((59052)>>2)];
  _mrbc_context_free($2, $3);
  return;
}
function _mrb_obj_value1936($agg_result, $p) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $v=__stackBase__;
      var $b;
      $1=$p;
      var $2=$1;
      var $3=$2;
      $b=$3;
      label = 2; break;
    case 2: 
      var $5=$b;
      var $6=$5;
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & 255;
      var $9=(($v+8)|0);
      HEAP32[(($9)>>2)]=$8;
      var $10=$1;
      var $11=(($v)|0);
      var $12=$11;
      HEAP32[(($12)>>2)]=$10;
      label = 3; break;
    case 3: 
      var $14=$agg_result;
      var $15=$v;
      assert(12 % 1 === 0);HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($14)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _GENERATED_TMP_mrb_mruby_symbol_ext_gem_init($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ai;
      var $2=__stackBase__;
      var $3=(__stackBase__)+(12);
      $1=$mrb;
      var $4=$1;
      var $5=_mrb_gc_arena_save($4);
      $ai=$5;
      var $6=$1;
      _mrb_mruby_symbol_ext_gem_init($6);
      var $7=$1;
      _mrb_load_irep($2, $7, ((80704)|0));
      var $8=$1;
      var $9=(($8+16)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|(0))!=0;
      if ($11) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $13=$1;
      _mrb_print_backtrace($13);
      var $14=$1;
      var $15=$1;
      var $16=(($15+16)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=$17;
      _mrb_obj_value1912($3, $18);
      _mrb_p($14, $3);
      _exit(1);
      throw "Reached an unreachable!";
    case 3: 
      var $20=$1;
      var $21=$ai;
      _mrb_gc_arena_restore($20, $21);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_init_genrand($t, $s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      $1=$t;
      $2=$s;
      var $3=$2;
      var $4=$1;
      var $5=(($4)|0);
      var $6=(($5)|0);
      HEAP32[(($6)>>2)]=$3;
      var $7=$1;
      var $8=(($7+2496)|0);
      HEAP32[(($8)>>2)]=1;
      label = 2; break;
    case 2: 
      var $10=$1;
      var $11=(($10+2496)|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|(0)) < 624;
      if ($13) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $15=$1;
      var $16=(($15+2496)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=((($17)-(1))|0);
      var $19=$1;
      var $20=(($19)|0);
      var $21=(($20+($18<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$1;
      var $24=(($23+2496)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=((($25)-(1))|0);
      var $27=$1;
      var $28=(($27)|0);
      var $29=(($28+($26<<2))|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 >>> 30;
      var $32=$22 ^ $31;
      var $33=Math.imul($32,1812433253);
      var $34=$1;
      var $35=(($34+2496)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($33)+($36))|0);
      var $38=$1;
      var $39=(($38+2496)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=$1;
      var $42=(($41)|0);
      var $43=(($42+($40<<2))|0);
      HEAP32[(($43)>>2)]=$37;
      var $44=$1;
      var $45=(($44+2496)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$1;
      var $48=(($47)|0);
      var $49=(($48+($46<<2))|0);
      var $50=HEAP32[(($49)>>2)];
      HEAP32[(($49)>>2)]=$50;
      label = 4; break;
    case 4: 
      var $52=$1;
      var $53=(($52+2496)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=((($54)+(1))|0);
      HEAP32[(($53)>>2)]=$55;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _init_genrand($s) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      $1=$s;
      var $2=$1;
      HEAP32[((((60092)|0))>>2)]=$2;
      HEAP32[((60080)>>2)]=1;
      label = 2; break;
    case 2: 
      var $4=HEAP32[((60080)>>2)];
      var $5=(($4)|(0)) < 624;
      if ($5) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $7=HEAP32[((60080)>>2)];
      var $8=((($7)-(1))|0);
      var $9=((60092+($8<<2))|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=HEAP32[((60080)>>2)];
      var $12=((($11)-(1))|0);
      var $13=((60092+($12<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 >>> 30;
      var $16=$10 ^ $15;
      var $17=Math.imul($16,1812433253);
      var $18=HEAP32[((60080)>>2)];
      var $19=((($17)+($18))|0);
      var $20=HEAP32[((60080)>>2)];
      var $21=((60092+($20<<2))|0);
      HEAP32[(($21)>>2)]=$19;
      var $22=HEAP32[((60080)>>2)];
      var $23=((60092+($22<<2))|0);
      var $24=HEAP32[(($23)>>2)];
      HEAP32[(($23)>>2)]=$24;
      label = 4; break;
    case 4: 
      var $26=HEAP32[((60080)>>2)];
      var $27=((($26)+(1))|0);
      HEAP32[((60080)>>2)]=$27;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_print_backtrace($mrb) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(!(STACKTOP&3)); assert((STACKTOP|0) < (STACK_MAX|0));
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $ci;
      var $ciidx;
      var $filename;
      var $method;
      var $sep;
      var $i;
      var $line;
      var $2=__stackBase__;
      var $irep;
      var $pc;
      var $3=(__stackBase__)+(12);
      var $cn;
      $1=$mrb;
      var $4=_printf(((108884)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $5=$1;
      var $6=$1;
      var $7=(($6+16)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$1;
      var $10=_mrb_intern1948($9, ((112600)|0));
      _mrb_obj_iv_get($2, $5, $8, $10);
      var $11=(($2)|0);
      var $12=$11;
      var $13=HEAP32[(($12)>>2)];
      $ciidx=$13;
      var $14=$ciidx;
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17+24)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=(($22+20)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$19;
      var $26=$24;
      var $27=((($25)-($26))|0);
      var $28=((((($27)|(0)))/(44))&-1);
      var $29=(($14)|(0)) >= (($28)|(0));
      if ($29) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $ciidx=10;
      label = 3; break;
    case 3: 
      var $32=$ciidx;
      $i=$32;
      label = 4; break;
    case 4: 
      var $34=$i;
      var $35=(($34)|(0)) >= 0;
      if ($35) { label = 5; break; } else { label = 31; break; }
    case 5: 
      var $37=$i;
      var $38=$1;
      var $39=(($38+8)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40+20)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42+((($37)*(44))&-1))|0);
      $ci=$43;
      $filename=((107708)|0);
      $line=-1;
      var $44=$ci;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46;
      var $48=HEAP32[(($47)>>2)];
      var $49=$48 >>> 11;
      var $50=$49 & 2097151;
      var $51=$50 & 128;
      var $52=(($51)|(0))!=0;
      if ($52) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 30; break;
    case 7: 
      var $55=$ci;
      var $56=(($55+4)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=(($57+12)|0);
      var $59=$58;
      var $60=HEAP32[(($59)>>2)];
      $irep=$60;
      var $61=$irep;
      var $62=(($61+24)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|(0))!=0;
      if ($64) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $66=$irep;
      var $67=(($66+24)|0);
      var $68=HEAP32[(($67)>>2)];
      $filename=$68;
      label = 9; break;
    case 9: 
      var $70=$irep;
      var $71=(($70+28)|0);
      var $72=HEAP32[(($71)>>2)];
      var $73=(($72)|(0))!=0;
      if ($73) { label = 10; break; } else { label = 17; break; }
    case 10: 
      var $75=$i;
      var $76=((($75)+(1))|0);
      var $77=$ciidx;
      var $78=(($76)|(0)) <= (($77)|(0));
      if ($78) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $80=$i;
      var $81=((($80)+(1))|0);
      var $82=$1;
      var $83=(($82+8)|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=(($84+20)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=(($86+((($81)*(44))&-1))|0);
      var $88=(($87+20)|0);
      var $89=HEAP32[(($88)>>2)];
      $pc=$89;
      label = 13; break;
    case 12: 
      var $91=$1;
      var $92=$1;
      var $93=(($92+16)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$1;
      var $96=_mrb_intern1948($95, ((104104)|0));
      _mrb_obj_iv_get($3, $91, $94, $96);
      var $97=(($3)|0);
      var $98=$97;
      var $99=HEAP32[(($98)>>2)];
      var $100=$99;
      $pc=$100;
      label = 13; break;
    case 13: 
      var $102=$irep;
      var $103=(($102+12)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$pc;
      var $106=(($104)>>>(0)) <= (($105)>>>(0));
      if ($106) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $108=$pc;
      var $109=$irep;
      var $110=(($109+12)|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=$irep;
      var $113=(($112+32)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($111+($114<<2))|0);
      var $116=(($108)>>>(0)) < (($115)>>>(0));
      if ($116) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $118=$pc;
      var $119=$irep;
      var $120=(($119+12)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=$118;
      var $123=$121;
      var $124=((($122)-($123))|0);
      var $125=((((($124)|(0)))/(4))&-1);
      var $126=((($125)-(1))|0);
      var $127=$irep;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($129+($126<<1))|0);
      var $131=HEAP16[(($130)>>1)];
      var $132=(($131)&(65535));
      $line=$132;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $136=$line;
      var $137=(($136)|(0))==-1;
      if ($137) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 30; break;
    case 20: 
      var $140=$ci;
      var $141=(($140+28)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=$ci;
      var $144=(($143+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145+16)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=(($142)|(0))==(($147)|(0));
      if ($148) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $sep=((101384)|0);
      label = 23; break;
    case 22: 
      $sep=((98732)|0);
      label = 23; break;
    case 23: 
      var $152=$1;
      var $153=$ci;
      var $154=(($153)|0);
      var $155=HEAP16[(($154)>>1)];
      var $156=_mrb_sym2name($152, $155);
      $method=$156;
      var $157=$method;
      var $158=(($157)|(0))!=0;
      if ($158) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $160=$1;
      var $161=$ci;
      var $162=(($161+4)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=(($163+16)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=_mrb_class_name($160, $165);
      $cn=$166;
      var $167=$cn;
      var $168=(($167)|(0))!=0;
      if ($168) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $170=$i;
      var $171=$filename;
      var $172=$line;
      var $173=$cn;
      var $174=$sep;
      var $175=$method;
      var $176=_printf(((96748)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 24)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$170,HEAP32[(((tempInt)+(4))>>2)]=$171,HEAP32[(((tempInt)+(8))>>2)]=$172,HEAP32[(((tempInt)+(12))>>2)]=$173,HEAP32[(((tempInt)+(16))>>2)]=$174,HEAP32[(((tempInt)+(20))>>2)]=$175,tempInt));
      label = 27; break;
    case 26: 
      var $178=$i;
      var $179=$filename;
      var $180=$line;
      var $181=$method;
      var $182=_printf(((95516)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 16)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$178,HEAP32[(((tempInt)+(4))>>2)]=$179,HEAP32[(((tempInt)+(8))>>2)]=$180,HEAP32[(((tempInt)+(12))>>2)]=$181,tempInt));
      label = 27; break;
    case 27: 
      label = 29; break;
    case 28: 
      var $185=$i;
      var $186=$filename;
      var $187=$line;
      var $188=_printf(((94580)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 12)|0,assert((STACKTOP|0) < (STACK_MAX|0)),HEAP32[((tempInt)>>2)]=$185,HEAP32[(((tempInt)+(4))>>2)]=$186,HEAP32[(((tempInt)+(8))>>2)]=$187,tempInt));
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $191=$i;
      var $192=((($191)-(1))|0);
      $i=$192;
      label = 4; break;
    case 31: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_intern1948($mrb, $cstr) {
  var label = 0;
  var $1;
  var $2;
  $1=$mrb;
  $2=$cstr;
  var $3=$1;
  var $4=$2;
  var $5=_mrb_intern_cstr($3, $4);
  return $5;
}
function _mrb_random_genrand_int32($t) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $y;
      var $kk;
      $1=$t;
      var $2=$1;
      var $3=(($2+2496)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|(0)) >= 624;
      if ($5) { label = 2; break; } else { label = 13; break; }
    case 2: 
      var $7=$1;
      var $8=(($7+2496)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|(0))==625;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$1;
      _mrb_random_init_genrand($12, 5489);
      label = 4; break;
    case 4: 
      $kk=0;
      label = 5; break;
    case 5: 
      var $15=$kk;
      var $16=(($15)|(0)) < 227;
      if ($16) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $18=$kk;
      var $19=$1;
      var $20=(($19)|0);
      var $21=(($20+($18<<2))|0);
      var $22=HEAP32[(($21)>>2)];
      var $23=$22 & -2147483648;
      var $24=$kk;
      var $25=((($24)+(1))|0);
      var $26=$1;
      var $27=(($26)|0);
      var $28=(($27+($25<<2))|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=$29 & 2147483647;
      var $31=$23 | $30;
      $y=$31;
      var $32=$kk;
      var $33=((($32)+(397))|0);
      var $34=$1;
      var $35=(($34)|0);
      var $36=(($35+($33<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=$y;
      var $39=$38 >>> 1;
      var $40=$37 ^ $39;
      var $41=$y;
      var $42=$41 & 1;
      var $43=((77736+($42<<2))|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$40 ^ $44;
      var $46=$kk;
      var $47=$1;
      var $48=(($47)|0);
      var $49=(($48+($46<<2))|0);
      HEAP32[(($49)>>2)]=$45;
      label = 7; break;
    case 7: 
      var $51=$kk;
      var $52=((($51)+(1))|0);
      $kk=$52;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $55=$kk;
      var $56=(($55)|(0)) < 623;
      if ($56) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $58=$kk;
      var $59=$1;
      var $60=(($59)|0);
      var $61=(($60+($58<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -2147483648;
      var $64=$kk;
      var $65=((($64)+(1))|0);
      var $66=$1;
      var $67=(($66)|0);
      var $68=(($67+($65<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69 & 2147483647;
      var $71=$63 | $70;
      $y=$71;
      var $72=$kk;
      var $73=((($72)-(227))|0);
      var $74=$1;
      var $75=(($74)|0);
      var $76=(($75+($73<<2))|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$y;
      var $79=$78 >>> 1;
      var $80=$77 ^ $79;
      var $81=$y;
      var $82=$81 & 1;
      var $83=((77736+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$80 ^ $84;
      var $86=$kk;
      var $87=$1;
      var $88=(($87)|0);
      var $89=(($88+($86<<2))|0);
      HEAP32[(($89)>>2)]=$85;
      label = 11; break;
    case 11: 
      var $91=$kk;
      var $92=((($91)+(1))|0);
      $kk=$92;
      label = 9; break;
    case 12: 
      var $94=$1;
      var $95=(($94)|0);
      var $96=(($95+2492)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 & -2147483648;
      var $99=$1;
      var $100=(($99)|0);
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$102 & 2147483647;
      var $104=$98 | $103;
      $y=$104;
      var $105=$1;
      var $106=(($105)|0);
      var $107=(($106+1584)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$y;
      var $110=$109 >>> 1;
      var $111=$108 ^ $110;
      var $112=$y;
      var $113=$112 & 1;
      var $114=((77736+($113<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$111 ^ $115;
      var $117=$1;
      var $118=(($117)|0);
      var $119=(($118+2492)|0);
      HEAP32[(($119)>>2)]=$116;
      var $120=$1;
      var $121=(($120+2496)|0);
      HEAP32[(($121)>>2)]=0;
      label = 13; break;
    case 13: 
      var $123=$1;
      var $124=(($123+2496)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=((($125)+(1))|0);
      HEAP32[(($124)>>2)]=$126;
      var $127=$1;
      var $128=(($127)|0);
      var $129=(($128+($125<<2))|0);
      var $130=HEAP32[(($129)>>2)];
      $y=$130;
      var $131=$y;
      var $132=$131 >>> 11;
      var $133=$y;
      var $134=$133 ^ $132;
      $y=$134;
      var $135=$y;
      var $136=$135 << 7;
      var $137=$136 & -1658038656;
      var $138=$y;
      var $139=$138 ^ $137;
      $y=$139;
      var $140=$y;
      var $141=$140 << 15;
      var $142=$141 & -272236544;
      var $143=$y;
      var $144=$143 ^ $142;
      $y=$144;
      var $145=$y;
      var $146=$145 >>> 18;
      var $147=$y;
      var $148=$147 ^ $146;
      $y=$148;
      var $149=$y;
      var $150=$1;
      var $151=(($150+2500)|0);
      var $152=$151;
      HEAP32[(($152)>>2)]=$149;
      var $153=$y;
      return $153;
    default: assert(0, "bad label: " + label);
  }
}
function _mrb_random_genrand_real1($t) {
  var label = 0;
  var $1;
  $1=$t;
  var $2=$1;
  var $3=_mrb_random_genrand_int32($2);
  var $4=$1;
  var $5=(($4+2500)|0);
  var $6=$5;
  var $7=HEAP32[(($6)>>2)];
  var $8=(($7)>>>(0));
  var $9=($8)*(2.3283064370807974e-10);
  var $10=$1;
  var $11=(($10+2500)|0);
  var $12=$11;
  (HEAPF64[(tempDoublePtr)>>3]=$9,HEAP32[(($12)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($12)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
  var $13=$1;
  var $14=(($13+2500)|0);
  var $15=$14;
  var $16=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($15)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($15)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
  return $16;
}
function _genrand_int32() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $y;
      var $kk;
      var $1=HEAP32[((60080)>>2)];
      var $2=(($1)|(0)) >= 624;
      if ($2) { label = 2; break; } else { label = 13; break; }
    case 2: 
      var $4=HEAP32[((60080)>>2)];
      var $5=(($4)|(0))==625;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      _init_genrand(5489);
      label = 4; break;
    case 4: 
      $kk=0;
      label = 5; break;
    case 5: 
      var $9=$kk;
      var $10=(($9)|(0)) < 227;
      if ($10) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $12=$kk;
      var $13=((60092+($12<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & -2147483648;
      var $16=$kk;
      var $17=((($16)+(1))|0);
      var $18=((60092+($17<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$19 & 2147483647;
      var $21=$15 | $20;
      $y=$21;
      var $22=$kk;
      var $23=((($22)+(397))|0);
      var $24=((60092+($23<<2))|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$y;
      var $27=$26 >>> 1;
      var $28=$25 ^ $27;
      var $29=$y;
      var $30=$29 & 1;
      var $31=((80696+($30<<2))|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$28 ^ $32;
      var $34=$kk;
      var $35=((60092+($34<<2))|0);
      HEAP32[(($35)>>2)]=$33;
      label = 7; break;
    case 7: 
      var $37=$kk;
      var $38=((($37)+(1))|0);
      $kk=$38;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $41=$kk;
      var $42=(($41)|(0)) < 623;
      if ($42) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $44=$kk;
      var $45=((60092+($44<<2))|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & -2147483648;
      var $48=$kk;
      var $49=((($48)+(1))|0);
      var $50=((60092+($49<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51 & 2147483647;
      var $53=$47 | $52;
      $y=$53;
      var $54=$kk;
      var $55=((($54)-(227))|0);
      var $56=((60092+($55<<2))|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$y;
      var $59=$58 >>> 1;
      var $60=$57 ^ $59;
      var $61=$y;
      var $62=$61 & 1;
      var $63=((80696+($62<<2))|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$60 ^ $64;
      var $66=$kk;
      var $67=((60092+($66<<2))|0);
      HEAP32[(($67)>>2)]=$65;
      label = 11; break;
    case 11: 
      var $69=$kk;
      var $70=((($69)+(1))|0);
      $kk=$70;
      label = 9; break;
    case 12: 
      var $72=HEAP32[((((62584)|0))>>2)];
      var $73=$72 & -2147483648;
      var $74=HEAP32[((((60092)|0))>>2)];
      var $75=$74 & 2147483647;
      var $76=$73 | $75;
      $y=$76;
      var $77=HEAP32[((((61676)|0))>>2)];
      var $78=$y;
      var $79=$78 >>> 1;
      var $80=$77 ^ $79;
      var $81=$y;
      var $82=$81 & 1;
      var $83=((80696+($82<<2))|0);
      var $84=HEAP32[(($83)>>2)];
      var $85=$80 ^ $84;
      HEAP32[((((62584)|0))>>2)]=$85;
      HEAP32[((60080)>>2)]=0;
      label = 13; break;
    case 13: 
      var $87=HEAP32[((60080)>>2)];
      var $88=((($87)+(1))|0);
      HEAP32[((60080)>>2)]=$88;
      var $89=((60092+($87<<2))|0);
      var $90=HEAP32[(($89)>>2)];
      $y=$90;
      var $91=$y;
      var $92=$91 >>> 11;
      var $93=$y;
      var $94=$93 ^ $92;
      $y=$94;
      var $95=$y;
      var $96=$95 << 7;
      var $97=$96 & -1658038656;
      var $98=$y;
      var $99=$98 ^ $97;
      $y=$99;
      var $100=$y;
      var $101=$100 << 15;
      var $102=$101 & -272236544;
      var $103=$y;
      var $104=$103 ^ $102;
      $y=$104;
      var $105=$y;
      var $106=$105 >>> 18;
      var $107=$y;
      var $108=$107 ^ $106;
      $y=$108;
      var $109=$y;
      return $109;
    default: assert(0, "bad label: " + label);
  }
}
function _genrand_real1() {
  var label = 0;
  var $1=_genrand_int32();
  var $2=(($1)>>>(0));
  var $3=($2)*(2.3283064370807974e-10);
  return $3;
}
function _malloc($bytes) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1;
      var $3=(($2)>>>(0)) <= 244;
      if ($3) { label = 2; break; } else { label = 41; break; }
    case 2: 
      var $5=$1;
      var $6=(($5)>>>(0)) < 11;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14 = 16;label = 5; break;
    case 4: 
      var $9=$1;
      var $10=((($9)+(4))|0);
      var $11=((($10)+(7))|0);
      var $12=$11 & -8;
      var $14 = $12;label = 5; break;
    case 5: 
      var $14;
      $nb=$14;
      var $15=$nb;
      var $16=$15 >>> 3;
      $idx=$16;
      var $17=HEAP32[((((114140)|0))>>2)];
      var $18=$idx;
      var $19=$17 >>> (($18)>>>(0));
      $smallbits=$19;
      var $20=$smallbits;
      var $21=$20 & 3;
      var $22=(($21)|(0))!=0;
      if ($22) { label = 6; break; } else { label = 15; break; }
    case 6: 
      var $24=$smallbits;
      var $25=$24 ^ -1;
      var $26=$25 & 1;
      var $27=$idx;
      var $28=((($27)+($26))|0);
      $idx=$28;
      var $29=$idx;
      var $30=$29 << 1;
      var $31=((((114180)|0)+($30<<2))|0);
      var $32=$31;
      var $33=$32;
      $b=$33;
      var $34=$b;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      $p=$36;
      var $37=$p;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      $F=$39;
      var $40=$b;
      var $41=$F;
      var $42=(($40)|(0))==(($41)|(0));
      if ($42) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $44=$idx;
      var $45=1 << $44;
      var $46=$45 ^ -1;
      var $47=HEAP32[((((114140)|0))>>2)];
      var $48=$47 & $46;
      HEAP32[((((114140)|0))>>2)]=$48;
      label = 14; break;
    case 8: 
      var $50=$F;
      var $51=$50;
      var $52=HEAP32[((((114156)|0))>>2)];
      var $53=(($51)>>>(0)) >= (($52)>>>(0));
      if ($53) { label = 9; break; } else { var $61 = 0;label = 10; break; }
    case 9: 
      var $55=$F;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$p;
      var $59=(($57)|(0))==(($58)|(0));
      var $61 = $59;label = 10; break;
    case 10: 
      var $61;
      var $62=(($61)&(1));
      var $63=($62);
      var $64=(($63)|(0))!=0;
      if ($64) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $66=$b;
      var $67=$F;
      var $68=(($67+12)|0);
      HEAP32[(($68)>>2)]=$66;
      var $69=$F;
      var $70=$b;
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=$69;
      label = 13; break;
    case 12: 
      _abort();
      throw "Reached an unreachable!";
    case 13: 
      label = 14; break;
    case 14: 
      var $75=$idx;
      var $76=$75 << 3;
      var $77=$76 | 1;
      var $78=$77 | 2;
      var $79=$p;
      var $80=(($79+4)|0);
      HEAP32[(($80)>>2)]=$78;
      var $81=$p;
      var $82=$81;
      var $83=$idx;
      var $84=$83 << 3;
      var $85=(($82+$84)|0);
      var $86=$85;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 | 1;
      HEAP32[(($87)>>2)]=$89;
      var $90=$p;
      var $91=$90;
      var $92=(($91+8)|0);
      $mem=$92;
      label = 57; break;
    case 15: 
      var $94=$nb;
      var $95=HEAP32[((((114148)|0))>>2)];
      var $96=(($94)>>>(0)) > (($95)>>>(0));
      if ($96) { label = 16; break; } else { label = 39; break; }
    case 16: 
      var $98=$smallbits;
      var $99=(($98)|(0))!=0;
      if ($99) { label = 17; break; } else { label = 34; break; }
    case 17: 
      var $101=$smallbits;
      var $102=$idx;
      var $103=$101 << $102;
      var $104=$idx;
      var $105=1 << $104;
      var $106=$105 << 1;
      var $107=$idx;
      var $108=1 << $107;
      var $109=$108 << 1;
      var $110=(((-$109))|0);
      var $111=$106 | $110;
      var $112=$103 & $111;
      $leftbits=$112;
      var $113=$leftbits;
      var $114=$leftbits;
      var $115=(((-$114))|0);
      var $116=$113 & $115;
      $leastbit=$116;
      var $117=$leastbit;
      var $118=((($117)-(1))|0);
      $Y=$118;
      var $119=$Y;
      var $120=$119 >>> 12;
      var $121=$120 & 16;
      $K=$121;
      var $122=$K;
      $N=$122;
      var $123=$K;
      var $124=$Y;
      var $125=$124 >>> (($123)>>>(0));
      $Y=$125;
      var $126=$Y;
      var $127=$126 >>> 5;
      var $128=$127 & 8;
      $K=$128;
      var $129=$N;
      var $130=((($129)+($128))|0);
      $N=$130;
      var $131=$K;
      var $132=$Y;
      var $133=$132 >>> (($131)>>>(0));
      $Y=$133;
      var $134=$Y;
      var $135=$134 >>> 2;
      var $136=$135 & 4;
      $K=$136;
      var $137=$N;
      var $138=((($137)+($136))|0);
      $N=$138;
      var $139=$K;
      var $140=$Y;
      var $141=$140 >>> (($139)>>>(0));
      $Y=$141;
      var $142=$Y;
      var $143=$142 >>> 1;
      var $144=$143 & 2;
      $K=$144;
      var $145=$N;
      var $146=((($145)+($144))|0);
      $N=$146;
      var $147=$K;
      var $148=$Y;
      var $149=$148 >>> (($147)>>>(0));
      $Y=$149;
      var $150=$Y;
      var $151=$150 >>> 1;
      var $152=$151 & 1;
      $K=$152;
      var $153=$N;
      var $154=((($153)+($152))|0);
      $N=$154;
      var $155=$K;
      var $156=$Y;
      var $157=$156 >>> (($155)>>>(0));
      $Y=$157;
      var $158=$N;
      var $159=$Y;
      var $160=((($158)+($159))|0);
      $i=$160;
      var $161=$i;
      var $162=$161 << 1;
      var $163=((((114180)|0)+($162<<2))|0);
      var $164=$163;
      var $165=$164;
      $b1=$165;
      var $166=$b1;
      var $167=(($166+8)|0);
      var $168=HEAP32[(($167)>>2)];
      $p2=$168;
      var $169=$p2;
      var $170=(($169+8)|0);
      var $171=HEAP32[(($170)>>2)];
      $F3=$171;
      var $172=$b1;
      var $173=$F3;
      var $174=(($172)|(0))==(($173)|(0));
      if ($174) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $176=$i;
      var $177=1 << $176;
      var $178=$177 ^ -1;
      var $179=HEAP32[((((114140)|0))>>2)];
      var $180=$179 & $178;
      HEAP32[((((114140)|0))>>2)]=$180;
      label = 25; break;
    case 19: 
      var $182=$F3;
      var $183=$182;
      var $184=HEAP32[((((114156)|0))>>2)];
      var $185=(($183)>>>(0)) >= (($184)>>>(0));
      if ($185) { label = 20; break; } else { var $193 = 0;label = 21; break; }
    case 20: 
      var $187=$F3;
      var $188=(($187+12)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$p2;
      var $191=(($189)|(0))==(($190)|(0));
      var $193 = $191;label = 21; break;
    case 21: 
      var $193;
      var $194=(($193)&(1));
      var $195=($194);
      var $196=(($195)|(0))!=0;
      if ($196) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $198=$b1;
      var $199=$F3;
      var $200=(($199+12)|0);
      HEAP32[(($200)>>2)]=$198;
      var $201=$F3;
      var $202=$b1;
      var $203=(($202+8)|0);
      HEAP32[(($203)>>2)]=$201;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!";
    case 24: 
      label = 25; break;
    case 25: 
      var $207=$i;
      var $208=$207 << 3;
      var $209=$nb;
      var $210=((($208)-($209))|0);
      $rsize=$210;
      var $211=$nb;
      var $212=$211 | 1;
      var $213=$212 | 2;
      var $214=$p2;
      var $215=(($214+4)|0);
      HEAP32[(($215)>>2)]=$213;
      var $216=$p2;
      var $217=$216;
      var $218=$nb;
      var $219=(($217+$218)|0);
      var $220=$219;
      $r=$220;
      var $221=$rsize;
      var $222=$221 | 1;
      var $223=$r;
      var $224=(($223+4)|0);
      HEAP32[(($224)>>2)]=$222;
      var $225=$rsize;
      var $226=$r;
      var $227=$226;
      var $228=$rsize;
      var $229=(($227+$228)|0);
      var $230=$229;
      var $231=(($230)|0);
      HEAP32[(($231)>>2)]=$225;
      var $232=HEAP32[((((114148)|0))>>2)];
      $DVS=$232;
      var $233=$DVS;
      var $234=(($233)|(0))!=0;
      if ($234) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $236=HEAP32[((((114160)|0))>>2)];
      $DV=$236;
      var $237=$DVS;
      var $238=$237 >>> 3;
      $I=$238;
      var $239=$I;
      var $240=$239 << 1;
      var $241=((((114180)|0)+($240<<2))|0);
      var $242=$241;
      var $243=$242;
      $B=$243;
      var $244=$B;
      $F4=$244;
      var $245=HEAP32[((((114140)|0))>>2)];
      var $246=$I;
      var $247=1 << $246;
      var $248=$245 & $247;
      var $249=(($248)|(0))!=0;
      if ($249) { label = 28; break; } else { label = 27; break; }
    case 27: 
      var $251=$I;
      var $252=1 << $251;
      var $253=HEAP32[((((114140)|0))>>2)];
      var $254=$253 | $252;
      HEAP32[((((114140)|0))>>2)]=$254;
      label = 32; break;
    case 28: 
      var $256=$B;
      var $257=(($256+8)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$258;
      var $260=HEAP32[((((114156)|0))>>2)];
      var $261=(($259)>>>(0)) >= (($260)>>>(0));
      var $262=(($261)&(1));
      var $263=($262);
      var $264=(($263)|(0))!=0;
      if ($264) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $266=$B;
      var $267=(($266+8)|0);
      var $268=HEAP32[(($267)>>2)];
      $F4=$268;
      label = 31; break;
    case 30: 
      _abort();
      throw "Reached an unreachable!";
    case 31: 
      label = 32; break;
    case 32: 
      var $272=$DV;
      var $273=$B;
      var $274=(($273+8)|0);
      HEAP32[(($274)>>2)]=$272;
      var $275=$DV;
      var $276=$F4;
      var $277=(($276+12)|0);
      HEAP32[(($277)>>2)]=$275;
      var $278=$F4;
      var $279=$DV;
      var $280=(($279+8)|0);
      HEAP32[(($280)>>2)]=$278;
      var $281=$B;
      var $282=$DV;
      var $283=(($282+12)|0);
      HEAP32[(($283)>>2)]=$281;
      label = 33; break;
    case 33: 
      var $285=$rsize;
      HEAP32[((((114148)|0))>>2)]=$285;
      var $286=$r;
      HEAP32[((((114160)|0))>>2)]=$286;
      var $287=$p2;
      var $288=$287;
      var $289=(($288+8)|0);
      $mem=$289;
      label = 57; break;
    case 34: 
      var $291=HEAP32[((((114144)|0))>>2)];
      var $292=(($291)|(0))!=0;
      if ($292) { label = 35; break; } else { label = 37; break; }
    case 35: 
      var $294=$nb;
      var $295=_tmalloc_small(114140, $294);
      $mem=$295;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 57; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 48; break;
    case 41: 
      var $303=$1;
      var $304=(($303)>>>(0)) >= 4294967232;
      if ($304) { label = 42; break; } else { label = 43; break; }
    case 42: 
      $nb=-1;
      label = 47; break;
    case 43: 
      var $307=$1;
      var $308=((($307)+(4))|0);
      var $309=((($308)+(7))|0);
      var $310=$309 & -8;
      $nb=$310;
      var $311=HEAP32[((((114144)|0))>>2)];
      var $312=(($311)|(0))!=0;
      if ($312) { label = 44; break; } else { label = 46; break; }
    case 44: 
      var $314=$nb;
      var $315=_tmalloc_large(114140, $314);
      $mem=$315;
      var $316=(($315)|(0))!=0;
      if ($316) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 57; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $321=$nb;
      var $322=HEAP32[((((114148)|0))>>2)];
      var $323=(($321)>>>(0)) <= (($322)>>>(0));
      if ($323) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $325=HEAP32[((((114148)|0))>>2)];
      var $326=$nb;
      var $327=((($325)-($326))|0);
      $rsize5=$327;
      var $328=HEAP32[((((114160)|0))>>2)];
      $p6=$328;
      var $329=$rsize5;
      var $330=(($329)>>>(0)) >= 16;
      if ($330) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $332=$p6;
      var $333=$332;
      var $334=$nb;
      var $335=(($333+$334)|0);
      var $336=$335;
      HEAP32[((((114160)|0))>>2)]=$336;
      $r7=$336;
      var $337=$rsize5;
      HEAP32[((((114148)|0))>>2)]=$337;
      var $338=$rsize5;
      var $339=$338 | 1;
      var $340=$r7;
      var $341=(($340+4)|0);
      HEAP32[(($341)>>2)]=$339;
      var $342=$rsize5;
      var $343=$r7;
      var $344=$343;
      var $345=$rsize5;
      var $346=(($344+$345)|0);
      var $347=$346;
      var $348=(($347)|0);
      HEAP32[(($348)>>2)]=$342;
      var $349=$nb;
      var $350=$349 | 1;
      var $351=$350 | 2;
      var $352=$p6;
      var $353=(($352+4)|0);
      HEAP32[(($353)>>2)]=$351;
      label = 52; break;
    case 51: 
      var $355=HEAP32[((((114148)|0))>>2)];
      $dvs=$355;
      HEAP32[((((114148)|0))>>2)]=0;
      HEAP32[((((114160)|0))>>2)]=0;
      var $356=$dvs;
      var $357=$356 | 1;
      var $358=$357 | 2;
      var $359=$p6;
      var $360=(($359+4)|0);
      HEAP32[(($360)>>2)]=$358;
      var $361=$p6;
      var $362=$361;
      var $363=$dvs;
      var $364=(($362+$363)|0);
      var $365=$364;
      var $366=(($365+4)|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=$367 | 1;
      HEAP32[(($366)>>2)]=$368;
      label = 52; break;
    case 52: 
      var $370=$p6;
      var $371=$370;
      var $372=(($371+8)|0);
      $mem=$372;
      label = 57; break;
    case 53: 
      var $374=$nb;
      var $375=HEAP32[((((114152)|0))>>2)];
      var $376=(($374)>>>(0)) < (($375)>>>(0));
      if ($376) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $378=$nb;
      var $379=HEAP32[((((114152)|0))>>2)];
      var $380=((($379)-($378))|0);
      HEAP32[((((114152)|0))>>2)]=$380;
      $rsize8=$380;
      var $381=HEAP32[((((114164)|0))>>2)];
      $p9=$381;
      var $382=$p9;
      var $383=$382;
      var $384=$nb;
      var $385=(($383+$384)|0);
      var $386=$385;
      HEAP32[((((114164)|0))>>2)]=$386;
      $r10=$386;
      var $387=$rsize8;
      var $388=$387 | 1;
      var $389=$r10;
      var $390=(($389+4)|0);
      HEAP32[(($390)>>2)]=$388;
      var $391=$nb;
      var $392=$391 | 1;
      var $393=$392 | 2;
      var $394=$p9;
      var $395=(($394+4)|0);
      HEAP32[(($395)>>2)]=$393;
      var $396=$p9;
      var $397=$396;
      var $398=(($397+8)|0);
      $mem=$398;
      label = 57; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $401=$nb;
      var $402=_sys_alloc(114140, $401);
      $mem=$402;
      label = 57; break;
    case 57: 
      var $404=$mem;
      return $404;
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_small($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(((-$8))|0);
      var $10=$5 & $9;
      $leastbit=$10;
      var $11=$leastbit;
      var $12=((($11)-(1))|0);
      $Y=$12;
      var $13=$Y;
      var $14=$13 >>> 12;
      var $15=$14 & 16;
      $K=$15;
      var $16=$K;
      $N=$16;
      var $17=$K;
      var $18=$Y;
      var $19=$18 >>> (($17)>>>(0));
      $Y=$19;
      var $20=$Y;
      var $21=$20 >>> 5;
      var $22=$21 & 8;
      $K=$22;
      var $23=$N;
      var $24=((($23)+($22))|0);
      $N=$24;
      var $25=$K;
      var $26=$Y;
      var $27=$26 >>> (($25)>>>(0));
      $Y=$27;
      var $28=$Y;
      var $29=$28 >>> 2;
      var $30=$29 & 4;
      $K=$30;
      var $31=$N;
      var $32=((($31)+($30))|0);
      $N=$32;
      var $33=$K;
      var $34=$Y;
      var $35=$34 >>> (($33)>>>(0));
      $Y=$35;
      var $36=$Y;
      var $37=$36 >>> 1;
      var $38=$37 & 2;
      $K=$38;
      var $39=$N;
      var $40=((($39)+($38))|0);
      $N=$40;
      var $41=$K;
      var $42=$Y;
      var $43=$42 >>> (($41)>>>(0));
      $Y=$43;
      var $44=$Y;
      var $45=$44 >>> 1;
      var $46=$45 & 1;
      $K=$46;
      var $47=$N;
      var $48=((($47)+($46))|0);
      $N=$48;
      var $49=$K;
      var $50=$Y;
      var $51=$50 >>> (($49)>>>(0));
      $Y=$51;
      var $52=$N;
      var $53=$Y;
      var $54=((($52)+($53))|0);
      $i=$54;
      var $55=$i;
      var $56=$1;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      $v=$59;
      var $60=$t;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -8;
      var $64=$2;
      var $65=((($63)-($64))|0);
      $rsize=$65;
      label = 2; break;
    case 2: 
      var $67=$t;
      var $68=(($67+16)|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|(0))!=0;
      if ($71) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $73=$t;
      var $74=(($73+16)|0);
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $83 = $76;label = 5; break;
    case 4: 
      var $78=$t;
      var $79=(($78+16)|0);
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $83 = $81;label = 5; break;
    case 5: 
      var $83;
      $t=$83;
      var $84=(($83)|(0))!=0;
      if ($84) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $86=$t;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -8;
      var $90=$2;
      var $91=((($89)-($90))|0);
      $trem=$91;
      var $92=$trem;
      var $93=$rsize;
      var $94=(($92)>>>(0)) < (($93)>>>(0));
      if ($94) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $96=$trem;
      $rsize=$96;
      var $97=$t;
      $v=$97;
      label = 8; break;
    case 8: 
      label = 2; break;
    case 9: 
      var $100=$v;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>(0)) >= (($104)>>>(0));
      var $106=(($105)&(1));
      var $107=($106);
      var $108=(($107)|(0))!=0;
      if ($108) { label = 10; break; } else { label = 72; break; }
    case 10: 
      var $110=$v;
      var $111=$110;
      var $112=$2;
      var $113=(($111+$112)|0);
      var $114=$113;
      $r=$114;
      var $115=$v;
      var $116=$115;
      var $117=$r;
      var $118=$117;
      var $119=(($116)>>>(0)) < (($118)>>>(0));
      var $120=(($119)&(1));
      var $121=($120);
      var $122=(($121)|(0))!=0;
      if ($122) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $124=$v;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      $XP=$126;
      var $127=$v;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$v;
      var $131=(($129)|(0))!=(($130)|(0));
      if ($131) { label = 12; break; } else { label = 19; break; }
    case 12: 
      var $133=$v;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      $F=$135;
      var $136=$v;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      $R=$138;
      var $139=$F;
      var $140=$139;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)>>>(0)) >= (($143)>>>(0));
      if ($144) { label = 13; break; } else { var $158 = 0;label = 15; break; }
    case 13: 
      var $146=$F;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$v;
      var $150=(($148)|(0))==(($149)|(0));
      if ($150) { label = 14; break; } else { var $158 = 0;label = 15; break; }
    case 14: 
      var $152=$R;
      var $153=(($152+8)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=$v;
      var $156=(($154)|(0))==(($155)|(0));
      var $158 = $156;label = 15; break;
    case 15: 
      var $158;
      var $159=(($158)&(1));
      var $160=($159);
      var $161=(($160)|(0))!=0;
      if ($161) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $163=$R;
      var $164=$F;
      var $165=(($164+12)|0);
      HEAP32[(($165)>>2)]=$163;
      var $166=$F;
      var $167=$R;
      var $168=(($167+8)|0);
      HEAP32[(($168)>>2)]=$166;
      label = 18; break;
    case 17: 
      _abort();
      throw "Reached an unreachable!";
    case 18: 
      label = 31; break;
    case 19: 
      var $172=$v;
      var $173=(($172+16)|0);
      var $174=(($173+4)|0);
      $RP=$174;
      var $175=HEAP32[(($174)>>2)];
      $R=$175;
      var $176=(($175)|(0))!=0;
      if ($176) { label = 21; break; } else { label = 20; break; }
    case 20: 
      var $178=$v;
      var $179=(($178+16)|0);
      var $180=(($179)|0);
      $RP=$180;
      var $181=HEAP32[(($180)>>2)];
      $R=$181;
      var $182=(($181)|(0))!=0;
      if ($182) { label = 21; break; } else { label = 30; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $185=$R;
      var $186=(($185+16)|0);
      var $187=(($186+4)|0);
      $CP=$187;
      var $188=HEAP32[(($187)>>2)];
      var $189=(($188)|(0))!=0;
      if ($189) { var $197 = 1;label = 24; break; } else { label = 23; break; }
    case 23: 
      var $191=$R;
      var $192=(($191+16)|0);
      var $193=(($192)|0);
      $CP=$193;
      var $194=HEAP32[(($193)>>2)];
      var $195=(($194)|(0))!=0;
      var $197 = $195;label = 24; break;
    case 24: 
      var $197;
      if ($197) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $199=$CP;
      $RP=$199;
      var $200=HEAP32[(($199)>>2)];
      $R=$200;
      label = 22; break;
    case 26: 
      var $202=$RP;
      var $203=$202;
      var $204=$1;
      var $205=(($204+16)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=(($203)>>>(0)) >= (($206)>>>(0));
      var $208=(($207)&(1));
      var $209=($208);
      var $210=(($209)|(0))!=0;
      if ($210) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $212=$RP;
      HEAP32[(($212)>>2)]=0;
      label = 29; break;
    case 28: 
      _abort();
      throw "Reached an unreachable!";
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $217=$XP;
      var $218=(($217)|(0))!=0;
      if ($218) { label = 32; break; } else { label = 59; break; }
    case 32: 
      var $220=$v;
      var $221=(($220+28)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=$1;
      var $224=(($223+304)|0);
      var $225=(($224+($222<<2))|0);
      $H=$225;
      var $226=$v;
      var $227=$H;
      var $228=HEAP32[(($227)>>2)];
      var $229=(($226)|(0))==(($228)|(0));
      if ($229) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $231=$R;
      var $232=$H;
      HEAP32[(($232)>>2)]=$231;
      var $233=(($231)|(0))==0;
      if ($233) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $235=$v;
      var $236=(($235+28)|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=1 << $237;
      var $239=$238 ^ -1;
      var $240=$1;
      var $241=(($240+4)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242 & $239;
      HEAP32[(($241)>>2)]=$243;
      label = 35; break;
    case 35: 
      label = 43; break;
    case 36: 
      var $246=$XP;
      var $247=$246;
      var $248=$1;
      var $249=(($248+16)|0);
      var $250=HEAP32[(($249)>>2)];
      var $251=(($247)>>>(0)) >= (($250)>>>(0));
      var $252=(($251)&(1));
      var $253=($252);
      var $254=(($253)|(0))!=0;
      if ($254) { label = 37; break; } else { label = 41; break; }
    case 37: 
      var $256=$XP;
      var $257=(($256+16)|0);
      var $258=(($257)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$v;
      var $261=(($259)|(0))==(($260)|(0));
      if ($261) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $263=$R;
      var $264=$XP;
      var $265=(($264+16)|0);
      var $266=(($265)|0);
      HEAP32[(($266)>>2)]=$263;
      label = 40; break;
    case 39: 
      var $268=$R;
      var $269=$XP;
      var $270=(($269+16)|0);
      var $271=(($270+4)|0);
      HEAP32[(($271)>>2)]=$268;
      label = 40; break;
    case 40: 
      label = 42; break;
    case 41: 
      _abort();
      throw "Reached an unreachable!";
    case 42: 
      label = 43; break;
    case 43: 
      var $276=$R;
      var $277=(($276)|(0))!=0;
      if ($277) { label = 44; break; } else { label = 58; break; }
    case 44: 
      var $279=$R;
      var $280=$279;
      var $281=$1;
      var $282=(($281+16)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=(($280)>>>(0)) >= (($283)>>>(0));
      var $285=(($284)&(1));
      var $286=($285);
      var $287=(($286)|(0))!=0;
      if ($287) { label = 45; break; } else { label = 56; break; }
    case 45: 
      var $289=$XP;
      var $290=$R;
      var $291=(($290+24)|0);
      HEAP32[(($291)>>2)]=$289;
      var $292=$v;
      var $293=(($292+16)|0);
      var $294=(($293)|0);
      var $295=HEAP32[(($294)>>2)];
      $C0=$295;
      var $296=(($295)|(0))!=0;
      if ($296) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $298=$C0;
      var $299=$298;
      var $300=$1;
      var $301=(($300+16)|0);
      var $302=HEAP32[(($301)>>2)];
      var $303=(($299)>>>(0)) >= (($302)>>>(0));
      var $304=(($303)&(1));
      var $305=($304);
      var $306=(($305)|(0))!=0;
      if ($306) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $308=$C0;
      var $309=$R;
      var $310=(($309+16)|0);
      var $311=(($310)|0);
      HEAP32[(($311)>>2)]=$308;
      var $312=$R;
      var $313=$C0;
      var $314=(($313+24)|0);
      HEAP32[(($314)>>2)]=$312;
      label = 49; break;
    case 48: 
      _abort();
      throw "Reached an unreachable!";
    case 49: 
      label = 50; break;
    case 50: 
      var $318=$v;
      var $319=(($318+16)|0);
      var $320=(($319+4)|0);
      var $321=HEAP32[(($320)>>2)];
      $C1=$321;
      var $322=(($321)|(0))!=0;
      if ($322) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $324=$C1;
      var $325=$324;
      var $326=$1;
      var $327=(($326+16)|0);
      var $328=HEAP32[(($327)>>2)];
      var $329=(($325)>>>(0)) >= (($328)>>>(0));
      var $330=(($329)&(1));
      var $331=($330);
      var $332=(($331)|(0))!=0;
      if ($332) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $334=$C1;
      var $335=$R;
      var $336=(($335+16)|0);
      var $337=(($336+4)|0);
      HEAP32[(($337)>>2)]=$334;
      var $338=$R;
      var $339=$C1;
      var $340=(($339+24)|0);
      HEAP32[(($340)>>2)]=$338;
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!";
    case 54: 
      label = 55; break;
    case 55: 
      label = 57; break;
    case 56: 
      _abort();
      throw "Reached an unreachable!";
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $348=$rsize;
      var $349=(($348)>>>(0)) < 16;
      if ($349) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $351=$rsize;
      var $352=$2;
      var $353=((($351)+($352))|0);
      var $354=$353 | 1;
      var $355=$354 | 2;
      var $356=$v;
      var $357=(($356+4)|0);
      HEAP32[(($357)>>2)]=$355;
      var $358=$v;
      var $359=$358;
      var $360=$rsize;
      var $361=$2;
      var $362=((($360)+($361))|0);
      var $363=(($359+$362)|0);
      var $364=$363;
      var $365=(($364+4)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=$366 | 1;
      HEAP32[(($365)>>2)]=$367;
      label = 70; break;
    case 61: 
      var $369=$2;
      var $370=$369 | 1;
      var $371=$370 | 2;
      var $372=$v;
      var $373=(($372+4)|0);
      HEAP32[(($373)>>2)]=$371;
      var $374=$rsize;
      var $375=$374 | 1;
      var $376=$r;
      var $377=(($376+4)|0);
      HEAP32[(($377)>>2)]=$375;
      var $378=$rsize;
      var $379=$r;
      var $380=$379;
      var $381=$rsize;
      var $382=(($380+$381)|0);
      var $383=$382;
      var $384=(($383)|0);
      HEAP32[(($384)>>2)]=$378;
      var $385=$1;
      var $386=(($385+8)|0);
      var $387=HEAP32[(($386)>>2)];
      $DVS=$387;
      var $388=$DVS;
      var $389=(($388)|(0))!=0;
      if ($389) { label = 62; break; } else { label = 69; break; }
    case 62: 
      var $391=$1;
      var $392=(($391+20)|0);
      var $393=HEAP32[(($392)>>2)];
      $DV=$393;
      var $394=$DVS;
      var $395=$394 >>> 3;
      $I=$395;
      var $396=$I;
      var $397=$396 << 1;
      var $398=$1;
      var $399=(($398+40)|0);
      var $400=(($399+($397<<2))|0);
      var $401=$400;
      var $402=$401;
      $B=$402;
      var $403=$B;
      $F1=$403;
      var $404=$1;
      var $405=(($404)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=$I;
      var $408=1 << $407;
      var $409=$406 & $408;
      var $410=(($409)|(0))!=0;
      if ($410) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $412=$I;
      var $413=1 << $412;
      var $414=$1;
      var $415=(($414)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=$416 | $413;
      HEAP32[(($415)>>2)]=$417;
      label = 68; break;
    case 64: 
      var $419=$B;
      var $420=(($419+8)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=$421;
      var $423=$1;
      var $424=(($423+16)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=(($422)>>>(0)) >= (($425)>>>(0));
      var $427=(($426)&(1));
      var $428=($427);
      var $429=(($428)|(0))!=0;
      if ($429) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $431=$B;
      var $432=(($431+8)|0);
      var $433=HEAP32[(($432)>>2)];
      $F1=$433;
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!";
    case 67: 
      label = 68; break;
    case 68: 
      var $437=$DV;
      var $438=$B;
      var $439=(($438+8)|0);
      HEAP32[(($439)>>2)]=$437;
      var $440=$DV;
      var $441=$F1;
      var $442=(($441+12)|0);
      HEAP32[(($442)>>2)]=$440;
      var $443=$F1;
      var $444=$DV;
      var $445=(($444+8)|0);
      HEAP32[(($445)>>2)]=$443;
      var $446=$B;
      var $447=$DV;
      var $448=(($447+12)|0);
      HEAP32[(($448)>>2)]=$446;
      label = 69; break;
    case 69: 
      var $450=$rsize;
      var $451=$1;
      var $452=(($451+8)|0);
      HEAP32[(($452)>>2)]=$450;
      var $453=$r;
      var $454=$1;
      var $455=(($454+20)|0);
      HEAP32[(($455)>>2)]=$453;
      label = 70; break;
    case 70: 
      var $457=$v;
      var $458=$457;
      var $459=(($458+8)|0);
      return $459;
    case 71: 
      label = 72; break;
    case 72: 
      _abort();
      throw "Reached an unreachable!";
    default: assert(0, "bad label: " + label);
  }
}
function _tmalloc_large($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0;
      var $4=$3;
      var $5=(((-$4))|0);
      $rsize=$5;
      var $6=$3;
      var $7=$6 >>> 8;
      $X=$7;
      var $8=$X;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $idx=0;
      label = 7; break;
    case 3: 
      var $12=$X;
      var $13=(($12)>>>(0)) > 65535;
      if ($13) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $idx=31;
      label = 6; break;
    case 5: 
      var $16=$X;
      $Y=$16;
      var $17=$Y;
      var $18=((($17)-(256))|0);
      var $19=$18 >>> 16;
      var $20=$19 & 8;
      $N=$20;
      var $21=$N;
      var $22=$Y;
      var $23=$22 << $21;
      $Y=$23;
      var $24=((($23)-(4096))|0);
      var $25=$24 >>> 16;
      var $26=$25 & 4;
      $K=$26;
      var $27=$K;
      var $28=$N;
      var $29=((($28)+($27))|0);
      $N=$29;
      var $30=$K;
      var $31=$Y;
      var $32=$31 << $30;
      $Y=$32;
      var $33=((($32)-(16384))|0);
      var $34=$33 >>> 16;
      var $35=$34 & 2;
      $K=$35;
      var $36=$N;
      var $37=((($36)+($35))|0);
      $N=$37;
      var $38=$N;
      var $39=(((14)-($38))|0);
      var $40=$K;
      var $41=$Y;
      var $42=$41 << $40;
      $Y=$42;
      var $43=$42 >>> 15;
      var $44=((($39)+($43))|0);
      $K=$44;
      var $45=$K;
      var $46=$45 << 1;
      var $47=$3;
      var $48=$K;
      var $49=((($48)+(7))|0);
      var $50=$47 >>> (($49)>>>(0));
      var $51=$50 & 1;
      var $52=((($46)+($51))|0);
      $idx=$52;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $55=$idx;
      var $56=$2;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      var $60=(($59)|(0))!=0;
      if ($60) { label = 8; break; } else { label = 23; break; }
    case 8: 
      var $62=$3;
      var $63=$idx;
      var $64=(($63)|(0))==31;
      if ($64) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $73 = 0;label = 11; break;
    case 10: 
      var $67=$idx;
      var $68=$67 >>> 1;
      var $69=((($68)+(8))|0);
      var $70=((($69)-(2))|0);
      var $71=(((31)-($70))|0);
      var $73 = $71;label = 11; break;
    case 11: 
      var $73;
      var $74=$62 << $73;
      $sizebits=$74;
      $rst=0;
      label = 12; break;
    case 12: 
      var $76=$t;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & -8;
      var $80=$3;
      var $81=((($79)-($80))|0);
      $trem=$81;
      var $82=$trem;
      var $83=$rsize;
      var $84=(($82)>>>(0)) < (($83)>>>(0));
      if ($84) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $86=$t;
      $v=$86;
      var $87=$trem;
      $rsize=$87;
      var $88=(($87)|(0))==0;
      if ($88) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 22; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $92=$t;
      var $93=(($92+16)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      $rt=$95;
      var $96=$sizebits;
      var $97=$96 >>> 31;
      var $98=$97 & 1;
      var $99=$t;
      var $100=(($99+16)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      $t=$102;
      var $103=$rt;
      var $104=(($103)|(0))!=0;
      if ($104) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $106=$rt;
      var $107=$t;
      var $108=(($106)|(0))!=(($107)|(0));
      if ($108) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $110=$rt;
      $rst=$110;
      label = 19; break;
    case 19: 
      var $112=$t;
      var $113=(($112)|(0))==0;
      if ($113) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $115=$rst;
      $t=$115;
      label = 22; break;
    case 21: 
      var $117=$sizebits;
      var $118=$117 << 1;
      $sizebits=$118;
      label = 12; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $121=$t;
      var $122=(($121)|(0))==0;
      if ($122) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $124=$v;
      var $125=(($124)|(0))==0;
      if ($125) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $127=$idx;
      var $128=1 << $127;
      var $129=$128 << 1;
      var $130=$idx;
      var $131=1 << $130;
      var $132=$131 << 1;
      var $133=(((-$132))|0);
      var $134=$129 | $133;
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$134 & $137;
      $leftbits=$138;
      var $139=$leftbits;
      var $140=(($139)|(0))!=0;
      if ($140) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $142=$leftbits;
      var $143=$leftbits;
      var $144=(((-$143))|0);
      var $145=$142 & $144;
      $leastbit=$145;
      var $146=$leastbit;
      var $147=((($146)-(1))|0);
      $Y1=$147;
      var $148=$Y1;
      var $149=$148 >>> 12;
      var $150=$149 & 16;
      $K2=$150;
      var $151=$K2;
      $N3=$151;
      var $152=$K2;
      var $153=$Y1;
      var $154=$153 >>> (($152)>>>(0));
      $Y1=$154;
      var $155=$Y1;
      var $156=$155 >>> 5;
      var $157=$156 & 8;
      $K2=$157;
      var $158=$N3;
      var $159=((($158)+($157))|0);
      $N3=$159;
      var $160=$K2;
      var $161=$Y1;
      var $162=$161 >>> (($160)>>>(0));
      $Y1=$162;
      var $163=$Y1;
      var $164=$163 >>> 2;
      var $165=$164 & 4;
      $K2=$165;
      var $166=$N3;
      var $167=((($166)+($165))|0);
      $N3=$167;
      var $168=$K2;
      var $169=$Y1;
      var $170=$169 >>> (($168)>>>(0));
      $Y1=$170;
      var $171=$Y1;
      var $172=$171 >>> 1;
      var $173=$172 & 2;
      $K2=$173;
      var $174=$N3;
      var $175=((($174)+($173))|0);
      $N3=$175;
      var $176=$K2;
      var $177=$Y1;
      var $178=$177 >>> (($176)>>>(0));
      $Y1=$178;
      var $179=$Y1;
      var $180=$179 >>> 1;
      var $181=$180 & 1;
      $K2=$181;
      var $182=$N3;
      var $183=((($182)+($181))|0);
      $N3=$183;
      var $184=$K2;
      var $185=$Y1;
      var $186=$185 >>> (($184)>>>(0));
      $Y1=$186;
      var $187=$N3;
      var $188=$Y1;
      var $189=((($187)+($188))|0);
      $i=$189;
      var $190=$i;
      var $191=$2;
      var $192=(($191+304)|0);
      var $193=(($192+($190<<2))|0);
      var $194=HEAP32[(($193)>>2)];
      $t=$194;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $198=$t;
      var $199=(($198)|(0))!=0;
      if ($199) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $201=$t;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & -8;
      var $205=$3;
      var $206=((($204)-($205))|0);
      $trem4=$206;
      var $207=$trem4;
      var $208=$rsize;
      var $209=(($207)>>>(0)) < (($208)>>>(0));
      if ($209) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $211=$trem4;
      $rsize=$211;
      var $212=$t;
      $v=$212;
      label = 32; break;
    case 32: 
      var $214=$t;
      var $215=(($214+16)|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|(0))!=0;
      if ($218) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $220=$t;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      var $223=HEAP32[(($222)>>2)];
      var $230 = $223;label = 35; break;
    case 34: 
      var $225=$t;
      var $226=(($225+16)|0);
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 35; break;
    case 35: 
      var $230;
      $t=$230;
      label = 29; break;
    case 36: 
      var $232=$v;
      var $233=(($232)|(0))!=0;
      if ($233) { label = 37; break; } else { label = 129; break; }
    case 37: 
      var $235=$rsize;
      var $236=$2;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$3;
      var $240=((($238)-($239))|0);
      var $241=(($235)>>>(0)) < (($240)>>>(0));
      if ($241) { label = 38; break; } else { label = 129; break; }
    case 38: 
      var $243=$v;
      var $244=$243;
      var $245=$2;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($244)>>>(0)) >= (($247)>>>(0));
      var $249=(($248)&(1));
      var $250=($249);
      var $251=(($250)|(0))!=0;
      if ($251) { label = 39; break; } else { label = 128; break; }
    case 39: 
      var $253=$v;
      var $254=$253;
      var $255=$3;
      var $256=(($254+$255)|0);
      var $257=$256;
      $r=$257;
      var $258=$v;
      var $259=$258;
      var $260=$r;
      var $261=$260;
      var $262=(($259)>>>(0)) < (($261)>>>(0));
      var $263=(($262)&(1));
      var $264=($263);
      var $265=(($264)|(0))!=0;
      if ($265) { label = 40; break; } else { label = 127; break; }
    case 40: 
      var $267=$v;
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      $XP=$269;
      var $270=$v;
      var $271=(($270+12)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$v;
      var $274=(($272)|(0))!=(($273)|(0));
      if ($274) { label = 41; break; } else { label = 48; break; }
    case 41: 
      var $276=$v;
      var $277=(($276+8)|0);
      var $278=HEAP32[(($277)>>2)];
      $F=$278;
      var $279=$v;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      $R=$281;
      var $282=$F;
      var $283=$282;
      var $284=$2;
      var $285=(($284+16)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($283)>>>(0)) >= (($286)>>>(0));
      if ($287) { label = 42; break; } else { var $301 = 0;label = 44; break; }
    case 42: 
      var $289=$F;
      var $290=(($289+12)|0);
      var $291=HEAP32[(($290)>>2)];
      var $292=$v;
      var $293=(($291)|(0))==(($292)|(0));
      if ($293) { label = 43; break; } else { var $301 = 0;label = 44; break; }
    case 43: 
      var $295=$R;
      var $296=(($295+8)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$v;
      var $299=(($297)|(0))==(($298)|(0));
      var $301 = $299;label = 44; break;
    case 44: 
      var $301;
      var $302=(($301)&(1));
      var $303=($302);
      var $304=(($303)|(0))!=0;
      if ($304) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $306=$R;
      var $307=$F;
      var $308=(($307+12)|0);
      HEAP32[(($308)>>2)]=$306;
      var $309=$F;
      var $310=$R;
      var $311=(($310+8)|0);
      HEAP32[(($311)>>2)]=$309;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!";
    case 47: 
      label = 60; break;
    case 48: 
      var $315=$v;
      var $316=(($315+16)|0);
      var $317=(($316+4)|0);
      $RP=$317;
      var $318=HEAP32[(($317)>>2)];
      $R=$318;
      var $319=(($318)|(0))!=0;
      if ($319) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $321=$v;
      var $322=(($321+16)|0);
      var $323=(($322)|0);
      $RP=$323;
      var $324=HEAP32[(($323)>>2)];
      $R=$324;
      var $325=(($324)|(0))!=0;
      if ($325) { label = 50; break; } else { label = 59; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $328=$R;
      var $329=(($328+16)|0);
      var $330=(($329+4)|0);
      $CP=$330;
      var $331=HEAP32[(($330)>>2)];
      var $332=(($331)|(0))!=0;
      if ($332) { var $340 = 1;label = 53; break; } else { label = 52; break; }
    case 52: 
      var $334=$R;
      var $335=(($334+16)|0);
      var $336=(($335)|0);
      $CP=$336;
      var $337=HEAP32[(($336)>>2)];
      var $338=(($337)|(0))!=0;
      var $340 = $338;label = 53; break;
    case 53: 
      var $340;
      if ($340) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $342=$CP;
      $RP=$342;
      var $343=HEAP32[(($342)>>2)];
      $R=$343;
      label = 51; break;
    case 55: 
      var $345=$RP;
      var $346=$345;
      var $347=$2;
      var $348=(($347+16)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($346)>>>(0)) >= (($349)>>>(0));
      var $351=(($350)&(1));
      var $352=($351);
      var $353=(($352)|(0))!=0;
      if ($353) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $355=$RP;
      HEAP32[(($355)>>2)]=0;
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!";
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $360=$XP;
      var $361=(($360)|(0))!=0;
      if ($361) { label = 61; break; } else { label = 88; break; }
    case 61: 
      var $363=$v;
      var $364=(($363+28)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$2;
      var $367=(($366+304)|0);
      var $368=(($367+($365<<2))|0);
      $H=$368;
      var $369=$v;
      var $370=$H;
      var $371=HEAP32[(($370)>>2)];
      var $372=(($369)|(0))==(($371)|(0));
      if ($372) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $374=$R;
      var $375=$H;
      HEAP32[(($375)>>2)]=$374;
      var $376=(($374)|(0))==0;
      if ($376) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $378=$v;
      var $379=(($378+28)|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=1 << $380;
      var $382=$381 ^ -1;
      var $383=$2;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & $382;
      HEAP32[(($384)>>2)]=$386;
      label = 64; break;
    case 64: 
      label = 72; break;
    case 65: 
      var $389=$XP;
      var $390=$389;
      var $391=$2;
      var $392=(($391+16)|0);
      var $393=HEAP32[(($392)>>2)];
      var $394=(($390)>>>(0)) >= (($393)>>>(0));
      var $395=(($394)&(1));
      var $396=($395);
      var $397=(($396)|(0))!=0;
      if ($397) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $399=$XP;
      var $400=(($399+16)|0);
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$v;
      var $404=(($402)|(0))==(($403)|(0));
      if ($404) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $406=$R;
      var $407=$XP;
      var $408=(($407+16)|0);
      var $409=(($408)|0);
      HEAP32[(($409)>>2)]=$406;
      label = 69; break;
    case 68: 
      var $411=$R;
      var $412=$XP;
      var $413=(($412+16)|0);
      var $414=(($413+4)|0);
      HEAP32[(($414)>>2)]=$411;
      label = 69; break;
    case 69: 
      label = 71; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!";
    case 71: 
      label = 72; break;
    case 72: 
      var $419=$R;
      var $420=(($419)|(0))!=0;
      if ($420) { label = 73; break; } else { label = 87; break; }
    case 73: 
      var $422=$R;
      var $423=$422;
      var $424=$2;
      var $425=(($424+16)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=(($423)>>>(0)) >= (($426)>>>(0));
      var $428=(($427)&(1));
      var $429=($428);
      var $430=(($429)|(0))!=0;
      if ($430) { label = 74; break; } else { label = 85; break; }
    case 74: 
      var $432=$XP;
      var $433=$R;
      var $434=(($433+24)|0);
      HEAP32[(($434)>>2)]=$432;
      var $435=$v;
      var $436=(($435+16)|0);
      var $437=(($436)|0);
      var $438=HEAP32[(($437)>>2)];
      $C0=$438;
      var $439=(($438)|(0))!=0;
      if ($439) { label = 75; break; } else { label = 79; break; }
    case 75: 
      var $441=$C0;
      var $442=$441;
      var $443=$2;
      var $444=(($443+16)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=(($442)>>>(0)) >= (($445)>>>(0));
      var $447=(($446)&(1));
      var $448=($447);
      var $449=(($448)|(0))!=0;
      if ($449) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $451=$C0;
      var $452=$R;
      var $453=(($452+16)|0);
      var $454=(($453)|0);
      HEAP32[(($454)>>2)]=$451;
      var $455=$R;
      var $456=$C0;
      var $457=(($456+24)|0);
      HEAP32[(($457)>>2)]=$455;
      label = 78; break;
    case 77: 
      _abort();
      throw "Reached an unreachable!";
    case 78: 
      label = 79; break;
    case 79: 
      var $461=$v;
      var $462=(($461+16)|0);
      var $463=(($462+4)|0);
      var $464=HEAP32[(($463)>>2)];
      $C1=$464;
      var $465=(($464)|(0))!=0;
      if ($465) { label = 80; break; } else { label = 84; break; }
    case 80: 
      var $467=$C1;
      var $468=$467;
      var $469=$2;
      var $470=(($469+16)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($468)>>>(0)) >= (($471)>>>(0));
      var $473=(($472)&(1));
      var $474=($473);
      var $475=(($474)|(0))!=0;
      if ($475) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $477=$C1;
      var $478=$R;
      var $479=(($478+16)|0);
      var $480=(($479+4)|0);
      HEAP32[(($480)>>2)]=$477;
      var $481=$R;
      var $482=$C1;
      var $483=(($482+24)|0);
      HEAP32[(($483)>>2)]=$481;
      label = 83; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!";
    case 83: 
      label = 84; break;
    case 84: 
      label = 86; break;
    case 85: 
      _abort();
      throw "Reached an unreachable!";
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $491=$rsize;
      var $492=(($491)>>>(0)) < 16;
      if ($492) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $494=$rsize;
      var $495=$3;
      var $496=((($494)+($495))|0);
      var $497=$496 | 1;
      var $498=$497 | 2;
      var $499=$v;
      var $500=(($499+4)|0);
      HEAP32[(($500)>>2)]=$498;
      var $501=$v;
      var $502=$501;
      var $503=$rsize;
      var $504=$3;
      var $505=((($503)+($504))|0);
      var $506=(($502+$505)|0);
      var $507=$506;
      var $508=(($507+4)|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=$509 | 1;
      HEAP32[(($508)>>2)]=$510;
      label = 126; break;
    case 90: 
      var $512=$3;
      var $513=$512 | 1;
      var $514=$513 | 2;
      var $515=$v;
      var $516=(($515+4)|0);
      HEAP32[(($516)>>2)]=$514;
      var $517=$rsize;
      var $518=$517 | 1;
      var $519=$r;
      var $520=(($519+4)|0);
      HEAP32[(($520)>>2)]=$518;
      var $521=$rsize;
      var $522=$r;
      var $523=$522;
      var $524=$rsize;
      var $525=(($523+$524)|0);
      var $526=$525;
      var $527=(($526)|0);
      HEAP32[(($527)>>2)]=$521;
      var $528=$rsize;
      var $529=$528 >>> 3;
      var $530=(($529)>>>(0)) < 32;
      if ($530) { label = 91; break; } else { label = 98; break; }
    case 91: 
      var $532=$rsize;
      var $533=$532 >>> 3;
      $I=$533;
      var $534=$I;
      var $535=$534 << 1;
      var $536=$2;
      var $537=(($536+40)|0);
      var $538=(($537+($535<<2))|0);
      var $539=$538;
      var $540=$539;
      $B=$540;
      var $541=$B;
      $F5=$541;
      var $542=$2;
      var $543=(($542)|0);
      var $544=HEAP32[(($543)>>2)];
      var $545=$I;
      var $546=1 << $545;
      var $547=$544 & $546;
      var $548=(($547)|(0))!=0;
      if ($548) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $550=$I;
      var $551=1 << $550;
      var $552=$2;
      var $553=(($552)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=$554 | $551;
      HEAP32[(($553)>>2)]=$555;
      label = 97; break;
    case 93: 
      var $557=$B;
      var $558=(($557+8)|0);
      var $559=HEAP32[(($558)>>2)];
      var $560=$559;
      var $561=$2;
      var $562=(($561+16)|0);
      var $563=HEAP32[(($562)>>2)];
      var $564=(($560)>>>(0)) >= (($563)>>>(0));
      var $565=(($564)&(1));
      var $566=($565);
      var $567=(($566)|(0))!=0;
      if ($567) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $569=$B;
      var $570=(($569+8)|0);
      var $571=HEAP32[(($570)>>2)];
      $F5=$571;
      label = 96; break;
    case 95: 
      _abort();
      throw "Reached an unreachable!";
    case 96: 
      label = 97; break;
    case 97: 
      var $575=$r;
      var $576=$B;
      var $577=(($576+8)|0);
      HEAP32[(($577)>>2)]=$575;
      var $578=$r;
      var $579=$F5;
      var $580=(($579+12)|0);
      HEAP32[(($580)>>2)]=$578;
      var $581=$F5;
      var $582=$r;
      var $583=(($582+8)|0);
      HEAP32[(($583)>>2)]=$581;
      var $584=$B;
      var $585=$r;
      var $586=(($585+12)|0);
      HEAP32[(($586)>>2)]=$584;
      label = 125; break;
    case 98: 
      var $588=$r;
      var $589=$588;
      $TP=$589;
      var $590=$rsize;
      var $591=$590 >>> 8;
      $X8=$591;
      var $592=$X8;
      var $593=(($592)|(0))==0;
      if ($593) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I7=0;
      label = 104; break;
    case 100: 
      var $596=$X8;
      var $597=(($596)>>>(0)) > 65535;
      if ($597) { label = 101; break; } else { label = 102; break; }
    case 101: 
      $I7=31;
      label = 103; break;
    case 102: 
      var $600=$X8;
      $Y9=$600;
      var $601=$Y9;
      var $602=((($601)-(256))|0);
      var $603=$602 >>> 16;
      var $604=$603 & 8;
      $N10=$604;
      var $605=$N10;
      var $606=$Y9;
      var $607=$606 << $605;
      $Y9=$607;
      var $608=((($607)-(4096))|0);
      var $609=$608 >>> 16;
      var $610=$609 & 4;
      $K11=$610;
      var $611=$K11;
      var $612=$N10;
      var $613=((($612)+($611))|0);
      $N10=$613;
      var $614=$K11;
      var $615=$Y9;
      var $616=$615 << $614;
      $Y9=$616;
      var $617=((($616)-(16384))|0);
      var $618=$617 >>> 16;
      var $619=$618 & 2;
      $K11=$619;
      var $620=$N10;
      var $621=((($620)+($619))|0);
      $N10=$621;
      var $622=$N10;
      var $623=(((14)-($622))|0);
      var $624=$K11;
      var $625=$Y9;
      var $626=$625 << $624;
      $Y9=$626;
      var $627=$626 >>> 15;
      var $628=((($623)+($627))|0);
      $K11=$628;
      var $629=$K11;
      var $630=$629 << 1;
      var $631=$rsize;
      var $632=$K11;
      var $633=((($632)+(7))|0);
      var $634=$631 >>> (($633)>>>(0));
      var $635=$634 & 1;
      var $636=((($630)+($635))|0);
      $I7=$636;
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $639=$I7;
      var $640=$2;
      var $641=(($640+304)|0);
      var $642=(($641+($639<<2))|0);
      $H6=$642;
      var $643=$I7;
      var $644=$TP;
      var $645=(($644+28)|0);
      HEAP32[(($645)>>2)]=$643;
      var $646=$TP;
      var $647=(($646+16)|0);
      var $648=(($647+4)|0);
      HEAP32[(($648)>>2)]=0;
      var $649=$TP;
      var $650=(($649+16)|0);
      var $651=(($650)|0);
      HEAP32[(($651)>>2)]=0;
      var $652=$2;
      var $653=(($652+4)|0);
      var $654=HEAP32[(($653)>>2)];
      var $655=$I7;
      var $656=1 << $655;
      var $657=$654 & $656;
      var $658=(($657)|(0))!=0;
      if ($658) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $660=$I7;
      var $661=1 << $660;
      var $662=$2;
      var $663=(($662+4)|0);
      var $664=HEAP32[(($663)>>2)];
      var $665=$664 | $661;
      HEAP32[(($663)>>2)]=$665;
      var $666=$TP;
      var $667=$H6;
      HEAP32[(($667)>>2)]=$666;
      var $668=$H6;
      var $669=$668;
      var $670=$TP;
      var $671=(($670+24)|0);
      HEAP32[(($671)>>2)]=$669;
      var $672=$TP;
      var $673=$TP;
      var $674=(($673+12)|0);
      HEAP32[(($674)>>2)]=$672;
      var $675=$TP;
      var $676=(($675+8)|0);
      HEAP32[(($676)>>2)]=$672;
      label = 124; break;
    case 106: 
      var $678=$H6;
      var $679=HEAP32[(($678)>>2)];
      $T=$679;
      var $680=$rsize;
      var $681=$I7;
      var $682=(($681)|(0))==31;
      if ($682) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $691 = 0;label = 109; break;
    case 108: 
      var $685=$I7;
      var $686=$685 >>> 1;
      var $687=((($686)+(8))|0);
      var $688=((($687)-(2))|0);
      var $689=(((31)-($688))|0);
      var $691 = $689;label = 109; break;
    case 109: 
      var $691;
      var $692=$680 << $691;
      $K12=$692;
      label = 110; break;
    case 110: 
      var $694=$T;
      var $695=(($694+4)|0);
      var $696=HEAP32[(($695)>>2)];
      var $697=$696 & -8;
      var $698=$rsize;
      var $699=(($697)|(0))!=(($698)|(0));
      if ($699) { label = 111; break; } else { label = 117; break; }
    case 111: 
      var $701=$K12;
      var $702=$701 >>> 31;
      var $703=$702 & 1;
      var $704=$T;
      var $705=(($704+16)|0);
      var $706=(($705+($703<<2))|0);
      $C=$706;
      var $707=$K12;
      var $708=$707 << 1;
      $K12=$708;
      var $709=$C;
      var $710=HEAP32[(($709)>>2)];
      var $711=(($710)|(0))!=0;
      if ($711) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $713=$C;
      var $714=HEAP32[(($713)>>2)];
      $T=$714;
      label = 116; break;
    case 113: 
      var $716=$C;
      var $717=$716;
      var $718=$2;
      var $719=(($718+16)|0);
      var $720=HEAP32[(($719)>>2)];
      var $721=(($717)>>>(0)) >= (($720)>>>(0));
      var $722=(($721)&(1));
      var $723=($722);
      var $724=(($723)|(0))!=0;
      if ($724) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $726=$TP;
      var $727=$C;
      HEAP32[(($727)>>2)]=$726;
      var $728=$T;
      var $729=$TP;
      var $730=(($729+24)|0);
      HEAP32[(($730)>>2)]=$728;
      var $731=$TP;
      var $732=$TP;
      var $733=(($732+12)|0);
      HEAP32[(($733)>>2)]=$731;
      var $734=$TP;
      var $735=(($734+8)|0);
      HEAP32[(($735)>>2)]=$731;
      label = 123; break;
    case 115: 
      _abort();
      throw "Reached an unreachable!";
    case 116: 
      label = 122; break;
    case 117: 
      var $739=$T;
      var $740=(($739+8)|0);
      var $741=HEAP32[(($740)>>2)];
      $F13=$741;
      var $742=$T;
      var $743=$742;
      var $744=$2;
      var $745=(($744+16)|0);
      var $746=HEAP32[(($745)>>2)];
      var $747=(($743)>>>(0)) >= (($746)>>>(0));
      if ($747) { label = 118; break; } else { var $756 = 0;label = 119; break; }
    case 118: 
      var $749=$F13;
      var $750=$749;
      var $751=$2;
      var $752=(($751+16)|0);
      var $753=HEAP32[(($752)>>2)];
      var $754=(($750)>>>(0)) >= (($753)>>>(0));
      var $756 = $754;label = 119; break;
    case 119: 
      var $756;
      var $757=(($756)&(1));
      var $758=($757);
      var $759=(($758)|(0))!=0;
      if ($759) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $761=$TP;
      var $762=$F13;
      var $763=(($762+12)|0);
      HEAP32[(($763)>>2)]=$761;
      var $764=$T;
      var $765=(($764+8)|0);
      HEAP32[(($765)>>2)]=$761;
      var $766=$F13;
      var $767=$TP;
      var $768=(($767+8)|0);
      HEAP32[(($768)>>2)]=$766;
      var $769=$T;
      var $770=$TP;
      var $771=(($770+12)|0);
      HEAP32[(($771)>>2)]=$769;
      var $772=$TP;
      var $773=(($772+24)|0);
      HEAP32[(($773)>>2)]=0;
      label = 123; break;
    case 121: 
      _abort();
      throw "Reached an unreachable!";
    case 122: 
      label = 110; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      var $780=$v;
      var $781=$780;
      var $782=(($781+8)|0);
      $1=$782;
      label = 130; break;
    case 127: 
      label = 128; break;
    case 128: 
      _abort();
      throw "Reached an unreachable!";
    case 129: 
      $1=0;
      label = 130; break;
    case 130: 
      var $787=$1;
      return $787;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_alloc($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $asize;
      var $mem;
      var $fp;
      var $br;
      var $ssize;
      var $ss;
      var $base;
      var $fp1;
      var $esize;
      var $end;
      var $br2;
      var $end3;
      var $ssize4;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $4=HEAP32[((((79956)|0))>>2)];
      var $5=(($4)|(0))!=0;
      if ($5) { var $10 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $7=_init_mparams();
      var $8=(($7)|(0))!=0;
      var $10 = $8;label = 3; break;
    case 3: 
      var $10;
      var $11=(($10)&(1));
      var $12=$2;
      var $13=(($12+444)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 0;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $18=$3;
      var $19=HEAP32[((((79968)|0))>>2)];
      var $20=(($18)>>>(0)) >= (($19)>>>(0));
      if ($20) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|(0))!=0;
      if ($25) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $27=$2;
      var $28=$3;
      var $29=_mmap_alloc($27, $28);
      $mem=$29;
      var $30=$mem;
      var $31=(($30)|(0))!=0;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$mem;
      $1=$33;
      label = 103; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $36=$3;
      var $37=((($36)+(48))|0);
      var $38=HEAP32[((((79964)|0))>>2)];
      var $39=((($38)-(1))|0);
      var $40=((($37)+($39))|0);
      var $41=HEAP32[((((79964)|0))>>2)];
      var $42=((($41)-(1))|0);
      var $43=$42 ^ -1;
      var $44=$40 & $43;
      $asize=$44;
      var $45=$asize;
      var $46=$3;
      var $47=(($45)>>>(0)) <= (($46)>>>(0));
      if ($47) { label = 10; break; } else { label = 11; break; }
    case 10: 
      $1=0;
      label = 103; break;
    case 11: 
      var $50=$2;
      var $51=(($50+440)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($52)|(0))!=0;
      if ($53) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $55=$2;
      var $56=(($55+432)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$asize;
      var $59=((($57)+($58))|0);
      $fp=$59;
      var $60=$fp;
      var $61=$2;
      var $62=(($61+432)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($60)>>>(0)) <= (($63)>>>(0));
      if ($64) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $66=$fp;
      var $67=$2;
      var $68=(($67+440)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=(($66)>>>(0)) > (($69)>>>(0));
      if ($70) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $1=0;
      label = 103; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $74=$2;
      var $75=(($74+444)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$76 & 4;
      var $78=(($77)|(0))!=0;
      if ($78) { label = 53; break; } else { label = 17; break; }
    case 17: 
      $br=-1;
      var $80=$asize;
      $ssize=$80;
      var $81=$2;
      var $82=(($81+24)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|(0))==0;
      if ($84) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $94 = 0;label = 20; break;
    case 19: 
      var $87=$2;
      var $88=$2;
      var $89=(($88+24)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$90;
      var $92=_segment_holding($87, $91);
      var $94 = $92;label = 20; break;
    case 20: 
      var $94;
      $ss=$94;
      var $95=$ss;
      var $96=(($95)|(0))==0;
      if ($96) { label = 21; break; } else { label = 33; break; }
    case 21: 
      var $98=_sbrk(0);
      $base=$98;
      var $99=$base;
      var $100=(($99)|(0))!=-1;
      if ($100) { label = 22; break; } else { label = 32; break; }
    case 22: 
      var $102=$base;
      var $103=$102;
      var $104=HEAP32[((((79960)|0))>>2)];
      var $105=((($104)-(1))|0);
      var $106=$103 & $105;
      var $107=(($106)|(0))==0;
      if ($107) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $109=$base;
      var $110=$109;
      var $111=HEAP32[((((79960)|0))>>2)];
      var $112=((($111)-(1))|0);
      var $113=((($110)+($112))|0);
      var $114=HEAP32[((((79960)|0))>>2)];
      var $115=((($114)-(1))|0);
      var $116=$115 ^ -1;
      var $117=$113 & $116;
      var $118=$base;
      var $119=$118;
      var $120=((($117)-($119))|0);
      var $121=$ssize;
      var $122=((($121)+($120))|0);
      $ssize=$122;
      label = 24; break;
    case 24: 
      var $124=$2;
      var $125=(($124+432)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$ssize;
      var $128=((($126)+($127))|0);
      $fp1=$128;
      var $129=$ssize;
      var $130=$3;
      var $131=(($129)>>>(0)) > (($130)>>>(0));
      if ($131) { label = 25; break; } else { label = 31; break; }
    case 25: 
      var $133=$ssize;
      var $134=(($133)>>>(0)) < 2147483647;
      if ($134) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $136=$2;
      var $137=(($136+440)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=(($138)|(0))==0;
      if ($139) { label = 29; break; } else { label = 27; break; }
    case 27: 
      var $141=$fp1;
      var $142=$2;
      var $143=(($142+432)|0);
      var $144=HEAP32[(($143)>>2)];
      var $145=(($141)>>>(0)) > (($144)>>>(0));
      if ($145) { label = 28; break; } else { label = 31; break; }
    case 28: 
      var $147=$fp1;
      var $148=$2;
      var $149=(($148+440)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=(($147)>>>(0)) <= (($150)>>>(0));
      if ($151) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $153=$ssize;
      var $154=_sbrk($153);
      $br=$154;
      var $155=$base;
      var $156=(($154)|(0))==(($155)|(0));
      if ($156) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $158=$base;
      $tbase=$158;
      var $159=$ssize;
      $tsize=$159;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 37; break;
    case 33: 
      var $163=$3;
      var $164=$2;
      var $165=(($164+12)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=((($163)-($166))|0);
      var $168=((($167)+(48))|0);
      var $169=HEAP32[((((79964)|0))>>2)];
      var $170=((($169)-(1))|0);
      var $171=((($168)+($170))|0);
      var $172=HEAP32[((((79964)|0))>>2)];
      var $173=((($172)-(1))|0);
      var $174=$173 ^ -1;
      var $175=$171 & $174;
      $ssize=$175;
      var $176=$ssize;
      var $177=(($176)>>>(0)) < 2147483647;
      if ($177) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $179=$ssize;
      var $180=_sbrk($179);
      $br=$180;
      var $181=$ss;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$ss;
      var $185=(($184+4)|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=(($183+$186)|0);
      var $188=(($180)|(0))==(($187)|(0));
      if ($188) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $190=$br;
      $tbase=$190;
      var $191=$ssize;
      $tsize=$191;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $194=$tbase;
      var $195=(($194)|(0))==-1;
      if ($195) { label = 38; break; } else { label = 52; break; }
    case 38: 
      var $197=$br;
      var $198=(($197)|(0))!=-1;
      if ($198) { label = 39; break; } else { label = 48; break; }
    case 39: 
      var $200=$ssize;
      var $201=(($200)>>>(0)) < 2147483647;
      if ($201) { label = 40; break; } else { label = 47; break; }
    case 40: 
      var $203=$ssize;
      var $204=$3;
      var $205=((($204)+(48))|0);
      var $206=(($203)>>>(0)) < (($205)>>>(0));
      if ($206) { label = 41; break; } else { label = 47; break; }
    case 41: 
      var $208=$3;
      var $209=((($208)+(48))|0);
      var $210=$ssize;
      var $211=((($209)-($210))|0);
      var $212=HEAP32[((((79964)|0))>>2)];
      var $213=((($212)-(1))|0);
      var $214=((($211)+($213))|0);
      var $215=HEAP32[((((79964)|0))>>2)];
      var $216=((($215)-(1))|0);
      var $217=$216 ^ -1;
      var $218=$214 & $217;
      $esize=$218;
      var $219=$esize;
      var $220=(($219)>>>(0)) < 2147483647;
      if ($220) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $222=$esize;
      var $223=_sbrk($222);
      $end=$223;
      var $224=$end;
      var $225=(($224)|(0))!=-1;
      if ($225) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $227=$esize;
      var $228=$ssize;
      var $229=((($228)+($227))|0);
      $ssize=$229;
      label = 45; break;
    case 44: 
      var $231=$ssize;
      var $232=(((-$231))|0);
      var $233=_sbrk($232);
      $br=-1;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $238=$br;
      var $239=(($238)|(0))!=-1;
      if ($239) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $241=$br;
      $tbase=$241;
      var $242=$ssize;
      $tsize=$242;
      label = 51; break;
    case 50: 
      var $244=$2;
      var $245=(($244+444)|0);
      var $246=HEAP32[(($245)>>2)];
      var $247=$246 | 4;
      HEAP32[(($245)>>2)]=$247;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $251=$tbase;
      var $252=(($251)|(0))==-1;
      if ($252) { label = 54; break; } else { label = 63; break; }
    case 54: 
      var $254=$asize;
      var $255=(($254)>>>(0)) < 2147483647;
      if ($255) { label = 55; break; } else { label = 62; break; }
    case 55: 
      $br2=-1;
      $end3=-1;
      var $257=$asize;
      var $258=_sbrk($257);
      $br2=$258;
      var $259=_sbrk(0);
      $end3=$259;
      var $260=$br2;
      var $261=(($260)|(0))!=-1;
      if ($261) { label = 56; break; } else { label = 61; break; }
    case 56: 
      var $263=$end3;
      var $264=(($263)|(0))!=-1;
      if ($264) { label = 57; break; } else { label = 61; break; }
    case 57: 
      var $266=$br2;
      var $267=$end3;
      var $268=(($266)>>>(0)) < (($267)>>>(0));
      if ($268) { label = 58; break; } else { label = 61; break; }
    case 58: 
      var $270=$end3;
      var $271=$br2;
      var $272=$270;
      var $273=$271;
      var $274=((($272)-($273))|0);
      $ssize4=$274;
      var $275=$ssize4;
      var $276=$3;
      var $277=((($276)+(40))|0);
      var $278=(($275)>>>(0)) > (($277)>>>(0));
      if ($278) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $280=$br2;
      $tbase=$280;
      var $281=$ssize4;
      $tsize=$281;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $286=$tbase;
      var $287=(($286)|(0))!=-1;
      if ($287) { label = 64; break; } else { label = 102; break; }
    case 64: 
      var $289=$tsize;
      var $290=$2;
      var $291=(($290+432)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=((($292)+($289))|0);
      HEAP32[(($291)>>2)]=$293;
      var $294=$2;
      var $295=(($294+436)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($293)>>>(0)) > (($296)>>>(0));
      if ($297) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $299=$2;
      var $300=(($299+432)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=$2;
      var $303=(($302+436)|0);
      HEAP32[(($303)>>2)]=$301;
      label = 66; break;
    case 66: 
      var $305=$2;
      var $306=(($305+24)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=(($307)|(0))!=0;
      if ($308) { label = 74; break; } else { label = 67; break; }
    case 67: 
      var $310=$2;
      var $311=(($310+16)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($312)|(0))==0;
      if ($313) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $315=$tbase;
      var $316=$2;
      var $317=(($316+16)|0);
      var $318=HEAP32[(($317)>>2)];
      var $319=(($315)>>>(0)) < (($318)>>>(0));
      if ($319) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $321=$tbase;
      var $322=$2;
      var $323=(($322+16)|0);
      HEAP32[(($323)>>2)]=$321;
      label = 70; break;
    case 70: 
      var $325=$tbase;
      var $326=$2;
      var $327=(($326+448)|0);
      var $328=(($327)|0);
      HEAP32[(($328)>>2)]=$325;
      var $329=$tsize;
      var $330=$2;
      var $331=(($330+448)|0);
      var $332=(($331+4)|0);
      HEAP32[(($332)>>2)]=$329;
      var $333=$mmap_flag;
      var $334=$2;
      var $335=(($334+448)|0);
      var $336=(($335+12)|0);
      HEAP32[(($336)>>2)]=$333;
      var $337=HEAP32[((((79956)|0))>>2)];
      var $338=$2;
      var $339=(($338+36)|0);
      HEAP32[(($339)>>2)]=$337;
      var $340=$2;
      var $341=(($340+32)|0);
      HEAP32[(($341)>>2)]=-1;
      var $342=$2;
      _init_bins($342);
      var $343=$2;
      var $344=(($343)|(0))==114140;
      if ($344) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $346=$2;
      var $347=$tbase;
      var $348=$347;
      var $349=$tsize;
      var $350=((($349)-(40))|0);
      _init_top($346, $348, $350);
      label = 73; break;
    case 72: 
      var $352=$2;
      var $353=$352;
      var $354=((($353)-(8))|0);
      var $355=$354;
      var $356=$355;
      var $357=$2;
      var $358=$357;
      var $359=((($358)-(8))|0);
      var $360=$359;
      var $361=(($360+4)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=$362 & -8;
      var $364=(($356+$363)|0);
      var $365=$364;
      $mn=$365;
      var $366=$2;
      var $367=$mn;
      var $368=$tbase;
      var $369=$tsize;
      var $370=(($368+$369)|0);
      var $371=$mn;
      var $372=$371;
      var $373=$370;
      var $374=$372;
      var $375=((($373)-($374))|0);
      var $376=((($375)-(40))|0);
      _init_top($366, $367, $376);
      label = 73; break;
    case 73: 
      label = 99; break;
    case 74: 
      var $379=$2;
      var $380=(($379+448)|0);
      $sp=$380;
      label = 75; break;
    case 75: 
      var $382=$sp;
      var $383=(($382)|(0))!=0;
      if ($383) { label = 76; break; } else { var $395 = 0;label = 77; break; }
    case 76: 
      var $385=$tbase;
      var $386=$sp;
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$sp;
      var $390=(($389+4)|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=(($388+$391)|0);
      var $393=(($385)|(0))!=(($392)|(0));
      var $395 = $393;label = 77; break;
    case 77: 
      var $395;
      if ($395) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $397=$sp;
      var $398=(($397+8)|0);
      var $399=HEAP32[(($398)>>2)];
      $sp=$399;
      label = 75; break;
    case 79: 
      var $401=$sp;
      var $402=(($401)|(0))!=0;
      if ($402) { label = 80; break; } else { label = 85; break; }
    case 80: 
      var $404=$sp;
      var $405=(($404+12)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=$406 & 8;
      var $408=(($407)|(0))!=0;
      if ($408) { label = 85; break; } else { label = 81; break; }
    case 81: 
      var $410=$sp;
      var $411=(($410+12)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$412 & 0;
      var $414=$mmap_flag;
      var $415=(($413)|(0))==(($414)|(0));
      if ($415) { label = 82; break; } else { label = 85; break; }
    case 82: 
      var $417=$2;
      var $418=(($417+24)|0);
      var $419=HEAP32[(($418)>>2)];
      var $420=$419;
      var $421=$sp;
      var $422=(($421)|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=(($420)>>>(0)) >= (($423)>>>(0));
      if ($424) { label = 83; break; } else { label = 85; break; }
    case 83: 
      var $426=$2;
      var $427=(($426+24)|0);
      var $428=HEAP32[(($427)>>2)];
      var $429=$428;
      var $430=$sp;
      var $431=(($430)|0);
      var $432=HEAP32[(($431)>>2)];
      var $433=$sp;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=(($432+$435)|0);
      var $437=(($429)>>>(0)) < (($436)>>>(0));
      if ($437) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $439=$tsize;
      var $440=$sp;
      var $441=(($440+4)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=((($442)+($439))|0);
      HEAP32[(($441)>>2)]=$443;
      var $444=$2;
      var $445=$2;
      var $446=(($445+24)|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=$2;
      var $449=(($448+12)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$tsize;
      var $452=((($450)+($451))|0);
      _init_top($444, $447, $452);
      label = 98; break;
    case 85: 
      var $454=$tbase;
      var $455=$2;
      var $456=(($455+16)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>(0)) < (($457)>>>(0));
      if ($458) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $460=$tbase;
      var $461=$2;
      var $462=(($461+16)|0);
      HEAP32[(($462)>>2)]=$460;
      label = 87; break;
    case 87: 
      var $464=$2;
      var $465=(($464+448)|0);
      $sp=$465;
      label = 88; break;
    case 88: 
      var $467=$sp;
      var $468=(($467)|(0))!=0;
      if ($468) { label = 89; break; } else { var $478 = 0;label = 90; break; }
    case 89: 
      var $470=$sp;
      var $471=(($470)|0);
      var $472=HEAP32[(($471)>>2)];
      var $473=$tbase;
      var $474=$tsize;
      var $475=(($473+$474)|0);
      var $476=(($472)|(0))!=(($475)|(0));
      var $478 = $476;label = 90; break;
    case 90: 
      var $478;
      if ($478) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $480=$sp;
      var $481=(($480+8)|0);
      var $482=HEAP32[(($481)>>2)];
      $sp=$482;
      label = 88; break;
    case 92: 
      var $484=$sp;
      var $485=(($484)|(0))!=0;
      if ($485) { label = 93; break; } else { label = 96; break; }
    case 93: 
      var $487=$sp;
      var $488=(($487+12)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=$489 & 8;
      var $491=(($490)|(0))!=0;
      if ($491) { label = 96; break; } else { label = 94; break; }
    case 94: 
      var $493=$sp;
      var $494=(($493+12)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495 & 0;
      var $497=$mmap_flag;
      var $498=(($496)|(0))==(($497)|(0));
      if ($498) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $500=$sp;
      var $501=(($500)|0);
      var $502=HEAP32[(($501)>>2)];
      $oldbase=$502;
      var $503=$tbase;
      var $504=$sp;
      var $505=(($504)|0);
      HEAP32[(($505)>>2)]=$503;
      var $506=$tsize;
      var $507=$sp;
      var $508=(($507+4)|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=((($509)+($506))|0);
      HEAP32[(($508)>>2)]=$510;
      var $511=$2;
      var $512=$tbase;
      var $513=$oldbase;
      var $514=$3;
      var $515=_prepend_alloc($511, $512, $513, $514);
      $1=$515;
      label = 103; break;
    case 96: 
      var $517=$2;
      var $518=$tbase;
      var $519=$tsize;
      var $520=$mmap_flag;
      _add_segment($517, $518, $519, $520);
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $524=$3;
      var $525=$2;
      var $526=(($525+12)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=(($524)>>>(0)) < (($527)>>>(0));
      if ($528) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $530=$3;
      var $531=$2;
      var $532=(($531+12)|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=((($533)-($530))|0);
      HEAP32[(($532)>>2)]=$534;
      $rsize=$534;
      var $535=$2;
      var $536=(($535+24)|0);
      var $537=HEAP32[(($536)>>2)];
      $p=$537;
      var $538=$p;
      var $539=$538;
      var $540=$3;
      var $541=(($539+$540)|0);
      var $542=$541;
      var $543=$2;
      var $544=(($543+24)|0);
      HEAP32[(($544)>>2)]=$542;
      $r=$542;
      var $545=$rsize;
      var $546=$545 | 1;
      var $547=$r;
      var $548=(($547+4)|0);
      HEAP32[(($548)>>2)]=$546;
      var $549=$3;
      var $550=$549 | 1;
      var $551=$550 | 2;
      var $552=$p;
      var $553=(($552+4)|0);
      HEAP32[(($553)>>2)]=$551;
      var $554=$p;
      var $555=$554;
      var $556=(($555+8)|0);
      $1=$556;
      label = 103; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $559=___errno_location();
      HEAP32[(($559)>>2)]=12;
      $1=0;
      label = 103; break;
    case 103: 
      var $561=$1;
      return $561;
    default: assert(0, "bad label: " + label);
  }
}
function _free($mem) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1;
      var $3=(($2)|(0))!=0;
      if ($3) { label = 2; break; } else { label = 214; break; }
    case 2: 
      var $5=$1;
      var $6=((($5)-(8))|0);
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[((((114156)|0))>>2)];
      var $11=(($9)>>>(0)) >= (($10)>>>(0));
      if ($11) { label = 3; break; } else { var $19 = 0;label = 4; break; }
    case 3: 
      var $13=$p;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 3;
      var $17=(($16)|(0))!=1;
      var $19 = $17;label = 4; break;
    case 4: 
      var $19;
      var $20=(($19)&(1));
      var $21=($20);
      var $22=(($21)|(0))!=0;
      if ($22) { label = 5; break; } else { label = 211; break; }
    case 5: 
      var $24=$p;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -8;
      $psize=$27;
      var $28=$p;
      var $29=$28;
      var $30=$psize;
      var $31=(($29+$30)|0);
      var $32=$31;
      $next=$32;
      var $33=$p;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|(0))!=0;
      if ($37) { label = 86; break; } else { label = 6; break; }
    case 6: 
      var $39=$p;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      $prevsize=$41;
      var $42=$p;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 3;
      var $46=(($45)|(0))==0;
      if ($46) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $48=$prevsize;
      var $49=((($48)+(16))|0);
      var $50=$psize;
      var $51=((($50)+($49))|0);
      $psize=$51;
      label = 213; break;
    case 8: 
      var $53=$p;
      var $54=$53;
      var $55=$prevsize;
      var $56=(((-$55))|0);
      var $57=(($54+$56)|0);
      var $58=$57;
      $prev=$58;
      var $59=$prevsize;
      var $60=$psize;
      var $61=((($60)+($59))|0);
      $psize=$61;
      var $62=$prev;
      $p=$62;
      var $63=$prev;
      var $64=$63;
      var $65=HEAP32[((((114156)|0))>>2)];
      var $66=(($64)>>>(0)) >= (($65)>>>(0));
      var $67=(($66)&(1));
      var $68=($67);
      var $69=(($68)|(0))!=0;
      if ($69) { label = 9; break; } else { label = 83; break; }
    case 9: 
      var $71=$p;
      var $72=HEAP32[((((114160)|0))>>2)];
      var $73=(($71)|(0))!=(($72)|(0));
      if ($73) { label = 10; break; } else { label = 79; break; }
    case 10: 
      var $75=$prevsize;
      var $76=$75 >>> 3;
      var $77=(($76)>>>(0)) < 32;
      if ($77) { label = 11; break; } else { label = 29; break; }
    case 11: 
      var $79=$p;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      $F=$81;
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $B=$84;
      var $85=$prevsize;
      var $86=$85 >>> 3;
      $I=$86;
      var $87=$F;
      var $88=$I;
      var $89=$88 << 1;
      var $90=((((114180)|0)+($89<<2))|0);
      var $91=$90;
      var $92=$91;
      var $93=(($87)|(0))==(($92)|(0));
      if ($93) { var $108 = 1;label = 15; break; } else { label = 12; break; }
    case 12: 
      var $95=$F;
      var $96=$95;
      var $97=HEAP32[((((114156)|0))>>2)];
      var $98=(($96)>>>(0)) >= (($97)>>>(0));
      if ($98) { label = 13; break; } else { var $106 = 0;label = 14; break; }
    case 13: 
      var $100=$F;
      var $101=(($100+12)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=$p;
      var $104=(($102)|(0))==(($103)|(0));
      var $106 = $104;label = 14; break;
    case 14: 
      var $106;
      var $108 = $106;label = 15; break;
    case 15: 
      var $108;
      var $109=(($108)&(1));
      var $110=($109);
      var $111=(($110)|(0))!=0;
      if ($111) { label = 16; break; } else { label = 27; break; }
    case 16: 
      var $113=$B;
      var $114=$F;
      var $115=(($113)|(0))==(($114)|(0));
      if ($115) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $117=$I;
      var $118=1 << $117;
      var $119=$118 ^ -1;
      var $120=HEAP32[((((114140)|0))>>2)];
      var $121=$120 & $119;
      HEAP32[((((114140)|0))>>2)]=$121;
      label = 26; break;
    case 18: 
      var $123=$B;
      var $124=$I;
      var $125=$124 << 1;
      var $126=((((114180)|0)+($125<<2))|0);
      var $127=$126;
      var $128=$127;
      var $129=(($123)|(0))==(($128)|(0));
      if ($129) { var $144 = 1;label = 22; break; } else { label = 19; break; }
    case 19: 
      var $131=$B;
      var $132=$131;
      var $133=HEAP32[((((114156)|0))>>2)];
      var $134=(($132)>>>(0)) >= (($133)>>>(0));
      if ($134) { label = 20; break; } else { var $142 = 0;label = 21; break; }
    case 20: 
      var $136=$B;
      var $137=(($136+8)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$p;
      var $140=(($138)|(0))==(($139)|(0));
      var $142 = $140;label = 21; break;
    case 21: 
      var $142;
      var $144 = $142;label = 22; break;
    case 22: 
      var $144;
      var $145=(($144)&(1));
      var $146=($145);
      var $147=(($146)|(0))!=0;
      if ($147) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $149=$B;
      var $150=$F;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$F;
      var $153=$B;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!";
    case 25: 
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!";
    case 28: 
      label = 78; break;
    case 29: 
      var $161=$p;
      var $162=$161;
      $TP=$162;
      var $163=$TP;
      var $164=(($163+24)|0);
      var $165=HEAP32[(($164)>>2)];
      $XP=$165;
      var $166=$TP;
      var $167=(($166+12)|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$TP;
      var $170=(($168)|(0))!=(($169)|(0));
      if ($170) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $172=$TP;
      var $173=(($172+8)|0);
      var $174=HEAP32[(($173)>>2)];
      $F1=$174;
      var $175=$TP;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      $R=$177;
      var $178=$F1;
      var $179=$178;
      var $180=HEAP32[((((114156)|0))>>2)];
      var $181=(($179)>>>(0)) >= (($180)>>>(0));
      if ($181) { label = 31; break; } else { var $195 = 0;label = 33; break; }
    case 31: 
      var $183=$F1;
      var $184=(($183+12)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=$TP;
      var $187=(($185)|(0))==(($186)|(0));
      if ($187) { label = 32; break; } else { var $195 = 0;label = 33; break; }
    case 32: 
      var $189=$R;
      var $190=(($189+8)|0);
      var $191=HEAP32[(($190)>>2)];
      var $192=$TP;
      var $193=(($191)|(0))==(($192)|(0));
      var $195 = $193;label = 33; break;
    case 33: 
      var $195;
      var $196=(($195)&(1));
      var $197=($196);
      var $198=(($197)|(0))!=0;
      if ($198) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $200=$R;
      var $201=$F1;
      var $202=(($201+12)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=$F1;
      var $204=$R;
      var $205=(($204+8)|0);
      HEAP32[(($205)>>2)]=$203;
      label = 36; break;
    case 35: 
      _abort();
      throw "Reached an unreachable!";
    case 36: 
      label = 49; break;
    case 37: 
      var $209=$TP;
      var $210=(($209+16)|0);
      var $211=(($210+4)|0);
      $RP=$211;
      var $212=HEAP32[(($211)>>2)];
      $R=$212;
      var $213=(($212)|(0))!=0;
      if ($213) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $215=$TP;
      var $216=(($215+16)|0);
      var $217=(($216)|0);
      $RP=$217;
      var $218=HEAP32[(($217)>>2)];
      $R=$218;
      var $219=(($218)|(0))!=0;
      if ($219) { label = 39; break; } else { label = 48; break; }
    case 39: 
      label = 40; break;
    case 40: 
      var $222=$R;
      var $223=(($222+16)|0);
      var $224=(($223+4)|0);
      $CP=$224;
      var $225=HEAP32[(($224)>>2)];
      var $226=(($225)|(0))!=0;
      if ($226) { var $234 = 1;label = 42; break; } else { label = 41; break; }
    case 41: 
      var $228=$R;
      var $229=(($228+16)|0);
      var $230=(($229)|0);
      $CP=$230;
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)|(0))!=0;
      var $234 = $232;label = 42; break;
    case 42: 
      var $234;
      if ($234) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $236=$CP;
      $RP=$236;
      var $237=HEAP32[(($236)>>2)];
      $R=$237;
      label = 40; break;
    case 44: 
      var $239=$RP;
      var $240=$239;
      var $241=HEAP32[((((114156)|0))>>2)];
      var $242=(($240)>>>(0)) >= (($241)>>>(0));
      var $243=(($242)&(1));
      var $244=($243);
      var $245=(($244)|(0))!=0;
      if ($245) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $247=$RP;
      HEAP32[(($247)>>2)]=0;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!";
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $252=$XP;
      var $253=(($252)|(0))!=0;
      if ($253) { label = 50; break; } else { label = 77; break; }
    case 50: 
      var $255=$TP;
      var $256=(($255+28)|0);
      var $257=HEAP32[(($256)>>2)];
      var $258=((((114444)|0)+($257<<2))|0);
      $H=$258;
      var $259=$TP;
      var $260=$H;
      var $261=HEAP32[(($260)>>2)];
      var $262=(($259)|(0))==(($261)|(0));
      if ($262) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $264=$R;
      var $265=$H;
      HEAP32[(($265)>>2)]=$264;
      var $266=(($264)|(0))==0;
      if ($266) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $268=$TP;
      var $269=(($268+28)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=1 << $270;
      var $272=$271 ^ -1;
      var $273=HEAP32[((((114144)|0))>>2)];
      var $274=$273 & $272;
      HEAP32[((((114144)|0))>>2)]=$274;
      label = 53; break;
    case 53: 
      label = 61; break;
    case 54: 
      var $277=$XP;
      var $278=$277;
      var $279=HEAP32[((((114156)|0))>>2)];
      var $280=(($278)>>>(0)) >= (($279)>>>(0));
      var $281=(($280)&(1));
      var $282=($281);
      var $283=(($282)|(0))!=0;
      if ($283) { label = 55; break; } else { label = 59; break; }
    case 55: 
      var $285=$XP;
      var $286=(($285+16)|0);
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$TP;
      var $290=(($288)|(0))==(($289)|(0));
      if ($290) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $292=$R;
      var $293=$XP;
      var $294=(($293+16)|0);
      var $295=(($294)|0);
      HEAP32[(($295)>>2)]=$292;
      label = 58; break;
    case 57: 
      var $297=$R;
      var $298=$XP;
      var $299=(($298+16)|0);
      var $300=(($299+4)|0);
      HEAP32[(($300)>>2)]=$297;
      label = 58; break;
    case 58: 
      label = 60; break;
    case 59: 
      _abort();
      throw "Reached an unreachable!";
    case 60: 
      label = 61; break;
    case 61: 
      var $305=$R;
      var $306=(($305)|(0))!=0;
      if ($306) { label = 62; break; } else { label = 76; break; }
    case 62: 
      var $308=$R;
      var $309=$308;
      var $310=HEAP32[((((114156)|0))>>2)];
      var $311=(($309)>>>(0)) >= (($310)>>>(0));
      var $312=(($311)&(1));
      var $313=($312);
      var $314=(($313)|(0))!=0;
      if ($314) { label = 63; break; } else { label = 74; break; }
    case 63: 
      var $316=$XP;
      var $317=$R;
      var $318=(($317+24)|0);
      HEAP32[(($318)>>2)]=$316;
      var $319=$TP;
      var $320=(($319+16)|0);
      var $321=(($320)|0);
      var $322=HEAP32[(($321)>>2)];
      $C0=$322;
      var $323=(($322)|(0))!=0;
      if ($323) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $325=$C0;
      var $326=$325;
      var $327=HEAP32[((((114156)|0))>>2)];
      var $328=(($326)>>>(0)) >= (($327)>>>(0));
      var $329=(($328)&(1));
      var $330=($329);
      var $331=(($330)|(0))!=0;
      if ($331) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $333=$C0;
      var $334=$R;
      var $335=(($334+16)|0);
      var $336=(($335)|0);
      HEAP32[(($336)>>2)]=$333;
      var $337=$R;
      var $338=$C0;
      var $339=(($338+24)|0);
      HEAP32[(($339)>>2)]=$337;
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!";
    case 67: 
      label = 68; break;
    case 68: 
      var $343=$TP;
      var $344=(($343+16)|0);
      var $345=(($344+4)|0);
      var $346=HEAP32[(($345)>>2)];
      $C1=$346;
      var $347=(($346)|(0))!=0;
      if ($347) { label = 69; break; } else { label = 73; break; }
    case 69: 
      var $349=$C1;
      var $350=$349;
      var $351=HEAP32[((((114156)|0))>>2)];
      var $352=(($350)>>>(0)) >= (($351)>>>(0));
      var $353=(($352)&(1));
      var $354=($353);
      var $355=(($354)|(0))!=0;
      if ($355) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $357=$C1;
      var $358=$R;
      var $359=(($358+16)|0);
      var $360=(($359+4)|0);
      HEAP32[(($360)>>2)]=$357;
      var $361=$R;
      var $362=$C1;
      var $363=(($362+24)|0);
      HEAP32[(($363)>>2)]=$361;
      label = 72; break;
    case 71: 
      _abort();
      throw "Reached an unreachable!";
    case 72: 
      label = 73; break;
    case 73: 
      label = 75; break;
    case 74: 
      _abort();
      throw "Reached an unreachable!";
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 82; break;
    case 79: 
      var $373=$next;
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=$375 & 3;
      var $377=(($376)|(0))==3;
      if ($377) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $379=$psize;
      HEAP32[((((114148)|0))>>2)]=$379;
      var $380=$next;
      var $381=(($380+4)|0);
      var $382=HEAP32[(($381)>>2)];
      var $383=$382 & -2;
      HEAP32[(($381)>>2)]=$383;
      var $384=$psize;
      var $385=$384 | 1;
      var $386=$p;
      var $387=(($386+4)|0);
      HEAP32[(($387)>>2)]=$385;
      var $388=$psize;
      var $389=$p;
      var $390=$389;
      var $391=$psize;
      var $392=(($390+$391)|0);
      var $393=$392;
      var $394=(($393)|0);
      HEAP32[(($394)>>2)]=$388;
      label = 213; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      label = 212; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $401=$p;
      var $402=$401;
      var $403=$next;
      var $404=$403;
      var $405=(($402)>>>(0)) < (($404)>>>(0));
      if ($405) { label = 87; break; } else { var $413 = 0;label = 88; break; }
    case 87: 
      var $407=$next;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=$409 & 1;
      var $411=(($410)|(0))!=0;
      var $413 = $411;label = 88; break;
    case 88: 
      var $413;
      var $414=(($413)&(1));
      var $415=($414);
      var $416=(($415)|(0))!=0;
      if ($416) { label = 89; break; } else { label = 210; break; }
    case 89: 
      var $418=$next;
      var $419=(($418+4)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=$420 & 2;
      var $422=(($421)|(0))!=0;
      if ($422) { label = 171; break; } else { label = 90; break; }
    case 90: 
      var $424=$next;
      var $425=HEAP32[((((114164)|0))>>2)];
      var $426=(($424)|(0))==(($425)|(0));
      if ($426) { label = 91; break; } else { label = 96; break; }
    case 91: 
      var $428=$psize;
      var $429=HEAP32[((((114152)|0))>>2)];
      var $430=((($429)+($428))|0);
      HEAP32[((((114152)|0))>>2)]=$430;
      $tsize=$430;
      var $431=$p;
      HEAP32[((((114164)|0))>>2)]=$431;
      var $432=$tsize;
      var $433=$432 | 1;
      var $434=$p;
      var $435=(($434+4)|0);
      HEAP32[(($435)>>2)]=$433;
      var $436=$p;
      var $437=HEAP32[((((114160)|0))>>2)];
      var $438=(($436)|(0))==(($437)|(0));
      if ($438) { label = 92; break; } else { label = 93; break; }
    case 92: 
      HEAP32[((((114160)|0))>>2)]=0;
      HEAP32[((((114148)|0))>>2)]=0;
      label = 93; break;
    case 93: 
      var $441=$tsize;
      var $442=HEAP32[((((114168)|0))>>2)];
      var $443=(($441)>>>(0)) > (($442)>>>(0));
      if ($443) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $445=_sys_trim(114140, 0);
      label = 95; break;
    case 95: 
      label = 213; break;
    case 96: 
      var $448=$next;
      var $449=HEAP32[((((114160)|0))>>2)];
      var $450=(($448)|(0))==(($449)|(0));
      if ($450) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $452=$psize;
      var $453=HEAP32[((((114148)|0))>>2)];
      var $454=((($453)+($452))|0);
      HEAP32[((((114148)|0))>>2)]=$454;
      $dsize=$454;
      var $455=$p;
      HEAP32[((((114160)|0))>>2)]=$455;
      var $456=$dsize;
      var $457=$456 | 1;
      var $458=$p;
      var $459=(($458+4)|0);
      HEAP32[(($459)>>2)]=$457;
      var $460=$dsize;
      var $461=$p;
      var $462=$461;
      var $463=$dsize;
      var $464=(($462+$463)|0);
      var $465=$464;
      var $466=(($465)|0);
      HEAP32[(($466)>>2)]=$460;
      label = 213; break;
    case 98: 
      var $468=$next;
      var $469=(($468+4)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=$470 & -8;
      $nsize=$471;
      var $472=$nsize;
      var $473=$psize;
      var $474=((($473)+($472))|0);
      $psize=$474;
      var $475=$nsize;
      var $476=$475 >>> 3;
      var $477=(($476)>>>(0)) < 32;
      if ($477) { label = 99; break; } else { label = 117; break; }
    case 99: 
      var $479=$next;
      var $480=(($479+8)|0);
      var $481=HEAP32[(($480)>>2)];
      $F2=$481;
      var $482=$next;
      var $483=(($482+12)|0);
      var $484=HEAP32[(($483)>>2)];
      $B3=$484;
      var $485=$nsize;
      var $486=$485 >>> 3;
      $I4=$486;
      var $487=$F2;
      var $488=$I4;
      var $489=$488 << 1;
      var $490=((((114180)|0)+($489<<2))|0);
      var $491=$490;
      var $492=$491;
      var $493=(($487)|(0))==(($492)|(0));
      if ($493) { var $508 = 1;label = 103; break; } else { label = 100; break; }
    case 100: 
      var $495=$F2;
      var $496=$495;
      var $497=HEAP32[((((114156)|0))>>2)];
      var $498=(($496)>>>(0)) >= (($497)>>>(0));
      if ($498) { label = 101; break; } else { var $506 = 0;label = 102; break; }
    case 101: 
      var $500=$F2;
      var $501=(($500+12)|0);
      var $502=HEAP32[(($501)>>2)];
      var $503=$next;
      var $504=(($502)|(0))==(($503)|(0));
      var $506 = $504;label = 102; break;
    case 102: 
      var $506;
      var $508 = $506;label = 103; break;
    case 103: 
      var $508;
      var $509=(($508)&(1));
      var $510=($509);
      var $511=(($510)|(0))!=0;
      if ($511) { label = 104; break; } else { label = 115; break; }
    case 104: 
      var $513=$B3;
      var $514=$F2;
      var $515=(($513)|(0))==(($514)|(0));
      if ($515) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $517=$I4;
      var $518=1 << $517;
      var $519=$518 ^ -1;
      var $520=HEAP32[((((114140)|0))>>2)];
      var $521=$520 & $519;
      HEAP32[((((114140)|0))>>2)]=$521;
      label = 114; break;
    case 106: 
      var $523=$B3;
      var $524=$I4;
      var $525=$524 << 1;
      var $526=((((114180)|0)+($525<<2))|0);
      var $527=$526;
      var $528=$527;
      var $529=(($523)|(0))==(($528)|(0));
      if ($529) { var $544 = 1;label = 110; break; } else { label = 107; break; }
    case 107: 
      var $531=$B3;
      var $532=$531;
      var $533=HEAP32[((((114156)|0))>>2)];
      var $534=(($532)>>>(0)) >= (($533)>>>(0));
      if ($534) { label = 108; break; } else { var $542 = 0;label = 109; break; }
    case 108: 
      var $536=$B3;
      var $537=(($536+8)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$next;
      var $540=(($538)|(0))==(($539)|(0));
      var $542 = $540;label = 109; break;
    case 109: 
      var $542;
      var $544 = $542;label = 110; break;
    case 110: 
      var $544;
      var $545=(($544)&(1));
      var $546=($545);
      var $547=(($546)|(0))!=0;
      if ($547) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $549=$B3;
      var $550=$F2;
      var $551=(($550+12)|0);
      HEAP32[(($551)>>2)]=$549;
      var $552=$F2;
      var $553=$B3;
      var $554=(($553+8)|0);
      HEAP32[(($554)>>2)]=$552;
      label = 113; break;
    case 112: 
      _abort();
      throw "Reached an unreachable!";
    case 113: 
      label = 114; break;
    case 114: 
      label = 116; break;
    case 115: 
      _abort();
      throw "Reached an unreachable!";
    case 116: 
      label = 166; break;
    case 117: 
      var $561=$next;
      var $562=$561;
      $TP5=$562;
      var $563=$TP5;
      var $564=(($563+24)|0);
      var $565=HEAP32[(($564)>>2)];
      $XP6=$565;
      var $566=$TP5;
      var $567=(($566+12)|0);
      var $568=HEAP32[(($567)>>2)];
      var $569=$TP5;
      var $570=(($568)|(0))!=(($569)|(0));
      if ($570) { label = 118; break; } else { label = 125; break; }
    case 118: 
      var $572=$TP5;
      var $573=(($572+8)|0);
      var $574=HEAP32[(($573)>>2)];
      $F8=$574;
      var $575=$TP5;
      var $576=(($575+12)|0);
      var $577=HEAP32[(($576)>>2)];
      $R7=$577;
      var $578=$F8;
      var $579=$578;
      var $580=HEAP32[((((114156)|0))>>2)];
      var $581=(($579)>>>(0)) >= (($580)>>>(0));
      if ($581) { label = 119; break; } else { var $595 = 0;label = 121; break; }
    case 119: 
      var $583=$F8;
      var $584=(($583+12)|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=$TP5;
      var $587=(($585)|(0))==(($586)|(0));
      if ($587) { label = 120; break; } else { var $595 = 0;label = 121; break; }
    case 120: 
      var $589=$R7;
      var $590=(($589+8)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=$TP5;
      var $593=(($591)|(0))==(($592)|(0));
      var $595 = $593;label = 121; break;
    case 121: 
      var $595;
      var $596=(($595)&(1));
      var $597=($596);
      var $598=(($597)|(0))!=0;
      if ($598) { label = 122; break; } else { label = 123; break; }
    case 122: 
      var $600=$R7;
      var $601=$F8;
      var $602=(($601+12)|0);
      HEAP32[(($602)>>2)]=$600;
      var $603=$F8;
      var $604=$R7;
      var $605=(($604+8)|0);
      HEAP32[(($605)>>2)]=$603;
      label = 124; break;
    case 123: 
      _abort();
      throw "Reached an unreachable!";
    case 124: 
      label = 137; break;
    case 125: 
      var $609=$TP5;
      var $610=(($609+16)|0);
      var $611=(($610+4)|0);
      $RP9=$611;
      var $612=HEAP32[(($611)>>2)];
      $R7=$612;
      var $613=(($612)|(0))!=0;
      if ($613) { label = 127; break; } else { label = 126; break; }
    case 126: 
      var $615=$TP5;
      var $616=(($615+16)|0);
      var $617=(($616)|0);
      $RP9=$617;
      var $618=HEAP32[(($617)>>2)];
      $R7=$618;
      var $619=(($618)|(0))!=0;
      if ($619) { label = 127; break; } else { label = 136; break; }
    case 127: 
      label = 128; break;
    case 128: 
      var $622=$R7;
      var $623=(($622+16)|0);
      var $624=(($623+4)|0);
      $CP10=$624;
      var $625=HEAP32[(($624)>>2)];
      var $626=(($625)|(0))!=0;
      if ($626) { var $634 = 1;label = 130; break; } else { label = 129; break; }
    case 129: 
      var $628=$R7;
      var $629=(($628+16)|0);
      var $630=(($629)|0);
      $CP10=$630;
      var $631=HEAP32[(($630)>>2)];
      var $632=(($631)|(0))!=0;
      var $634 = $632;label = 130; break;
    case 130: 
      var $634;
      if ($634) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $636=$CP10;
      $RP9=$636;
      var $637=HEAP32[(($636)>>2)];
      $R7=$637;
      label = 128; break;
    case 132: 
      var $639=$RP9;
      var $640=$639;
      var $641=HEAP32[((((114156)|0))>>2)];
      var $642=(($640)>>>(0)) >= (($641)>>>(0));
      var $643=(($642)&(1));
      var $644=($643);
      var $645=(($644)|(0))!=0;
      if ($645) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $647=$RP9;
      HEAP32[(($647)>>2)]=0;
      label = 135; break;
    case 134: 
      _abort();
      throw "Reached an unreachable!";
    case 135: 
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      var $652=$XP6;
      var $653=(($652)|(0))!=0;
      if ($653) { label = 138; break; } else { label = 165; break; }
    case 138: 
      var $655=$TP5;
      var $656=(($655+28)|0);
      var $657=HEAP32[(($656)>>2)];
      var $658=((((114444)|0)+($657<<2))|0);
      $H11=$658;
      var $659=$TP5;
      var $660=$H11;
      var $661=HEAP32[(($660)>>2)];
      var $662=(($659)|(0))==(($661)|(0));
      if ($662) { label = 139; break; } else { label = 142; break; }
    case 139: 
      var $664=$R7;
      var $665=$H11;
      HEAP32[(($665)>>2)]=$664;
      var $666=(($664)|(0))==0;
      if ($666) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $668=$TP5;
      var $669=(($668+28)|0);
      var $670=HEAP32[(($669)>>2)];
      var $671=1 << $670;
      var $672=$671 ^ -1;
      var $673=HEAP32[((((114144)|0))>>2)];
      var $674=$673 & $672;
      HEAP32[((((114144)|0))>>2)]=$674;
      label = 141; break;
    case 141: 
      label = 149; break;
    case 142: 
      var $677=$XP6;
      var $678=$677;
      var $679=HEAP32[((((114156)|0))>>2)];
      var $680=(($678)>>>(0)) >= (($679)>>>(0));
      var $681=(($680)&(1));
      var $682=($681);
      var $683=(($682)|(0))!=0;
      if ($683) { label = 143; break; } else { label = 147; break; }
    case 143: 
      var $685=$XP6;
      var $686=(($685+16)|0);
      var $687=(($686)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=$TP5;
      var $690=(($688)|(0))==(($689)|(0));
      if ($690) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $692=$R7;
      var $693=$XP6;
      var $694=(($693+16)|0);
      var $695=(($694)|0);
      HEAP32[(($695)>>2)]=$692;
      label = 146; break;
    case 145: 
      var $697=$R7;
      var $698=$XP6;
      var $699=(($698+16)|0);
      var $700=(($699+4)|0);
      HEAP32[(($700)>>2)]=$697;
      label = 146; break;
    case 146: 
      label = 148; break;
    case 147: 
      _abort();
      throw "Reached an unreachable!";
    case 148: 
      label = 149; break;
    case 149: 
      var $705=$R7;
      var $706=(($705)|(0))!=0;
      if ($706) { label = 150; break; } else { label = 164; break; }
    case 150: 
      var $708=$R7;
      var $709=$708;
      var $710=HEAP32[((((114156)|0))>>2)];
      var $711=(($709)>>>(0)) >= (($710)>>>(0));
      var $712=(($711)&(1));
      var $713=($712);
      var $714=(($713)|(0))!=0;
      if ($714) { label = 151; break; } else { label = 162; break; }
    case 151: 
      var $716=$XP6;
      var $717=$R7;
      var $718=(($717+24)|0);
      HEAP32[(($718)>>2)]=$716;
      var $719=$TP5;
      var $720=(($719+16)|0);
      var $721=(($720)|0);
      var $722=HEAP32[(($721)>>2)];
      $C012=$722;
      var $723=(($722)|(0))!=0;
      if ($723) { label = 152; break; } else { label = 156; break; }
    case 152: 
      var $725=$C012;
      var $726=$725;
      var $727=HEAP32[((((114156)|0))>>2)];
      var $728=(($726)>>>(0)) >= (($727)>>>(0));
      var $729=(($728)&(1));
      var $730=($729);
      var $731=(($730)|(0))!=0;
      if ($731) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $733=$C012;
      var $734=$R7;
      var $735=(($734+16)|0);
      var $736=(($735)|0);
      HEAP32[(($736)>>2)]=$733;
      var $737=$R7;
      var $738=$C012;
      var $739=(($738+24)|0);
      HEAP32[(($739)>>2)]=$737;
      label = 155; break;
    case 154: 
      _abort();
      throw "Reached an unreachable!";
    case 155: 
      label = 156; break;
    case 156: 
      var $743=$TP5;
      var $744=(($743+16)|0);
      var $745=(($744+4)|0);
      var $746=HEAP32[(($745)>>2)];
      $C113=$746;
      var $747=(($746)|(0))!=0;
      if ($747) { label = 157; break; } else { label = 161; break; }
    case 157: 
      var $749=$C113;
      var $750=$749;
      var $751=HEAP32[((((114156)|0))>>2)];
      var $752=(($750)>>>(0)) >= (($751)>>>(0));
      var $753=(($752)&(1));
      var $754=($753);
      var $755=(($754)|(0))!=0;
      if ($755) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $757=$C113;
      var $758=$R7;
      var $759=(($758+16)|0);
      var $760=(($759+4)|0);
      HEAP32[(($760)>>2)]=$757;
      var $761=$R7;
      var $762=$C113;
      var $763=(($762+24)|0);
      HEAP32[(($763)>>2)]=$761;
      label = 160; break;
    case 159: 
      _abort();
      throw "Reached an unreachable!";
    case 160: 
      label = 161; break;
    case 161: 
      label = 163; break;
    case 162: 
      _abort();
      throw "Reached an unreachable!";
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      var $772=$psize;
      var $773=$772 | 1;
      var $774=$p;
      var $775=(($774+4)|0);
      HEAP32[(($775)>>2)]=$773;
      var $776=$psize;
      var $777=$p;
      var $778=$777;
      var $779=$psize;
      var $780=(($778+$779)|0);
      var $781=$780;
      var $782=(($781)|0);
      HEAP32[(($782)>>2)]=$776;
      var $783=$p;
      var $784=HEAP32[((((114160)|0))>>2)];
      var $785=(($783)|(0))==(($784)|(0));
      if ($785) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $787=$psize;
      HEAP32[((((114148)|0))>>2)]=$787;
      label = 213; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 172; break;
    case 171: 
      var $792=$next;
      var $793=(($792+4)|0);
      var $794=HEAP32[(($793)>>2)];
      var $795=$794 & -2;
      HEAP32[(($793)>>2)]=$795;
      var $796=$psize;
      var $797=$796 | 1;
      var $798=$p;
      var $799=(($798+4)|0);
      HEAP32[(($799)>>2)]=$797;
      var $800=$psize;
      var $801=$p;
      var $802=$801;
      var $803=$psize;
      var $804=(($802+$803)|0);
      var $805=$804;
      var $806=(($805)|0);
      HEAP32[(($806)>>2)]=$800;
      label = 172; break;
    case 172: 
      var $808=$psize;
      var $809=$808 >>> 3;
      var $810=(($809)>>>(0)) < 32;
      if ($810) { label = 173; break; } else { label = 180; break; }
    case 173: 
      var $812=$psize;
      var $813=$812 >>> 3;
      $I14=$813;
      var $814=$I14;
      var $815=$814 << 1;
      var $816=((((114180)|0)+($815<<2))|0);
      var $817=$816;
      var $818=$817;
      $B15=$818;
      var $819=$B15;
      $F16=$819;
      var $820=HEAP32[((((114140)|0))>>2)];
      var $821=$I14;
      var $822=1 << $821;
      var $823=$820 & $822;
      var $824=(($823)|(0))!=0;
      if ($824) { label = 175; break; } else { label = 174; break; }
    case 174: 
      var $826=$I14;
      var $827=1 << $826;
      var $828=HEAP32[((((114140)|0))>>2)];
      var $829=$828 | $827;
      HEAP32[((((114140)|0))>>2)]=$829;
      label = 179; break;
    case 175: 
      var $831=$B15;
      var $832=(($831+8)|0);
      var $833=HEAP32[(($832)>>2)];
      var $834=$833;
      var $835=HEAP32[((((114156)|0))>>2)];
      var $836=(($834)>>>(0)) >= (($835)>>>(0));
      var $837=(($836)&(1));
      var $838=($837);
      var $839=(($838)|(0))!=0;
      if ($839) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $841=$B15;
      var $842=(($841+8)|0);
      var $843=HEAP32[(($842)>>2)];
      $F16=$843;
      label = 178; break;
    case 177: 
      _abort();
      throw "Reached an unreachable!";
    case 178: 
      label = 179; break;
    case 179: 
      var $847=$p;
      var $848=$B15;
      var $849=(($848+8)|0);
      HEAP32[(($849)>>2)]=$847;
      var $850=$p;
      var $851=$F16;
      var $852=(($851+12)|0);
      HEAP32[(($852)>>2)]=$850;
      var $853=$F16;
      var $854=$p;
      var $855=(($854+8)|0);
      HEAP32[(($855)>>2)]=$853;
      var $856=$B15;
      var $857=$p;
      var $858=(($857+12)|0);
      HEAP32[(($858)>>2)]=$856;
      label = 209; break;
    case 180: 
      var $860=$p;
      var $861=$860;
      $tp=$861;
      var $862=$psize;
      var $863=$862 >>> 8;
      $X=$863;
      var $864=$X;
      var $865=(($864)|(0))==0;
      if ($865) { label = 181; break; } else { label = 182; break; }
    case 181: 
      $I18=0;
      label = 186; break;
    case 182: 
      var $868=$X;
      var $869=(($868)>>>(0)) > 65535;
      if ($869) { label = 183; break; } else { label = 184; break; }
    case 183: 
      $I18=31;
      label = 185; break;
    case 184: 
      var $872=$X;
      $Y=$872;
      var $873=$Y;
      var $874=((($873)-(256))|0);
      var $875=$874 >>> 16;
      var $876=$875 & 8;
      $N=$876;
      var $877=$N;
      var $878=$Y;
      var $879=$878 << $877;
      $Y=$879;
      var $880=((($879)-(4096))|0);
      var $881=$880 >>> 16;
      var $882=$881 & 4;
      $K=$882;
      var $883=$K;
      var $884=$N;
      var $885=((($884)+($883))|0);
      $N=$885;
      var $886=$K;
      var $887=$Y;
      var $888=$887 << $886;
      $Y=$888;
      var $889=((($888)-(16384))|0);
      var $890=$889 >>> 16;
      var $891=$890 & 2;
      $K=$891;
      var $892=$N;
      var $893=((($892)+($891))|0);
      $N=$893;
      var $894=$N;
      var $895=(((14)-($894))|0);
      var $896=$K;
      var $897=$Y;
      var $898=$897 << $896;
      $Y=$898;
      var $899=$898 >>> 15;
      var $900=((($895)+($899))|0);
      $K=$900;
      var $901=$K;
      var $902=$901 << 1;
      var $903=$psize;
      var $904=$K;
      var $905=((($904)+(7))|0);
      var $906=$903 >>> (($905)>>>(0));
      var $907=$906 & 1;
      var $908=((($902)+($907))|0);
      $I18=$908;
      label = 185; break;
    case 185: 
      label = 186; break;
    case 186: 
      var $911=$I18;
      var $912=((((114444)|0)+($911<<2))|0);
      $H17=$912;
      var $913=$I18;
      var $914=$tp;
      var $915=(($914+28)|0);
      HEAP32[(($915)>>2)]=$913;
      var $916=$tp;
      var $917=(($916+16)|0);
      var $918=(($917+4)|0);
      HEAP32[(($918)>>2)]=0;
      var $919=$tp;
      var $920=(($919+16)|0);
      var $921=(($920)|0);
      HEAP32[(($921)>>2)]=0;
      var $922=HEAP32[((((114144)|0))>>2)];
      var $923=$I18;
      var $924=1 << $923;
      var $925=$922 & $924;
      var $926=(($925)|(0))!=0;
      if ($926) { label = 188; break; } else { label = 187; break; }
    case 187: 
      var $928=$I18;
      var $929=1 << $928;
      var $930=HEAP32[((((114144)|0))>>2)];
      var $931=$930 | $929;
      HEAP32[((((114144)|0))>>2)]=$931;
      var $932=$tp;
      var $933=$H17;
      HEAP32[(($933)>>2)]=$932;
      var $934=$H17;
      var $935=$934;
      var $936=$tp;
      var $937=(($936+24)|0);
      HEAP32[(($937)>>2)]=$935;
      var $938=$tp;
      var $939=$tp;
      var $940=(($939+12)|0);
      HEAP32[(($940)>>2)]=$938;
      var $941=$tp;
      var $942=(($941+8)|0);
      HEAP32[(($942)>>2)]=$938;
      label = 206; break;
    case 188: 
      var $944=$H17;
      var $945=HEAP32[(($944)>>2)];
      $T=$945;
      var $946=$psize;
      var $947=$I18;
      var $948=(($947)|(0))==31;
      if ($948) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $957 = 0;label = 191; break;
    case 190: 
      var $951=$I18;
      var $952=$951 >>> 1;
      var $953=((($952)+(8))|0);
      var $954=((($953)-(2))|0);
      var $955=(((31)-($954))|0);
      var $957 = $955;label = 191; break;
    case 191: 
      var $957;
      var $958=$946 << $957;
      $K19=$958;
      label = 192; break;
    case 192: 
      var $960=$T;
      var $961=(($960+4)|0);
      var $962=HEAP32[(($961)>>2)];
      var $963=$962 & -8;
      var $964=$psize;
      var $965=(($963)|(0))!=(($964)|(0));
      if ($965) { label = 193; break; } else { label = 199; break; }
    case 193: 
      var $967=$K19;
      var $968=$967 >>> 31;
      var $969=$968 & 1;
      var $970=$T;
      var $971=(($970+16)|0);
      var $972=(($971+($969<<2))|0);
      $C=$972;
      var $973=$K19;
      var $974=$973 << 1;
      $K19=$974;
      var $975=$C;
      var $976=HEAP32[(($975)>>2)];
      var $977=(($976)|(0))!=0;
      if ($977) { label = 194; break; } else { label = 195; break; }
    case 194: 
      var $979=$C;
      var $980=HEAP32[(($979)>>2)];
      $T=$980;
      label = 198; break;
    case 195: 
      var $982=$C;
      var $983=$982;
      var $984=HEAP32[((((114156)|0))>>2)];
      var $985=(($983)>>>(0)) >= (($984)>>>(0));
      var $986=(($985)&(1));
      var $987=($986);
      var $988=(($987)|(0))!=0;
      if ($988) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $990=$tp;
      var $991=$C;
      HEAP32[(($991)>>2)]=$990;
      var $992=$T;
      var $993=$tp;
      var $994=(($993+24)|0);
      HEAP32[(($994)>>2)]=$992;
      var $995=$tp;
      var $996=$tp;
      var $997=(($996+12)|0);
      HEAP32[(($997)>>2)]=$995;
      var $998=$tp;
      var $999=(($998+8)|0);
      HEAP32[(($999)>>2)]=$995;
      label = 205; break;
    case 197: 
      _abort();
      throw "Reached an unreachable!";
    case 198: 
      label = 204; break;
    case 199: 
      var $1003=$T;
      var $1004=(($1003+8)|0);
      var $1005=HEAP32[(($1004)>>2)];
      $F20=$1005;
      var $1006=$T;
      var $1007=$1006;
      var $1008=HEAP32[((((114156)|0))>>2)];
      var $1009=(($1007)>>>(0)) >= (($1008)>>>(0));
      if ($1009) { label = 200; break; } else { var $1016 = 0;label = 201; break; }
    case 200: 
      var $1011=$F20;
      var $1012=$1011;
      var $1013=HEAP32[((((114156)|0))>>2)];
      var $1014=(($1012)>>>(0)) >= (($1013)>>>(0));
      var $1016 = $1014;label = 201; break;
    case 201: 
      var $1016;
      var $1017=(($1016)&(1));
      var $1018=($1017);
      var $1019=(($1018)|(0))!=0;
      if ($1019) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $1021=$tp;
      var $1022=$F20;
      var $1023=(($1022+12)|0);
      HEAP32[(($1023)>>2)]=$1021;
      var $1024=$T;
      var $1025=(($1024+8)|0);
      HEAP32[(($1025)>>2)]=$1021;
      var $1026=$F20;
      var $1027=$tp;
      var $1028=(($1027+8)|0);
      HEAP32[(($1028)>>2)]=$1026;
      var $1029=$T;
      var $1030=$tp;
      var $1031=(($1030+12)|0);
      HEAP32[(($1031)>>2)]=$1029;
      var $1032=$tp;
      var $1033=(($1032+24)|0);
      HEAP32[(($1033)>>2)]=0;
      label = 205; break;
    case 203: 
      _abort();
      throw "Reached an unreachable!";
    case 204: 
      label = 192; break;
    case 205: 
      label = 206; break;
    case 206: 
      var $1038=HEAP32[((((114172)|0))>>2)];
      var $1039=((($1038)-(1))|0);
      HEAP32[((((114172)|0))>>2)]=$1039;
      var $1040=(($1039)|(0))==0;
      if ($1040) { label = 207; break; } else { label = 208; break; }
    case 207: 
      var $1042=_release_unused_segments(114140);
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 213; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      _abort();
      throw "Reached an unreachable!";
    case 213: 
      label = 214; break;
    case 214: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _sys_trim($m, $pad) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0;
      var $3=HEAP32[((((79956)|0))>>2)];
      var $4=(($3)|(0))!=0;
      if ($4) { var $9 = 1;label = 3; break; } else { label = 2; break; }
    case 2: 
      var $6=_init_mparams();
      var $7=(($6)|(0))!=0;
      var $9 = $7;label = 3; break;
    case 3: 
      var $9;
      var $10=(($9)&(1));
      var $11=$2;
      var $12=(($11)>>>(0)) < 4294967232;
      if ($12) { label = 4; break; } else { label = 25; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 5; break; } else { label = 25; break; }
    case 5: 
      var $19=$2;
      var $20=((($19)+(40))|0);
      $2=$20;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($23)>>>(0)) > (($24)>>>(0));
      if ($25) { label = 6; break; } else { label = 21; break; }
    case 6: 
      var $27=HEAP32[((((79964)|0))>>2)];
      $unit=$27;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=((($30)-($31))|0);
      var $33=$unit;
      var $34=((($33)-(1))|0);
      var $35=((($32)+($34))|0);
      var $36=$unit;
      var $37=Math.floor(((($35)>>>(0)))/((($36)>>>(0))));
      var $38=((($37)-(1))|0);
      var $39=$unit;
      var $40=Math.imul($38,$39);
      $extra=$40;
      var $41=$1;
      var $42=$1;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_segment_holding($41, $45);
      $sp=$46;
      var $47=$sp;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 8;
      var $51=(($50)|(0))!=0;
      if ($51) { label = 18; break; } else { label = 7; break; }
    case 7: 
      var $53=$sp;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 0;
      var $57=(($56)|(0))!=0;
      if ($57) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 17; break;
    case 9: 
      var $60=$extra;
      var $61=(($60)>>>(0)) >= 2147483647;
      if ($61) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $63=$unit;
      var $64=(((-2147483648)-($63))|0);
      $extra=$64;
      label = 11; break;
    case 11: 
      var $66=_sbrk(0);
      $old_br=$66;
      var $67=$old_br;
      var $68=$sp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$sp;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=(($67)|(0))==(($74)|(0));
      if ($75) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $77=$extra;
      var $78=(((-$77))|0);
      var $79=_sbrk($78);
      $rel_br=$79;
      var $80=_sbrk(0);
      $new_br=$80;
      var $81=$rel_br;
      var $82=(($81)|(0))!=-1;
      if ($82) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $84=$new_br;
      var $85=$old_br;
      var $86=(($84)>>>(0)) < (($85)>>>(0));
      if ($86) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $88=$old_br;
      var $89=$new_br;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      $released=$92;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $97=$released;
      var $98=(($97)|(0))!=0;
      if ($98) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $100=$released;
      var $101=$sp;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-($100))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$released;
      var $106=$1;
      var $107=(($106+432)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-($105))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$1;
      var $111=$1;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$1;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$released;
      var $118=((($116)-($117))|0);
      _init_top($110, $113, $118);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $121=$released;
      var $122=(($121)|(0))==0;
      if ($122) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $124=$1;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)>>>(0)) > (($129)>>>(0));
      if ($130) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $132=$1;
      var $133=(($132+28)|0);
      HEAP32[(($133)>>2)]=-1;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $136=$released;
      var $137=(($136)|(0))!=0;
      var $138=$137 ? 1 : 0;
      return $138;
    default: assert(0, "bad label: " + label);
  }
}
function _realloc($oldmem, $bytes) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $mem;
      var $nb;
      var $oldp;
      var $m;
      var $newp;
      var $oc;
      $1=$oldmem;
      $2=$bytes;
      $mem=0;
      var $3=$1;
      var $4=(($3)|(0))==0;
      if ($4) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $6=$2;
      var $7=_malloc($6);
      $mem=$7;
      label = 18; break;
    case 3: 
      var $9=$2;
      var $10=(($9)>>>(0)) >= 4294967232;
      if ($10) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $12=___errno_location();
      HEAP32[(($12)>>2)]=12;
      label = 17; break;
    case 5: 
      var $14=$2;
      var $15=(($14)>>>(0)) < 11;
      if ($15) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23 = 16;label = 8; break;
    case 7: 
      var $18=$2;
      var $19=((($18)+(4))|0);
      var $20=((($19)+(7))|0);
      var $21=$20 & -8;
      var $23 = $21;label = 8; break;
    case 8: 
      var $23;
      $nb=$23;
      var $24=$1;
      var $25=((($24)-(8))|0);
      var $26=$25;
      $oldp=$26;
      $m=114140;
      var $27=$m;
      var $28=$oldp;
      var $29=$nb;
      var $30=_try_realloc_chunk($27, $28, $29, 1);
      $newp=$30;
      var $31=$newp;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $34=$newp;
      var $35=$34;
      var $36=(($35+8)|0);
      $mem=$36;
      label = 16; break;
    case 10: 
      var $38=$2;
      var $39=_malloc($38);
      $mem=$39;
      var $40=$mem;
      var $41=(($40)|(0))!=0;
      if ($41) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $43=$oldp;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & -8;
      var $47=$oldp;
      var $48=(($47+4)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 3;
      var $51=(($50)|(0))==0;
      var $52=$51 ? 8 : 4;
      var $53=((($46)-($52))|0);
      $oc=$53;
      var $54=$mem;
      var $55=$1;
      var $56=$oc;
      var $57=$2;
      var $58=(($56)>>>(0)) < (($57)>>>(0));
      if ($58) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $60=$oc;
      var $64 = $60;label = 14; break;
    case 13: 
      var $62=$2;
      var $64 = $62;label = 14; break;
    case 14: 
      var $64;
      assert($64 % 1 === 0);_memcpy($54, $55, $64);
      var $65=$1;
      _free($65);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $70=$mem;
      return $70;
    default: assert(0, "bad label: " + label);
  }
}
Module["_realloc"] = _realloc;
function _release_unused_segments($m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0;
      $nsegs=0;
      var $2=$1;
      var $3=(($2+448)|0);
      $pred=$3;
      var $4=$pred;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 2; break;
    case 2: 
      var $8=$sp;
      var $9=(($8)|(0))!=0;
      if ($9) { label = 3; break; } else { label = 90; break; }
    case 3: 
      var $11=$sp;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      var $14=$sp;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $size=$16;
      var $17=$sp;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $next=$19;
      var $20=$nsegs;
      var $21=((($20)+(1))|0);
      $nsegs=$21;
      var $22=$sp;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 0;
      var $26=(($25)|(0))!=0;
      if ($26) { label = 4; break; } else { label = 89; break; }
    case 4: 
      var $28=$sp;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 8;
      var $32=(($31)|(0))!=0;
      if ($32) { label = 89; break; } else { label = 5; break; }
    case 5: 
      var $34=$base;
      var $35=$base;
      var $36=(($35+8)|0);
      var $37=$36;
      var $38=$37 & 7;
      var $39=(($38)|(0))==0;
      if ($39) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $49 = 0;label = 8; break;
    case 7: 
      var $42=$base;
      var $43=(($42+8)|0);
      var $44=$43;
      var $45=$44 & 7;
      var $46=(((8)-($45))|0);
      var $47=$46 & 7;
      var $49 = $47;label = 8; break;
    case 8: 
      var $49;
      var $50=(($34+$49)|0);
      var $51=$50;
      $p=$51;
      var $52=$p;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -8;
      $psize=$55;
      var $56=$p;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & 3;
      var $60=(($59)|(0))!=1;
      if ($60) { label = 88; break; } else { label = 9; break; }
    case 9: 
      var $62=$p;
      var $63=$62;
      var $64=$psize;
      var $65=(($63+$64)|0);
      var $66=$base;
      var $67=$size;
      var $68=(($66+$67)|0);
      var $69=((($68)-(40))|0);
      var $70=(($65)>>>(0)) >= (($69)>>>(0));
      if ($70) { label = 10; break; } else { label = 88; break; }
    case 10: 
      var $72=$p;
      var $73=$72;
      $tp=$73;
      var $74=$p;
      var $75=$1;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|(0))==(($77)|(0));
      if ($78) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $80=$1;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$1;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      label = 61; break;
    case 12: 
      var $85=$tp;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      $XP=$87;
      var $88=$tp;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$tp;
      var $92=(($90)|(0))!=(($91)|(0));
      if ($92) { label = 13; break; } else { label = 20; break; }
    case 13: 
      var $94=$tp;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      $F=$96;
      var $97=$tp;
      var $98=(($97+12)|0);
      var $99=HEAP32[(($98)>>2)];
      $R=$99;
      var $100=$F;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>(0)) >= (($104)>>>(0));
      if ($105) { label = 14; break; } else { var $119 = 0;label = 16; break; }
    case 14: 
      var $107=$F;
      var $108=(($107+12)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=$tp;
      var $111=(($109)|(0))==(($110)|(0));
      if ($111) { label = 15; break; } else { var $119 = 0;label = 16; break; }
    case 15: 
      var $113=$R;
      var $114=(($113+8)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$tp;
      var $117=(($115)|(0))==(($116)|(0));
      var $119 = $117;label = 16; break;
    case 16: 
      var $119;
      var $120=(($119)&(1));
      var $121=($120);
      var $122=(($121)|(0))!=0;
      if ($122) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $124=$R;
      var $125=$F;
      var $126=(($125+12)|0);
      HEAP32[(($126)>>2)]=$124;
      var $127=$F;
      var $128=$R;
      var $129=(($128+8)|0);
      HEAP32[(($129)>>2)]=$127;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!";
    case 19: 
      label = 32; break;
    case 20: 
      var $133=$tp;
      var $134=(($133+16)|0);
      var $135=(($134+4)|0);
      $RP=$135;
      var $136=HEAP32[(($135)>>2)];
      $R=$136;
      var $137=(($136)|(0))!=0;
      if ($137) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $139=$tp;
      var $140=(($139+16)|0);
      var $141=(($140)|0);
      $RP=$141;
      var $142=HEAP32[(($141)>>2)];
      $R=$142;
      var $143=(($142)|(0))!=0;
      if ($143) { label = 22; break; } else { label = 31; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $146=$R;
      var $147=(($146+16)|0);
      var $148=(($147+4)|0);
      $CP=$148;
      var $149=HEAP32[(($148)>>2)];
      var $150=(($149)|(0))!=0;
      if ($150) { var $158 = 1;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $152=$R;
      var $153=(($152+16)|0);
      var $154=(($153)|0);
      $CP=$154;
      var $155=HEAP32[(($154)>>2)];
      var $156=(($155)|(0))!=0;
      var $158 = $156;label = 25; break;
    case 25: 
      var $158;
      if ($158) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $160=$CP;
      $RP=$160;
      var $161=HEAP32[(($160)>>2)];
      $R=$161;
      label = 23; break;
    case 27: 
      var $163=$RP;
      var $164=$163;
      var $165=$1;
      var $166=(($165+16)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=(($164)>>>(0)) >= (($167)>>>(0));
      var $169=(($168)&(1));
      var $170=($169);
      var $171=(($170)|(0))!=0;
      if ($171) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $173=$RP;
      HEAP32[(($173)>>2)]=0;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!";
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $178=$XP;
      var $179=(($178)|(0))!=0;
      if ($179) { label = 33; break; } else { label = 60; break; }
    case 33: 
      var $181=$tp;
      var $182=(($181+28)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$1;
      var $185=(($184+304)|0);
      var $186=(($185+($183<<2))|0);
      $H=$186;
      var $187=$tp;
      var $188=$H;
      var $189=HEAP32[(($188)>>2)];
      var $190=(($187)|(0))==(($189)|(0));
      if ($190) { label = 34; break; } else { label = 37; break; }
    case 34: 
      var $192=$R;
      var $193=$H;
      HEAP32[(($193)>>2)]=$192;
      var $194=(($192)|(0))==0;
      if ($194) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $196=$tp;
      var $197=(($196+28)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=1 << $198;
      var $200=$199 ^ -1;
      var $201=$1;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & $200;
      HEAP32[(($202)>>2)]=$204;
      label = 36; break;
    case 36: 
      label = 44; break;
    case 37: 
      var $207=$XP;
      var $208=$207;
      var $209=$1;
      var $210=(($209+16)|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=(($208)>>>(0)) >= (($211)>>>(0));
      var $213=(($212)&(1));
      var $214=($213);
      var $215=(($214)|(0))!=0;
      if ($215) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $217=$XP;
      var $218=(($217+16)|0);
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$tp;
      var $222=(($220)|(0))==(($221)|(0));
      if ($222) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $224=$R;
      var $225=$XP;
      var $226=(($225+16)|0);
      var $227=(($226)|0);
      HEAP32[(($227)>>2)]=$224;
      label = 41; break;
    case 40: 
      var $229=$R;
      var $230=$XP;
      var $231=(($230+16)|0);
      var $232=(($231+4)|0);
      HEAP32[(($232)>>2)]=$229;
      label = 41; break;
    case 41: 
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!";
    case 43: 
      label = 44; break;
    case 44: 
      var $237=$R;
      var $238=(($237)|(0))!=0;
      if ($238) { label = 45; break; } else { label = 59; break; }
    case 45: 
      var $240=$R;
      var $241=$240;
      var $242=$1;
      var $243=(($242+16)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=(($241)>>>(0)) >= (($244)>>>(0));
      var $246=(($245)&(1));
      var $247=($246);
      var $248=(($247)|(0))!=0;
      if ($248) { label = 46; break; } else { label = 57; break; }
    case 46: 
      var $250=$XP;
      var $251=$R;
      var $252=(($251+24)|0);
      HEAP32[(($252)>>2)]=$250;
      var $253=$tp;
      var $254=(($253+16)|0);
      var $255=(($254)|0);
      var $256=HEAP32[(($255)>>2)];
      $C0=$256;
      var $257=(($256)|(0))!=0;
      if ($257) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $259=$C0;
      var $260=$259;
      var $261=$1;
      var $262=(($261+16)|0);
      var $263=HEAP32[(($262)>>2)];
      var $264=(($260)>>>(0)) >= (($263)>>>(0));
      var $265=(($264)&(1));
      var $266=($265);
      var $267=(($266)|(0))!=0;
      if ($267) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $269=$C0;
      var $270=$R;
      var $271=(($270+16)|0);
      var $272=(($271)|0);
      HEAP32[(($272)>>2)]=$269;
      var $273=$R;
      var $274=$C0;
      var $275=(($274+24)|0);
      HEAP32[(($275)>>2)]=$273;
      label = 50; break;
    case 49: 
      _abort();
      throw "Reached an unreachable!";
    case 50: 
      label = 51; break;
    case 51: 
      var $279=$tp;
      var $280=(($279+16)|0);
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      $C1=$282;
      var $283=(($282)|(0))!=0;
      if ($283) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $285=$C1;
      var $286=$285;
      var $287=$1;
      var $288=(($287+16)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=(($286)>>>(0)) >= (($289)>>>(0));
      var $291=(($290)&(1));
      var $292=($291);
      var $293=(($292)|(0))!=0;
      if ($293) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $295=$C1;
      var $296=$R;
      var $297=(($296+16)|0);
      var $298=(($297+4)|0);
      HEAP32[(($298)>>2)]=$295;
      var $299=$R;
      var $300=$C1;
      var $301=(($300+24)|0);
      HEAP32[(($301)>>2)]=$299;
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!";
    case 55: 
      label = 56; break;
    case 56: 
      label = 58; break;
    case 57: 
      _abort();
      throw "Reached an unreachable!";
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $310=$psize;
      var $311=$310 >>> 8;
      $X=$311;
      var $312=$X;
      var $313=(($312)|(0))==0;
      if ($313) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=0;
      label = 67; break;
    case 63: 
      var $316=$X;
      var $317=(($316)>>>(0)) > 65535;
      if ($317) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $I=31;
      label = 66; break;
    case 65: 
      var $320=$X;
      $Y=$320;
      var $321=$Y;
      var $322=((($321)-(256))|0);
      var $323=$322 >>> 16;
      var $324=$323 & 8;
      $N=$324;
      var $325=$N;
      var $326=$Y;
      var $327=$326 << $325;
      $Y=$327;
      var $328=((($327)-(4096))|0);
      var $329=$328 >>> 16;
      var $330=$329 & 4;
      $K=$330;
      var $331=$K;
      var $332=$N;
      var $333=((($332)+($331))|0);
      $N=$333;
      var $334=$K;
      var $335=$Y;
      var $336=$335 << $334;
      $Y=$336;
      var $337=((($336)-(16384))|0);
      var $338=$337 >>> 16;
      var $339=$338 & 2;
      $K=$339;
      var $340=$N;
      var $341=((($340)+($339))|0);
      $N=$341;
      var $342=$N;
      var $343=(((14)-($342))|0);
      var $344=$K;
      var $345=$Y;
      var $346=$345 << $344;
      $Y=$346;
      var $347=$346 >>> 15;
      var $348=((($343)+($347))|0);
      $K=$348;
      var $349=$K;
      var $350=$349 << 1;
      var $351=$psize;
      var $352=$K;
      var $353=((($352)+(7))|0);
      var $354=$351 >>> (($353)>>>(0));
      var $355=$354 & 1;
      var $356=((($350)+($355))|0);
      $I=$356;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $359=$I;
      var $360=$1;
      var $361=(($360+304)|0);
      var $362=(($361+($359<<2))|0);
      $H1=$362;
      var $363=$I;
      var $364=$tp;
      var $365=(($364+28)|0);
      HEAP32[(($365)>>2)]=$363;
      var $366=$tp;
      var $367=(($366+16)|0);
      var $368=(($367+4)|0);
      HEAP32[(($368)>>2)]=0;
      var $369=$tp;
      var $370=(($369+16)|0);
      var $371=(($370)|0);
      HEAP32[(($371)>>2)]=0;
      var $372=$1;
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=$I;
      var $376=1 << $375;
      var $377=$374 & $376;
      var $378=(($377)|(0))!=0;
      if ($378) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $380=$I;
      var $381=1 << $380;
      var $382=$1;
      var $383=(($382+4)|0);
      var $384=HEAP32[(($383)>>2)];
      var $385=$384 | $381;
      HEAP32[(($383)>>2)]=$385;
      var $386=$tp;
      var $387=$H1;
      HEAP32[(($387)>>2)]=$386;
      var $388=$H1;
      var $389=$388;
      var $390=$tp;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=$389;
      var $392=$tp;
      var $393=$tp;
      var $394=(($393+12)|0);
      HEAP32[(($394)>>2)]=$392;
      var $395=$tp;
      var $396=(($395+8)|0);
      HEAP32[(($396)>>2)]=$392;
      label = 87; break;
    case 69: 
      var $398=$H1;
      var $399=HEAP32[(($398)>>2)];
      $T=$399;
      var $400=$psize;
      var $401=$I;
      var $402=(($401)|(0))==31;
      if ($402) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $411 = 0;label = 72; break;
    case 71: 
      var $405=$I;
      var $406=$405 >>> 1;
      var $407=((($406)+(8))|0);
      var $408=((($407)-(2))|0);
      var $409=(((31)-($408))|0);
      var $411 = $409;label = 72; break;
    case 72: 
      var $411;
      var $412=$400 << $411;
      $K2=$412;
      label = 73; break;
    case 73: 
      var $414=$T;
      var $415=(($414+4)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=$416 & -8;
      var $418=$psize;
      var $419=(($417)|(0))!=(($418)|(0));
      if ($419) { label = 74; break; } else { label = 80; break; }
    case 74: 
      var $421=$K2;
      var $422=$421 >>> 31;
      var $423=$422 & 1;
      var $424=$T;
      var $425=(($424+16)|0);
      var $426=(($425+($423<<2))|0);
      $C=$426;
      var $427=$K2;
      var $428=$427 << 1;
      $K2=$428;
      var $429=$C;
      var $430=HEAP32[(($429)>>2)];
      var $431=(($430)|(0))!=0;
      if ($431) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $433=$C;
      var $434=HEAP32[(($433)>>2)];
      $T=$434;
      label = 79; break;
    case 76: 
      var $436=$C;
      var $437=$436;
      var $438=$1;
      var $439=(($438+16)|0);
      var $440=HEAP32[(($439)>>2)];
      var $441=(($437)>>>(0)) >= (($440)>>>(0));
      var $442=(($441)&(1));
      var $443=($442);
      var $444=(($443)|(0))!=0;
      if ($444) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $446=$tp;
      var $447=$C;
      HEAP32[(($447)>>2)]=$446;
      var $448=$T;
      var $449=$tp;
      var $450=(($449+24)|0);
      HEAP32[(($450)>>2)]=$448;
      var $451=$tp;
      var $452=$tp;
      var $453=(($452+12)|0);
      HEAP32[(($453)>>2)]=$451;
      var $454=$tp;
      var $455=(($454+8)|0);
      HEAP32[(($455)>>2)]=$451;
      label = 86; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!";
    case 79: 
      label = 85; break;
    case 80: 
      var $459=$T;
      var $460=(($459+8)|0);
      var $461=HEAP32[(($460)>>2)];
      $F3=$461;
      var $462=$T;
      var $463=$462;
      var $464=$1;
      var $465=(($464+16)|0);
      var $466=HEAP32[(($465)>>2)];
      var $467=(($463)>>>(0)) >= (($466)>>>(0));
      if ($467) { label = 81; break; } else { var $476 = 0;label = 82; break; }
    case 81: 
      var $469=$F3;
      var $470=$469;
      var $471=$1;
      var $472=(($471+16)|0);
      var $473=HEAP32[(($472)>>2)];
      var $474=(($470)>>>(0)) >= (($473)>>>(0));
      var $476 = $474;label = 82; break;
    case 82: 
      var $476;
      var $477=(($476)&(1));
      var $478=($477);
      var $479=(($478)|(0))!=0;
      if ($479) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $481=$tp;
      var $482=$F3;
      var $483=(($482+12)|0);
      HEAP32[(($483)>>2)]=$481;
      var $484=$T;
      var $485=(($484+8)|0);
      HEAP32[(($485)>>2)]=$481;
      var $486=$F3;
      var $487=$tp;
      var $488=(($487+8)|0);
      HEAP32[(($488)>>2)]=$486;
      var $489=$T;
      var $490=$tp;
      var $491=(($490+12)|0);
      HEAP32[(($491)>>2)]=$489;
      var $492=$tp;
      var $493=(($492+24)|0);
      HEAP32[(($493)>>2)]=0;
      label = 86; break;
    case 84: 
      _abort();
      throw "Reached an unreachable!";
    case 85: 
      label = 73; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $500=$sp;
      $pred=$500;
      var $501=$next;
      $sp=$501;
      label = 2; break;
    case 90: 
      var $503=$nsegs;
      var $504=(($503)>>>(0)) > 4294967295;
      if ($504) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $506=$nsegs;
      var $509 = $506;label = 93; break;
    case 92: 
      var $509 = -1;label = 93; break;
    case 93: 
      var $509;
      var $510=$1;
      var $511=(($510+32)|0);
      HEAP32[(($511)>>2)]=$509;
      var $512=$released;
      return $512;
    default: assert(0, "bad label: " + label);
  }
}
function _try_realloc_chunk($m, $p, $nb, $can_move) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $newp;
      var $oldsize;
      var $next;
      var $rsize;
      var $r;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $dvs;
      var $dsize;
      var $r1;
      var $n;
      var $newsize2;
      var $nextsize;
      var $rsize3;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F4;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $newsize5;
      var $r6;
      $1=$m;
      $2=$p;
      $3=$nb;
      $4=$can_move;
      $newp=0;
      var $5=$2;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & -8;
      $oldsize=$8;
      var $9=$2;
      var $10=$9;
      var $11=$oldsize;
      var $12=(($10+$11)|0);
      var $13=$12;
      $next=$13;
      var $14=$2;
      var $15=$14;
      var $16=$1;
      var $17=(($16+16)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($15)>>>(0)) >= (($18)>>>(0));
      if ($19) { label = 2; break; } else { var $39 = 0;label = 5; break; }
    case 2: 
      var $21=$2;
      var $22=(($21+4)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$23 & 3;
      var $25=(($24)|(0))!=1;
      if ($25) { label = 3; break; } else { var $39 = 0;label = 5; break; }
    case 3: 
      var $27=$2;
      var $28=$27;
      var $29=$next;
      var $30=$29;
      var $31=(($28)>>>(0)) < (($30)>>>(0));
      if ($31) { label = 4; break; } else { var $39 = 0;label = 5; break; }
    case 4: 
      var $33=$next;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|(0))!=0;
      var $39 = $37;label = 5; break;
    case 5: 
      var $39;
      var $40=(($39)&(1));
      var $41=($40);
      var $42=(($41)|(0))!=0;
      if ($42) { label = 6; break; } else { label = 103; break; }
    case 6: 
      var $44=$2;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=$46 & 3;
      var $48=(($47)|(0))==0;
      if ($48) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $50=$1;
      var $51=$2;
      var $52=$3;
      var $53=$4;
      var $54=_mmap_resize($50, $51, $52, $53);
      $newp=$54;
      label = 102; break;
    case 8: 
      var $56=$oldsize;
      var $57=$3;
      var $58=(($56)>>>(0)) >= (($57)>>>(0));
      if ($58) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $60=$oldsize;
      var $61=$3;
      var $62=((($60)-($61))|0);
      $rsize=$62;
      var $63=$rsize;
      var $64=(($63)>>>(0)) >= 16;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=(($67+$68)|0);
      var $70=$69;
      $r=$70;
      var $71=$2;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73 & 1;
      var $75=$3;
      var $76=$74 | $75;
      var $77=$76 | 2;
      var $78=$2;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=$77;
      var $80=$2;
      var $81=$80;
      var $82=$3;
      var $83=(($81+$82)|0);
      var $84=$83;
      var $85=(($84+4)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$86 | 1;
      HEAP32[(($85)>>2)]=$87;
      var $88=$r;
      var $89=(($88+4)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$90 & 1;
      var $92=$rsize;
      var $93=$91 | $92;
      var $94=$93 | 2;
      var $95=$r;
      var $96=(($95+4)|0);
      HEAP32[(($96)>>2)]=$94;
      var $97=$r;
      var $98=$97;
      var $99=$rsize;
      var $100=(($98+$99)|0);
      var $101=$100;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=$103 | 1;
      HEAP32[(($102)>>2)]=$104;
      var $105=$1;
      var $106=$r;
      var $107=$rsize;
      _dispose_chunk($105, $106, $107);
      label = 11; break;
    case 11: 
      var $109=$2;
      $newp=$109;
      label = 101; break;
    case 12: 
      var $111=$next;
      var $112=$1;
      var $113=(($112+24)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=(($111)|(0))==(($114)|(0));
      if ($115) { label = 13; break; } else { label = 16; break; }
    case 13: 
      var $117=$oldsize;
      var $118=$1;
      var $119=(($118+12)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=((($117)+($120))|0);
      var $122=$3;
      var $123=(($121)>>>(0)) > (($122)>>>(0));
      if ($123) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $125=$oldsize;
      var $126=$1;
      var $127=(($126+12)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($125)+($128))|0);
      $newsize=$129;
      var $130=$newsize;
      var $131=$3;
      var $132=((($130)-($131))|0);
      $newtopsize=$132;
      var $133=$2;
      var $134=$133;
      var $135=$3;
      var $136=(($134+$135)|0);
      var $137=$136;
      $newtop=$137;
      var $138=$2;
      var $139=(($138+4)|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$140 & 1;
      var $142=$3;
      var $143=$141 | $142;
      var $144=$143 | 2;
      var $145=$2;
      var $146=(($145+4)|0);
      HEAP32[(($146)>>2)]=$144;
      var $147=$2;
      var $148=$147;
      var $149=$3;
      var $150=(($148+$149)|0);
      var $151=$150;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$153 | 1;
      HEAP32[(($152)>>2)]=$154;
      var $155=$newtopsize;
      var $156=$155 | 1;
      var $157=$newtop;
      var $158=(($157+4)|0);
      HEAP32[(($158)>>2)]=$156;
      var $159=$newtop;
      var $160=$1;
      var $161=(($160+24)|0);
      HEAP32[(($161)>>2)]=$159;
      var $162=$newtopsize;
      var $163=$1;
      var $164=(($163+12)|0);
      HEAP32[(($164)>>2)]=$162;
      var $165=$2;
      $newp=$165;
      label = 15; break;
    case 15: 
      label = 100; break;
    case 16: 
      var $168=$next;
      var $169=$1;
      var $170=(($169+20)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($168)|(0))==(($171)|(0));
      if ($172) { label = 17; break; } else { label = 23; break; }
    case 17: 
      var $174=$1;
      var $175=(($174+8)|0);
      var $176=HEAP32[(($175)>>2)];
      $dvs=$176;
      var $177=$oldsize;
      var $178=$dvs;
      var $179=((($177)+($178))|0);
      var $180=$3;
      var $181=(($179)>>>(0)) >= (($180)>>>(0));
      if ($181) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $183=$oldsize;
      var $184=$dvs;
      var $185=((($183)+($184))|0);
      var $186=$3;
      var $187=((($185)-($186))|0);
      $dsize=$187;
      var $188=$dsize;
      var $189=(($188)>>>(0)) >= 16;
      if ($189) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $191=$2;
      var $192=$191;
      var $193=$3;
      var $194=(($192+$193)|0);
      var $195=$194;
      $r1=$195;
      var $196=$r1;
      var $197=$196;
      var $198=$dsize;
      var $199=(($197+$198)|0);
      var $200=$199;
      $n=$200;
      var $201=$2;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & 1;
      var $205=$3;
      var $206=$204 | $205;
      var $207=$206 | 2;
      var $208=$2;
      var $209=(($208+4)|0);
      HEAP32[(($209)>>2)]=$207;
      var $210=$2;
      var $211=$210;
      var $212=$3;
      var $213=(($211+$212)|0);
      var $214=$213;
      var $215=(($214+4)|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=$216 | 1;
      HEAP32[(($215)>>2)]=$217;
      var $218=$dsize;
      var $219=$218 | 1;
      var $220=$r1;
      var $221=(($220+4)|0);
      HEAP32[(($221)>>2)]=$219;
      var $222=$dsize;
      var $223=$r1;
      var $224=$223;
      var $225=$dsize;
      var $226=(($224+$225)|0);
      var $227=$226;
      var $228=(($227)|0);
      HEAP32[(($228)>>2)]=$222;
      var $229=$n;
      var $230=(($229+4)|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=$231 & -2;
      HEAP32[(($230)>>2)]=$232;
      var $233=$dsize;
      var $234=$1;
      var $235=(($234+8)|0);
      HEAP32[(($235)>>2)]=$233;
      var $236=$r1;
      var $237=$1;
      var $238=(($237+20)|0);
      HEAP32[(($238)>>2)]=$236;
      label = 21; break;
    case 20: 
      var $240=$oldsize;
      var $241=$dvs;
      var $242=((($240)+($241))|0);
      $newsize2=$242;
      var $243=$2;
      var $244=(($243+4)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$245 & 1;
      var $247=$newsize2;
      var $248=$246 | $247;
      var $249=$248 | 2;
      var $250=$2;
      var $251=(($250+4)|0);
      HEAP32[(($251)>>2)]=$249;
      var $252=$2;
      var $253=$252;
      var $254=$newsize2;
      var $255=(($253+$254)|0);
      var $256=$255;
      var $257=(($256+4)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=$258 | 1;
      HEAP32[(($257)>>2)]=$259;
      var $260=$1;
      var $261=(($260+8)|0);
      HEAP32[(($261)>>2)]=0;
      var $262=$1;
      var $263=(($262+20)|0);
      HEAP32[(($263)>>2)]=0;
      label = 21; break;
    case 21: 
      var $265=$2;
      $newp=$265;
      label = 22; break;
    case 22: 
      label = 99; break;
    case 23: 
      var $268=$next;
      var $269=(($268+4)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=$270 & 2;
      var $272=(($271)|(0))!=0;
      if ($272) { label = 98; break; } else { label = 24; break; }
    case 24: 
      var $274=$next;
      var $275=(($274+4)|0);
      var $276=HEAP32[(($275)>>2)];
      var $277=$276 & -8;
      $nextsize=$277;
      var $278=$oldsize;
      var $279=$nextsize;
      var $280=((($278)+($279))|0);
      var $281=$3;
      var $282=(($280)>>>(0)) >= (($281)>>>(0));
      if ($282) { label = 25; break; } else { label = 97; break; }
    case 25: 
      var $284=$oldsize;
      var $285=$nextsize;
      var $286=((($284)+($285))|0);
      var $287=$3;
      var $288=((($286)-($287))|0);
      $rsize3=$288;
      var $289=$nextsize;
      var $290=$289 >>> 3;
      var $291=(($290)>>>(0)) < 32;
      if ($291) { label = 26; break; } else { label = 44; break; }
    case 26: 
      var $293=$next;
      var $294=(($293+8)|0);
      var $295=HEAP32[(($294)>>2)];
      $F=$295;
      var $296=$next;
      var $297=(($296+12)|0);
      var $298=HEAP32[(($297)>>2)];
      $B=$298;
      var $299=$nextsize;
      var $300=$299 >>> 3;
      $I=$300;
      var $301=$F;
      var $302=$I;
      var $303=$302 << 1;
      var $304=$1;
      var $305=(($304+40)|0);
      var $306=(($305+($303<<2))|0);
      var $307=$306;
      var $308=$307;
      var $309=(($301)|(0))==(($308)|(0));
      if ($309) { var $326 = 1;label = 30; break; } else { label = 27; break; }
    case 27: 
      var $311=$F;
      var $312=$311;
      var $313=$1;
      var $314=(($313+16)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=(($312)>>>(0)) >= (($315)>>>(0));
      if ($316) { label = 28; break; } else { var $324 = 0;label = 29; break; }
    case 28: 
      var $318=$F;
      var $319=(($318+12)|0);
      var $320=HEAP32[(($319)>>2)];
      var $321=$next;
      var $322=(($320)|(0))==(($321)|(0));
      var $324 = $322;label = 29; break;
    case 29: 
      var $324;
      var $326 = $324;label = 30; break;
    case 30: 
      var $326;
      var $327=(($326)&(1));
      var $328=($327);
      var $329=(($328)|(0))!=0;
      if ($329) { label = 31; break; } else { label = 42; break; }
    case 31: 
      var $331=$B;
      var $332=$F;
      var $333=(($331)|(0))==(($332)|(0));
      if ($333) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $335=$I;
      var $336=1 << $335;
      var $337=$336 ^ -1;
      var $338=$1;
      var $339=(($338)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$340 & $337;
      HEAP32[(($339)>>2)]=$341;
      label = 41; break;
    case 33: 
      var $343=$B;
      var $344=$I;
      var $345=$344 << 1;
      var $346=$1;
      var $347=(($346+40)|0);
      var $348=(($347+($345<<2))|0);
      var $349=$348;
      var $350=$349;
      var $351=(($343)|(0))==(($350)|(0));
      if ($351) { var $368 = 1;label = 37; break; } else { label = 34; break; }
    case 34: 
      var $353=$B;
      var $354=$353;
      var $355=$1;
      var $356=(($355+16)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($354)>>>(0)) >= (($357)>>>(0));
      if ($358) { label = 35; break; } else { var $366 = 0;label = 36; break; }
    case 35: 
      var $360=$B;
      var $361=(($360+8)|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=$next;
      var $364=(($362)|(0))==(($363)|(0));
      var $366 = $364;label = 36; break;
    case 36: 
      var $366;
      var $368 = $366;label = 37; break;
    case 37: 
      var $368;
      var $369=(($368)&(1));
      var $370=($369);
      var $371=(($370)|(0))!=0;
      if ($371) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $373=$B;
      var $374=$F;
      var $375=(($374+12)|0);
      HEAP32[(($375)>>2)]=$373;
      var $376=$F;
      var $377=$B;
      var $378=(($377+8)|0);
      HEAP32[(($378)>>2)]=$376;
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!";
    case 40: 
      label = 41; break;
    case 41: 
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!";
    case 43: 
      label = 93; break;
    case 44: 
      var $385=$next;
      var $386=$385;
      $TP=$386;
      var $387=$TP;
      var $388=(($387+24)|0);
      var $389=HEAP32[(($388)>>2)];
      $XP=$389;
      var $390=$TP;
      var $391=(($390+12)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$TP;
      var $394=(($392)|(0))!=(($393)|(0));
      if ($394) { label = 45; break; } else { label = 52; break; }
    case 45: 
      var $396=$TP;
      var $397=(($396+8)|0);
      var $398=HEAP32[(($397)>>2)];
      $F4=$398;
      var $399=$TP;
      var $400=(($399+12)|0);
      var $401=HEAP32[(($400)>>2)];
      $R=$401;
      var $402=$F4;
      var $403=$402;
      var $404=$1;
      var $405=(($404+16)|0);
      var $406=HEAP32[(($405)>>2)];
      var $407=(($403)>>>(0)) >= (($406)>>>(0));
      if ($407) { label = 46; break; } else { var $421 = 0;label = 48; break; }
    case 46: 
      var $409=$F4;
      var $410=(($409+12)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$TP;
      var $413=(($411)|(0))==(($412)|(0));
      if ($413) { label = 47; break; } else { var $421 = 0;label = 48; break; }
    case 47: 
      var $415=$R;
      var $416=(($415+8)|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$TP;
      var $419=(($417)|(0))==(($418)|(0));
      var $421 = $419;label = 48; break;
    case 48: 
      var $421;
      var $422=(($421)&(1));
      var $423=($422);
      var $424=(($423)|(0))!=0;
      if ($424) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $426=$R;
      var $427=$F4;
      var $428=(($427+12)|0);
      HEAP32[(($428)>>2)]=$426;
      var $429=$F4;
      var $430=$R;
      var $431=(($430+8)|0);
      HEAP32[(($431)>>2)]=$429;
      label = 51; break;
    case 50: 
      _abort();
      throw "Reached an unreachable!";
    case 51: 
      label = 64; break;
    case 52: 
      var $435=$TP;
      var $436=(($435+16)|0);
      var $437=(($436+4)|0);
      $RP=$437;
      var $438=HEAP32[(($437)>>2)];
      $R=$438;
      var $439=(($438)|(0))!=0;
      if ($439) { label = 54; break; } else { label = 53; break; }
    case 53: 
      var $441=$TP;
      var $442=(($441+16)|0);
      var $443=(($442)|0);
      $RP=$443;
      var $444=HEAP32[(($443)>>2)];
      $R=$444;
      var $445=(($444)|(0))!=0;
      if ($445) { label = 54; break; } else { label = 63; break; }
    case 54: 
      label = 55; break;
    case 55: 
      var $448=$R;
      var $449=(($448+16)|0);
      var $450=(($449+4)|0);
      $CP=$450;
      var $451=HEAP32[(($450)>>2)];
      var $452=(($451)|(0))!=0;
      if ($452) { var $460 = 1;label = 57; break; } else { label = 56; break; }
    case 56: 
      var $454=$R;
      var $455=(($454+16)|0);
      var $456=(($455)|0);
      $CP=$456;
      var $457=HEAP32[(($456)>>2)];
      var $458=(($457)|(0))!=0;
      var $460 = $458;label = 57; break;
    case 57: 
      var $460;
      if ($460) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $462=$CP;
      $RP=$462;
      var $463=HEAP32[(($462)>>2)];
      $R=$463;
      label = 55; break;
    case 59: 
      var $465=$RP;
      var $466=$465;
      var $467=$1;
      var $468=(($467+16)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=(($466)>>>(0)) >= (($469)>>>(0));
      var $471=(($470)&(1));
      var $472=($471);
      var $473=(($472)|(0))!=0;
      if ($473) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $475=$RP;
      HEAP32[(($475)>>2)]=0;
      label = 62; break;
    case 61: 
      _abort();
      throw "Reached an unreachable!";
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $480=$XP;
      var $481=(($480)|(0))!=0;
      if ($481) { label = 65; break; } else { label = 92; break; }
    case 65: 
      var $483=$TP;
      var $484=(($483+28)|0);
      var $485=HEAP32[(($484)>>2)];
      var $486=$1;
      var $487=(($486+304)|0);
      var $488=(($487+($485<<2))|0);
      $H=$488;
      var $489=$TP;
      var $490=$H;
      var $491=HEAP32[(($490)>>2)];
      var $492=(($489)|(0))==(($491)|(0));
      if ($492) { label = 66; break; } else { label = 69; break; }
    case 66: 
      var $494=$R;
      var $495=$H;
      HEAP32[(($495)>>2)]=$494;
      var $496=(($494)|(0))==0;
      if ($496) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $498=$TP;
      var $499=(($498+28)|0);
      var $500=HEAP32[(($499)>>2)];
      var $501=1 << $500;
      var $502=$501 ^ -1;
      var $503=$1;
      var $504=(($503+4)|0);
      var $505=HEAP32[(($504)>>2)];
      var $506=$505 & $502;
      HEAP32[(($504)>>2)]=$506;
      label = 68; break;
    case 68: 
      label = 76; break;
    case 69: 
      var $509=$XP;
      var $510=$509;
      var $511=$1;
      var $512=(($511+16)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=(($510)>>>(0)) >= (($513)>>>(0));
      var $515=(($514)&(1));
      var $516=($515);
      var $517=(($516)|(0))!=0;
      if ($517) { label = 70; break; } else { label = 74; break; }
    case 70: 
      var $519=$XP;
      var $520=(($519+16)|0);
      var $521=(($520)|0);
      var $522=HEAP32[(($521)>>2)];
      var $523=$TP;
      var $524=(($522)|(0))==(($523)|(0));
      if ($524) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $526=$R;
      var $527=$XP;
      var $528=(($527+16)|0);
      var $529=(($528)|0);
      HEAP32[(($529)>>2)]=$526;
      label = 73; break;
    case 72: 
      var $531=$R;
      var $532=$XP;
      var $533=(($532+16)|0);
      var $534=(($533+4)|0);
      HEAP32[(($534)>>2)]=$531;
      label = 73; break;
    case 73: 
      label = 75; break;
    case 74: 
      _abort();
      throw "Reached an unreachable!";
    case 75: 
      label = 76; break;
    case 76: 
      var $539=$R;
      var $540=(($539)|(0))!=0;
      if ($540) { label = 77; break; } else { label = 91; break; }
    case 77: 
      var $542=$R;
      var $543=$542;
      var $544=$1;
      var $545=(($544+16)|0);
      var $546=HEAP32[(($545)>>2)];
      var $547=(($543)>>>(0)) >= (($546)>>>(0));
      var $548=(($547)&(1));
      var $549=($548);
      var $550=(($549)|(0))!=0;
      if ($550) { label = 78; break; } else { label = 89; break; }
    case 78: 
      var $552=$XP;
      var $553=$R;
      var $554=(($553+24)|0);
      HEAP32[(($554)>>2)]=$552;
      var $555=$TP;
      var $556=(($555+16)|0);
      var $557=(($556)|0);
      var $558=HEAP32[(($557)>>2)];
      $C0=$558;
      var $559=(($558)|(0))!=0;
      if ($559) { label = 79; break; } else { label = 83; break; }
    case 79: 
      var $561=$C0;
      var $562=$561;
      var $563=$1;
      var $564=(($563+16)|0);
      var $565=HEAP32[(($564)>>2)];
      var $566=(($562)>>>(0)) >= (($565)>>>(0));
      var $567=(($566)&(1));
      var $568=($567);
      var $569=(($568)|(0))!=0;
      if ($569) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $571=$C0;
      var $572=$R;
      var $573=(($572+16)|0);
      var $574=(($573)|0);
      HEAP32[(($574)>>2)]=$571;
      var $575=$R;
      var $576=$C0;
      var $577=(($576+24)|0);
      HEAP32[(($577)>>2)]=$575;
      label = 82; break;
    case 81: 
      _abort();
      throw "Reached an unreachable!";
    case 82: 
      label = 83; break;
    case 83: 
      var $581=$TP;
      var $582=(($581+16)|0);
      var $583=(($582+4)|0);
      var $584=HEAP32[(($583)>>2)];
      $C1=$584;
      var $585=(($584)|(0))!=0;
      if ($585) { label = 84; break; } else { label = 88; break; }
    case 84: 
      var $587=$C1;
      var $588=$587;
      var $589=$1;
      var $590=(($589+16)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=(($588)>>>(0)) >= (($591)>>>(0));
      var $593=(($592)&(1));
      var $594=($593);
      var $595=(($594)|(0))!=0;
      if ($595) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $597=$C1;
      var $598=$R;
      var $599=(($598+16)|0);
      var $600=(($599+4)|0);
      HEAP32[(($600)>>2)]=$597;
      var $601=$R;
      var $602=$C1;
      var $603=(($602+24)|0);
      HEAP32[(($603)>>2)]=$601;
      label = 87; break;
    case 86: 
      _abort();
      throw "Reached an unreachable!";
    case 87: 
      label = 88; break;
    case 88: 
      label = 90; break;
    case 89: 
      _abort();
      throw "Reached an unreachable!";
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $612=$rsize3;
      var $613=(($612)>>>(0)) < 16;
      if ($613) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $615=$oldsize;
      var $616=$nextsize;
      var $617=((($615)+($616))|0);
      $newsize5=$617;
      var $618=$2;
      var $619=(($618+4)|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=$620 & 1;
      var $622=$newsize5;
      var $623=$621 | $622;
      var $624=$623 | 2;
      var $625=$2;
      var $626=(($625+4)|0);
      HEAP32[(($626)>>2)]=$624;
      var $627=$2;
      var $628=$627;
      var $629=$newsize5;
      var $630=(($628+$629)|0);
      var $631=$630;
      var $632=(($631+4)|0);
      var $633=HEAP32[(($632)>>2)];
      var $634=$633 | 1;
      HEAP32[(($632)>>2)]=$634;
      label = 96; break;
    case 95: 
      var $636=$2;
      var $637=$636;
      var $638=$3;
      var $639=(($637+$638)|0);
      var $640=$639;
      $r6=$640;
      var $641=$2;
      var $642=(($641+4)|0);
      var $643=HEAP32[(($642)>>2)];
      var $644=$643 & 1;
      var $645=$3;
      var $646=$644 | $645;
      var $647=$646 | 2;
      var $648=$2;
      var $649=(($648+4)|0);
      HEAP32[(($649)>>2)]=$647;
      var $650=$2;
      var $651=$650;
      var $652=$3;
      var $653=(($651+$652)|0);
      var $654=$653;
      var $655=(($654+4)|0);
      var $656=HEAP32[(($655)>>2)];
      var $657=$656 | 1;
      HEAP32[(($655)>>2)]=$657;
      var $658=$r6;
      var $659=(($658+4)|0);
      var $660=HEAP32[(($659)>>2)];
      var $661=$660 & 1;
      var $662=$rsize3;
      var $663=$661 | $662;
      var $664=$663 | 2;
      var $665=$r6;
      var $666=(($665+4)|0);
      HEAP32[(($666)>>2)]=$664;
      var $667=$r6;
      var $668=$667;
      var $669=$rsize3;
      var $670=(($668+$669)|0);
      var $671=$670;
      var $672=(($671+4)|0);
      var $673=HEAP32[(($672)>>2)];
      var $674=$673 | 1;
      HEAP32[(($672)>>2)]=$674;
      var $675=$1;
      var $676=$r6;
      var $677=$rsize3;
      _dispose_chunk($675, $676, $677);
      label = 96; break;
    case 96: 
      var $679=$2;
      $newp=$679;
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 104; break;
    case 103: 
      _abort();
      throw "Reached an unreachable!";
    case 104: 
      var $688=$newp;
      return $688;
    default: assert(0, "bad label: " + label);
  }
}
function _init_mparams() {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((79956)|0))>>2)];
      var $2=(($1)|(0))==0;
      if ($2) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $4=_sysconf(8);
      $psize=$4;
      var $5=$psize;
      $gsize=$5;
      var $6=$gsize;
      var $7=$gsize;
      var $8=((($7)-(1))|0);
      var $9=$6 & $8;
      var $10=(($9)|(0))!=0;
      if ($10) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$psize;
      var $13=$psize;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|(0))!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      _abort();
      throw "Reached an unreachable!";
    case 5: 
      var $19=$gsize;
      HEAP32[((((79964)|0))>>2)]=$19;
      var $20=$psize;
      HEAP32[((((79960)|0))>>2)]=$20;
      HEAP32[((((79968)|0))>>2)]=-1;
      HEAP32[((((79972)|0))>>2)]=2097152;
      HEAP32[((((79976)|0))>>2)]=0;
      var $21=HEAP32[((((79976)|0))>>2)];
      HEAP32[((((114584)|0))>>2)]=$21;
      var $22=_time(0);
      var $23=$22 ^ 1431655765;
      $magic=$23;
      var $24=$magic;
      var $25=$24 | 8;
      $magic=$25;
      var $26=$magic;
      var $27=$26 & -8;
      $magic=$27;
      var $28=$magic;
      HEAP32[((((79956)|0))>>2)]=$28;
      label = 6; break;
    case 6: 
      return 1;
    default: assert(0, "bad label: " + label);
  }
}
function _dispose_chunk($m, $p, $psize) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $next;
      var $prev;
      var $prevsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $TP17;
      var $H18;
      var $I19;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K20;
      var $C;
      var $F21;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=$3;
      var $7=(($5+$6)|0);
      var $8=$7;
      $next=$8;
      var $9=$2;
      var $10=(($9+4)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$11 & 1;
      var $13=(($12)|(0))!=0;
      if ($13) { label = 81; break; } else { label = 2; break; }
    case 2: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      $prevsize=$17;
      var $18=$2;
      var $19=(($18+4)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 & 3;
      var $22=(($21)|(0))==0;
      if ($22) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $24=$prevsize;
      var $25=((($24)+(16))|0);
      var $26=$3;
      var $27=((($26)+($25))|0);
      $3=$27;
      label = 200; break;
    case 4: 
      var $29=$2;
      var $30=$29;
      var $31=$prevsize;
      var $32=(((-$31))|0);
      var $33=(($30+$32)|0);
      var $34=$33;
      $prev=$34;
      var $35=$prevsize;
      var $36=$3;
      var $37=((($36)+($35))|0);
      $3=$37;
      var $38=$prev;
      $2=$38;
      var $39=$prev;
      var $40=$39;
      var $41=$1;
      var $42=(($41+16)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($40)>>>(0)) >= (($43)>>>(0));
      var $45=(($44)&(1));
      var $46=($45);
      var $47=(($46)|(0))!=0;
      if ($47) { label = 5; break; } else { label = 79; break; }
    case 5: 
      var $49=$2;
      var $50=$1;
      var $51=(($50+20)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($49)|(0))!=(($52)|(0));
      if ($53) { label = 6; break; } else { label = 75; break; }
    case 6: 
      var $55=$prevsize;
      var $56=$55 >>> 3;
      var $57=(($56)>>>(0)) < 32;
      if ($57) { label = 7; break; } else { label = 25; break; }
    case 7: 
      var $59=$2;
      var $60=(($59+8)|0);
      var $61=HEAP32[(($60)>>2)];
      $F=$61;
      var $62=$2;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      $B=$64;
      var $65=$prevsize;
      var $66=$65 >>> 3;
      $I=$66;
      var $67=$F;
      var $68=$I;
      var $69=$68 << 1;
      var $70=$1;
      var $71=(($70+40)|0);
      var $72=(($71+($69<<2))|0);
      var $73=$72;
      var $74=$73;
      var $75=(($67)|(0))==(($74)|(0));
      if ($75) { var $92 = 1;label = 11; break; } else { label = 8; break; }
    case 8: 
      var $77=$F;
      var $78=$77;
      var $79=$1;
      var $80=(($79+16)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=(($78)>>>(0)) >= (($81)>>>(0));
      if ($82) { label = 9; break; } else { var $90 = 0;label = 10; break; }
    case 9: 
      var $84=$F;
      var $85=(($84+12)|0);
      var $86=HEAP32[(($85)>>2)];
      var $87=$2;
      var $88=(($86)|(0))==(($87)|(0));
      var $90 = $88;label = 10; break;
    case 10: 
      var $90;
      var $92 = $90;label = 11; break;
    case 11: 
      var $92;
      var $93=(($92)&(1));
      var $94=($93);
      var $95=(($94)|(0))!=0;
      if ($95) { label = 12; break; } else { label = 23; break; }
    case 12: 
      var $97=$B;
      var $98=$F;
      var $99=(($97)|(0))==(($98)|(0));
      if ($99) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $101=$I;
      var $102=1 << $101;
      var $103=$102 ^ -1;
      var $104=$1;
      var $105=(($104)|0);
      var $106=HEAP32[(($105)>>2)];
      var $107=$106 & $103;
      HEAP32[(($105)>>2)]=$107;
      label = 22; break;
    case 14: 
      var $109=$B;
      var $110=$I;
      var $111=$110 << 1;
      var $112=$1;
      var $113=(($112+40)|0);
      var $114=(($113+($111<<2))|0);
      var $115=$114;
      var $116=$115;
      var $117=(($109)|(0))==(($116)|(0));
      if ($117) { var $134 = 1;label = 18; break; } else { label = 15; break; }
    case 15: 
      var $119=$B;
      var $120=$119;
      var $121=$1;
      var $122=(($121+16)|0);
      var $123=HEAP32[(($122)>>2)];
      var $124=(($120)>>>(0)) >= (($123)>>>(0));
      if ($124) { label = 16; break; } else { var $132 = 0;label = 17; break; }
    case 16: 
      var $126=$B;
      var $127=(($126+8)|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$2;
      var $130=(($128)|(0))==(($129)|(0));
      var $132 = $130;label = 17; break;
    case 17: 
      var $132;
      var $134 = $132;label = 18; break;
    case 18: 
      var $134;
      var $135=(($134)&(1));
      var $136=($135);
      var $137=(($136)|(0))!=0;
      if ($137) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $139=$B;
      var $140=$F;
      var $141=(($140+12)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$F;
      var $143=$B;
      var $144=(($143+8)|0);
      HEAP32[(($144)>>2)]=$142;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!";
    case 21: 
      label = 22; break;
    case 22: 
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!";
    case 24: 
      label = 74; break;
    case 25: 
      var $151=$2;
      var $152=$151;
      $TP=$152;
      var $153=$TP;
      var $154=(($153+24)|0);
      var $155=HEAP32[(($154)>>2)];
      $XP=$155;
      var $156=$TP;
      var $157=(($156+12)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=$TP;
      var $160=(($158)|(0))!=(($159)|(0));
      if ($160) { label = 26; break; } else { label = 33; break; }
    case 26: 
      var $162=$TP;
      var $163=(($162+8)|0);
      var $164=HEAP32[(($163)>>2)];
      $F1=$164;
      var $165=$TP;
      var $166=(($165+12)|0);
      var $167=HEAP32[(($166)>>2)];
      $R=$167;
      var $168=$F1;
      var $169=$168;
      var $170=$1;
      var $171=(($170+16)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($169)>>>(0)) >= (($172)>>>(0));
      if ($173) { label = 27; break; } else { var $187 = 0;label = 29; break; }
    case 27: 
      var $175=$F1;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$TP;
      var $179=(($177)|(0))==(($178)|(0));
      if ($179) { label = 28; break; } else { var $187 = 0;label = 29; break; }
    case 28: 
      var $181=$R;
      var $182=(($181+8)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$TP;
      var $185=(($183)|(0))==(($184)|(0));
      var $187 = $185;label = 29; break;
    case 29: 
      var $187;
      var $188=(($187)&(1));
      var $189=($188);
      var $190=(($189)|(0))!=0;
      if ($190) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $192=$R;
      var $193=$F1;
      var $194=(($193+12)|0);
      HEAP32[(($194)>>2)]=$192;
      var $195=$F1;
      var $196=$R;
      var $197=(($196+8)|0);
      HEAP32[(($197)>>2)]=$195;
      label = 32; break;
    case 31: 
      _abort();
      throw "Reached an unreachable!";
    case 32: 
      label = 45; break;
    case 33: 
      var $201=$TP;
      var $202=(($201+16)|0);
      var $203=(($202+4)|0);
      $RP=$203;
      var $204=HEAP32[(($203)>>2)];
      $R=$204;
      var $205=(($204)|(0))!=0;
      if ($205) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $207=$TP;
      var $208=(($207+16)|0);
      var $209=(($208)|0);
      $RP=$209;
      var $210=HEAP32[(($209)>>2)];
      $R=$210;
      var $211=(($210)|(0))!=0;
      if ($211) { label = 35; break; } else { label = 44; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $214=$R;
      var $215=(($214+16)|0);
      var $216=(($215+4)|0);
      $CP=$216;
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|(0))!=0;
      if ($218) { var $226 = 1;label = 38; break; } else { label = 37; break; }
    case 37: 
      var $220=$R;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      $CP=$222;
      var $223=HEAP32[(($222)>>2)];
      var $224=(($223)|(0))!=0;
      var $226 = $224;label = 38; break;
    case 38: 
      var $226;
      if ($226) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $228=$CP;
      $RP=$228;
      var $229=HEAP32[(($228)>>2)];
      $R=$229;
      label = 36; break;
    case 40: 
      var $231=$RP;
      var $232=$231;
      var $233=$1;
      var $234=(($233+16)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=(($232)>>>(0)) >= (($235)>>>(0));
      var $237=(($236)&(1));
      var $238=($237);
      var $239=(($238)|(0))!=0;
      if ($239) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $241=$RP;
      HEAP32[(($241)>>2)]=0;
      label = 43; break;
    case 42: 
      _abort();
      throw "Reached an unreachable!";
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $246=$XP;
      var $247=(($246)|(0))!=0;
      if ($247) { label = 46; break; } else { label = 73; break; }
    case 46: 
      var $249=$TP;
      var $250=(($249+28)|0);
      var $251=HEAP32[(($250)>>2)];
      var $252=$1;
      var $253=(($252+304)|0);
      var $254=(($253+($251<<2))|0);
      $H=$254;
      var $255=$TP;
      var $256=$H;
      var $257=HEAP32[(($256)>>2)];
      var $258=(($255)|(0))==(($257)|(0));
      if ($258) { label = 47; break; } else { label = 50; break; }
    case 47: 
      var $260=$R;
      var $261=$H;
      HEAP32[(($261)>>2)]=$260;
      var $262=(($260)|(0))==0;
      if ($262) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $264=$TP;
      var $265=(($264+28)|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=1 << $266;
      var $268=$267 ^ -1;
      var $269=$1;
      var $270=(($269+4)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=$271 & $268;
      HEAP32[(($270)>>2)]=$272;
      label = 49; break;
    case 49: 
      label = 57; break;
    case 50: 
      var $275=$XP;
      var $276=$275;
      var $277=$1;
      var $278=(($277+16)|0);
      var $279=HEAP32[(($278)>>2)];
      var $280=(($276)>>>(0)) >= (($279)>>>(0));
      var $281=(($280)&(1));
      var $282=($281);
      var $283=(($282)|(0))!=0;
      if ($283) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $285=$XP;
      var $286=(($285+16)|0);
      var $287=(($286)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$TP;
      var $290=(($288)|(0))==(($289)|(0));
      if ($290) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $292=$R;
      var $293=$XP;
      var $294=(($293+16)|0);
      var $295=(($294)|0);
      HEAP32[(($295)>>2)]=$292;
      label = 54; break;
    case 53: 
      var $297=$R;
      var $298=$XP;
      var $299=(($298+16)|0);
      var $300=(($299+4)|0);
      HEAP32[(($300)>>2)]=$297;
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!";
    case 56: 
      label = 57; break;
    case 57: 
      var $305=$R;
      var $306=(($305)|(0))!=0;
      if ($306) { label = 58; break; } else { label = 72; break; }
    case 58: 
      var $308=$R;
      var $309=$308;
      var $310=$1;
      var $311=(($310+16)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=(($309)>>>(0)) >= (($312)>>>(0));
      var $314=(($313)&(1));
      var $315=($314);
      var $316=(($315)|(0))!=0;
      if ($316) { label = 59; break; } else { label = 70; break; }
    case 59: 
      var $318=$XP;
      var $319=$R;
      var $320=(($319+24)|0);
      HEAP32[(($320)>>2)]=$318;
      var $321=$TP;
      var $322=(($321+16)|0);
      var $323=(($322)|0);
      var $324=HEAP32[(($323)>>2)];
      $C0=$324;
      var $325=(($324)|(0))!=0;
      if ($325) { label = 60; break; } else { label = 64; break; }
    case 60: 
      var $327=$C0;
      var $328=$327;
      var $329=$1;
      var $330=(($329+16)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(($328)>>>(0)) >= (($331)>>>(0));
      var $333=(($332)&(1));
      var $334=($333);
      var $335=(($334)|(0))!=0;
      if ($335) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $337=$C0;
      var $338=$R;
      var $339=(($338+16)|0);
      var $340=(($339)|0);
      HEAP32[(($340)>>2)]=$337;
      var $341=$R;
      var $342=$C0;
      var $343=(($342+24)|0);
      HEAP32[(($343)>>2)]=$341;
      label = 63; break;
    case 62: 
      _abort();
      throw "Reached an unreachable!";
    case 63: 
      label = 64; break;
    case 64: 
      var $347=$TP;
      var $348=(($347+16)|0);
      var $349=(($348+4)|0);
      var $350=HEAP32[(($349)>>2)];
      $C1=$350;
      var $351=(($350)|(0))!=0;
      if ($351) { label = 65; break; } else { label = 69; break; }
    case 65: 
      var $353=$C1;
      var $354=$353;
      var $355=$1;
      var $356=(($355+16)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($354)>>>(0)) >= (($357)>>>(0));
      var $359=(($358)&(1));
      var $360=($359);
      var $361=(($360)|(0))!=0;
      if ($361) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $363=$C1;
      var $364=$R;
      var $365=(($364+16)|0);
      var $366=(($365+4)|0);
      HEAP32[(($366)>>2)]=$363;
      var $367=$R;
      var $368=$C1;
      var $369=(($368+24)|0);
      HEAP32[(($369)>>2)]=$367;
      label = 68; break;
    case 67: 
      _abort();
      throw "Reached an unreachable!";
    case 68: 
      label = 69; break;
    case 69: 
      label = 71; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!";
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 78; break;
    case 75: 
      var $379=$next;
      var $380=(($379+4)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$381 & 3;
      var $383=(($382)|(0))==3;
      if ($383) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $385=$3;
      var $386=$1;
      var $387=(($386+8)|0);
      HEAP32[(($387)>>2)]=$385;
      var $388=$next;
      var $389=(($388+4)|0);
      var $390=HEAP32[(($389)>>2)];
      var $391=$390 & -2;
      HEAP32[(($389)>>2)]=$391;
      var $392=$3;
      var $393=$392 | 1;
      var $394=$2;
      var $395=(($394+4)|0);
      HEAP32[(($395)>>2)]=$393;
      var $396=$3;
      var $397=$2;
      var $398=$397;
      var $399=$3;
      var $400=(($398+$399)|0);
      var $401=$400;
      var $402=(($401)|0);
      HEAP32[(($402)>>2)]=$396;
      label = 200; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 80; break;
    case 79: 
      _abort();
      throw "Reached an unreachable!";
    case 80: 
      label = 81; break;
    case 81: 
      var $408=$next;
      var $409=$408;
      var $410=$1;
      var $411=(($410+16)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($409)>>>(0)) >= (($412)>>>(0));
      var $414=(($413)&(1));
      var $415=($414);
      var $416=(($415)|(0))!=0;
      if ($416) { label = 82; break; } else { label = 199; break; }
    case 82: 
      var $418=$next;
      var $419=(($418+4)|0);
      var $420=HEAP32[(($419)>>2)];
      var $421=$420 & 2;
      var $422=(($421)|(0))!=0;
      if ($422) { label = 162; break; } else { label = 83; break; }
    case 83: 
      var $424=$next;
      var $425=$1;
      var $426=(($425+24)|0);
      var $427=HEAP32[(($426)>>2)];
      var $428=(($424)|(0))==(($427)|(0));
      if ($428) { label = 84; break; } else { label = 87; break; }
    case 84: 
      var $430=$3;
      var $431=$1;
      var $432=(($431+12)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=((($433)+($430))|0);
      HEAP32[(($432)>>2)]=$434;
      $tsize=$434;
      var $435=$2;
      var $436=$1;
      var $437=(($436+24)|0);
      HEAP32[(($437)>>2)]=$435;
      var $438=$tsize;
      var $439=$438 | 1;
      var $440=$2;
      var $441=(($440+4)|0);
      HEAP32[(($441)>>2)]=$439;
      var $442=$2;
      var $443=$1;
      var $444=(($443+20)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=(($442)|(0))==(($445)|(0));
      if ($446) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $448=$1;
      var $449=(($448+20)|0);
      HEAP32[(($449)>>2)]=0;
      var $450=$1;
      var $451=(($450+8)|0);
      HEAP32[(($451)>>2)]=0;
      label = 86; break;
    case 86: 
      label = 200; break;
    case 87: 
      var $454=$next;
      var $455=$1;
      var $456=(($455+20)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)|(0))==(($457)|(0));
      if ($458) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $460=$3;
      var $461=$1;
      var $462=(($461+8)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=((($463)+($460))|0);
      HEAP32[(($462)>>2)]=$464;
      $dsize=$464;
      var $465=$2;
      var $466=$1;
      var $467=(($466+20)|0);
      HEAP32[(($467)>>2)]=$465;
      var $468=$dsize;
      var $469=$468 | 1;
      var $470=$2;
      var $471=(($470+4)|0);
      HEAP32[(($471)>>2)]=$469;
      var $472=$dsize;
      var $473=$2;
      var $474=$473;
      var $475=$dsize;
      var $476=(($474+$475)|0);
      var $477=$476;
      var $478=(($477)|0);
      HEAP32[(($478)>>2)]=$472;
      label = 200; break;
    case 89: 
      var $480=$next;
      var $481=(($480+4)|0);
      var $482=HEAP32[(($481)>>2)];
      var $483=$482 & -8;
      $nsize=$483;
      var $484=$nsize;
      var $485=$3;
      var $486=((($485)+($484))|0);
      $3=$486;
      var $487=$nsize;
      var $488=$487 >>> 3;
      var $489=(($488)>>>(0)) < 32;
      if ($489) { label = 90; break; } else { label = 108; break; }
    case 90: 
      var $491=$next;
      var $492=(($491+8)|0);
      var $493=HEAP32[(($492)>>2)];
      $F2=$493;
      var $494=$next;
      var $495=(($494+12)|0);
      var $496=HEAP32[(($495)>>2)];
      $B3=$496;
      var $497=$nsize;
      var $498=$497 >>> 3;
      $I4=$498;
      var $499=$F2;
      var $500=$I4;
      var $501=$500 << 1;
      var $502=$1;
      var $503=(($502+40)|0);
      var $504=(($503+($501<<2))|0);
      var $505=$504;
      var $506=$505;
      var $507=(($499)|(0))==(($506)|(0));
      if ($507) { var $524 = 1;label = 94; break; } else { label = 91; break; }
    case 91: 
      var $509=$F2;
      var $510=$509;
      var $511=$1;
      var $512=(($511+16)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=(($510)>>>(0)) >= (($513)>>>(0));
      if ($514) { label = 92; break; } else { var $522 = 0;label = 93; break; }
    case 92: 
      var $516=$F2;
      var $517=(($516+12)|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=$next;
      var $520=(($518)|(0))==(($519)|(0));
      var $522 = $520;label = 93; break;
    case 93: 
      var $522;
      var $524 = $522;label = 94; break;
    case 94: 
      var $524;
      var $525=(($524)&(1));
      var $526=($525);
      var $527=(($526)|(0))!=0;
      if ($527) { label = 95; break; } else { label = 106; break; }
    case 95: 
      var $529=$B3;
      var $530=$F2;
      var $531=(($529)|(0))==(($530)|(0));
      if ($531) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $533=$I4;
      var $534=1 << $533;
      var $535=$534 ^ -1;
      var $536=$1;
      var $537=(($536)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$538 & $535;
      HEAP32[(($537)>>2)]=$539;
      label = 105; break;
    case 97: 
      var $541=$B3;
      var $542=$I4;
      var $543=$542 << 1;
      var $544=$1;
      var $545=(($544+40)|0);
      var $546=(($545+($543<<2))|0);
      var $547=$546;
      var $548=$547;
      var $549=(($541)|(0))==(($548)|(0));
      if ($549) { var $566 = 1;label = 101; break; } else { label = 98; break; }
    case 98: 
      var $551=$B3;
      var $552=$551;
      var $553=$1;
      var $554=(($553+16)|0);
      var $555=HEAP32[(($554)>>2)];
      var $556=(($552)>>>(0)) >= (($555)>>>(0));
      if ($556) { label = 99; break; } else { var $564 = 0;label = 100; break; }
    case 99: 
      var $558=$B3;
      var $559=(($558+8)|0);
      var $560=HEAP32[(($559)>>2)];
      var $561=$next;
      var $562=(($560)|(0))==(($561)|(0));
      var $564 = $562;label = 100; break;
    case 100: 
      var $564;
      var $566 = $564;label = 101; break;
    case 101: 
      var $566;
      var $567=(($566)&(1));
      var $568=($567);
      var $569=(($568)|(0))!=0;
      if ($569) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $571=$B3;
      var $572=$F2;
      var $573=(($572+12)|0);
      HEAP32[(($573)>>2)]=$571;
      var $574=$F2;
      var $575=$B3;
      var $576=(($575+8)|0);
      HEAP32[(($576)>>2)]=$574;
      label = 104; break;
    case 103: 
      _abort();
      throw "Reached an unreachable!";
    case 104: 
      label = 105; break;
    case 105: 
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!";
    case 107: 
      label = 157; break;
    case 108: 
      var $583=$next;
      var $584=$583;
      $TP5=$584;
      var $585=$TP5;
      var $586=(($585+24)|0);
      var $587=HEAP32[(($586)>>2)];
      $XP6=$587;
      var $588=$TP5;
      var $589=(($588+12)|0);
      var $590=HEAP32[(($589)>>2)];
      var $591=$TP5;
      var $592=(($590)|(0))!=(($591)|(0));
      if ($592) { label = 109; break; } else { label = 116; break; }
    case 109: 
      var $594=$TP5;
      var $595=(($594+8)|0);
      var $596=HEAP32[(($595)>>2)];
      $F8=$596;
      var $597=$TP5;
      var $598=(($597+12)|0);
      var $599=HEAP32[(($598)>>2)];
      $R7=$599;
      var $600=$F8;
      var $601=$600;
      var $602=$1;
      var $603=(($602+16)|0);
      var $604=HEAP32[(($603)>>2)];
      var $605=(($601)>>>(0)) >= (($604)>>>(0));
      if ($605) { label = 110; break; } else { var $619 = 0;label = 112; break; }
    case 110: 
      var $607=$F8;
      var $608=(($607+12)|0);
      var $609=HEAP32[(($608)>>2)];
      var $610=$TP5;
      var $611=(($609)|(0))==(($610)|(0));
      if ($611) { label = 111; break; } else { var $619 = 0;label = 112; break; }
    case 111: 
      var $613=$R7;
      var $614=(($613+8)|0);
      var $615=HEAP32[(($614)>>2)];
      var $616=$TP5;
      var $617=(($615)|(0))==(($616)|(0));
      var $619 = $617;label = 112; break;
    case 112: 
      var $619;
      var $620=(($619)&(1));
      var $621=($620);
      var $622=(($621)|(0))!=0;
      if ($622) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $624=$R7;
      var $625=$F8;
      var $626=(($625+12)|0);
      HEAP32[(($626)>>2)]=$624;
      var $627=$F8;
      var $628=$R7;
      var $629=(($628+8)|0);
      HEAP32[(($629)>>2)]=$627;
      label = 115; break;
    case 114: 
      _abort();
      throw "Reached an unreachable!";
    case 115: 
      label = 128; break;
    case 116: 
      var $633=$TP5;
      var $634=(($633+16)|0);
      var $635=(($634+4)|0);
      $RP9=$635;
      var $636=HEAP32[(($635)>>2)];
      $R7=$636;
      var $637=(($636)|(0))!=0;
      if ($637) { label = 118; break; } else { label = 117; break; }
    case 117: 
      var $639=$TP5;
      var $640=(($639+16)|0);
      var $641=(($640)|0);
      $RP9=$641;
      var $642=HEAP32[(($641)>>2)];
      $R7=$642;
      var $643=(($642)|(0))!=0;
      if ($643) { label = 118; break; } else { label = 127; break; }
    case 118: 
      label = 119; break;
    case 119: 
      var $646=$R7;
      var $647=(($646+16)|0);
      var $648=(($647+4)|0);
      $CP10=$648;
      var $649=HEAP32[(($648)>>2)];
      var $650=(($649)|(0))!=0;
      if ($650) { var $658 = 1;label = 121; break; } else { label = 120; break; }
    case 120: 
      var $652=$R7;
      var $653=(($652+16)|0);
      var $654=(($653)|0);
      $CP10=$654;
      var $655=HEAP32[(($654)>>2)];
      var $656=(($655)|(0))!=0;
      var $658 = $656;label = 121; break;
    case 121: 
      var $658;
      if ($658) { label = 122; break; } else { label = 123; break; }
    case 122: 
      var $660=$CP10;
      $RP9=$660;
      var $661=HEAP32[(($660)>>2)];
      $R7=$661;
      label = 119; break;
    case 123: 
      var $663=$RP9;
      var $664=$663;
      var $665=$1;
      var $666=(($665+16)|0);
      var $667=HEAP32[(($666)>>2)];
      var $668=(($664)>>>(0)) >= (($667)>>>(0));
      var $669=(($668)&(1));
      var $670=($669);
      var $671=(($670)|(0))!=0;
      if ($671) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $673=$RP9;
      HEAP32[(($673)>>2)]=0;
      label = 126; break;
    case 125: 
      _abort();
      throw "Reached an unreachable!";
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $678=$XP6;
      var $679=(($678)|(0))!=0;
      if ($679) { label = 129; break; } else { label = 156; break; }
    case 129: 
      var $681=$TP5;
      var $682=(($681+28)|0);
      var $683=HEAP32[(($682)>>2)];
      var $684=$1;
      var $685=(($684+304)|0);
      var $686=(($685+($683<<2))|0);
      $H11=$686;
      var $687=$TP5;
      var $688=$H11;
      var $689=HEAP32[(($688)>>2)];
      var $690=(($687)|(0))==(($689)|(0));
      if ($690) { label = 130; break; } else { label = 133; break; }
    case 130: 
      var $692=$R7;
      var $693=$H11;
      HEAP32[(($693)>>2)]=$692;
      var $694=(($692)|(0))==0;
      if ($694) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $696=$TP5;
      var $697=(($696+28)|0);
      var $698=HEAP32[(($697)>>2)];
      var $699=1 << $698;
      var $700=$699 ^ -1;
      var $701=$1;
      var $702=(($701+4)|0);
      var $703=HEAP32[(($702)>>2)];
      var $704=$703 & $700;
      HEAP32[(($702)>>2)]=$704;
      label = 132; break;
    case 132: 
      label = 140; break;
    case 133: 
      var $707=$XP6;
      var $708=$707;
      var $709=$1;
      var $710=(($709+16)|0);
      var $711=HEAP32[(($710)>>2)];
      var $712=(($708)>>>(0)) >= (($711)>>>(0));
      var $713=(($712)&(1));
      var $714=($713);
      var $715=(($714)|(0))!=0;
      if ($715) { label = 134; break; } else { label = 138; break; }
    case 134: 
      var $717=$XP6;
      var $718=(($717+16)|0);
      var $719=(($718)|0);
      var $720=HEAP32[(($719)>>2)];
      var $721=$TP5;
      var $722=(($720)|(0))==(($721)|(0));
      if ($722) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $724=$R7;
      var $725=$XP6;
      var $726=(($725+16)|0);
      var $727=(($726)|0);
      HEAP32[(($727)>>2)]=$724;
      label = 137; break;
    case 136: 
      var $729=$R7;
      var $730=$XP6;
      var $731=(($730+16)|0);
      var $732=(($731+4)|0);
      HEAP32[(($732)>>2)]=$729;
      label = 137; break;
    case 137: 
      label = 139; break;
    case 138: 
      _abort();
      throw "Reached an unreachable!";
    case 139: 
      label = 140; break;
    case 140: 
      var $737=$R7;
      var $738=(($737)|(0))!=0;
      if ($738) { label = 141; break; } else { label = 155; break; }
    case 141: 
      var $740=$R7;
      var $741=$740;
      var $742=$1;
      var $743=(($742+16)|0);
      var $744=HEAP32[(($743)>>2)];
      var $745=(($741)>>>(0)) >= (($744)>>>(0));
      var $746=(($745)&(1));
      var $747=($746);
      var $748=(($747)|(0))!=0;
      if ($748) { label = 142; break; } else { label = 153; break; }
    case 142: 
      var $750=$XP6;
      var $751=$R7;
      var $752=(($751+24)|0);
      HEAP32[(($752)>>2)]=$750;
      var $753=$TP5;
      var $754=(($753+16)|0);
      var $755=(($754)|0);
      var $756=HEAP32[(($755)>>2)];
      $C012=$756;
      var $757=(($756)|(0))!=0;
      if ($757) { label = 143; break; } else { label = 147; break; }
    case 143: 
      var $759=$C012;
      var $760=$759;
      var $761=$1;
      var $762=(($761+16)|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=(($760)>>>(0)) >= (($763)>>>(0));
      var $765=(($764)&(1));
      var $766=($765);
      var $767=(($766)|(0))!=0;
      if ($767) { label = 144; break; } else { label = 145; break; }
    case 144: 
      var $769=$C012;
      var $770=$R7;
      var $771=(($770+16)|0);
      var $772=(($771)|0);
      HEAP32[(($772)>>2)]=$769;
      var $773=$R7;
      var $774=$C012;
      var $775=(($774+24)|0);
      HEAP32[(($775)>>2)]=$773;
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!";
    case 146: 
      label = 147; break;
    case 147: 
      var $779=$TP5;
      var $780=(($779+16)|0);
      var $781=(($780+4)|0);
      var $782=HEAP32[(($781)>>2)];
      $C113=$782;
      var $783=(($782)|(0))!=0;
      if ($783) { label = 148; break; } else { label = 152; break; }
    case 148: 
      var $785=$C113;
      var $786=$785;
      var $787=$1;
      var $788=(($787+16)|0);
      var $789=HEAP32[(($788)>>2)];
      var $790=(($786)>>>(0)) >= (($789)>>>(0));
      var $791=(($790)&(1));
      var $792=($791);
      var $793=(($792)|(0))!=0;
      if ($793) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $795=$C113;
      var $796=$R7;
      var $797=(($796+16)|0);
      var $798=(($797+4)|0);
      HEAP32[(($798)>>2)]=$795;
      var $799=$R7;
      var $800=$C113;
      var $801=(($800+24)|0);
      HEAP32[(($801)>>2)]=$799;
      label = 151; break;
    case 150: 
      _abort();
      throw "Reached an unreachable!";
    case 151: 
      label = 152; break;
    case 152: 
      label = 154; break;
    case 153: 
      _abort();
      throw "Reached an unreachable!";
    case 154: 
      label = 155; break;
    case 155: 
      label = 156; break;
    case 156: 
      label = 157; break;
    case 157: 
      var $810=$3;
      var $811=$810 | 1;
      var $812=$2;
      var $813=(($812+4)|0);
      HEAP32[(($813)>>2)]=$811;
      var $814=$3;
      var $815=$2;
      var $816=$815;
      var $817=$3;
      var $818=(($816+$817)|0);
      var $819=$818;
      var $820=(($819)|0);
      HEAP32[(($820)>>2)]=$814;
      var $821=$2;
      var $822=$1;
      var $823=(($822+20)|0);
      var $824=HEAP32[(($823)>>2)];
      var $825=(($821)|(0))==(($824)|(0));
      if ($825) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $827=$3;
      var $828=$1;
      var $829=(($828+8)|0);
      HEAP32[(($829)>>2)]=$827;
      label = 200; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 163; break;
    case 162: 
      var $834=$next;
      var $835=(($834+4)|0);
      var $836=HEAP32[(($835)>>2)];
      var $837=$836 & -2;
      HEAP32[(($835)>>2)]=$837;
      var $838=$3;
      var $839=$838 | 1;
      var $840=$2;
      var $841=(($840+4)|0);
      HEAP32[(($841)>>2)]=$839;
      var $842=$3;
      var $843=$2;
      var $844=$843;
      var $845=$3;
      var $846=(($844+$845)|0);
      var $847=$846;
      var $848=(($847)|0);
      HEAP32[(($848)>>2)]=$842;
      label = 163; break;
    case 163: 
      var $850=$3;
      var $851=$850 >>> 3;
      var $852=(($851)>>>(0)) < 32;
      if ($852) { label = 164; break; } else { label = 171; break; }
    case 164: 
      var $854=$3;
      var $855=$854 >>> 3;
      $I14=$855;
      var $856=$I14;
      var $857=$856 << 1;
      var $858=$1;
      var $859=(($858+40)|0);
      var $860=(($859+($857<<2))|0);
      var $861=$860;
      var $862=$861;
      $B15=$862;
      var $863=$B15;
      $F16=$863;
      var $864=$1;
      var $865=(($864)|0);
      var $866=HEAP32[(($865)>>2)];
      var $867=$I14;
      var $868=1 << $867;
      var $869=$866 & $868;
      var $870=(($869)|(0))!=0;
      if ($870) { label = 166; break; } else { label = 165; break; }
    case 165: 
      var $872=$I14;
      var $873=1 << $872;
      var $874=$1;
      var $875=(($874)|0);
      var $876=HEAP32[(($875)>>2)];
      var $877=$876 | $873;
      HEAP32[(($875)>>2)]=$877;
      label = 170; break;
    case 166: 
      var $879=$B15;
      var $880=(($879+8)|0);
      var $881=HEAP32[(($880)>>2)];
      var $882=$881;
      var $883=$1;
      var $884=(($883+16)|0);
      var $885=HEAP32[(($884)>>2)];
      var $886=(($882)>>>(0)) >= (($885)>>>(0));
      var $887=(($886)&(1));
      var $888=($887);
      var $889=(($888)|(0))!=0;
      if ($889) { label = 167; break; } else { label = 168; break; }
    case 167: 
      var $891=$B15;
      var $892=(($891+8)|0);
      var $893=HEAP32[(($892)>>2)];
      $F16=$893;
      label = 169; break;
    case 168: 
      _abort();
      throw "Reached an unreachable!";
    case 169: 
      label = 170; break;
    case 170: 
      var $897=$2;
      var $898=$B15;
      var $899=(($898+8)|0);
      HEAP32[(($899)>>2)]=$897;
      var $900=$2;
      var $901=$F16;
      var $902=(($901+12)|0);
      HEAP32[(($902)>>2)]=$900;
      var $903=$F16;
      var $904=$2;
      var $905=(($904+8)|0);
      HEAP32[(($905)>>2)]=$903;
      var $906=$B15;
      var $907=$2;
      var $908=(($907+12)|0);
      HEAP32[(($908)>>2)]=$906;
      label = 198; break;
    case 171: 
      var $910=$2;
      var $911=$910;
      $TP17=$911;
      var $912=$3;
      var $913=$912 >>> 8;
      $X=$913;
      var $914=$X;
      var $915=(($914)|(0))==0;
      if ($915) { label = 172; break; } else { label = 173; break; }
    case 172: 
      $I19=0;
      label = 177; break;
    case 173: 
      var $918=$X;
      var $919=(($918)>>>(0)) > 65535;
      if ($919) { label = 174; break; } else { label = 175; break; }
    case 174: 
      $I19=31;
      label = 176; break;
    case 175: 
      var $922=$X;
      $Y=$922;
      var $923=$Y;
      var $924=((($923)-(256))|0);
      var $925=$924 >>> 16;
      var $926=$925 & 8;
      $N=$926;
      var $927=$N;
      var $928=$Y;
      var $929=$928 << $927;
      $Y=$929;
      var $930=((($929)-(4096))|0);
      var $931=$930 >>> 16;
      var $932=$931 & 4;
      $K=$932;
      var $933=$K;
      var $934=$N;
      var $935=((($934)+($933))|0);
      $N=$935;
      var $936=$K;
      var $937=$Y;
      var $938=$937 << $936;
      $Y=$938;
      var $939=((($938)-(16384))|0);
      var $940=$939 >>> 16;
      var $941=$940 & 2;
      $K=$941;
      var $942=$N;
      var $943=((($942)+($941))|0);
      $N=$943;
      var $944=$N;
      var $945=(((14)-($944))|0);
      var $946=$K;
      var $947=$Y;
      var $948=$947 << $946;
      $Y=$948;
      var $949=$948 >>> 15;
      var $950=((($945)+($949))|0);
      $K=$950;
      var $951=$K;
      var $952=$951 << 1;
      var $953=$3;
      var $954=$K;
      var $955=((($954)+(7))|0);
      var $956=$953 >>> (($955)>>>(0));
      var $957=$956 & 1;
      var $958=((($952)+($957))|0);
      $I19=$958;
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      var $961=$I19;
      var $962=$1;
      var $963=(($962+304)|0);
      var $964=(($963+($961<<2))|0);
      $H18=$964;
      var $965=$I19;
      var $966=$TP17;
      var $967=(($966+28)|0);
      HEAP32[(($967)>>2)]=$965;
      var $968=$TP17;
      var $969=(($968+16)|0);
      var $970=(($969+4)|0);
      HEAP32[(($970)>>2)]=0;
      var $971=$TP17;
      var $972=(($971+16)|0);
      var $973=(($972)|0);
      HEAP32[(($973)>>2)]=0;
      var $974=$1;
      var $975=(($974+4)|0);
      var $976=HEAP32[(($975)>>2)];
      var $977=$I19;
      var $978=1 << $977;
      var $979=$976 & $978;
      var $980=(($979)|(0))!=0;
      if ($980) { label = 179; break; } else { label = 178; break; }
    case 178: 
      var $982=$I19;
      var $983=1 << $982;
      var $984=$1;
      var $985=(($984+4)|0);
      var $986=HEAP32[(($985)>>2)];
      var $987=$986 | $983;
      HEAP32[(($985)>>2)]=$987;
      var $988=$TP17;
      var $989=$H18;
      HEAP32[(($989)>>2)]=$988;
      var $990=$H18;
      var $991=$990;
      var $992=$TP17;
      var $993=(($992+24)|0);
      HEAP32[(($993)>>2)]=$991;
      var $994=$TP17;
      var $995=$TP17;
      var $996=(($995+12)|0);
      HEAP32[(($996)>>2)]=$994;
      var $997=$TP17;
      var $998=(($997+8)|0);
      HEAP32[(($998)>>2)]=$994;
      label = 197; break;
    case 179: 
      var $1000=$H18;
      var $1001=HEAP32[(($1000)>>2)];
      $T=$1001;
      var $1002=$3;
      var $1003=$I19;
      var $1004=(($1003)|(0))==31;
      if ($1004) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $1013 = 0;label = 182; break;
    case 181: 
      var $1007=$I19;
      var $1008=$1007 >>> 1;
      var $1009=((($1008)+(8))|0);
      var $1010=((($1009)-(2))|0);
      var $1011=(((31)-($1010))|0);
      var $1013 = $1011;label = 182; break;
    case 182: 
      var $1013;
      var $1014=$1002 << $1013;
      $K20=$1014;
      label = 183; break;
    case 183: 
      var $1016=$T;
      var $1017=(($1016+4)|0);
      var $1018=HEAP32[(($1017)>>2)];
      var $1019=$1018 & -8;
      var $1020=$3;
      var $1021=(($1019)|(0))!=(($1020)|(0));
      if ($1021) { label = 184; break; } else { label = 190; break; }
    case 184: 
      var $1023=$K20;
      var $1024=$1023 >>> 31;
      var $1025=$1024 & 1;
      var $1026=$T;
      var $1027=(($1026+16)|0);
      var $1028=(($1027+($1025<<2))|0);
      $C=$1028;
      var $1029=$K20;
      var $1030=$1029 << 1;
      $K20=$1030;
      var $1031=$C;
      var $1032=HEAP32[(($1031)>>2)];
      var $1033=(($1032)|(0))!=0;
      if ($1033) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $1035=$C;
      var $1036=HEAP32[(($1035)>>2)];
      $T=$1036;
      label = 189; break;
    case 186: 
      var $1038=$C;
      var $1039=$1038;
      var $1040=$1;
      var $1041=(($1040+16)|0);
      var $1042=HEAP32[(($1041)>>2)];
      var $1043=(($1039)>>>(0)) >= (($1042)>>>(0));
      var $1044=(($1043)&(1));
      var $1045=($1044);
      var $1046=(($1045)|(0))!=0;
      if ($1046) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $1048=$TP17;
      var $1049=$C;
      HEAP32[(($1049)>>2)]=$1048;
      var $1050=$T;
      var $1051=$TP17;
      var $1052=(($1051+24)|0);
      HEAP32[(($1052)>>2)]=$1050;
      var $1053=$TP17;
      var $1054=$TP17;
      var $1055=(($1054+12)|0);
      HEAP32[(($1055)>>2)]=$1053;
      var $1056=$TP17;
      var $1057=(($1056+8)|0);
      HEAP32[(($1057)>>2)]=$1053;
      label = 196; break;
    case 188: 
      _abort();
      throw "Reached an unreachable!";
    case 189: 
      label = 195; break;
    case 190: 
      var $1061=$T;
      var $1062=(($1061+8)|0);
      var $1063=HEAP32[(($1062)>>2)];
      $F21=$1063;
      var $1064=$T;
      var $1065=$1064;
      var $1066=$1;
      var $1067=(($1066+16)|0);
      var $1068=HEAP32[(($1067)>>2)];
      var $1069=(($1065)>>>(0)) >= (($1068)>>>(0));
      if ($1069) { label = 191; break; } else { var $1078 = 0;label = 192; break; }
    case 191: 
      var $1071=$F21;
      var $1072=$1071;
      var $1073=$1;
      var $1074=(($1073+16)|0);
      var $1075=HEAP32[(($1074)>>2)];
      var $1076=(($1072)>>>(0)) >= (($1075)>>>(0));
      var $1078 = $1076;label = 192; break;
    case 192: 
      var $1078;
      var $1079=(($1078)&(1));
      var $1080=($1079);
      var $1081=(($1080)|(0))!=0;
      if ($1081) { label = 193; break; } else { label = 194; break; }
    case 193: 
      var $1083=$TP17;
      var $1084=$F21;
      var $1085=(($1084+12)|0);
      HEAP32[(($1085)>>2)]=$1083;
      var $1086=$T;
      var $1087=(($1086+8)|0);
      HEAP32[(($1087)>>2)]=$1083;
      var $1088=$F21;
      var $1089=$TP17;
      var $1090=(($1089+8)|0);
      HEAP32[(($1090)>>2)]=$1088;
      var $1091=$T;
      var $1092=$TP17;
      var $1093=(($1092+12)|0);
      HEAP32[(($1093)>>2)]=$1091;
      var $1094=$TP17;
      var $1095=(($1094+24)|0);
      HEAP32[(($1095)>>2)]=0;
      label = 196; break;
    case 194: 
      _abort();
      throw "Reached an unreachable!";
    case 195: 
      label = 183; break;
    case 196: 
      label = 197; break;
    case 197: 
      label = 198; break;
    case 198: 
      label = 200; break;
    case 199: 
      _abort();
      throw "Reached an unreachable!";
    case 200: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_resize($m, $oldp, $nb, $flags) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      $5=$flags;
      var $6=$3;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$8 & -8;
      $oldsize=$9;
      var $10=$5;
      var $11=$4;
      var $12=$11 >>> 3;
      var $13=(($12)>>>(0)) < 32;
      if ($13) { label = 2; break; } else { label = 3; break; }
    case 2: 
      $1=0;
      label = 14; break;
    case 3: 
      var $16=$oldsize;
      var $17=$4;
      var $18=((($17)+(4))|0);
      var $19=(($16)>>>(0)) >= (($18)>>>(0));
      if ($19) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $21=$oldsize;
      var $22=$4;
      var $23=((($21)-($22))|0);
      var $24=HEAP32[((((79964)|0))>>2)];
      var $25=$24 << 1;
      var $26=(($23)>>>(0)) <= (($25)>>>(0));
      if ($26) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $28=$3;
      $1=$28;
      label = 14; break;
    case 6: 
      var $30=$3;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      $offset=$32;
      var $33=$oldsize;
      var $34=$offset;
      var $35=((($33)+($34))|0);
      var $36=((($35)+(16))|0);
      $oldmmsize=$36;
      var $37=$4;
      var $38=((($37)+(24))|0);
      var $39=((($38)+(7))|0);
      var $40=HEAP32[((((79960)|0))>>2)];
      var $41=((($40)-(1))|0);
      var $42=((($39)+($41))|0);
      var $43=HEAP32[((((79960)|0))>>2)];
      var $44=((($43)-(1))|0);
      var $45=$44 ^ -1;
      var $46=$42 & $45;
      $newmmsize=$46;
      $cp=-1;
      var $47=$cp;
      var $48=(($47)|(0))!=-1;
      if ($48) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $50=$cp;
      var $51=$offset;
      var $52=(($50+$51)|0);
      var $53=$52;
      $newp=$53;
      var $54=$newmmsize;
      var $55=$offset;
      var $56=((($54)-($55))|0);
      var $57=((($56)-(16))|0);
      $psize=$57;
      var $58=$psize;
      var $59=$newp;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$newp;
      var $62=$61;
      var $63=$psize;
      var $64=(($62+$63)|0);
      var $65=$64;
      var $66=(($65+4)|0);
      HEAP32[(($66)>>2)]=7;
      var $67=$newp;
      var $68=$67;
      var $69=$psize;
      var $70=((($69)+(4))|0);
      var $71=(($68+$70)|0);
      var $72=$71;
      var $73=(($72+4)|0);
      HEAP32[(($73)>>2)]=0;
      var $74=$cp;
      var $75=$2;
      var $76=(($75+16)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)>>>(0)) < (($77)>>>(0));
      if ($78) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $80=$cp;
      var $81=$2;
      var $82=(($81+16)|0);
      HEAP32[(($82)>>2)]=$80;
      label = 9; break;
    case 9: 
      var $84=$newmmsize;
      var $85=$oldmmsize;
      var $86=((($84)-($85))|0);
      var $87=$2;
      var $88=(($87+432)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      var $91=$2;
      var $92=(($91+436)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($90)>>>(0)) > (($93)>>>(0));
      if ($94) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $96=$2;
      var $97=(($96+432)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$2;
      var $100=(($99+436)|0);
      HEAP32[(($100)>>2)]=$98;
      label = 11; break;
    case 11: 
      var $102=$newp;
      $1=$102;
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      $1=0;
      label = 14; break;
    case 14: 
      var $106=$1;
      return $106;
    default: assert(0, "bad label: " + label);
  }
}
function _segment_holding($m, $addr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2;
      var $5=(($4+448)|0);
      $sp=$5;
      label = 2; break;
    case 2: 
      var $7=$3;
      var $8=$sp;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>(0)) >= (($10)>>>(0));
      if ($11) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $13=$3;
      var $14=$sp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$sp;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>(0)) < (($20)>>>(0));
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$sp;
      $1=$23;
      label = 8; break;
    case 5: 
      var $25=$sp;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $sp=$27;
      var $28=(($27)|(0))==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 8; break;
    case 7: 
      label = 2; break;
    case 8: 
      var $32=$1;
      return $32;
    default: assert(0, "bad label: " + label);
  }
}
function _init_top($m, $p, $psize) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=$6;
      var $8=$7 & 7;
      var $9=(($8)|(0))==0;
      if ($9) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20 = 0;label = 4; break;
    case 3: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 4; break;
    case 4: 
      var $20;
      $offset=$20;
      var $21=$2;
      var $22=$21;
      var $23=$offset;
      var $24=(($22+$23)|0);
      var $25=$24;
      $2=$25;
      var $26=$offset;
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$2;
      var $30=$1;
      var $31=(($30+24)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$3;
      var $33=$1;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$3;
      var $36=$35 | 1;
      var $37=$2;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=$39;
      var $41=$3;
      var $42=(($40+$41)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=40;
      var $45=HEAP32[((((79972)|0))>>2)];
      var $46=$1;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=$45;
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _mmap_alloc($m, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $fp;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3;
      var $5=((($4)+(24))|0);
      var $6=((($5)+(7))|0);
      var $7=HEAP32[((((79960)|0))>>2)];
      var $8=((($7)-(1))|0);
      var $9=((($6)+($8))|0);
      var $10=HEAP32[((((79960)|0))>>2)];
      var $11=((($10)-(1))|0);
      var $12=$11 ^ -1;
      var $13=$9 & $12;
      $mmsize=$13;
      var $14=$2;
      var $15=(($14+440)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|(0))!=0;
      if ($17) { label = 2; break; } else { label = 6; break; }
    case 2: 
      var $19=$2;
      var $20=(($19+432)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$mmsize;
      var $23=((($21)+($22))|0);
      $fp=$23;
      var $24=$fp;
      var $25=$2;
      var $26=(($25+432)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(($24)>>>(0)) <= (($27)>>>(0));
      if ($28) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $30=$fp;
      var $31=$2;
      var $32=(($31+440)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($30)>>>(0)) > (($33)>>>(0));
      if ($34) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 19; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $38=$mmsize;
      var $39=$3;
      var $40=(($38)>>>(0)) > (($39)>>>(0));
      if ($40) { label = 7; break; } else { label = 18; break; }
    case 7: 
      $mm=-1;
      var $42=$mm;
      var $43=(($42)|(0))!=-1;
      if ($43) { label = 8; break; } else { label = 17; break; }
    case 8: 
      var $45=$mm;
      var $46=(($45+8)|0);
      var $47=$46;
      var $48=$47 & 7;
      var $49=(($48)|(0))==0;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $59 = 0;label = 11; break;
    case 10: 
      var $52=$mm;
      var $53=(($52+8)|0);
      var $54=$53;
      var $55=$54 & 7;
      var $56=(((8)-($55))|0);
      var $57=$56 & 7;
      var $59 = $57;label = 11; break;
    case 11: 
      var $59;
      $offset=$59;
      var $60=$mmsize;
      var $61=$offset;
      var $62=((($60)-($61))|0);
      var $63=((($62)-(16))|0);
      $psize=$63;
      var $64=$mm;
      var $65=$offset;
      var $66=(($64+$65)|0);
      var $67=$66;
      $p=$67;
      var $68=$offset;
      var $69=$p;
      var $70=(($69)|0);
      HEAP32[(($70)>>2)]=$68;
      var $71=$psize;
      var $72=$p;
      var $73=(($72+4)|0);
      HEAP32[(($73)>>2)]=$71;
      var $74=$p;
      var $75=$74;
      var $76=$psize;
      var $77=(($75+$76)|0);
      var $78=$77;
      var $79=(($78+4)|0);
      HEAP32[(($79)>>2)]=7;
      var $80=$p;
      var $81=$80;
      var $82=$psize;
      var $83=((($82)+(4))|0);
      var $84=(($81+$83)|0);
      var $85=$84;
      var $86=(($85+4)|0);
      HEAP32[(($86)>>2)]=0;
      var $87=$2;
      var $88=(($87+16)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=(($89)|(0))==0;
      if ($90) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $92=$mm;
      var $93=$2;
      var $94=(($93+16)|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($92)>>>(0)) < (($95)>>>(0));
      if ($96) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $98=$mm;
      var $99=$2;
      var $100=(($99+16)|0);
      HEAP32[(($100)>>2)]=$98;
      label = 14; break;
    case 14: 
      var $102=$mmsize;
      var $103=$2;
      var $104=(($103+432)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=((($105)+($102))|0);
      HEAP32[(($104)>>2)]=$106;
      var $107=$2;
      var $108=(($107+436)|0);
      var $109=HEAP32[(($108)>>2)];
      var $110=(($106)>>>(0)) > (($109)>>>(0));
      if ($110) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $112=$2;
      var $113=(($112+432)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$2;
      var $116=(($115+436)|0);
      HEAP32[(($116)>>2)]=$114;
      label = 16; break;
    case 16: 
      var $118=$p;
      var $119=$118;
      var $120=(($119+8)|0);
      $1=$120;
      label = 19; break;
    case 17: 
      label = 18; break;
    case 18: 
      $1=0;
      label = 19; break;
    case 19: 
      var $124=$1;
      return $124;
    default: assert(0, "bad label: " + label);
  }
}
function _init_bins($m) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0;
      label = 2; break;
    case 2: 
      var $3=$i;
      var $4=(($3)>>>(0)) < 32;
      if ($4) { label = 3; break; } else { label = 5; break; }
    case 3: 
      var $6=$i;
      var $7=$6 << 1;
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=(($9+($7<<2))|0);
      var $11=$10;
      var $12=$11;
      $bin=$12;
      var $13=$bin;
      var $14=$bin;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$bin;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 4; break;
    case 4: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 2; break;
    case 5: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=$7;
      var $9=$8 & 7;
      var $10=(($9)|(0))==0;
      if ($10) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $20 = 0;label = 4; break;
    case 3: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 4; break;
    case 4: 
      var $20;
      var $21=(($5+$20)|0);
      var $22=$21;
      $p=$22;
      var $23=$3;
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=$25;
      var $27=$26 & 7;
      var $28=(($27)|(0))==0;
      if ($28) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $38 = 0;label = 7; break;
    case 6: 
      var $31=$3;
      var $32=(($31+8)|0);
      var $33=$32;
      var $34=$33 & 7;
      var $35=(((8)-($34))|0);
      var $36=$35 & 7;
      var $38 = $36;label = 7; break;
    case 7: 
      var $38;
      var $39=(($23+$38)|0);
      var $40=$39;
      $oldfirst=$40;
      var $41=$oldfirst;
      var $42=$41;
      var $43=$p;
      var $44=$43;
      var $45=$42;
      var $46=$44;
      var $47=((($45)-($46))|0);
      $psize=$47;
      var $48=$p;
      var $49=$48;
      var $50=$4;
      var $51=(($49+$50)|0);
      var $52=$51;
      $q=$52;
      var $53=$psize;
      var $54=$4;
      var $55=((($53)-($54))|0);
      $qsize=$55;
      var $56=$4;
      var $57=$56 | 1;
      var $58=$57 | 2;
      var $59=$p;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$oldfirst;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)|(0))==(($64)|(0));
      if ($65) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $67=$qsize;
      var $68=$1;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+($67))|0);
      HEAP32[(($69)>>2)]=$71;
      $tsize=$71;
      var $72=$q;
      var $73=$1;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$tsize;
      var $76=$75 | 1;
      var $77=$q;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 118; break;
    case 9: 
      var $80=$oldfirst;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80)|(0))==(($83)|(0));
      if ($84) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $86=$qsize;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      $dsize=$90;
      var $91=$q;
      var $92=$1;
      var $93=(($92+20)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$dsize;
      var $95=$94 | 1;
      var $96=$q;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$dsize;
      var $99=$q;
      var $100=$99;
      var $101=$dsize;
      var $102=(($100+$101)|0);
      var $103=$102;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$98;
      label = 117; break;
    case 11: 
      var $106=$oldfirst;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 3;
      var $110=(($109)|(0))!=1;
      if ($110) { label = 81; break; } else { label = 12; break; }
    case 12: 
      var $112=$oldfirst;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -8;
      $nsize=$115;
      var $116=$nsize;
      var $117=$116 >>> 3;
      var $118=(($117)>>>(0)) < 32;
      if ($118) { label = 13; break; } else { label = 31; break; }
    case 13: 
      var $120=$oldfirst;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      $F=$122;
      var $123=$oldfirst;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $B=$125;
      var $126=$nsize;
      var $127=$126 >>> 3;
      $I=$127;
      var $128=$F;
      var $129=$I;
      var $130=$129 << 1;
      var $131=$1;
      var $132=(($131+40)|0);
      var $133=(($132+($130<<2))|0);
      var $134=$133;
      var $135=$134;
      var $136=(($128)|(0))==(($135)|(0));
      if ($136) { var $153 = 1;label = 17; break; } else { label = 14; break; }
    case 14: 
      var $138=$F;
      var $139=$138;
      var $140=$1;
      var $141=(($140+16)|0);
      var $142=HEAP32[(($141)>>2)];
      var $143=(($139)>>>(0)) >= (($142)>>>(0));
      if ($143) { label = 15; break; } else { var $151 = 0;label = 16; break; }
    case 15: 
      var $145=$F;
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$oldfirst;
      var $149=(($147)|(0))==(($148)|(0));
      var $151 = $149;label = 16; break;
    case 16: 
      var $151;
      var $153 = $151;label = 17; break;
    case 17: 
      var $153;
      var $154=(($153)&(1));
      var $155=($154);
      var $156=(($155)|(0))!=0;
      if ($156) { label = 18; break; } else { label = 29; break; }
    case 18: 
      var $158=$B;
      var $159=$F;
      var $160=(($158)|(0))==(($159)|(0));
      if ($160) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $162=$I;
      var $163=1 << $162;
      var $164=$163 ^ -1;
      var $165=$1;
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$167 & $164;
      HEAP32[(($166)>>2)]=$168;
      label = 28; break;
    case 20: 
      var $170=$B;
      var $171=$I;
      var $172=$171 << 1;
      var $173=$1;
      var $174=(($173+40)|0);
      var $175=(($174+($172<<2))|0);
      var $176=$175;
      var $177=$176;
      var $178=(($170)|(0))==(($177)|(0));
      if ($178) { var $195 = 1;label = 24; break; } else { label = 21; break; }
    case 21: 
      var $180=$B;
      var $181=$180;
      var $182=$1;
      var $183=(($182+16)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=(($181)>>>(0)) >= (($184)>>>(0));
      if ($185) { label = 22; break; } else { var $193 = 0;label = 23; break; }
    case 22: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$oldfirst;
      var $191=(($189)|(0))==(($190)|(0));
      var $193 = $191;label = 23; break;
    case 23: 
      var $193;
      var $195 = $193;label = 24; break;
    case 24: 
      var $195;
      var $196=(($195)&(1));
      var $197=($196);
      var $198=(($197)|(0))!=0;
      if ($198) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $200=$B;
      var $201=$F;
      var $202=(($201+12)|0);
      HEAP32[(($202)>>2)]=$200;
      var $203=$F;
      var $204=$B;
      var $205=(($204+8)|0);
      HEAP32[(($205)>>2)]=$203;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!";
    case 27: 
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!";
    case 30: 
      label = 80; break;
    case 31: 
      var $212=$oldfirst;
      var $213=$212;
      $TP=$213;
      var $214=$TP;
      var $215=(($214+24)|0);
      var $216=HEAP32[(($215)>>2)];
      $XP=$216;
      var $217=$TP;
      var $218=(($217+12)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$TP;
      var $221=(($219)|(0))!=(($220)|(0));
      if ($221) { label = 32; break; } else { label = 39; break; }
    case 32: 
      var $223=$TP;
      var $224=(($223+8)|0);
      var $225=HEAP32[(($224)>>2)];
      $F1=$225;
      var $226=$TP;
      var $227=(($226+12)|0);
      var $228=HEAP32[(($227)>>2)];
      $R=$228;
      var $229=$F1;
      var $230=$229;
      var $231=$1;
      var $232=(($231+16)|0);
      var $233=HEAP32[(($232)>>2)];
      var $234=(($230)>>>(0)) >= (($233)>>>(0));
      if ($234) { label = 33; break; } else { var $248 = 0;label = 35; break; }
    case 33: 
      var $236=$F1;
      var $237=(($236+12)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$TP;
      var $240=(($238)|(0))==(($239)|(0));
      if ($240) { label = 34; break; } else { var $248 = 0;label = 35; break; }
    case 34: 
      var $242=$R;
      var $243=(($242+8)|0);
      var $244=HEAP32[(($243)>>2)];
      var $245=$TP;
      var $246=(($244)|(0))==(($245)|(0));
      var $248 = $246;label = 35; break;
    case 35: 
      var $248;
      var $249=(($248)&(1));
      var $250=($249);
      var $251=(($250)|(0))!=0;
      if ($251) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $253=$R;
      var $254=$F1;
      var $255=(($254+12)|0);
      HEAP32[(($255)>>2)]=$253;
      var $256=$F1;
      var $257=$R;
      var $258=(($257+8)|0);
      HEAP32[(($258)>>2)]=$256;
      label = 38; break;
    case 37: 
      _abort();
      throw "Reached an unreachable!";
    case 38: 
      label = 51; break;
    case 39: 
      var $262=$TP;
      var $263=(($262+16)|0);
      var $264=(($263+4)|0);
      $RP=$264;
      var $265=HEAP32[(($264)>>2)];
      $R=$265;
      var $266=(($265)|(0))!=0;
      if ($266) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $268=$TP;
      var $269=(($268+16)|0);
      var $270=(($269)|0);
      $RP=$270;
      var $271=HEAP32[(($270)>>2)];
      $R=$271;
      var $272=(($271)|(0))!=0;
      if ($272) { label = 41; break; } else { label = 50; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $275=$R;
      var $276=(($275+16)|0);
      var $277=(($276+4)|0);
      $CP=$277;
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278)|(0))!=0;
      if ($279) { var $287 = 1;label = 44; break; } else { label = 43; break; }
    case 43: 
      var $281=$R;
      var $282=(($281+16)|0);
      var $283=(($282)|0);
      $CP=$283;
      var $284=HEAP32[(($283)>>2)];
      var $285=(($284)|(0))!=0;
      var $287 = $285;label = 44; break;
    case 44: 
      var $287;
      if ($287) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $289=$CP;
      $RP=$289;
      var $290=HEAP32[(($289)>>2)];
      $R=$290;
      label = 42; break;
    case 46: 
      var $292=$RP;
      var $293=$292;
      var $294=$1;
      var $295=(($294+16)|0);
      var $296=HEAP32[(($295)>>2)];
      var $297=(($293)>>>(0)) >= (($296)>>>(0));
      var $298=(($297)&(1));
      var $299=($298);
      var $300=(($299)|(0))!=0;
      if ($300) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $302=$RP;
      HEAP32[(($302)>>2)]=0;
      label = 49; break;
    case 48: 
      _abort();
      throw "Reached an unreachable!";
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $307=$XP;
      var $308=(($307)|(0))!=0;
      if ($308) { label = 52; break; } else { label = 79; break; }
    case 52: 
      var $310=$TP;
      var $311=(($310+28)|0);
      var $312=HEAP32[(($311)>>2)];
      var $313=$1;
      var $314=(($313+304)|0);
      var $315=(($314+($312<<2))|0);
      $H=$315;
      var $316=$TP;
      var $317=$H;
      var $318=HEAP32[(($317)>>2)];
      var $319=(($316)|(0))==(($318)|(0));
      if ($319) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $321=$R;
      var $322=$H;
      HEAP32[(($322)>>2)]=$321;
      var $323=(($321)|(0))==0;
      if ($323) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $325=$TP;
      var $326=(($325+28)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=1 << $327;
      var $329=$328 ^ -1;
      var $330=$1;
      var $331=(($330+4)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=$332 & $329;
      HEAP32[(($331)>>2)]=$333;
      label = 55; break;
    case 55: 
      label = 63; break;
    case 56: 
      var $336=$XP;
      var $337=$336;
      var $338=$1;
      var $339=(($338+16)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=(($337)>>>(0)) >= (($340)>>>(0));
      var $342=(($341)&(1));
      var $343=($342);
      var $344=(($343)|(0))!=0;
      if ($344) { label = 57; break; } else { label = 61; break; }
    case 57: 
      var $346=$XP;
      var $347=(($346+16)|0);
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=$TP;
      var $351=(($349)|(0))==(($350)|(0));
      if ($351) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $353=$R;
      var $354=$XP;
      var $355=(($354+16)|0);
      var $356=(($355)|0);
      HEAP32[(($356)>>2)]=$353;
      label = 60; break;
    case 59: 
      var $358=$R;
      var $359=$XP;
      var $360=(($359+16)|0);
      var $361=(($360+4)|0);
      HEAP32[(($361)>>2)]=$358;
      label = 60; break;
    case 60: 
      label = 62; break;
    case 61: 
      _abort();
      throw "Reached an unreachable!";
    case 62: 
      label = 63; break;
    case 63: 
      var $366=$R;
      var $367=(($366)|(0))!=0;
      if ($367) { label = 64; break; } else { label = 78; break; }
    case 64: 
      var $369=$R;
      var $370=$369;
      var $371=$1;
      var $372=(($371+16)|0);
      var $373=HEAP32[(($372)>>2)];
      var $374=(($370)>>>(0)) >= (($373)>>>(0));
      var $375=(($374)&(1));
      var $376=($375);
      var $377=(($376)|(0))!=0;
      if ($377) { label = 65; break; } else { label = 76; break; }
    case 65: 
      var $379=$XP;
      var $380=$R;
      var $381=(($380+24)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$TP;
      var $383=(($382+16)|0);
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      $C0=$385;
      var $386=(($385)|(0))!=0;
      if ($386) { label = 66; break; } else { label = 70; break; }
    case 66: 
      var $388=$C0;
      var $389=$388;
      var $390=$1;
      var $391=(($390+16)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=(($389)>>>(0)) >= (($392)>>>(0));
      var $394=(($393)&(1));
      var $395=($394);
      var $396=(($395)|(0))!=0;
      if ($396) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $398=$C0;
      var $399=$R;
      var $400=(($399+16)|0);
      var $401=(($400)|0);
      HEAP32[(($401)>>2)]=$398;
      var $402=$R;
      var $403=$C0;
      var $404=(($403+24)|0);
      HEAP32[(($404)>>2)]=$402;
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!";
    case 69: 
      label = 70; break;
    case 70: 
      var $408=$TP;
      var $409=(($408+16)|0);
      var $410=(($409+4)|0);
      var $411=HEAP32[(($410)>>2)];
      $C1=$411;
      var $412=(($411)|(0))!=0;
      if ($412) { label = 71; break; } else { label = 75; break; }
    case 71: 
      var $414=$C1;
      var $415=$414;
      var $416=$1;
      var $417=(($416+16)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=(($415)>>>(0)) >= (($418)>>>(0));
      var $420=(($419)&(1));
      var $421=($420);
      var $422=(($421)|(0))!=0;
      if ($422) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $424=$C1;
      var $425=$R;
      var $426=(($425+16)|0);
      var $427=(($426+4)|0);
      HEAP32[(($427)>>2)]=$424;
      var $428=$R;
      var $429=$C1;
      var $430=(($429+24)|0);
      HEAP32[(($430)>>2)]=$428;
      label = 74; break;
    case 73: 
      _abort();
      throw "Reached an unreachable!";
    case 74: 
      label = 75; break;
    case 75: 
      label = 77; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!";
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $439=$oldfirst;
      var $440=$439;
      var $441=$nsize;
      var $442=(($440+$441)|0);
      var $443=$442;
      $oldfirst=$443;
      var $444=$nsize;
      var $445=$qsize;
      var $446=((($445)+($444))|0);
      $qsize=$446;
      label = 81; break;
    case 81: 
      var $448=$oldfirst;
      var $449=(($448+4)|0);
      var $450=HEAP32[(($449)>>2)];
      var $451=$450 & -2;
      HEAP32[(($449)>>2)]=$451;
      var $452=$qsize;
      var $453=$452 | 1;
      var $454=$q;
      var $455=(($454+4)|0);
      HEAP32[(($455)>>2)]=$453;
      var $456=$qsize;
      var $457=$q;
      var $458=$457;
      var $459=$qsize;
      var $460=(($458+$459)|0);
      var $461=$460;
      var $462=(($461)|0);
      HEAP32[(($462)>>2)]=$456;
      var $463=$qsize;
      var $464=$463 >>> 3;
      var $465=(($464)>>>(0)) < 32;
      if ($465) { label = 82; break; } else { label = 89; break; }
    case 82: 
      var $467=$qsize;
      var $468=$467 >>> 3;
      $I2=$468;
      var $469=$I2;
      var $470=$469 << 1;
      var $471=$1;
      var $472=(($471+40)|0);
      var $473=(($472+($470<<2))|0);
      var $474=$473;
      var $475=$474;
      $B3=$475;
      var $476=$B3;
      $F4=$476;
      var $477=$1;
      var $478=(($477)|0);
      var $479=HEAP32[(($478)>>2)];
      var $480=$I2;
      var $481=1 << $480;
      var $482=$479 & $481;
      var $483=(($482)|(0))!=0;
      if ($483) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $485=$I2;
      var $486=1 << $485;
      var $487=$1;
      var $488=(($487)|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=$489 | $486;
      HEAP32[(($488)>>2)]=$490;
      label = 88; break;
    case 84: 
      var $492=$B3;
      var $493=(($492+8)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=$494;
      var $496=$1;
      var $497=(($496+16)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=(($495)>>>(0)) >= (($498)>>>(0));
      var $500=(($499)&(1));
      var $501=($500);
      var $502=(($501)|(0))!=0;
      if ($502) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $504=$B3;
      var $505=(($504+8)|0);
      var $506=HEAP32[(($505)>>2)];
      $F4=$506;
      label = 87; break;
    case 86: 
      _abort();
      throw "Reached an unreachable!";
    case 87: 
      label = 88; break;
    case 88: 
      var $510=$q;
      var $511=$B3;
      var $512=(($511+8)|0);
      HEAP32[(($512)>>2)]=$510;
      var $513=$q;
      var $514=$F4;
      var $515=(($514+12)|0);
      HEAP32[(($515)>>2)]=$513;
      var $516=$F4;
      var $517=$q;
      var $518=(($517+8)|0);
      HEAP32[(($518)>>2)]=$516;
      var $519=$B3;
      var $520=$q;
      var $521=(($520+12)|0);
      HEAP32[(($521)>>2)]=$519;
      label = 116; break;
    case 89: 
      var $523=$q;
      var $524=$523;
      $TP5=$524;
      var $525=$qsize;
      var $526=$525 >>> 8;
      $X=$526;
      var $527=$X;
      var $528=(($527)|(0))==0;
      if ($528) { label = 90; break; } else { label = 91; break; }
    case 90: 
      $I7=0;
      label = 95; break;
    case 91: 
      var $531=$X;
      var $532=(($531)>>>(0)) > 65535;
      if ($532) { label = 92; break; } else { label = 93; break; }
    case 92: 
      $I7=31;
      label = 94; break;
    case 93: 
      var $535=$X;
      $Y=$535;
      var $536=$Y;
      var $537=((($536)-(256))|0);
      var $538=$537 >>> 16;
      var $539=$538 & 8;
      $N=$539;
      var $540=$N;
      var $541=$Y;
      var $542=$541 << $540;
      $Y=$542;
      var $543=((($542)-(4096))|0);
      var $544=$543 >>> 16;
      var $545=$544 & 4;
      $K=$545;
      var $546=$K;
      var $547=$N;
      var $548=((($547)+($546))|0);
      $N=$548;
      var $549=$K;
      var $550=$Y;
      var $551=$550 << $549;
      $Y=$551;
      var $552=((($551)-(16384))|0);
      var $553=$552 >>> 16;
      var $554=$553 & 2;
      $K=$554;
      var $555=$N;
      var $556=((($555)+($554))|0);
      $N=$556;
      var $557=$N;
      var $558=(((14)-($557))|0);
      var $559=$K;
      var $560=$Y;
      var $561=$560 << $559;
      $Y=$561;
      var $562=$561 >>> 15;
      var $563=((($558)+($562))|0);
      $K=$563;
      var $564=$K;
      var $565=$564 << 1;
      var $566=$qsize;
      var $567=$K;
      var $568=((($567)+(7))|0);
      var $569=$566 >>> (($568)>>>(0));
      var $570=$569 & 1;
      var $571=((($565)+($570))|0);
      $I7=$571;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $574=$I7;
      var $575=$1;
      var $576=(($575+304)|0);
      var $577=(($576+($574<<2))|0);
      $H6=$577;
      var $578=$I7;
      var $579=$TP5;
      var $580=(($579+28)|0);
      HEAP32[(($580)>>2)]=$578;
      var $581=$TP5;
      var $582=(($581+16)|0);
      var $583=(($582+4)|0);
      HEAP32[(($583)>>2)]=0;
      var $584=$TP5;
      var $585=(($584+16)|0);
      var $586=(($585)|0);
      HEAP32[(($586)>>2)]=0;
      var $587=$1;
      var $588=(($587+4)|0);
      var $589=HEAP32[(($588)>>2)];
      var $590=$I7;
      var $591=1 << $590;
      var $592=$589 & $591;
      var $593=(($592)|(0))!=0;
      if ($593) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $595=$I7;
      var $596=1 << $595;
      var $597=$1;
      var $598=(($597+4)|0);
      var $599=HEAP32[(($598)>>2)];
      var $600=$599 | $596;
      HEAP32[(($598)>>2)]=$600;
      var $601=$TP5;
      var $602=$H6;
      HEAP32[(($602)>>2)]=$601;
      var $603=$H6;
      var $604=$603;
      var $605=$TP5;
      var $606=(($605+24)|0);
      HEAP32[(($606)>>2)]=$604;
      var $607=$TP5;
      var $608=$TP5;
      var $609=(($608+12)|0);
      HEAP32[(($609)>>2)]=$607;
      var $610=$TP5;
      var $611=(($610+8)|0);
      HEAP32[(($611)>>2)]=$607;
      label = 115; break;
    case 97: 
      var $613=$H6;
      var $614=HEAP32[(($613)>>2)];
      $T=$614;
      var $615=$qsize;
      var $616=$I7;
      var $617=(($616)|(0))==31;
      if ($617) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $626 = 0;label = 100; break;
    case 99: 
      var $620=$I7;
      var $621=$620 >>> 1;
      var $622=((($621)+(8))|0);
      var $623=((($622)-(2))|0);
      var $624=(((31)-($623))|0);
      var $626 = $624;label = 100; break;
    case 100: 
      var $626;
      var $627=$615 << $626;
      $K8=$627;
      label = 101; break;
    case 101: 
      var $629=$T;
      var $630=(($629+4)|0);
      var $631=HEAP32[(($630)>>2)];
      var $632=$631 & -8;
      var $633=$qsize;
      var $634=(($632)|(0))!=(($633)|(0));
      if ($634) { label = 102; break; } else { label = 108; break; }
    case 102: 
      var $636=$K8;
      var $637=$636 >>> 31;
      var $638=$637 & 1;
      var $639=$T;
      var $640=(($639+16)|0);
      var $641=(($640+($638<<2))|0);
      $C=$641;
      var $642=$K8;
      var $643=$642 << 1;
      $K8=$643;
      var $644=$C;
      var $645=HEAP32[(($644)>>2)];
      var $646=(($645)|(0))!=0;
      if ($646) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $648=$C;
      var $649=HEAP32[(($648)>>2)];
      $T=$649;
      label = 107; break;
    case 104: 
      var $651=$C;
      var $652=$651;
      var $653=$1;
      var $654=(($653+16)|0);
      var $655=HEAP32[(($654)>>2)];
      var $656=(($652)>>>(0)) >= (($655)>>>(0));
      var $657=(($656)&(1));
      var $658=($657);
      var $659=(($658)|(0))!=0;
      if ($659) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $661=$TP5;
      var $662=$C;
      HEAP32[(($662)>>2)]=$661;
      var $663=$T;
      var $664=$TP5;
      var $665=(($664+24)|0);
      HEAP32[(($665)>>2)]=$663;
      var $666=$TP5;
      var $667=$TP5;
      var $668=(($667+12)|0);
      HEAP32[(($668)>>2)]=$666;
      var $669=$TP5;
      var $670=(($669+8)|0);
      HEAP32[(($670)>>2)]=$666;
      label = 114; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!";
    case 107: 
      label = 113; break;
    case 108: 
      var $674=$T;
      var $675=(($674+8)|0);
      var $676=HEAP32[(($675)>>2)];
      $F9=$676;
      var $677=$T;
      var $678=$677;
      var $679=$1;
      var $680=(($679+16)|0);
      var $681=HEAP32[(($680)>>2)];
      var $682=(($678)>>>(0)) >= (($681)>>>(0));
      if ($682) { label = 109; break; } else { var $691 = 0;label = 110; break; }
    case 109: 
      var $684=$F9;
      var $685=$684;
      var $686=$1;
      var $687=(($686+16)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=(($685)>>>(0)) >= (($688)>>>(0));
      var $691 = $689;label = 110; break;
    case 110: 
      var $691;
      var $692=(($691)&(1));
      var $693=($692);
      var $694=(($693)|(0))!=0;
      if ($694) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $696=$TP5;
      var $697=$F9;
      var $698=(($697+12)|0);
      HEAP32[(($698)>>2)]=$696;
      var $699=$T;
      var $700=(($699+8)|0);
      HEAP32[(($700)>>2)]=$696;
      var $701=$F9;
      var $702=$TP5;
      var $703=(($702+8)|0);
      HEAP32[(($703)>>2)]=$701;
      var $704=$T;
      var $705=$TP5;
      var $706=(($705+12)|0);
      HEAP32[(($706)>>2)]=$704;
      var $707=$TP5;
      var $708=(($707+24)|0);
      HEAP32[(($708)>>2)]=0;
      label = 114; break;
    case 112: 
      _abort();
      throw "Reached an unreachable!";
    case 113: 
      label = 101; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $716=$p;
      var $717=$716;
      var $718=(($717+8)|0);
      return $718;
    default: assert(0, "bad label: " + label);
  }
}
function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $old_top=$8;
      var $9=$1;
      var $10=$old_top;
      var $11=_segment_holding($9, $10);
      $oldsp=$11;
      var $12=$oldsp;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$oldsp;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $old_end=$18;
      $ssize=24;
      var $19=$old_end;
      var $20=$ssize;
      var $21=((($20)+(16))|0);
      var $22=((($21)+(7))|0);
      var $23=(((-$22))|0);
      var $24=(($19+$23)|0);
      $rawsp=$24;
      var $25=$rawsp;
      var $26=(($25+8)|0);
      var $27=$26;
      var $28=$27 & 7;
      var $29=(($28)|(0))==0;
      if ($29) { label = 2; break; } else { label = 3; break; }
    case 2: 
      var $39 = 0;label = 4; break;
    case 3: 
      var $32=$rawsp;
      var $33=(($32+8)|0);
      var $34=$33;
      var $35=$34 & 7;
      var $36=(((8)-($35))|0);
      var $37=$36 & 7;
      var $39 = $37;label = 4; break;
    case 4: 
      var $39;
      $offset=$39;
      var $40=$rawsp;
      var $41=$offset;
      var $42=(($40+$41)|0);
      $asp=$42;
      var $43=$asp;
      var $44=$old_top;
      var $45=(($44+16)|0);
      var $46=(($43)>>>(0)) < (($45)>>>(0));
      if ($46) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $48=$old_top;
      var $52 = $48;label = 7; break;
    case 6: 
      var $50=$asp;
      var $52 = $50;label = 7; break;
    case 7: 
      var $52;
      $csp=$52;
      var $53=$csp;
      var $54=$53;
      $sp=$54;
      var $55=$sp;
      var $56=$55;
      var $57=(($56+8)|0);
      var $58=$57;
      $ss=$58;
      var $59=$sp;
      var $60=$59;
      var $61=$ssize;
      var $62=(($60+$61)|0);
      var $63=$62;
      $tnext=$63;
      var $64=$tnext;
      $p=$64;
      $nfences=0;
      var $65=$1;
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=((($68)-(40))|0);
      _init_top($65, $67, $69);
      var $70=$ssize;
      var $71=$70 | 1;
      var $72=$71 | 2;
      var $73=$sp;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$ss;
      var $76=$1;
      var $77=(($76+448)|0);
      var $78=$75;
      var $79=$77;
      assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
      var $80=$2;
      var $81=$1;
      var $82=(($81+448)|0);
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$3;
      var $85=$1;
      var $86=(($85+448)|0);
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$84;
      var $88=$4;
      var $89=$1;
      var $90=(($89+448)|0);
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$88;
      var $92=$ss;
      var $93=$1;
      var $94=(($93+448)|0);
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$92;
      label = 8; break;
    case 8: 
      var $97=$p;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=$99;
      $nextp=$100;
      var $101=$p;
      var $102=(($101+4)|0);
      HEAP32[(($102)>>2)]=7;
      var $103=$nfences;
      var $104=((($103)+(1))|0);
      $nfences=$104;
      var $105=$nextp;
      var $106=(($105+4)|0);
      var $107=$106;
      var $108=$old_end;
      var $109=(($107)>>>(0)) < (($108)>>>(0));
      if ($109) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $111=$nextp;
      $p=$111;
      label = 11; break;
    case 10: 
      label = 12; break;
    case 11: 
      label = 8; break;
    case 12: 
      var $115=$csp;
      var $116=$old_top;
      var $117=(($115)|(0))!=(($116)|(0));
      if ($117) { label = 13; break; } else { label = 49; break; }
    case 13: 
      var $119=$old_top;
      var $120=$119;
      $q=$120;
      var $121=$csp;
      var $122=$old_top;
      var $123=$121;
      var $124=$122;
      var $125=((($123)-($124))|0);
      $psize=$125;
      var $126=$q;
      var $127=$126;
      var $128=$psize;
      var $129=(($127+$128)|0);
      var $130=$129;
      $tn=$130;
      var $131=$tn;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -2;
      HEAP32[(($132)>>2)]=$134;
      var $135=$psize;
      var $136=$135 | 1;
      var $137=$q;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$psize;
      var $140=$q;
      var $141=$140;
      var $142=$psize;
      var $143=(($141+$142)|0);
      var $144=$143;
      var $145=(($144)|0);
      HEAP32[(($145)>>2)]=$139;
      var $146=$psize;
      var $147=$146 >>> 3;
      var $148=(($147)>>>(0)) < 32;
      if ($148) { label = 14; break; } else { label = 21; break; }
    case 14: 
      var $150=$psize;
      var $151=$150 >>> 3;
      $I=$151;
      var $152=$I;
      var $153=$152 << 1;
      var $154=$1;
      var $155=(($154+40)|0);
      var $156=(($155+($153<<2))|0);
      var $157=$156;
      var $158=$157;
      $B=$158;
      var $159=$B;
      $F=$159;
      var $160=$1;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$I;
      var $164=1 << $163;
      var $165=$162 & $164;
      var $166=(($165)|(0))!=0;
      if ($166) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $168=$I;
      var $169=1 << $168;
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172 | $169;
      HEAP32[(($171)>>2)]=$173;
      label = 20; break;
    case 16: 
      var $175=$B;
      var $176=(($175+8)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$1;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>(0)) >= (($181)>>>(0));
      var $183=(($182)&(1));
      var $184=($183);
      var $185=(($184)|(0))!=0;
      if ($185) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      $F=$189;
      label = 19; break;
    case 18: 
      _abort();
      throw "Reached an unreachable!";
    case 19: 
      label = 20; break;
    case 20: 
      var $193=$q;
      var $194=$B;
      var $195=(($194+8)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=$q;
      var $197=$F;
      var $198=(($197+12)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$F;
      var $200=$q;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$B;
      var $203=$q;
      var $204=(($203+12)|0);
      HEAP32[(($204)>>2)]=$202;
      label = 48; break;
    case 21: 
      var $206=$q;
      var $207=$206;
      $TP=$207;
      var $208=$psize;
      var $209=$208 >>> 8;
      $X=$209;
      var $210=$X;
      var $211=(($210)|(0))==0;
      if ($211) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $I1=0;
      label = 27; break;
    case 23: 
      var $214=$X;
      var $215=(($214)>>>(0)) > 65535;
      if ($215) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $I1=31;
      label = 26; break;
    case 25: 
      var $218=$X;
      $Y=$218;
      var $219=$Y;
      var $220=((($219)-(256))|0);
      var $221=$220 >>> 16;
      var $222=$221 & 8;
      $N=$222;
      var $223=$N;
      var $224=$Y;
      var $225=$224 << $223;
      $Y=$225;
      var $226=((($225)-(4096))|0);
      var $227=$226 >>> 16;
      var $228=$227 & 4;
      $K=$228;
      var $229=$K;
      var $230=$N;
      var $231=((($230)+($229))|0);
      $N=$231;
      var $232=$K;
      var $233=$Y;
      var $234=$233 << $232;
      $Y=$234;
      var $235=((($234)-(16384))|0);
      var $236=$235 >>> 16;
      var $237=$236 & 2;
      $K=$237;
      var $238=$N;
      var $239=((($238)+($237))|0);
      $N=$239;
      var $240=$N;
      var $241=(((14)-($240))|0);
      var $242=$K;
      var $243=$Y;
      var $244=$243 << $242;
      $Y=$244;
      var $245=$244 >>> 15;
      var $246=((($241)+($245))|0);
      $K=$246;
      var $247=$K;
      var $248=$247 << 1;
      var $249=$psize;
      var $250=$K;
      var $251=((($250)+(7))|0);
      var $252=$249 >>> (($251)>>>(0));
      var $253=$252 & 1;
      var $254=((($248)+($253))|0);
      $I1=$254;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $257=$I1;
      var $258=$1;
      var $259=(($258+304)|0);
      var $260=(($259+($257<<2))|0);
      $H=$260;
      var $261=$I1;
      var $262=$TP;
      var $263=(($262+28)|0);
      HEAP32[(($263)>>2)]=$261;
      var $264=$TP;
      var $265=(($264+16)|0);
      var $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$TP;
      var $268=(($267+16)|0);
      var $269=(($268)|0);
      HEAP32[(($269)>>2)]=0;
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$I1;
      var $274=1 << $273;
      var $275=$272 & $274;
      var $276=(($275)|(0))!=0;
      if ($276) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $278=$I1;
      var $279=1 << $278;
      var $280=$1;
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$282 | $279;
      HEAP32[(($281)>>2)]=$283;
      var $284=$TP;
      var $285=$H;
      HEAP32[(($285)>>2)]=$284;
      var $286=$H;
      var $287=$286;
      var $288=$TP;
      var $289=(($288+24)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$TP;
      var $291=$TP;
      var $292=(($291+12)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$TP;
      var $294=(($293+8)|0);
      HEAP32[(($294)>>2)]=$290;
      label = 47; break;
    case 29: 
      var $296=$H;
      var $297=HEAP32[(($296)>>2)];
      $T=$297;
      var $298=$psize;
      var $299=$I1;
      var $300=(($299)|(0))==31;
      if ($300) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $309 = 0;label = 32; break;
    case 31: 
      var $303=$I1;
      var $304=$303 >>> 1;
      var $305=((($304)+(8))|0);
      var $306=((($305)-(2))|0);
      var $307=(((31)-($306))|0);
      var $309 = $307;label = 32; break;
    case 32: 
      var $309;
      var $310=$298 << $309;
      $K2=$310;
      label = 33; break;
    case 33: 
      var $312=$T;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & -8;
      var $316=$psize;
      var $317=(($315)|(0))!=(($316)|(0));
      if ($317) { label = 34; break; } else { label = 40; break; }
    case 34: 
      var $319=$K2;
      var $320=$319 >>> 31;
      var $321=$320 & 1;
      var $322=$T;
      var $323=(($322+16)|0);
      var $324=(($323+($321<<2))|0);
      $C=$324;
      var $325=$K2;
      var $326=$325 << 1;
      $K2=$326;
      var $327=$C;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|(0))!=0;
      if ($329) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $331=$C;
      var $332=HEAP32[(($331)>>2)];
      $T=$332;
      label = 39; break;
    case 36: 
      var $334=$C;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>(0)) >= (($338)>>>(0));
      var $340=(($339)&(1));
      var $341=($340);
      var $342=(($341)|(0))!=0;
      if ($342) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $344=$TP;
      var $345=$C;
      HEAP32[(($345)>>2)]=$344;
      var $346=$T;
      var $347=$TP;
      var $348=(($347+24)|0);
      HEAP32[(($348)>>2)]=$346;
      var $349=$TP;
      var $350=$TP;
      var $351=(($350+12)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$TP;
      var $353=(($352+8)|0);
      HEAP32[(($353)>>2)]=$349;
      label = 46; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!";
    case 39: 
      label = 45; break;
    case 40: 
      var $357=$T;
      var $358=(($357+8)|0);
      var $359=HEAP32[(($358)>>2)];
      $F3=$359;
      var $360=$T;
      var $361=$360;
      var $362=$1;
      var $363=(($362+16)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($361)>>>(0)) >= (($364)>>>(0));
      if ($365) { label = 41; break; } else { var $374 = 0;label = 42; break; }
    case 41: 
      var $367=$F3;
      var $368=$367;
      var $369=$1;
      var $370=(($369+16)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($368)>>>(0)) >= (($371)>>>(0));
      var $374 = $372;label = 42; break;
    case 42: 
      var $374;
      var $375=(($374)&(1));
      var $376=($375);
      var $377=(($376)|(0))!=0;
      if ($377) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $379=$TP;
      var $380=$F3;
      var $381=(($380+12)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$T;
      var $383=(($382+8)|0);
      HEAP32[(($383)>>2)]=$379;
      var $384=$F3;
      var $385=$TP;
      var $386=(($385+8)|0);
      HEAP32[(($386)>>2)]=$384;
      var $387=$T;
      var $388=$TP;
      var $389=(($388+12)|0);
      HEAP32[(($389)>>2)]=$387;
      var $390=$TP;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=0;
      label = 46; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!";
    case 45: 
      label = 33; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      return;
    default: assert(0, "bad label: " + label);
  }
}
function _strtod($string, $endPtr) {
  var label = 0;
  label = 1; 
  while(1) switch(label) {
    case 1: 
      var $1;
      var $2;
      var $3;
      var $sign;
      var $expSign;
      var $fraction;
      var $dblExp;
      var $d;
      var $p;
      var $c;
      var $exp;
      var $fracExp;
      var $mantSize;
      var $decPt;
      var $pExp;
      var $frac1;
      var $frac2;
      $2=$string;
      $3=$endPtr;
      $expSign=0;
      $exp=0;
      $fracExp=0;
      var $4=$2;
      $p=$4;
      label = 2; break;
    case 2: 
      var $6=$p;
      var $7=HEAP8[($6)];
      var $8=(($7 << 24) >> 24);
      var $9=_isspace($8);
      var $10=(($9)|(0))!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$p;
      var $13=(($12+1)|0);
      $p=$13;
      label = 2; break;
    case 4: 
      var $15=$p;
      var $16=HEAP8[($15)];
      var $17=(($16 << 24) >> 24);
      var $18=(($17)|(0))==45;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $sign=1;
      var $20=$p;
      var $21=(($20+1)|0);
      $p=$21;
      label = 9; break;
    case 6: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $25=(($24 << 24) >> 24);
      var $26=(($25)|(0))==43;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$p;
      var $29=(($28+1)|0);
      $p=$29;
      label = 8; break;
    case 8: 
      $sign=0;
      label = 9; break;
    case 9: 
      $decPt=-1;
      $mantSize=0;
      label = 10; break;
    case 10: 
      var $33=$p;
      var $34=HEAP8[($33)];
      var $35=(($34 << 24) >> 24);
      $c=$35;
      var $36=$c;
      var $37=_isdigit($36);
      var $38=(($37)|(0))!=0;
      if ($38) { label = 15; break; } else { label = 11; break; }
    case 11: 
      var $40=$c;
      var $41=(($40)|(0))!=46;
      if ($41) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $43=$decPt;
      var $44=(($43)|(0)) >= 0;
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 17; break;
    case 14: 
      var $47=$mantSize;
      $decPt=$47;
      label = 15; break;
    case 15: 
      var $49=$p;
      var $50=(($49+1)|0);
      $p=$50;
      label = 16; break;
    case 16: 
      var $52=$mantSize;
      var $53=((($52)+(1))|0);
      $mantSize=$53;
      label = 10; break;
    case 17: 
      var $55=$p;
      $pExp=$55;
      var $56=$mantSize;
      var $57=$p;
      var $58=(((-$56))|0);
      var $59=(($57+$58)|0);
      $p=$59;
      var $60=$decPt;
      var $61=(($60)|(0)) < 0;
      if ($61) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $63=$mantSize;
      $decPt=$63;
      label = 20; break;
    case 19: 
      var $65=$mantSize;
      var $66=((($65)-(1))|0);
      $mantSize=$66;
      label = 20; break;
    case 20: 
      var $68=$mantSize;
      var $69=(($68)|(0)) > 18;
      if ($69) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $71=$decPt;
      var $72=((($71)-(18))|0);
      $fracExp=$72;
      $mantSize=18;
      label = 23; break;
    case 22: 
      var $74=$decPt;
      var $75=$mantSize;
      var $76=((($74)-($75))|0);
      $fracExp=$76;
      label = 23; break;
    case 23: 
      var $78=$mantSize;
      var $79=(($78)|(0))==0;
      if ($79) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $fraction=0;
      var $81=$2;
      $p=$81;
      label = 67; break;
    case 25: 
      $frac1=0;
      label = 26; break;
    case 26: 
      var $84=$mantSize;
      var $85=(($84)|(0)) > 9;
      if ($85) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $87=$p;
      var $88=HEAP8[($87)];
      var $89=(($88 << 24) >> 24);
      $c=$89;
      var $90=$p;
      var $91=(($90+1)|0);
      $p=$91;
      var $92=$c;
      var $93=(($92)|(0))==46;
      if ($93) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $95=$p;
      var $96=HEAP8[($95)];
      var $97=(($96 << 24) >> 24);
      $c=$97;
      var $98=$p;
      var $99=(($98+1)|0);
      $p=$99;
      label = 29; break;
    case 29: 
      var $101=$frac1;
      var $102=((($101)*(10))&-1);
      var $103=$c;
      var $104=((($103)-(48))|0);
      var $105=((($102)+($104))|0);
      $frac1=$105;
      label = 30; break;
    case 30: 
      var $107=$mantSize;
      var $108=((($107)-(1))|0);
      $mantSize=$108;
      label = 26; break;
    case 31: 
      $frac2=0;
      label = 32; break;
    case 32: 
      var $111=$mantSize;
      var $112=(($111)|(0)) > 0;
      if ($112) { label = 33; break; } else { label = 37; break; }
    case 33: 
      var $114=$p;
      var $115=HEAP8[($114)];
      var $116=(($115 << 24) >> 24);
      $c=$116;
      var $117=$p;
      var $118=(($117+1)|0);
      $p=$118;
      var $119=$c;
      var $120=(($119)|(0))==46;
      if ($120) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $122=$p;
      var $123=HEAP8[($122)];
      var $124=(($123 << 24) >> 24);
      $c=$124;
      var $125=$p;
      var $126=(($125+1)|0);
      $p=$126;
      label = 35; break;
    case 35: 
      var $128=$frac2;
      var $129=((($128)*(10))&-1);
      var $130=$c;
      var $131=((($130)-(48))|0);
      var $132=((($129)+($131))|0);
      $frac2=$132;
      label = 36; break;
    case 36: 
      var $134=$mantSize;
      var $135=((($134)-(1))|0);
      $mantSize=$135;
      label = 32; break;
    case 37: 
      var $137=$frac1;
      var $138=(($137)|(0));
      var $139=($138)*(1000000000);
      var $140=$frac2;
      var $141=(($140)|(0));
      var $142=($139)+($141);
      $fraction=$142;
      label = 38; break;
    case 38: 
      var $144=$pExp;
      $p=$144;
      var $145=$p;
      var $146=HEAP8[($145)];
      var $147=(($146 << 24) >> 24);
      var $148=(($147)|(0))==69;
      if ($148) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $150=$p;
      var $151=HEAP8[($150)];
      var $152=(($151 << 24) >> 24);
      var $153=(($152)|(0))==101;
      if ($153) { label = 40; break; } else { label = 49; break; }
    case 40: 
      var $155=$p;
      var $156=(($155+1)|0);
      $p=$156;
      var $157=$p;
      var $158=HEAP8[($157)];
      var $159=(($158 << 24) >> 24);
      var $160=(($159)|(0))==45;
      if ($160) { label = 41; break; } else { label = 42; break; }
    case 41: 
      $expSign=1;
      var $162=$p;
      var $163=(($162+1)|0);
      $p=$163;
      label = 45; break;
    case 42: 
      var $165=$p;
      var $166=HEAP8[($165)];
      var $167=(($166 << 24) >> 24);
      var $168=(($167)|(0))==43;
      if ($168) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $170=$p;
      var $171=(($170+1)|0);
      $p=$171;
      label = 44; break;
    case 44: 
      $expSign=0;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $175=$p;
      var $176=HEAP8[($175)];
      var $177=(($176 << 24) >> 24);
      var $178=_isdigit($177);
      var $179=(($178)|(0))!=0;
      if ($179) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $181=$exp;
      var $182=((($181)*(10))&-1);
      var $183=$p;
      var $184=HEAP8[($183)];
      var $185=(($184 << 24) >> 24);
      var $186=((($185)-(48))|0);
      var $187=((($182)+($186))|0);
      $exp=$187;
      var $188=$p;
      var $189=(($188+1)|0);
      $p=$189;
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $192=$expSign;
      var $193=(($192)|(0))!=0;
      if ($193) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $195=$fracExp;
      var $196=$exp;
      var $197=((($195)-($196))|0);
      $exp=$197;
      label = 52; break;
    case 51: 
      var $199=$fracExp;
      var $200=$exp;
      var $201=((($199)+($200))|0);
      $exp=$201;
      label = 52; break;
    case 52: 
      var $203=$exp;
      var $204=(($203)|(0)) < 0;
      if ($204) { label = 53; break; } else { label = 54; break; }
    case 53: 
      $expSign=1;
      var $206=$exp;
      var $207=(((-$206))|0);
      $exp=$207;
      label = 55; break;
    case 54: 
      $expSign=0;
      label = 55; break;
    case 55: 
      var $210=$exp;
      var $211=HEAP32[((80032)>>2)];
      var $212=(($210)|(0)) > (($211)|(0));
      if ($212) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $214=HEAP32[((80032)>>2)];
      $exp=$214;
      var $215=___errno_location();
      HEAP32[(($215)>>2)]=34;
      label = 57; break;
    case 57: 
      $dblExp=1;
      $d=((59912)|0);
      label = 58; break;
    case 58: 
      var $218=$exp;
      var $219=(($218)|(0))!=0;
      if ($219) { label = 59; break; } else { label = 63; break; }
    case 59: 
      var $221=$exp;
      var $222=$221 & 1;
      var $223=(($222)|(0))!=0;
      if ($223) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $225=$d;
      var $226=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($225)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($225)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $227=$dblExp;
      var $228=($227)*($226);
      $dblExp=$228;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $231=$exp;
      var $232=$231 >> 1;
      $exp=$232;
      var $233=$d;
      var $234=(($233+8)|0);
      $d=$234;
      label = 58; break;
    case 63: 
      var $236=$expSign;
      var $237=(($236)|(0))!=0;
      if ($237) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $239=$dblExp;
      var $240=$fraction;
      var $241=($240)/($239);
      $fraction=$241;
      label = 66; break;
    case 65: 
      var $243=$dblExp;
      var $244=$fraction;
      var $245=($244)*($243);
      $fraction=$245;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $248=$3;
      var $249=(($248)|(0))!=0;
      if ($249) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $251=$p;
      var $252=$3;
      HEAP32[(($252)>>2)]=$251;
      label = 69; break;
    case 69: 
      var $254=$sign;
      var $255=(($254)|(0))!=0;
      if ($255) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $257=$fraction;
      var $258=(-$257);
      $1=$258;
      label = 72; break;
    case 71: 
      var $260=$fraction;
      $1=$260;
      label = 72; break;
    case 72: 
      var $262=$1;
      return $262;
    default: assert(0, "bad label: " + label);
  }
}
// EMSCRIPTEN_END_FUNCS
// EMSCRIPTEN_END_FUNCS
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module['callMain'](args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
/* /home/josh/Playground/webruby/build/js_api.js */
(function() {
  function WEBRUBY(opts) {
    if (!(this instanceof WEBRUBY)) {
      // Well, this is not perfect, but it can at least cover some cases.
      return new WEBRUBY(opts);
    }
    opts = opts || {};
    // Default print level is errors only
    this.print_level = opts.print_level || 1;
    this.mrb = _mrb_open();
  };
  WEBRUBY.prototype.close = function() {
    _mrb_close(this.mrb);
  };
  WEBRUBY.prototype.run = function() {
    _webruby_internal_run(this.mrb, this.print_level);
  };
  WEBRUBY.prototype.run_bytecode = function(bc) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(bc.length);
    var ret;
    writeArrayToMemory(bc, addr);
    ret = _webruby_internal_run_bytecode(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  WEBRUBY.prototype.run_source = function(src) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(src.length);
    var ret;
    writeStringToMemory(src, addr);
    ret = _webruby_internal_run_source(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
  if (typeof window === 'object') {
    window['WEBRUBY'] = WEBRUBY;
  } else {
    global['WEBRUBY'] = WEBRUBY;
  }
}) ();
/* build/mrbgems/webruby-multiline-parse/js/append/multiline.js */
(function(WEBRUBY) {
  WEBRUBY.prototype.multiline_run_source = function(src) {
    var stack = Runtime.stackSave();
    var addr = Runtime.stackAlloc(src.length);
    var ret;
    writeStringToMemory(src, addr);
    ret = _multiline_parse_run_source(this.mrb, addr, this.print_level);
    Runtime.stackRestore(stack);
    return ret;
  };
}) (WEBRUBY);
